console.log('echarts-plain.js')
define(function(b, a, c) {
    (function(h) {
        var g, k;
        (function() {
            function p(z, B) {
                if (!B) {
                    return z
                }
                if (0 === z.indexOf(".")) {
                    var w = B.split("/")
                      , y = z.split("/")
                      , A = w.length - 1
                      , v = y.length
                      , u = 0
                      , C = 0;
                    z: for (var x = 0; v > x; x++) {
                        switch (y[x]) {
                        case "..":
                            if (!(A > u)) {
                                break z
                            }
                            u++,
                            C++;
                            break;
                        case ".":
                            C++;
                            break;
                        default:
                            break z
                        }
                    }
                    return w.length = A - u,
                    y = y.slice(C),
                    w.concat(y).join("/")
                }
                return z
            }
            function m(o) {
                function r(u, t) {
                    if ("string" == typeof u) {
                        var i = e[u];
                        return i || (i = q(p(u, o)),
                        e[u] = i),
                        i
                    }
                    u instanceof Array && (t = t || function() {}
                    ,
                    t.apply(this, l(u, t, o)))
                }
                var e = {};
                return r
            }
            function l(e, v, x) {
                for (var y = [], u = n[x], w = 0, r = Math.min(e.length, v.length); r > w; w++) {
                    var o, t = p(e[w], x);
                    switch (t) {
                    case "require":
                        o = u && u.require || g;
                        break;
                    case "exports":
                        o = u.exports;
                        break;
                    case "module":
                        o = u;
                        break;
                    default:
                        o = q(t)
                    }
                    y.push(o)
                }
                return y
            }
            function q(s) {
                var r = n[s];
                if (!r) {
                    throw Error("No " + s)
                }
                if (!r.defined) {
                    var u = r.factory
                      , o = u.apply(this, l(r.deps || [], u, s));
                    o !== void 0 && (r.exports = o),
                    r.defined = 1
                }
                return r.exports
            }
            var n = {};
            k = function(o, i, r) {
                n[o] = {
                    id: o,
                    deps: i,
                    factory: r,
                    defined: 0,
                    exports: {},
                    require: m(o)
                }
            }
            ,
            g = m("")
        }
        )(),
        k("echarts", ["echarts/echarts"], function(i) {
            return i
        }
        ),
        k("echarts/echarts", ["require", "./config", "zrender/tool/util", "zrender/tool/event", "zrender/tool/env", "zrender", "zrender/config", "./chart/island", "./component/toolbox", "./component", "./component/title", "./component/tooltip", "./component/legend", "./util/ecData", "./chart", "zrender/tool/color", "./component/timeline", "zrender/shape/Image", "zrender/loadingEffect/Bar", "zrender/loadingEffect/Bubble", "zrender/loadingEffect/DynamicLine", "zrender/loadingEffect/Ring", "zrender/loadingEffect/Spin", "zrender/loadingEffect/Whirling", "./theme/macarons", "./theme/infographic"], function(B) {
            function E() {
                p.Dispatcher.call(this)
            }
            function u(i) {
                i.innerHTML = "",
                this._themeConfig = {},
                this.dom = i,
                this._connected = !1,
                this._status = {
                    dragIn: !1,
                    dragOut: !1,
                    needRefresh: !1
                },
                this._curEventType = !1,
                this._chartList = [],
                this._messageCenter = new E,
                this._messageCenterOutSide = new E,
                this.resize = this.resize(),
                this._init()
            }
            function z(J, G, L, m, l) {
                for (var K = J._chartList, I = K.length; I--; ) {
                    var H = K[I];
                    "function" == typeof H[G] && H[G](L, m, l)
                }
            }
            var D = B("./config")
              , q = B("zrender/tool/util")
              , p = B("zrender/tool/event")
              , F = {}
              , y = B("zrender/tool/env").canvasSupported
              , A = new Date - 0
              , w = {}
              , v = "_echarts_instance_";
            F.version = "2.2.1",
            F.dependencies = {
                zrender: "2.0.8"
            },
            F.init = function(m, l) {
                var e = B("zrender");
                e.version.replace(".", "") - 0 < F.dependencies.zrender.replace(".", "") - 0 && console.error("ZRender " + e.version + " is too old for ECharts " + F.version + ". Current version need ZRender " + F.dependencies.zrender + "+"),
                m = m instanceof Array ? m[0] : m;
                var n = m.getAttribute(v);
                return n || (n = A++,
                m.setAttribute(v, n)),
                w[n] && w[n].dispose(),
                w[n] = new u(m),
                w[n].id = n,
                w[n].canvasSupported = y,
                w[n].setTheme(l),
                w[n]
            }
            ,
            F.getInstanceById = function(i) {
                return w[i]
            }
            ,
            q.merge(E.prototype, p.Dispatcher.prototype, !0);
            var x = B("zrender/config").EVENT
              , C = ["CLICK", "DBLCLICK", "MOUSEOVER", "MOUSEOUT", "DRAGSTART", "DRAGEND", "DRAGENTER", "DRAGOVER", "DRAGLEAVE", "DROP"];
            return u.prototype = {
                _init: function() {
                    var O = this
                      , I = B("zrender").init(this.dom);
                    this._zr = I,
                    this._messageCenter.dispatch = function(o, r, m, l) {
                        m = m || {},
                        m.type = o,
                        m.event = r,
                        O._messageCenter.dispatchWithContext(o, m, l),
                        "HOVER" != o && "MOUSEOUT" != o ? setTimeout(function() {
                            O._messageCenterOutSide.dispatchWithContext(o, m, l)
                        }
                        , 50) : O._messageCenterOutSide.dispatchWithContext(o, m, l)
                    }
                    ,
                    this._onevent = function(i) {
                        return O.__onevent(i)
                    }
                    ;
                    for (var M in D.EVENT) {
                        "CLICK" != M && "DBLCLICK" != M && "HOVER" != M && "MOUSEOUT" != M && "MAP_ROAM" != M && this._messageCenter.bind(D.EVENT[M], this._onevent, this)
                    }
                    var H = {};
                    this._onzrevent = function(i) {
                        return O[H[i.type]](i)
                    }
                    ;
                    for (var e = 0, P = C.length; P > e; e++) {
                        var L = C[e]
                          , N = x[L];
                        H[N] = "_on" + L.toLowerCase(),
                        I.on(N, this._onzrevent)
                    }
                    this.chart = {},
                    this.component = {};
                    var K = B("./chart/island");
                    this._island = new K(this._themeConfig,this._messageCenter,I,{},this),
                    this.chart.island = this._island;
                    var J = B("./component/toolbox");
                    this._toolbox = new J(this._themeConfig,this._messageCenter,I,{},this),
                    this.component.toolbox = this._toolbox;
                    var G = B("./component");
                    G.define("title", B("./component/title")),
                    G.define("tooltip", B("./component/tooltip")),
                    G.define("legend", B("./component/legend")),
                    (0 === I.getWidth() || 0 === I.getHeight()) && console.error("Dom’s width & height should be ready before init.")
                },
                __onevent: function(G) {
                    G.__echartsId = G.__echartsId || this.id;
                    var m = G.__echartsId === this.id;
                    switch (this._curEventType || (this._curEventType = G.type),
                    G.type) {
                    case D.EVENT.LEGEND_SELECTED:
                        this._onlegendSelected(G);
                        break;
                    case D.EVENT.DATA_ZOOM:
                        if (!m) {
                            var I = this.component.dataZoom;
                            I && (I.silence(!0),
                            I.absoluteZoom(G.zoom),
                            I.silence(!1))
                        }
                        this._ondataZoom(G);
                        break;
                    case D.EVENT.DATA_RANGE:
                        m && this._ondataRange(G);
                        break;
                    case D.EVENT.MAGIC_TYPE_CHANGED:
                        if (!m) {
                            var l = this.component.toolbox;
                            l && (l.silence(!0),
                            l.setMagicType(G.magicType),
                            l.silence(!1))
                        }
                        this._onmagicTypeChanged(G);
                        break;
                    case D.EVENT.DATA_VIEW_CHANGED:
                        m && this._ondataViewChanged(G);
                        break;
                    case D.EVENT.TOOLTIP_HOVER:
                        m && this._tooltipHover(G);
                        break;
                    case D.EVENT.RESTORE:
                        this._onrestore();
                        break;
                    case D.EVENT.REFRESH:
                        m && this._onrefresh(G);
                        break;
                    case D.EVENT.TOOLTIP_IN_GRID:
                    case D.EVENT.TOOLTIP_OUT_GRID:
                        if (m) {
                            if (this._connected) {
                                var H = this.component.grid;
                                H && (G.x = (G.event.zrenderX - H.getX()) / H.getWidth(),
                                G.y = (G.event.zrenderY - H.getY()) / H.getHeight())
                            }
                        } else {
                            var H = this.component.grid;
                            H && this._zr.trigger("mousemove", {
                                connectTrigger: !0,
                                zrenderX: H.getX() + G.x * H.getWidth(),
                                zrenderY: H.getY() + G.y * H.getHeight()
                            })
                        }
                    }
                    if (this._connected && m && this._curEventType === G.type) {
                        for (var s in this._connected) {
                            this._connected[s].connectedEventHandler(G)
                        }
                        this._curEventType = null 
                    }
                    (!m || !this._connected && m) && (this._curEventType = null )
                },
                _onclick: function(l) {
                    if (z(this, "onclick", l),
                    l.target) {
                        var i = this._eventPackage(l.target);
                        i && null  != i.seriesIndex && this._messageCenter.dispatch(D.EVENT.CLICK, l.event, i, this)
                    }
                },
                _ondblclick: function(l) {
                    if (z(this, "ondblclick", l),
                    l.target) {
                        var i = this._eventPackage(l.target);
                        i && null  != i.seriesIndex && this._messageCenter.dispatch(D.EVENT.DBLCLICK, l.event, i, this)
                    }
                },
                _onmouseover: function(l) {
                    if (l.target) {
                        var i = this._eventPackage(l.target);
                        i && null  != i.seriesIndex && this._messageCenter.dispatch(D.EVENT.HOVER, l.event, i, this)
                    }
                },
                _onmouseout: function(l) {
                    if (l.target) {
                        var i = this._eventPackage(l.target);
                        i && null  != i.seriesIndex && this._messageCenter.dispatch(D.EVENT.MOUSEOUT, l.event, i, this)
                    }
                },
                _ondragstart: function(i) {
                    this._status = {
                        dragIn: !1,
                        dragOut: !1,
                        needRefresh: !1
                    },
                    z(this, "ondragstart", i)
                },
                _ondragenter: function(i) {
                    z(this, "ondragenter", i)
                },
                _ondragover: function(i) {
                    z(this, "ondragover", i)
                },
                _ondragleave: function(i) {
                    z(this, "ondragleave", i)
                },
                _ondrop: function(i) {
                    z(this, "ondrop", i, this._status),
                    this._island.ondrop(i, this._status)
                },
                _ondragend: function(l) {
                    if (z(this, "ondragend", l, this._status),
                    this._timeline && this._timeline.ondragend(l, this._status),
                    this._island.ondragend(l, this._status),
                    this._status.needRefresh) {
                        this._syncBackupData(this._option);
                        var i = this._messageCenter;
                        i.dispatch(D.EVENT.DATA_CHANGED, l.event, this._eventPackage(l.target), this),
                        i.dispatch(D.EVENT.REFRESH, null , null , this)
                    }
                },
                _onlegendSelected: function(i) {
                    this._status.needRefresh = !1,
                    z(this, "onlegendSelected", i, this._status),
                    this._status.needRefresh && this._messageCenter.dispatch(D.EVENT.REFRESH, null , null , this)
                },
                _ondataZoom: function(i) {
                    this._status.needRefresh = !1,
                    z(this, "ondataZoom", i, this._status),
                    this._status.needRefresh && this._messageCenter.dispatch(D.EVENT.REFRESH, null , null , this)
                },
                _ondataRange: function(i) {
                    this._clearEffect(),
                    this._status.needRefresh = !1,
                    z(this, "ondataRange", i, this._status),
                    this._status.needRefresh && this._zr.refreshNextFrame()
                },
                _onmagicTypeChanged: function() {
                    this._clearEffect(),
                    this._render(this._toolbox.getMagicOption())
                },
                _ondataViewChanged: function(i) {
                    this._syncBackupData(i.option),
                    this._messageCenter.dispatch(D.EVENT.DATA_CHANGED, null , i, this),
                    this._messageCenter.dispatch(D.EVENT.REFRESH, null , null , this)
                },
                _tooltipHover: function(l) {
                    var i = [];
                    z(this, "ontooltipHover", l, i)
                },
                _onrestore: function() {
                    this.restore()
                },
                _onrefresh: function(i) {
                    this._refreshInside = !0,
                    this.refresh(i),
                    this._refreshInside = !1
                },
                _syncBackupData: function(i) {
                    this.component.dataZoom && this.component.dataZoom.syncBackupData(i)
                },
                _eventPackage: function(m) {
                    if (m) {
                        var o = B("./util/ecData")
                          , l = o.get(m, "seriesIndex")
                          , e = o.get(m, "dataIndex");
                        return e = -1 != l && this.component.dataZoom ? this.component.dataZoom.getRealDataIndex(l, e) : e,
                        {
                            seriesIndex: l,
                            seriesName: (o.get(m, "series") || {}).name,
                            dataIndex: e,
                            data: o.get(m, "data"),
                            name: o.get(m, "name"),
                            value: o.get(m, "value"),
                            special: o.get(m, "special")
                        }
                    }
                },
                _noDataCheck: function(r) {
                    for (var m = r.series, G = 0, l = m.length; l > G; G++) {
                        if (m[G].type == D.CHART_TYPE_MAP || m[G].data && m[G].data.length > 0 || m[G].markPoint && m[G].markPoint.data && m[G].markPoint.data.length > 0 || m[G].markLine && m[G].markLine.data && m[G].markLine.data.length > 0 || m[G].nodes && m[G].nodes.length > 0 || m[G].links && m[G].links.length > 0 || m[G].matrix && m[G].matrix.length > 0 || m[G].eventList && m[G].eventList.length > 0) {
                            return !1
                        }
                    }
                    var s = this._option && this._option.noDataLoadingOption || this._themeConfig.noDataLoadingOption || D.noDataLoadingOption || {
                        text: this._option && this._option.noDataText || this._themeConfig.noDataText || D.noDataText,
                        effect: this._option && this._option.noDataEffect || this._themeConfig.noDataEffect || D.noDataEffect
                    };
                    return this.clear(),
                    this.showLoading(s),
                    !0
                },
                _render: function(T) {
                    if (this._mergeGlobalConifg(T),
                    !this._noDataCheck(T)) {
                        var H = T.backgroundColor;
                        if (H) {
                            if (y || -1 == H.indexOf("rgba")) {
                                this.dom.style.backgroundColor = H
                            } else {
                                var L = H.split(",");
                                this.dom.style.filter = "alpha(opacity=" + 100 * L[3].substring(0, L[3].lastIndexOf(")")) + ")",
                                L.length = 3,
                                L[0] = L[0].replace("a", ""),
                                this.dom.style.backgroundColor = L.join(",") + ")"
                            }
                        }
                        this._zr.clearAnimation(),
                        this._chartList = [];
                        var G = B("./chart")
                          , e = B("./component");
                        (T.xAxis || T.yAxis) && (T.grid = T.grid || {},
                        T.dataZoom = T.dataZoom || {});
                        for (var W, M, J, I = ["title", "legend", "tooltip", "dataRange", "roamController", "grid", "dataZoom", "xAxis", "yAxis", "polar"], K = 0, O = I.length; O > K; K++) {
                            M = I[K],
                            J = this.component[M],
                            T[M] ? (J ? J.refresh && J.refresh(T) : (W = e.get(/^[xy]Axis$/.test(M) ? "axis" : M),
                            J = new W(this._themeConfig,this._messageCenter,this._zr,T,this,M),
                            this.component[M] = J),
                            this._chartList.push(J)) : J && (J.dispose(),
                            this.component[M] = null ,
                            delete this.component[M])
                        }
                        for (var l, P, S, R = {}, K = 0, O = T.series.length; O > K; K++) {
                            P = T.series[K].type,
                            P ? R[P] || (R[P] = !0,
                            l = G.get(P),
                            l ? (this.chart[P] ? (S = this.chart[P],
                            S.refresh(T)) : S = new l(this._themeConfig,this._messageCenter,this._zr,T,this),
                            this._chartList.push(S),
                            this.chart[P] = S) : console.error(P + " has not been required.")) : console.error("series[" + K + "] chart type has not been defined.")
                        }
                        for (P in this.chart) {
                            P == D.CHART_TYPE_ISLAND || R[P] || (this.chart[P].dispose(),
                            this.chart[P] = null ,
                            delete this.chart[P])
                        }
                        this.component.grid && this.component.grid.refixAxisShape(this.component),
                        this._island.refresh(T),
                        this._toolbox.refresh(T),
                        T.animation && !T.renderAsImage ? this._zr.refresh() : this._zr.render();
                        var N = "IMG" + this.id
                          , Q = document.getElementById(N);
                        T.renderAsImage && y ? (Q ? Q.src = this.getDataURL(T.renderAsImage) : (Q = this.getImage(T.renderAsImage),
                        Q.id = N,
                        Q.style.position = "absolute",
                        Q.style.left = 0,
                        Q.style.top = 0,
                        this.dom.firstChild.appendChild(Q)),
                        this.un(),
                        this._zr.un(),
                        this._disposeChartList(),
                        this._zr.clear()) : Q && Q.parentNode.removeChild(Q),
                        Q = null ,
                        this._option = T
                    }
                },
                restore: function() {
                    this._clearEffect(),
                    this._option = q.clone(this._optionRestore),
                    this._disposeChartList(),
                    this._island.clear(),
                    this._toolbox.reset(this._option, !0),
                    this._render(this._option)
                },
                refresh: function(o) {
                    this._clearEffect(),
                    o = o || {};
                    var m = o.option;
                    !this._refreshInside && m && (m = this.getOption(),
                    q.merge(m, o.option, !0),
                    q.merge(this._optionRestore, o.option, !0),
                    this._toolbox.reset(m)),
                    this._island.refresh(m),
                    this._toolbox.refresh(m),
                    this._zr.clearAnimation();
                    for (var r = 0, l = this._chartList.length; l > r; r++) {
                        this._chartList[r].refresh && this._chartList[r].refresh(m)
                    }
                    this.component.grid && this.component.grid.refixAxisShape(this.component),
                    this._zr.refresh()
                },
                _disposeChartList: function() {
                    this._clearEffect(),
                    this._zr.clearAnimation();
                    for (var l = this._chartList.length; l--; ) {
                        var i = this._chartList[l];
                        if (i) {
                            var m = i.type;
                            this.chart[m] && delete this.chart[m],
                            this.component[m] && delete this.component[m],
                            i.dispose && i.dispose()
                        }
                    }
                    this._chartList = []
                },
                _mergeGlobalConifg: function(l) {
                    for (var G = ["backgroundColor", "calculable", "calculableColor", "calculableHolderColor", "nameConnector", "valueConnector", "animation", "animationThreshold", "animationDuration", "animationDurationUpdate", "animationEasing", "addDataAnimation", "symbolList", "DRAG_ENABLE_TIME"], e = G.length; e--; ) {
                        var s = G[e];
                        null  == l[s] && (l[s] = null  != this._themeConfig[s] ? this._themeConfig[s] : D[s])
                    }
                    var m = l.color;
                    m && m.length || (m = this._themeConfig.color || D.color),
                    this._zr.getColor = function(i) {
                        var o = B("zrender/tool/color");
                        return o.getColor(i, m)
                    }
                    ,
                    y || (l.animation = !1,
                    l.addDataAnimation = !1)
                },
                setOption: function(l, i) {
                    return l.timeline ? this._setTimelineOption(l) : this._setOption(l, i)
                },
                _setOption: function(l, i) {
                    return this._option = !i && this._option ? q.merge(this.getOption(), q.clone(l), !0) : q.clone(l),
                    this._optionRestore = q.clone(this._option),
                    this._option.series && 0 !== this._option.series.length ? (this.component.dataZoom && (this._option.dataZoom || this._option.toolbox && this._option.toolbox.feature && this._option.toolbox.feature.dataZoom && this._option.toolbox.feature.dataZoom.show) && this.component.dataZoom.syncOption(this._option),
                    this._toolbox.reset(this._option),
                    this._render(this._option),
                    this) : (this._zr.clear(),
                    void 0)
                },
                getOption: function() {
                    function l(r) {
                        var o = m._optionRestore[r];
                        if (o) {
                            if (o instanceof Array) {
                                for (var n = o.length; n--; ) {
                                    i[r][n].data = q.clone(o[n].data)
                                }
                            } else {
                                i[r].data = q.clone(o.data)
                            }
                        }
                    }
                    var i = q.clone(this._option)
                      , m = this;
                    return l("xAxis"),
                    l("yAxis"),
                    l("series"),
                    i
                },
                setSeries: function(l, i) {
                    return i ? (this._option.series = l,
                    this.setOption(this._option, i)) : this.setOption({
                        series: l
                    }),
                    this
                },
                getSeries: function() {
                    return this.getOption().series
                },
                _setTimelineOption: function(l) {
                    this._timeline && this._timeline.dispose();
                    var m = B("./component/timeline")
                      , e = new m(this._themeConfig,this._messageCenter,this._zr,l,this);
                    return this._timeline = e,
                    this.component.timeline = this._timeline,
                    this
                },
                addData: function(ah, R, Z, ad, T) {
                    function S() {
                        if (P._zr) {
                            P._zr.clearAnimation();
                            for (var l = 0, i = G.length; i > l; l++) {
                                G[l].motionlessOnce = ae.addDataAnimation && G[l].addDataAnimation
                            }
                            P._messageCenter.dispatch(D.EVENT.REFRESH, null , {
                                option: ae
                            }, P)
                        }
                    }
                    for (var ab = ah instanceof Array ? ah : [[ah, R, Z, ad, T]], ae = this.getOption(), aa = this._optionRestore, H = 0, I = ab.length; I > H; H++) {
                        ah = ab[H][0],
                        R = ab[H][1],
                        Z = ab[H][2],
                        ad = ab[H][3],
                        T = ab[H][4];
                        var ai = aa.series[ah]
                          , Y = Z ? "unshift" : "push"
                          , aj = Z ? "pop" : "shift";
                        if (ai) {
                            var Q = ai.data
                              , N = ae.series[ah].data;
                            if (Q[Y](R),
                            N[Y](R),
                            ad || (Q[aj](),
                            R = N[aj]()),
                            null  != T) {
                                var af, ak;
                                if (ai.type === D.CHART_TYPE_PIE && (af = aa.legend) && (ak = af.data)) {
                                    var ag = ae.legend.data;
                                    if (ak[Y](T),
                                    ag[Y](T),
                                    !ad) {
                                        var ac = q.indexOf(ak, R.name);
                                        -1 != ac && ak.splice(ac, 1),
                                        ac = q.indexOf(ag, R.name),
                                        -1 != ac && ag.splice(ac, 1)
                                    }
                                } else {
                                    if (null  != aa.xAxis && null  != aa.yAxis) {
                                        var O, al, J = ai.xAxisIndex || 0;
                                        (null  == aa.xAxis[J].type || "category" === aa.xAxis[J].type) && (O = aa.xAxis[J].data,
                                        al = ae.xAxis[J].data,
                                        O[Y](T),
                                        al[Y](T),
                                        ad || (O[aj](),
                                        al[aj]())),
                                        J = ai.yAxisIndex || 0,
                                        "category" === aa.yAxis[J].type && (O = aa.yAxis[J].data,
                                        al = ae.yAxis[J].data,
                                        O[Y](T),
                                        al[Y](T),
                                        ad || (O[aj](),
                                        al[aj]()))
                                    }
                                }
                            }
                            this._option.series[ah].data = ae.series[ah].data
                        }
                    }
                    this._zr.clearAnimation();
                    for (var G = this._chartList, o = 0, M = function() {
                        o--,
                        0 === o && S()
                    }
                    , H = 0, I = G.length; I > H; H++) {
                        ae.addDataAnimation && G[H].addDataAnimation && (o++,
                        G[H].addDataAnimation(ab, M))
                    }
                    this.component.dataZoom && this.component.dataZoom.syncOption(ae),
                    this._option = ae;
                    var P = this;
                    return ae.addDataAnimation || setTimeout(S, 0),
                    this
                },
                addMarkPoint: function(l, i) {
                    return this._addMark(l, i, "markPoint")
                },
                addMarkLine: function(l, i) {
                    return this._addMark(l, i, "markLine")
                },
                _addMark: function(M, O, G) {
                    var K, N = this._option.series;
                    if (N && (K = N[M])) {
                        var o = this._optionRestore.series
                          , P = o[M]
                          , J = K[G]
                          , L = P[G];
                        J = K[G] = J || {
                            data: []
                        },
                        L = P[G] = L || {
                            data: []
                        };
                        for (var I in O) {
                            "data" === I ? (J.data = J.data.concat(O.data),
                            L.data = L.data.concat(O.data)) : "object" != typeof O[I] || null  == J[I] ? J[I] = L[I] = O[I] : (q.merge(J[I], O[I], !0),
                            q.merge(L[I], O[I], !0))
                        }
                        var H = this.chart[K.type];
                        H && H.addMark(M, O, G)
                    }
                    return this
                },
                delMarkPoint: function(l, i) {
                    return this._delMark(l, i, "markPoint")
                },
                delMarkLine: function(l, i) {
                    return this._delMark(l, i, "markLine")
                },
                _delMark: function(O, Q, I) {
                    var M, P, H, G = this._option.series;
                    if (!(G && (M = G[O]) && (P = M[I]) && (H = P.data))) {
                        return this
                    }
                    Q = Q.split(" > ");
                    for (var R = -1, L = 0, N = H.length; N > L; L++) {
                        var K = H[L];
                        if (K instanceof Array) {
                            if (K[0].name === Q[0] && K[1].name === Q[1]) {
                                R = L;
                                break
                            }
                        } else {
                            if (K.name === Q[0]) {
                                R = L;
                                break
                            }
                        }
                    }
                    if (R > -1) {
                        H.splice(R, 1),
                        this._optionRestore.series[O][I].data.splice(R, 1);
                        var J = this.chart[M.type];
                        J && J.delMark(O, Q.join(" > "), I)
                    }
                    return this
                },
                getDom: function() {
                    return this.dom
                },
                getZrender: function() {
                    return this._zr
                },
                getDataURL: function(r) {
                    if (!y) {
                        return ""
                    }
                    if (0 === this._chartList.length) {
                        var o = "IMG" + this.id
                          , s = document.getElementById(o);
                        if (s) {
                            return s.src
                        }
                    }
                    var m = this.component.tooltip;
                    switch (m && m.hideTip(),
                    r) {
                    case "jpeg":
                        break;
                    default:
                        r = "png"
                    }
                    var l = this._option.backgroundColor;
                    return l && "rgba(0,0,0,0)" === l.replace(" ", "") && (l = "#fff"),
                    this._zr.toDataURL("image/" + r, l)
                },
                getImage: function(l) {
                    var i = this._optionRestore.title
                      , m = document.createElement("img");
                    return m.src = this.getDataURL(l),
                    m.title = i && i.text || "ECharts",
                    m
                },
                getConnectedDataURL: function(Q) {
                    if (!this.isConnected()) {
                        return this.getDataURL(Q)
                    }
                    var H = this.dom
                      , M = {
                        self: {
                            img: this.getDataURL(Q),
                            left: H.offsetLeft,
                            top: H.offsetTop,
                            right: H.offsetLeft + H.offsetWidth,
                            bottom: H.offsetTop + H.offsetHeight
                        }
                    }
                      , P = M.self.left
                      , G = M.self.top
                      , e = M.self.right
                      , R = M.self.bottom;
                    for (var L in this._connected) {
                        H = this._connected[L].getDom(),
                        M[L] = {
                            img: this._connected[L].getDataURL(Q),
                            left: H.offsetLeft,
                            top: H.offsetTop,
                            right: H.offsetLeft + H.offsetWidth,
                            bottom: H.offsetTop + H.offsetHeight
                        },
                        P = Math.min(P, M[L].left),
                        G = Math.min(G, M[L].top),
                        e = Math.max(e, M[L].right),
                        R = Math.max(R, M[L].bottom)
                    }
                    var N = document.createElement("div");
                    N.style.position = "absolute",
                    N.style.left = "-4000px",
                    N.style.width = e - P + "px",
                    N.style.height = R - G + "px",
                    document.body.appendChild(N);
                    var J = B("zrender").init(N)
                      , I = B("zrender/shape/Image");
                    for (var L in M) {
                        J.addShape(new I({
                            style: {
                                x: M[L].left - P,
                                y: M[L].top - G,
                                image: M[L].img
                            }
                        }))
                    }
                    J.render();
                    var K = this._option.backgroundColor;
                    K && "rgba(0,0,0,0)" === K.replace(/ /g, "") && (K = "#fff");
                    var O = J.toDataURL("image/png", K);
                    return setTimeout(function() {
                        J.dispose(),
                        N.parentNode.removeChild(N),
                        N = null 
                    }
                    , 100),
                    O
                },
                getConnectedImage: function(l) {
                    var i = this._optionRestore.title
                      , m = document.createElement("img");
                    return m.src = this.getConnectedDataURL(l),
                    m.title = i && i.text || "ECharts",
                    m
                },
                on: function(l, i) {
                    return this._messageCenterOutSide.bind(l, i, this),
                    this
                },
                un: function(l, i) {
                    return this._messageCenterOutSide.unbind(l, i),
                    this
                },
                connect: function(l) {
                    if (!l) {
                        return this
                    }
                    if (this._connected || (this._connected = {}),
                    l instanceof Array) {
                        for (var i = 0, m = l.length; m > i; i++) {
                            this._connected[l[i].id] = l[i]
                        }
                    } else {
                        this._connected[l.id] = l
                    }
                    return this
                },
                disConnect: function(o) {
                    if (!o || !this._connected) {
                        return this
                    }
                    if (o instanceof Array) {
                        for (var m = 0, r = o.length; r > m; m++) {
                            delete this._connected[o[m].id]
                        }
                    } else {
                        delete this._connected[o.id]
                    }
                    for (var l in this._connected) {
                        return this
                    }
                    return this._connected = !1,
                    this
                },
                connectedEventHandler: function(i) {
                    i.__echartsId != this.id && this._onevent(i)
                },
                isConnected: function() {
                    return !!this._connected
                },
                showLoading: function(l) {
                    var G = {
                        bar: B("zrender/loadingEffect/Bar"),
                        bubble: B("zrender/loadingEffect/Bubble"),
                        dynamicLine: B("zrender/loadingEffect/DynamicLine"),
                        ring: B("zrender/loadingEffect/Ring"),
                        spin: B("zrender/loadingEffect/Spin"),
                        whirling: B("zrender/loadingEffect/Whirling")
                    };
                    this._toolbox.hideDataView(),
                    l = l || {};
                    var e = l.textStyle || {};
                    l.textStyle = e;
                    var o = q.merge(q.merge(q.clone(e), this._themeConfig.textStyle), D.textStyle);
                    e.textFont = o.fontStyle + " " + o.fontWeight + " " + o.fontSize + "px " + o.fontFamily,
                    e.text = l.text || this._option && this._option.loadingText || this._themeConfig.loadingText || D.loadingText,
                    null  != l.x && (e.x = l.x),
                    null  != l.y && (e.y = l.y),
                    l.effectOption = l.effectOption || {},
                    l.effectOption.textStyle = e;
                    var m = l.effect;
                    return ("string" == typeof m || null  == m) && (m = G[l.effect || this._option && this._option.loadingEffect || this._themeConfig.loadingEffect || D.loadingEffect] || G.spin),
                    this._zr.showLoading(new m(l.effectOption)),
                    this
                },
                hideLoading: function() {
                    return this._zr.hideLoading(),
                    this
                },
                setTheme: function(e) {
                    if (e) {
                        if ("string" == typeof e) {
                            switch (e) {
                            case "macarons":
                                e = B("./theme/macarons");
                                break;
                            case "infographic":
                                e = B("./theme/infographic");
                                break;
                            default:
                                e = {}
                            }
                        } else {
                            e = e || {}
                        }
                        this._themeConfig = e
                    }
                    if (!y) {
                        var i = this._themeConfig.textStyle;
                        i && i.fontFamily && i.fontFamily2 && (i.fontFamily = i.fontFamily2),
                        i = D.textStyle,
                        i.fontFamily = i.fontFamily2
                    }
                    this._timeline && this._timeline.setTheme(!0),
                    this._optionRestore && this.restore()
                },
                resize: function() {
                    var i = this;
                    return function() {
                        if (i._clearEffect(),
                        i._zr.resize(),
                        i._option && i._option.renderAsImage && y) {
                            return i._render(i._option),
                            i
                        }
                        i._zr.clearAnimation(),
                        i._island.resize(),
                        i._toolbox.resize(),
                        i._timeline && i._timeline.resize();
                        for (var e = 0, l = i._chartList.length; l > e; e++) {
                            i._chartList[e].resize && i._chartList[e].resize()
                        }
                        return i.component.grid && i.component.grid.refixAxisShape(i.component),
                        i._zr.refresh(),
                        i._messageCenter.dispatch(D.EVENT.RESIZE, null , null , i),
                        i
                    }
                },
                _clearEffect: function() {
                    this._zr.modLayer(D.EFFECT_ZLEVEL, {
                        motionBlur: !1
                    }),
                    this._zr.painter.clearLayer(D.EFFECT_ZLEVEL)
                },
                clear: function() {
                    return this._disposeChartList(),
                    this._zr.clear(),
                    this._option = {},
                    this._optionRestore = {},
                    this.dom.style.backgroundColor = null ,
                    this
                },
                dispose: function() {
                    var i = this.dom.getAttribute(v);
                    i && delete w[i],
                    this._island.dispose(),
                    this._toolbox.dispose(),
                    this._timeline && this._timeline.dispose(),
                    this._messageCenter.unbind(),
                    this.clear(),
                    this._zr.dispose(),
                    this._zr = null 
                }
            },
            F
        }
        ),
        k("echarts/config", [], function() {
            var i = {
                CHART_TYPE_LINE: "line",
                CHART_TYPE_BAR: "bar",
                CHART_TYPE_SCATTER: "scatter",
                CHART_TYPE_PIE: "pie",
                CHART_TYPE_RADAR: "radar",
                CHART_TYPE_MAP: "map",
                CHART_TYPE_K: "k",
                CHART_TYPE_ISLAND: "island",
                CHART_TYPE_FORCE: "force",
                CHART_TYPE_CHORD: "chord",
                CHART_TYPE_GAUGE: "gauge",
                CHART_TYPE_FUNNEL: "funnel",
                CHART_TYPE_EVENTRIVER: "eventRiver",
                COMPONENT_TYPE_TITLE: "title",
                COMPONENT_TYPE_LEGEND: "legend",
                COMPONENT_TYPE_DATARANGE: "dataRange",
                COMPONENT_TYPE_DATAVIEW: "dataView",
                COMPONENT_TYPE_DATAZOOM: "dataZoom",
                COMPONENT_TYPE_TOOLBOX: "toolbox",
                COMPONENT_TYPE_TOOLTIP: "tooltip",
                COMPONENT_TYPE_GRID: "grid",
                COMPONENT_TYPE_AXIS: "axis",
                COMPONENT_TYPE_POLAR: "polar",
                COMPONENT_TYPE_X_AXIS: "xAxis",
                COMPONENT_TYPE_Y_AXIS: "yAxis",
                COMPONENT_TYPE_AXIS_CATEGORY: "categoryAxis",
                COMPONENT_TYPE_AXIS_VALUE: "valueAxis",
                COMPONENT_TYPE_TIMELINE: "timeline",
                COMPONENT_TYPE_ROAMCONTROLLER: "roamController",
                backgroundColor: "rgba(0,0,0,0)",
                color: ["#ff7f50", "#87cefa", "#da70d6", "#32cd32", "#6495ed", "#ff69b4", "#ba55d3", "#cd5c5c", "#ffa500", "#40e0d0", "#1e90ff", "#ff6347", "#7b68ee", "#00fa9a", "#ffd700", "#6699FF", "#ff6666", "#3cb371", "#b8860b", "#30e0e0"],
                markPoint: {
                    clickable: !0,
                    symbol: "pin",
                    symbolSize: 10,
                    large: !1,
                    effect: {
                        show: !1,
                        loop: !0,
                        period: 15,
                        type: "scale",
                        scaleSize: 2,
                        bounceDistance: 10
                    },
                    itemStyle: {
                        normal: {
                            borderWidth: 2,
                            label: {
                                show: !0,
                                position: "inside"
                            }
                        },
                        emphasis: {
                            label: {
                                show: !0
                            }
                        }
                    }
                },
                markLine: {
                    clickable: !0,
                    symbol: ["circle", "arrow"],
                    symbolSize: [2, 4],
                    smoothness: 0.2,
                    precision: 2,
                    effect: {
                        show: !1,
                        loop: !0,
                        period: 15,
                        scaleSize: 2
                    },
                    bundling: {
                        enable: !1,
                        maxTurningAngle: 45
                    },
                    itemStyle: {
                        normal: {
                            borderWidth: 1.5,
                            label: {
                                show: !0,
                                position: "end"
                            },
                            lineStyle: {
                                type: "dashed"
                            }
                        },
                        emphasis: {
                            label: {
                                show: !1
                            },
                            lineStyle: {}
                        }
                    }
                },
                textStyle: {
                    decoration: "none",
                    fontFamily: "Arial, Verdana, sans-serif",
                    fontFamily2: "微软雅黑",
                    fontSize: 12,
                    fontStyle: "normal",
                    fontWeight: "normal"
                },
                EVENT: {
                    REFRESH: "refresh",
                    RESTORE: "restore",
                    RESIZE: "resize",
                    CLICK: "click",
                    DBLCLICK: "dblclick",
                    HOVER: "hover",
                    MOUSEOUT: "mouseout",
                    DATA_CHANGED: "dataChanged",
                    DATA_ZOOM: "dataZoom",
                    DATA_RANGE: "dataRange",
                    DATA_RANGE_SELECTED: "dataRangeSelected",
                    DATA_RANGE_HOVERLINK: "dataRangeHoverLink",
                    LEGEND_SELECTED: "legendSelected",
                    LEGEND_HOVERLINK: "legendHoverLink",
                    MAP_SELECTED: "mapSelected",
                    PIE_SELECTED: "pieSelected",
                    MAGIC_TYPE_CHANGED: "magicTypeChanged",
                    DATA_VIEW_CHANGED: "dataViewChanged",
                    TIMELINE_CHANGED: "timelineChanged",
                    MAP_ROAM: "mapRoam",
                    FORCE_LAYOUT_END: "forceLayoutEnd",
                    TOOLTIP_HOVER: "tooltipHover",
                    TOOLTIP_IN_GRID: "tooltipInGrid",
                    TOOLTIP_OUT_GRID: "tooltipOutGrid",
                    ROAMCONTROLLER: "roamController"
                },
                DRAG_ENABLE_TIME: 120,
                EFFECT_ZLEVEL: 10,
                symbolList: ["circle", "rectangle", "triangle", "diamond", "emptyCircle", "emptyRectangle", "emptyTriangle", "emptyDiamond"],
                loadingEffect: "spin",
                loadingText: "数据读取中...",
                noDataEffect: "bubble",
                noDataText: "暂无数据",
                calculable: !1,
                calculableColor: "rgba(255,165,0,0.6)",
                calculableHolderColor: "#ccc",
                nameConnector: " & ",
                valueConnector: ": ",
                animation: !0,
                addDataAnimation: !0,
                animationThreshold: 2000,
                animationDuration: 2000,
                animationDurationUpdate: 500,
                animationEasing: "ExponentialOut"
            };
            return i
        }
        ),
        k("zrender/tool/util", ["require", "../dep/excanvas"], function(K) {
            function z(i) {
                return i && 1 === i.nodeType && "string" == typeof i.nodeName
            }
            function E(p) {
                if ("object" == typeof p && null  !== p) {
                    var m = p;
                    if (p instanceof Array) {
                        m = [];
                        for (var l = 0, s = p.length; s > l; l++) {
                            m[l] = E(p[l])
                        }
                    } else {
                        if (!x[w.call(p)] && !z(p)) {
                            m = {};
                            for (var n in p) {
                                p.hasOwnProperty(n) && (m[n] = E(p[n]))
                            }
                        }
                    }
                    return m
                }
                return p
            }
            function H(p, t, l, s) {
                if (t.hasOwnProperty(l)) {
                    var m = p[l];
                    "object" != typeof m || x[w.call(m)] || z(m) ? !s && l in p || (p[l] = t[l]) : O(p[l], t[l], s)
                }
            }
            function O(m, l, o) {
                for (var i in l) {
                    H(m, l, i, o)
                }
                return m
            }
            function D() {
                if (!q) {
                    if (K("../dep/excanvas"),
                    window.G_vmlCanvasManager) {
                        var e = document.createElement("div");
                        e.style.position = "absolute",
                        e.style.top = "-1000px",
                        document.body.appendChild(e),
                        q = G_vmlCanvasManager.initElement(e).getContext("2d")
                    } else {
                        q = document.createElement("canvas").getContext("2d")
                    }
                }
                return q
            }
            function B() {
                return L || (v = document.createElement("canvas"),
                C = v.width,
                M = v.height,
                L = v.getContext("2d")),
                L
            }
            function A(o, m) {
                var p, l = 100;
                o + J > C && (C = o + J + l,
                v.width = C,
                p = !0),
                m + N > M && (M = m + N + l,
                v.height = M,
                p = !0),
                -J > o && (J = Math.ceil(-o / l) * l,
                C += J,
                v.width = C,
                p = !0),
                -N > m && (N = Math.ceil(-m / l) * l,
                M += N,
                v.height = M,
                p = !0),
                p && L.translate(J, N)
            }
            function G() {
                return {
                    x: J,
                    y: N
                }
            }
            function I(o, m) {
                if (o.indexOf) {
                    return o.indexOf(m)
                }
                for (var p = 0, l = o.length; l > p; p++) {
                    if (o[p] === m) {
                        return p
                    }
                }
                return -1
            }
            function F(p, o) {
                function r() {}
                var m = p.prototype;
                r.prototype = o.prototype,
                p.prototype = new r;
                for (var l in m) {
                    p.prototype[l] = m[l]
                }
                p.constructor = p
            }
            var q, v, L, C, M, x = {
                "[object Function]": 1,
                "[object RegExp]": 1,
                "[object Date]": 1,
                "[object Error]": 1,
                "[object CanvasGradient]": 1
            }, w = Object.prototype.toString, J = 0, N = 0;
            return {
                inherits: F,
                clone: E,
                merge: O,
                getContext: D,
                getPixelContext: B,
                getPixelOffset: G,
                adjustCanvasSize: A,
                indexOf: I
            }
        }
        ),
        k("zrender/tool/event", ["require", "../mixin/Eventful"], function(q) {
            function p(i) {
                return i.zrenderX !== void 0 && i.zrenderX || i.offsetX !== void 0 && i.offsetX || i.layerX !== void 0 && i.layerX || i.clientX !== void 0 && i.clientX
            }
            function s(i) {
                return i.zrenderY !== void 0 && i.zrenderY || i.offsetY !== void 0 && i.offsetY || i.layerY !== void 0 && i.layerY || i.clientY !== void 0 && i.clientY
            }
            function m(i) {
                return i.zrenderDelta !== void 0 && i.zrenderDelta || i.wheelDelta !== void 0 && i.wheelDelta || i.detail !== void 0 && -i.detail
            }
            var l = q("../mixin/Eventful")
              , r = "function" == typeof window.addEventListener ? function(i) {
                i.preventDefault(),
                i.stopPropagation(),
                i.cancelBubble = !0
            }
             : function(i) {
                i.returnValue = !1,
                i.cancelBubble = !0
            }
            ;
            return {
                getX: p,
                getY: s,
                getDelta: m,
                stop: r,
                Dispatcher: l
            }
        }
        ),
        k("zrender/tool/env", [], function() {
            function i(L) {
                var z = this.os = {}
                  , E = this.browser = {}
                  , H = L.match(/Web[kK]it[\/]{0,1}([\d.]+)/)
                  , P = L.match(/(Android);?[\s\/]+([\d.]+)?/)
                  , D = L.match(/(iPad).*OS\s([\d_]+)/)
                  , B = L.match(/(iPod)(.*OS\s([\d_]+))?/)
                  , A = !D && L.match(/(iPhone\sOS)\s([\d_]+)/)
                  , G = L.match(/(webOS|hpwOS)[\s\/]([\d.]+)/)
                  , I = G && L.match(/TouchPad/)
                  , F = L.match(/Kindle\/([\d.]+)/)
                  , q = L.match(/Silk\/([\d._]+)/)
                  , v = L.match(/(BlackBerry).*Version\/([\d.]+)/)
                  , M = L.match(/(BB10).*Version\/([\d.]+)/)
                  , C = L.match(/(RIM\sTablet\sOS)\s([\d.]+)/)
                  , N = L.match(/PlayBook/)
                  , x = L.match(/Chrome\/([\d.]+)/) || L.match(/CriOS\/([\d.]+)/)
                  , w = L.match(/Firefox\/([\d.]+)/)
                  , J = L.match(/MSIE ([\d.]+)/)
                  , O = H && L.match(/Mobile\//) && !x
                  , K = L.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !x
                  , J = L.match(/MSIE\s([\d.]+)/);
                return (E.webkit = !!H) && (E.version = H[1]),
                P && (z.android = !0,
                z.version = P[2]),
                A && !B && (z.ios = z.iphone = !0,
                z.version = A[2].replace(/_/g, ".")),
                D && (z.ios = z.ipad = !0,
                z.version = D[2].replace(/_/g, ".")),
                B && (z.ios = z.ipod = !0,
                z.version = B[3] ? B[3].replace(/_/g, ".") : null ),
                G && (z.webos = !0,
                z.version = G[2]),
                I && (z.touchpad = !0),
                v && (z.blackberry = !0,
                z.version = v[2]),
                M && (z.bb10 = !0,
                z.version = M[2]),
                C && (z.rimtabletos = !0,
                z.version = C[2]),
                N && (E.playbook = !0),
                F && (z.kindle = !0,
                z.version = F[1]),
                q && (E.silk = !0,
                E.version = q[1]),
                !q && z.android && L.match(/Kindle Fire/) && (E.silk = !0),
                x && (E.chrome = !0,
                E.version = x[1]),
                w && (E.firefox = !0,
                E.version = w[1]),
                J && (E.ie = !0,
                E.version = J[1]),
                O && (L.match(/Safari/) || z.ios) && (E.safari = !0),
                K && (E.webview = !0),
                J && (E.ie = !0,
                E.version = J[1]),
                z.tablet = !!(D || N || P && !L.match(/Mobile/) || w && L.match(/Tablet/) || J && !L.match(/Phone/) && L.match(/Touch/)),
                z.phone = !(z.tablet || z.ipod || !(P || A || G || v || M || x && L.match(/Android/) || x && L.match(/CriOS\/([\d.]+)/) || w && L.match(/Mobile/) || J && L.match(/Touch/))),
                {
                    browser: E,
                    os: z,
                    canvasSupported: document.createElement("canvas").getContext ? !0 : !1
                }
            }
            return i(navigator.userAgent)
        }
        ),
        k("zrender", ["zrender/zrender"], function(i) {
            return i
        }
        ),
        k("zrender/zrender", ["require", "./dep/excanvas", "./tool/util", "./tool/log", "./tool/guid", "./Handler", "./Painter", "./Storage", "./animation/Animation", "./tool/env"], function(A) {
            function C(i) {
                return function() {
                    for (var l = i.animatingElements, m = 0, e = l.length; e > m; m++) {
                        i.storage.mod(l[m].id)
                    }
                    (l.length || i._needsRefreshNextFrame) && i.refresh()
                }
            }
            A("./dep/excanvas");
            var u = A("./tool/util")
              , y = A("./tool/log")
              , B = A("./tool/guid")
              , q = A("./Handler")
              , p = A("./Painter")
              , D = A("./Storage")
              , x = A("./animation/Animation")
              , z = {}
              , w = {};
            w.version = "2.0.8",
            w.init = function(l) {
                var i = new v(B(),l);
                return z[i.id] = i,
                i
            }
            ,
            w.dispose = function(l) {
                if (l) {
                    l.dispose()
                } else {
                    for (var i in z) {
                        z[i].dispose()
                    }
                    z = {}
                }
                return w
            }
            ,
            w.getInstance = function(i) {
                return z[i]
            }
            ,
            w.delInstance = function(i) {
                return delete z[i],
                w
            }
            ;
            var v = function(s, o) {
                this.id = s,
                this.env = A("./tool/env"),
                this.storage = new D,
                this.painter = new p(o,this.storage),
                this.handler = new q(o,this.storage,this.painter),
                this.animatingElements = [],
                this.animation = new x({
                    stage: {
                        update: C(this)
                    }
                }),
                this.animation.start();
                var l = this;
                this.painter.refreshNextFrame = function() {
                    l.refreshNextFrame()
                }
                ,
                this._needsRefreshNextFrame = !1;
                var l = this
                  , r = this.storage
                  , e = r.delFromMap;
                r.delFromMap = function(m) {
                    var i = r.get(m);
                    l.stopAnimation(i),
                    e.call(r, m)
                }
            }
            ;
            return v.prototype.getId = function() {
                return this.id
            }
            ,
            v.prototype.addShape = function(i) {
                return this.addElement(i),
                this
            }
            ,
            v.prototype.addGroup = function(i) {
                return this.addElement(i),
                this
            }
            ,
            v.prototype.delShape = function(i) {
                return this.delElement(i),
                this
            }
            ,
            v.prototype.delGroup = function(i) {
                return this.delElement(i),
                this
            }
            ,
            v.prototype.modShape = function(l, i) {
                return this.modElement(l, i),
                this
            }
            ,
            v.prototype.modGroup = function(l, i) {
                return this.modElement(l, i),
                this
            }
            ,
            v.prototype.addElement = function(i) {
                return this.storage.addRoot(i),
                this._needsRefreshNextFrame = !0,
                this
            }
            ,
            v.prototype.delElement = function(i) {
                return this.storage.delRoot(i),
                this._needsRefreshNextFrame = !0,
                this
            }
            ,
            v.prototype.modElement = function(l, i) {
                return this.storage.mod(l, i),
                this._needsRefreshNextFrame = !0,
                this
            }
            ,
            v.prototype.modLayer = function(l, i) {
                return this.painter.modLayer(l, i),
                this._needsRefreshNextFrame = !0,
                this
            }
            ,
            v.prototype.addHoverShape = function(i) {
                return this.storage.addHover(i),
                this
            }
            ,
            v.prototype.render = function(i) {
                return this.painter.render(i),
                this._needsRefreshNextFrame = !1,
                this
            }
            ,
            v.prototype.refresh = function(i) {
                return this.painter.refresh(i),
                this._needsRefreshNextFrame = !1,
                this
            }
            ,
            v.prototype.refreshNextFrame = function() {
                return this._needsRefreshNextFrame = !0,
                this
            }
            ,
            v.prototype.refreshHover = function(i) {
                return this.painter.refreshHover(i),
                this
            }
            ,
            v.prototype.refreshShapes = function(l, i) {
                return this.painter.refreshShapes(l, i),
                this
            }
            ,
            v.prototype.resize = function() {
                return this.painter.resize(),
                this
            }
            ,
            v.prototype.animate = function(J, L, K) {
                if ("string" == typeof J && (J = this.storage.get(J)),
                J) {
                    var n;
                    if (L) {
                        for (var i = L.split("."), M = J, H = 0, I = i.length; I > H; H++) {
                            M && (M = M[i[H]])
                        }
                        M && (n = M)
                    } else {
                        n = J
                    }
                    if (!n) {
                        return y('Property "' + L + '" is not existed in element ' + J.id),
                        void 0
                    }
                    var F = this.animatingElements;
                    null  == J.__animators && (J.__animators = []);
                    var E = J.__animators;
                    0 === E.length && F.push(J);
                    var G = this.animation.animate(n, {
                        loop: K
                    }).done(function() {
                        var e = u.indexOf(J.__animators, G);
                        if (e >= 0 && E.splice(e, 1),
                        0 === E.length) {
                            var e = u.indexOf(F, J);
                            F.splice(e, 1)
                        }
                    }
                    );
                    return E.push(G),
                    G
                }
                y("Element not existed")
            }
            ,
            v.prototype.stopAnimation = function(E) {
                if (E.__animators) {
                    for (var n = E.__animators, m = n.length, l = 0; m > l; l++) {
                        n[l].stop()
                    }
                    if (m > 0) {
                        var F = this.animatingElements
                          , s = u.indexOf(F, E);
                        s >= 0 && F.splice(s, 1)
                    }
                    n.length = 0
                }
                return this
            }
            ,
            v.prototype.clearAnimation = function() {
                return this.animation.clear(),
                this.animatingElements.length = 0,
                this
            }
            ,
            v.prototype.showLoading = function(i) {
                return this.painter.showLoading(i),
                this
            }
            ,
            v.prototype.hideLoading = function() {
                return this.painter.hideLoading(),
                this
            }
            ,
            v.prototype.getWidth = function() {
                return this.painter.getWidth()
            }
            ,
            v.prototype.getHeight = function() {
                return this.painter.getHeight()
            }
            ,
            v.prototype.toDataURL = function(l, i, m) {
                return this.painter.toDataURL(l, i, m)
            }
            ,
            v.prototype.shapeToImage = function(o, m, r) {
                var l = B();
                return this.painter.shapeToImage(l, o, m, r)
            }
            ,
            v.prototype.on = function(l, i, m) {
                return this.handler.on(l, i, m),
                this
            }
            ,
            v.prototype.un = function(l, i) {
                return this.handler.un(l, i),
                this
            }
            ,
            v.prototype.trigger = function(l, i) {
                return this.handler.trigger(l, i),
                this
            }
            ,
            v.prototype.clear = function() {
                return this.storage.delRoot(),
                this.painter.clear(),
                this
            }
            ,
            v.prototype.dispose = function() {
                this.animation.stop(),
                this.clear(),
                this.storage.dispose(),
                this.painter.dispose(),
                this.handler.dispose(),
                this.animation = this.animatingElements = this.storage = this.painter = this.handler = null ,
                w.delInstance(this.id)
            }
            ,
            w
        }
        ),
        k("zrender/config", [], function() {
            var i = {
                EVENT: {
                    RESIZE: "resize",
                    CLICK: "click",
                    DBLCLICK: "dblclick",
                    MOUSEWHEEL: "mousewheel",
                    MOUSEMOVE: "mousemove",
                    MOUSEOVER: "mouseover",
                    MOUSEOUT: "mouseout",
                    MOUSEDOWN: "mousedown",
                    MOUSEUP: "mouseup",
                    GLOBALOUT: "globalout",
                    DRAGSTART: "dragstart",
                    DRAGEND: "dragend",
                    DRAGENTER: "dragenter",
                    DRAGOVER: "dragover",
                    DRAGLEAVE: "dragleave",
                    DROP: "drop",
                    touchClickDelay: 300
                },
                catchBrushException: !1,
                debugMode: 0,
                devicePixelRatio: Math.max(window.devicePixelRatio || 1, 1)
            };
            return i
        }
        ),
        k("echarts/chart/island", ["require", "./base", "zrender/shape/Circle", "../config", "../util/ecData", "zrender/tool/util", "zrender/tool/event", "zrender/tool/color", "../util/accMath", "../chart"], function(v) {
            function p(A, y, s, o, z) {
                x.call(this, A, y, s, o, z),
                this._nameConnector,
                this._valueConnector,
                this._zrHeight = this.zr.getHeight(),
                this._zrWidth = this.zr.getWidth();
                var n = this;
                n.shapeHandler.onmousewheel = function(G) {
                    var D = G.target
                      , H = G.event
                      , C = q.getDelta(H);
                    C = C > 0 ? -1 : 1,
                    D.style.r -= C,
                    D.style.r = 5 > D.style.r ? 5 : D.style.r;
                    var B = w.get(D, "value")
                      , F = B * n.option.island.calculateStep;
                    B = F > 1 ? Math.round(B - F * C) : +(B - F * C).toFixed(2);
                    var E = w.get(D, "name");
                    D.style.text = E + ":" + B,
                    w.set(D, "value", B),
                    w.set(D, "name", E),
                    n.zr.modShape(D.id),
                    n.zr.refreshNextFrame(),
                    q.stop(H)
                }
            }
            var x = v("./base")
              , m = v("zrender/shape/Circle")
              , l = v("../config");
            l.island = {
                zlevel: 0,
                z: 5,
                r: 15,
                calculateStep: 0.1
            };
            var w = v("../util/ecData")
              , u = v("zrender/tool/util")
              , q = v("zrender/tool/event");
            return p.prototype = {
                type: l.CHART_TYPE_ISLAND,
                _combine: function(y, B) {
                    var o = v("zrender/tool/color")
                      , e = v("../util/accMath")
                      , A = e.accAdd(w.get(y, "value"), w.get(B, "value"))
                      , z = w.get(y, "name") + this._nameConnector + w.get(B, "name");
                    y.style.text = z + this._valueConnector + A,
                    w.set(y, "value", A),
                    w.set(y, "name", z),
                    y.style.r = this.option.island.r,
                    y.style.color = o.mix(y.style.color, B.style.color)
                },
                refresh: function(i) {
                    i && (i.island = this.reformOption(i.island),
                    this.option = i,
                    this._nameConnector = this.option.nameConnector,
                    this._valueConnector = this.option.valueConnector)
                },
                getOption: function() {
                    return this.option
                },
                resize: function() {
                    var z = this.zr.getWidth()
                      , y = this.zr.getHeight()
                      , B = z / (this._zrWidth || z)
                      , s = y / (this._zrHeight || y);
                    if (1 !== B || 1 !== s) {
                        this._zrWidth = z,
                        this._zrHeight = y;
                        for (var r = 0, A = this.shapeList.length; A > r; r++) {
                            this.zr.modShape(this.shapeList[r].id, {
                                style: {
                                    x: Math.round(this.shapeList[r].style.x * B),
                                    y: Math.round(this.shapeList[r].style.y * s)
                                }
                            })
                        }
                    }
                },
                add: function(A) {
                    var o = w.get(A, "name")
                      , B = w.get(A, "value")
                      , i = null  != w.get(A, "series") ? w.get(A, "series").name : ""
                      , z = this.getFont(this.option.island.textStyle)
                      , y = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            x: A.style.x,
                            y: A.style.y,
                            r: this.option.island.r,
                            color: A.style.color || A.style.strokeColor,
                            text: o + this._valueConnector + B,
                            textFont: z
                        },
                        draggable: !0,
                        hoverable: !0,
                        onmousewheel: this.shapeHandler.onmousewheel,
                        _type: "island"
                    };
                    "#fff" === y.style.color && (y.style.color = A.style.strokeColor),
                    this.setCalculable(y),
                    y.dragEnableTime = 0,
                    w.pack(y, {
                        name: i
                    }, -1, B, -1, o),
                    y = new m(y),
                    this.shapeList.push(y),
                    this.zr.addShape(y)
                },
                del: function(s) {
                    this.zr.delShape(s.id);
                    for (var r = [], y = 0, o = this.shapeList.length; o > y; y++) {
                        this.shapeList[y].id != s.id && r.push(this.shapeList[y])
                    }
                    this.shapeList = r
                },
                ondrop: function(s, r) {
                    if (this.isDrop && s.target) {
                        var y = s.target
                          , o = s.dragged;
                        this._combine(y, o),
                        this.zr.modShape(y.id),
                        r.dragIn = !0,
                        this.isDrop = !1
                    }
                },
                ondragend: function(o, i) {
                    var r = o.target;
                    this.isDragend ? i.dragIn && (this.del(r),
                    i.needRefresh = !0) : i.dragIn || (r.style.x = q.getX(o.event),
                    r.style.y = q.getY(o.event),
                    this.add(r),
                    i.needRefresh = !0),
                    this.isDragend = !1
                }
            },
            u.inherits(p, x),
            v("../chart").define("island", p),
            p
        }
        ),
        k("echarts/component/toolbox", ["require", "./base", "zrender/shape/Line", "zrender/shape/Image", "zrender/shape/Rectangle", "../util/shape/Icon", "../config", "zrender/tool/util", "zrender/config", "zrender/tool/event", "./dataView", "../component"], function(B) {
            function D(F, n, m, l, G) {
                u.call(this, F, n, m, l, G),
                this.dom = G.dom,
                this._magicType = {},
                this._magicMap = {},
                this._isSilence = !1,
                this._iconList,
                this._iconShapeMap = {},
                this._featureTitle = {},
                this._featureIcon = {},
                this._featureColor = {},
                this._featureOption = {},
                this._enableColor = "red",
                this._disableColor = "#ccc",
                this._markShapeList = [];
                var s = this;
                s._onMark = function(i) {
                    s.__onMark(i)
                }
                ,
                s._onMarkUndo = function(i) {
                    s.__onMarkUndo(i)
                }
                ,
                s._onMarkClear = function(i) {
                    s.__onMarkClear(i)
                }
                ,
                s._onDataZoom = function(i) {
                    s.__onDataZoom(i)
                }
                ,
                s._onDataZoomReset = function(i) {
                    s.__onDataZoomReset(i)
                }
                ,
                s._onDataView = function(i) {
                    s.__onDataView(i)
                }
                ,
                s._onRestore = function(i) {
                    s.__onRestore(i)
                }
                ,
                s._onSaveAsImage = function(i) {
                    s.__onSaveAsImage(i)
                }
                ,
                s._onMagicType = function(i) {
                    s.__onMagicType(i)
                }
                ,
                s._onCustomHandler = function(i) {
                    s.__onCustomHandler(i)
                }
                ,
                s._onmousemove = function(i) {
                    return s.__onmousemove(i)
                }
                ,
                s._onmousedown = function(i) {
                    return s.__onmousedown(i)
                }
                ,
                s._onmouseup = function(i) {
                    return s.__onmouseup(i)
                }
                ,
                s._onclick = function(i) {
                    return s.__onclick(i)
                }
            }
            var u = B("./base")
              , z = B("zrender/shape/Line")
              , C = B("zrender/shape/Image")
              , q = B("zrender/shape/Rectangle")
              , p = B("../util/shape/Icon")
              , E = B("../config");
            E.toolbox = {
                zlevel: 0,
                z: 6,
                show: !1,
                orient: "horizontal",
                x: "right",
                y: "top",
                color: ["#1e90ff", "#22bb22", "#4b0082", "#d2691e"],
                disableColor: "#ddd",
                effectiveColor: "red",
                backgroundColor: "rgba(0,0,0,0)",
                borderColor: "#ccc",
                borderWidth: 0,
                padding: 5,
                itemGap: 10,
                itemSize: 16,
                showTitle: !0,
                feature: {
                    mark: {
                        show: !1,
                        title: {
                            mark: lang_echars.auxiliary_line_switch,
                            markUndo: lang_echars.delete_auxiliary_line,
                            markClear: lang_echars.clean_auxiliary_line
                        },
                        lineStyle: {
                            width: 1,
                            color: "#1e90ff",
                            type: "dashed"
                        }
                    },
                    dataZoom: {
                        show: !1,
                        title: {
                            dataZoom: lang_echars.area_scaling,
                            dataZoomReset: lang_echars.region_scaling_back
                        }
                    },
                    dataView: {
                        show: !1,
                        title: lang_echars.data_view,
                        readOnly: !1,
                        lang: [lang_echars.data_view, lang_echars.close, lang_echars.refresh]
                    },
                    magicType: {
                        show: !1,
                        title: {
                            line: lang_echars.line_chart,
                            bar: lang_echars.column_chart,
                            stack: lang_echars.accumulation,
                            tiled: lang_echars.tile,
                            force: lang_echars.force_directed_layout,
                            chord: lang_echars.chord_diagram,
                            pie: lang_echars.pie_chart,
                            funnel: lang_echars.funnel_plot
                        },
                        type: []
                    },
                    restore: {
                        show: !1,
                        title: lang_echars.recovery
                    },
                    saveAsImage: {
                        show: !1,
                        title: lang_echars.save_as,
                        type: "png",
                        lang: [lang_echars.click_save]
                    }
                }
            };
            var y = B("zrender/tool/util")
              , A = B("zrender/config")
              , w = B("zrender/tool/event")
              , v = "stack"
              , x = "tiled";
            return D.prototype = {
                type: E.COMPONENT_TYPE_TOOLBOX,
                _buildShape: function() {
                    this._iconList = [];
                    var G = this.option.toolbox;
                    this._enableColor = G.effectiveColor,
                    this._disableColor = G.disableColor;
                    var s = G.feature
                      , I = [];
                    for (var m in s) {
                        if (s[m].show) {
                            switch (m) {
                            case "mark":
                                I.push({
                                    key: m,
                                    name: "mark"
                                }),
                                I.push({
                                    key: m,
                                    name: "markUndo"
                                }),
                                I.push({
                                    key: m,
                                    name: "markClear"
                                });
                                break;
                            case "magicType":
                                for (var l = 0, H = s[m].type.length; H > l; l++) {
                                    s[m].title[s[m].type[l] + "Chart"] = s[m].title[s[m].type[l]],
                                    s[m].option && (s[m].option[s[m].type[l] + "Chart"] = s[m].option[s[m].type[l]]),
                                    I.push({
                                        key: m,
                                        name: s[m].type[l] + "Chart"
                                    })
                                }
                                break;
                            case "dataZoom":
                                I.push({
                                    key: m,
                                    name: "dataZoom"
                                }),
                                I.push({
                                    key: m,
                                    name: "dataZoomReset"
                                });
                                break;
                            case "saveAsImage":
                                this.canvasSupported && I.push({
                                    key: m,
                                    name: "saveAsImage"
                                });
                                break;
                            default:
                                I.push({
                                    key: m,
                                    name: m
                                })
                            }
                        }
                    }
                    if (I.length > 0) {
                        for (var F, m, l = 0, H = I.length; H > l; l++) {
                            F = I[l].name,
                            m = I[l].key,
                            this._iconList.push(F),
                            this._featureTitle[F] = s[m].title[F] || s[m].title,
                            s[m].icon && (this._featureIcon[F] = s[m].icon[F] || s[m].icon),
                            s[m].color && (this._featureColor[F] = s[m].color[F] || s[m].color),
                            s[m].option && (this._featureOption[F] = s[m].option[F] || s[m].option)
                        }
                        this._itemGroupLocation = this._getItemGroupLocation(),
                        this._buildBackground(),
                        this._buildItem();
                        for (var l = 0, H = this.shapeList.length; H > l; l++) {
                            this.zr.addShape(this.shapeList[l])
                        }
                        this._iconShapeMap.mark && (this._iconDisable(this._iconShapeMap.markUndo),
                        this._iconDisable(this._iconShapeMap.markClear)),
                        this._iconShapeMap.dataZoomReset && 0 === this._zoomQueue.length && this._iconDisable(this._iconShapeMap.dataZoomReset)
                    }
                },
                _buildItem: function() {
                    var Q, F, K, r, R = this.option.toolbox, J = this._iconList.length, L = this._itemGroupLocation.x, H = this._itemGroupLocation.y, G = R.itemSize, I = R.itemGap, M = R.color instanceof Array ? R.color : [R.color], e = this.getFont(R.textStyle);
                    "horizontal" === R.orient ? (F = 0.5 > this._itemGroupLocation.y / this.zr.getHeight() ? "bottom" : "top",
                    K = 0.5 > this._itemGroupLocation.x / this.zr.getWidth() ? "left" : "right",
                    r = 0.5 > this._itemGroupLocation.y / this.zr.getHeight() ? "top" : "bottom") : F = 0.5 > this._itemGroupLocation.x / this.zr.getWidth() ? "right" : "left",
                    this._iconShapeMap = {};
                    for (var N = this, P = 0; J > P; P++) {
                        switch (Q = {
                            type: "icon",
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase(),
                            style: {
                                x: L,
                                y: H,
                                width: G,
                                height: G,
                                iconType: this._iconList[P],
                                lineWidth: 1,
                                strokeColor: this._featureColor[this._iconList[P]] || M[P % M.length],
                                brushType: "stroke"
                            },
                            highlightStyle: {
                                lineWidth: 1,
                                text: R.showTitle ? this._featureTitle[this._iconList[P]] : void 0,
                                textFont: e,
                                textPosition: F,
                                strokeColor: this._featureColor[this._iconList[P]] || M[P % M.length]
                            },
                            hoverable: !0,
                            clickable: !0
                        },
                        this._featureIcon[this._iconList[P]] && (Q.style.image = this._featureIcon[this._iconList[P]].replace(RegExp("^image:\\/\\/"), ""),
                        Q.style.opacity = 0.8,
                        Q.highlightStyle.opacity = 1,
                        Q.type = "image"),
                        "horizontal" === R.orient && (0 === P && "left" === K && (Q.highlightStyle.textPosition = "specific",
                        Q.highlightStyle.textAlign = K,
                        Q.highlightStyle.textBaseline = r,
                        Q.highlightStyle.textX = L,
                        Q.highlightStyle.textY = "top" === r ? H + G + 10 : H - 10),
                        P === J - 1 && "right" === K && (Q.highlightStyle.textPosition = "specific",
                        Q.highlightStyle.textAlign = K,
                        Q.highlightStyle.textBaseline = r,
                        Q.highlightStyle.textX = L + G,
                        Q.highlightStyle.textY = "top" === r ? H + G + 10 : H - 10)),
                        this._iconList[P]) {
                        case "mark":
                            Q.onclick = N._onMark;
                            break;
                        case "markUndo":
                            Q.onclick = N._onMarkUndo;
                            break;
                        case "markClear":
                            Q.onclick = N._onMarkClear;
                            break;
                        case "dataZoom":
                            Q.onclick = N._onDataZoom;
                            break;
                        case "dataZoomReset":
                            Q.onclick = N._onDataZoomReset;
                            break;
                        case "dataView":
                            if (!this._dataView) {
                                var O = B("./dataView");
                                this._dataView = new O(this.ecTheme,this.messageCenter,this.zr,this.option,this.myChart)
                            }
                            Q.onclick = N._onDataView;
                            break;
                        case "restore":
                            Q.onclick = N._onRestore;
                            break;
                        case "saveAsImage":
                            Q.onclick = N._onSaveAsImage;
                            break;
                        default:
                            this._iconList[P].match("Chart") ? (Q._name = this._iconList[P].replace("Chart", ""),
                            Q.onclick = N._onMagicType) : Q.onclick = N._onCustomHandler
                        }
                        "icon" === Q.type ? Q = new p(Q) : "image" === Q.type && (Q = new C(Q)),
                        this.shapeList.push(Q),
                        this._iconShapeMap[this._iconList[P]] = Q,
                        "horizontal" === R.orient ? L += G + I : H += G + I
                    }
                },
                _buildBackground: function() {
                    var l = this.option.toolbox
                      , i = this.reformCssArray(this.option.toolbox.padding);
                    this.shapeList.push(new q({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        hoverable: !1,
                        style: {
                            x: this._itemGroupLocation.x - i[3],
                            y: this._itemGroupLocation.y - i[0],
                            width: this._itemGroupLocation.width + i[3] + i[1],
                            height: this._itemGroupLocation.height + i[0] + i[2],
                            brushType: 0 === l.borderWidth ? "fill" : "both",
                            color: l.backgroundColor,
                            strokeColor: l.borderColor,
                            lineWidth: l.borderWidth
                        }
                    }))
                },
                _getItemGroupLocation: function() {
                    var M = this.option.toolbox
                      , O = this.reformCssArray(this.option.toolbox.padding)
                      , H = this._iconList.length
                      , K = M.itemGap
                      , N = M.itemSize
                      , G = 0
                      , F = 0;
                    "horizontal" === M.orient ? (G = (N + K) * H - K,
                    F = N) : (F = (N + K) * H - K,
                    G = N);
                    var P, J = this.zr.getWidth();
                    switch (M.x) {
                    case "center":
                        P = Math.floor((J - G) / 2);
                        break;
                    case "left":
                        P = O[3] + M.borderWidth;
                        break;
                    case "right":
                        P = J - G - O[1] - M.borderWidth;
                        break;
                    default:
                        P = M.x - 0,
                        P = isNaN(P) ? 0 : P
                    }
                    var L, I = this.zr.getHeight();
                    switch (M.y) {
                    case "top":
                        L = O[0] + M.borderWidth;
                        break;
                    case "bottom":
                        L = I - F - O[2] - M.borderWidth;
                        break;
                    case "center":
                        L = Math.floor((I - F) / 2);
                        break;
                    default:
                        L = M.y - 0,
                        L = isNaN(L) ? 0 : L
                    }
                    return {
                        x: P,
                        y: L,
                        width: G,
                        height: F
                    }
                },
                __onmousemove: function(i) {
                    this._marking && (this._markShape.style.xEnd = w.getX(i.event),
                    this._markShape.style.yEnd = w.getY(i.event),
                    this.zr.addHoverShape(this._markShape)),
                    this._zooming && (this._zoomShape.style.width = w.getX(i.event) - this._zoomShape.style.x,
                    this._zoomShape.style.height = w.getY(i.event) - this._zoomShape.style.y,
                    this.zr.addHoverShape(this._zoomShape),
                    this.dom.style.cursor = "crosshair",
                    w.stop(i.event)),
                    this._zoomStart && "pointer" != this.dom.style.cursor && "move" != this.dom.style.cursor && (this.dom.style.cursor = "crosshair")
                },
                __onmousedown: function(o) {
                    if (!o.target) {
                        this._zooming = !0;
                        var m = w.getX(o.event)
                          , r = w.getY(o.event)
                          , l = this.option.dataZoom || {};
                        return this._zoomShape = new q({
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase(),
                            style: {
                                x: m,
                                y: r,
                                width: 1,
                                height: 1,
                                brushType: "both"
                            },
                            highlightStyle: {
                                lineWidth: 2,
                                color: l.fillerColor || E.dataZoom.fillerColor,
                                strokeColor: l.handleColor || E.dataZoom.handleColor,
                                brushType: "both"
                            }
                        }),
                        this.zr.addHoverShape(this._zoomShape),
                        !0
                    }
                },
                __onmouseup: function() {
                    if (!this._zoomShape || 10 > Math.abs(this._zoomShape.style.width) || 10 > Math.abs(this._zoomShape.style.height)) {
                        return this._zooming = !1,
                        !0
                    }
                    if (this._zooming && this.component.dataZoom) {
                        this._zooming = !1;
                        var i = this.component.dataZoom.rectZoom(this._zoomShape.style);
                        i && (this._zoomQueue.push({
                            start: i.start,
                            end: i.end,
                            start2: i.start2,
                            end2: i.end2
                        }),
                        this._iconEnable(this._iconShapeMap.dataZoomReset),
                        this.zr.refreshNextFrame())
                    }
                    return !0
                },
                __onclick: function(l) {
                    if (!l.target) {
                        if (this._marking) {
                            this._marking = !1,
                            this._markShapeList.push(this._markShape),
                            this._iconEnable(this._iconShapeMap.markUndo),
                            this._iconEnable(this._iconShapeMap.markClear),
                            this.zr.addShape(this._markShape),
                            this.zr.refreshNextFrame()
                        } else {
                            if (this._markStart) {
                                this._marking = !0;
                                var i = w.getX(l.event)
                                  , m = w.getY(l.event);
                                this._markShape = new z({
                                    zlevel: this.getZlevelBase(),
                                    z: this.getZBase(),
                                    style: {
                                        xStart: i,
                                        yStart: m,
                                        xEnd: i,
                                        yEnd: m,
                                        lineWidth: this.query(this.option, "toolbox.feature.mark.lineStyle.width"),
                                        strokeColor: this.query(this.option, "toolbox.feature.mark.lineStyle.color"),
                                        lineType: this.query(this.option, "toolbox.feature.mark.lineStyle.type")
                                    }
                                }),
                                this.zr.addHoverShape(this._markShape)
                            }
                        }
                    }
                },
                __onMark: function(l) {
                    var i = l.target;
                    if (this._marking || this._markStart) {
                        this._resetMark(),
                        this.zr.refreshNextFrame()
                    } else {
                        this._resetZoom(),
                        this.zr.modShape(i.id, {
                            style: {
                                strokeColor: this._enableColor
                            }
                        }),
                        this.zr.refreshNextFrame(),
                        this._markStart = !0;
                        var m = this;
                        setTimeout(function() {
                            m.zr && m.zr.on(A.EVENT.CLICK, m._onclick) && m.zr.on(A.EVENT.MOUSEMOVE, m._onmousemove)
                        }
                        , 10)
                    }
                    return !0
                },
                __onMarkUndo: function() {
                    if (this._marking) {
                        this._marking = !1
                    } else {
                        var l = this._markShapeList.length;
                        if (l >= 1) {
                            var i = this._markShapeList[l - 1];
                            this.zr.delShape(i.id),
                            this.zr.refreshNextFrame(),
                            this._markShapeList.pop(),
                            1 === l && (this._iconDisable(this._iconShapeMap.markUndo),
                            this._iconDisable(this._iconShapeMap.markClear))
                        }
                    }
                    return !0
                },
                __onMarkClear: function() {
                    this._marking && (this._marking = !1);
                    var i = this._markShapeList.length;
                    if (i > 0) {
                        for (; i--; ) {
                            this.zr.delShape(this._markShapeList.pop().id)
                        }
                        this._iconDisable(this._iconShapeMap.markUndo),
                        this._iconDisable(this._iconShapeMap.markClear),
                        this.zr.refreshNextFrame()
                    }
                    return !0
                },
                __onDataZoom: function(l) {
                    var i = l.target;
                    if (this._zooming || this._zoomStart) {
                        this._resetZoom(),
                        this.zr.refreshNextFrame(),
                        this.dom.style.cursor = "default"
                    } else {
                        this._resetMark(),
                        this.zr.modShape(i.id, {
                            style: {
                                strokeColor: this._enableColor
                            }
                        }),
                        this.zr.refreshNextFrame(),
                        this._zoomStart = !0;
                        var m = this;
                        setTimeout(function() {
                            m.zr && m.zr.on(A.EVENT.MOUSEDOWN, m._onmousedown) && m.zr.on(A.EVENT.MOUSEUP, m._onmouseup) && m.zr.on(A.EVENT.MOUSEMOVE, m._onmousemove)
                        }
                        , 10),
                        this.dom.style.cursor = "crosshair"
                    }
                    return !0
                },
                __onDataZoomReset: function() {
                    return this._zooming && (this._zooming = !1),
                    this._zoomQueue.pop(),
                    this._zoomQueue.length > 0 ? this.component.dataZoom.absoluteZoom(this._zoomQueue[this._zoomQueue.length - 1]) : (this.component.dataZoom.rectZoom(),
                    this._iconDisable(this._iconShapeMap.dataZoomReset),
                    this.zr.refreshNextFrame()),
                    !0
                },
                _resetMark: function() {
                    this._marking = !1,
                    this._markStart && (this._markStart = !1,
                    this._iconShapeMap.mark && this.zr.modShape(this._iconShapeMap.mark.id, {
                        style: {
                            strokeColor: this._iconShapeMap.mark.highlightStyle.strokeColor
                        }
                    }),
                    this.zr.un(A.EVENT.CLICK, this._onclick),
                    this.zr.un(A.EVENT.MOUSEMOVE, this._onmousemove))
                },
                _resetZoom: function() {
                    this._zooming = !1,
                    this._zoomStart && (this._zoomStart = !1,
                    this._iconShapeMap.dataZoom && this.zr.modShape(this._iconShapeMap.dataZoom.id, {
                        style: {
                            strokeColor: this._iconShapeMap.dataZoom.highlightStyle.strokeColor
                        }
                    }),
                    this.zr.un(A.EVENT.MOUSEDOWN, this._onmousedown),
                    this.zr.un(A.EVENT.MOUSEUP, this._onmouseup),
                    this.zr.un(A.EVENT.MOUSEMOVE, this._onmousemove))
                },
                _iconDisable: function(i) {
                    "image" != i.type ? this.zr.modShape(i.id, {
                        hoverable: !1,
                        clickable: !1,
                        style: {
                            strokeColor: this._disableColor
                        }
                    }) : this.zr.modShape(i.id, {
                        hoverable: !1,
                        clickable: !1,
                        style: {
                            opacity: 0.3
                        }
                    })
                },
                _iconEnable: function(i) {
                    "image" != i.type ? this.zr.modShape(i.id, {
                        hoverable: !0,
                        clickable: !0,
                        style: {
                            strokeColor: i.highlightStyle.strokeColor
                        }
                    }) : this.zr.modShape(i.id, {
                        hoverable: !0,
                        clickable: !0,
                        style: {
                            opacity: 0.8
                        }
                    })
                },
                __onDataView: function() {
                    return this._dataView.show(this.option),
                    !0
                },
                __onRestore: function() {
                    return this._resetMark(),
                    this._resetZoom(),
                    this.messageCenter.dispatch(E.EVENT.RESTORE, null , null , this.myChart),
                    !0
                },
                __onSaveAsImage: function() {
                    var r = this.option.toolbox.feature.saveAsImage
                      , o = r.type || "png";
                    "png" != o && "jpeg" != o && (o = "png");
                    var s;
                    s = this.myChart.isConnected() ? this.myChart.getConnectedDataURL(o) : this.zr.toDataURL("image/" + o, this.option.backgroundColor && "rgba(0,0,0,0)" === this.option.backgroundColor.replace(" ", "") ? "#fff" : this.option.backgroundColor);
                    var m = document.createElement("div");
                    m.id = "__echarts_download_wrap__",
                    m.style.cssText = "position:fixed;z-index:99999;display:block;top:0;left:0;background-color:rgba(33,33,33,0.5);text-align:center;width:100%;height:100%;line-height:" + document.documentElement.clientHeight + "px;";
                    var l = document.createElement("a");
                    l.href = s,
                    l.setAttribute("download", (r.name ? r.name : this.option.title && (this.option.title.text || this.option.title.subtext) ? this.option.title.text || this.option.title.subtext : "ECharts") + "." + o),
                    l.innerHTML = '<img style="vertical-align:middle" src="' + s + '" title="' + (window.ActiveXObject || "ActiveXObject" in window ? "右键->图片另存为" : r.lang ? r.lang[0] : "点击保存") + '"/>',
                    m.appendChild(l),
                    document.body.appendChild(m),
                    l = null ,
                    m = null ,
                    setTimeout(function() {
                        var i = document.getElementById("__echarts_download_wrap__");
                        i && (i.onclick = function() {
                            var n = document.getElementById("__echarts_download_wrap__");
                            n.onclick = null ,
                            n.innerHTML = "",
                            document.body.removeChild(n),
                            n = null 
                        }
                        ,
                        i = null )
                    }
                    , 500)
                },
                __onMagicType: function(l) {
                    this._resetMark();
                    var i = l.target._name;
                    return this._magicType[i] || (this._magicType[i] = !0,
                    i === E.CHART_TYPE_LINE ? this._magicType[E.CHART_TYPE_BAR] = !1 : i === E.CHART_TYPE_BAR && (this._magicType[E.CHART_TYPE_LINE] = !1),
                    i === E.CHART_TYPE_PIE ? this._magicType[E.CHART_TYPE_FUNNEL] = !1 : i === E.CHART_TYPE_FUNNEL && (this._magicType[E.CHART_TYPE_PIE] = !1),
                    i === E.CHART_TYPE_FORCE ? this._magicType[E.CHART_TYPE_CHORD] = !1 : i === E.CHART_TYPE_CHORD && (this._magicType[E.CHART_TYPE_FORCE] = !1),
                    i === v ? this._magicType[x] = !1 : i === x && (this._magicType[v] = !1),
                    this.messageCenter.dispatch(E.EVENT.MAGIC_TYPE_CHANGED, l.event, {
                        magicType: this._magicType
                    }, this.myChart)),
                    !0
                },
                setMagicType: function(i) {
                    this._resetMark(),
                    this._magicType = i,
                    !this._isSilence && this.messageCenter.dispatch(E.EVENT.MAGIC_TYPE_CHANGED, null , {
                        magicType: this._magicType
                    }, this.myChart)
                },
                __onCustomHandler: function(l) {
                    var i = l.target.style.iconType
                      , m = this.option.toolbox.feature[i].onclick;
                    "function" == typeof m && m.call(this, this.option)
                },
                reset: function(K, M) {
                    if (M && this.clear(),
                    this.query(K, "toolbox.show") && this.query(K, "toolbox.feature.magicType.show")) {
                        var G = K.toolbox.feature.magicType.type
                          , I = G.length;
                        for (this._magicMap = {}; I--; ) {
                            this._magicMap[G[I]] = !0
                        }
                        I = K.series.length;
                        for (var L, F; I--; ) {
                            L = K.series[I].type,
                            this._magicMap[L] && (F = K.xAxis instanceof Array ? K.xAxis[K.series[I].xAxisIndex || 0] : K.xAxis,
                            F && "category" === (F.type || "category") && (F.__boundaryGap = null  != F.boundaryGap ? F.boundaryGap : !0),
                            F = K.yAxis instanceof Array ? K.yAxis[K.series[I].yAxisIndex || 0] : K.yAxis,
                            F && "category" === F.type && (F.__boundaryGap = null  != F.boundaryGap ? F.boundaryGap : !0),
                            K.series[I].__type = L,
                            K.series[I].__itemStyle = y.clone(K.series[I].itemStyle || {})),
                            (this._magicMap[v] || this._magicMap[x]) && (K.series[I].__stack = K.series[I].stack)
                        }
                    }
                    this._magicType = M ? {} : this._magicType || {};
                    for (var l in this._magicType) {
                        if (this._magicType[l]) {
                            this.option = K,
                            this.getMagicOption();
                            break
                        }
                    }
                    var N = K.dataZoom;
                    if (N && N.show) {
                        var J = null  != N.start && N.start >= 0 && 100 >= N.start ? N.start : 0
                          , H = null  != N.end && N.end >= 0 && 100 >= N.end ? N.end : 100;
                        J > H && (J += H,
                        H = J - H,
                        J -= H),
                        this._zoomQueue = [{
                            start: J,
                            end: H,
                            start2: 0,
                            end2: 100
                        }]
                    } else {
                        this._zoomQueue = []
                    }
                },
                getMagicOption: function() {
                    var r, o;
                    if (this._magicType[E.CHART_TYPE_LINE] || this._magicType[E.CHART_TYPE_BAR]) {
                        for (var s = this._magicType[E.CHART_TYPE_LINE] ? !1 : !0, m = 0, l = this.option.series.length; l > m; m++) {
                            o = this.option.series[m].type,
                            (o == E.CHART_TYPE_LINE || o == E.CHART_TYPE_BAR) && (r = this.option.xAxis instanceof Array ? this.option.xAxis[this.option.series[m].xAxisIndex || 0] : this.option.xAxis,
                            r && "category" === (r.type || "category") && (r.boundaryGap = s ? !0 : r.__boundaryGap),
                            r = this.option.yAxis instanceof Array ? this.option.yAxis[this.option.series[m].yAxisIndex || 0] : this.option.yAxis,
                            r && "category" === r.type && (r.boundaryGap = s ? !0 : r.__boundaryGap))
                        }
                        this._defaultMagic(E.CHART_TYPE_LINE, E.CHART_TYPE_BAR)
                    }
                    if (this._defaultMagic(E.CHART_TYPE_CHORD, E.CHART_TYPE_FORCE),
                    this._defaultMagic(E.CHART_TYPE_PIE, E.CHART_TYPE_FUNNEL),
                    this._magicType[v] || this._magicType[x]) {
                        for (var m = 0, l = this.option.series.length; l > m; m++) {
                            this._magicType[v] ? (this.option.series[m].stack = "_ECHARTS_STACK_KENER_2014_",
                            o = v) : this._magicType[x] && (this.option.series[m].stack = null ,
                            o = x),
                            this._featureOption[o + "Chart"] && y.merge(this.option.series[m], this._featureOption[o + "Chart"] || {}, !0)
                        }
                    }
                    return this.option
                },
                _defaultMagic: function(r, o) {
                    if (this._magicType[r] || this._magicType[o]) {
                        for (var s = 0, m = this.option.series.length; m > s; s++) {
                            var l = this.option.series[s].type;
                            (l == r || l == o) && (this.option.series[s].type = this._magicType[r] ? r : o,
                            this.option.series[s].itemStyle = y.clone(this.option.series[s].__itemStyle),
                            l = this.option.series[s].type,
                            this._featureOption[l + "Chart"] && y.merge(this.option.series[s], this._featureOption[l + "Chart"] || {}, !0))
                        }
                    }
                },
                silence: function(i) {
                    this._isSilence = i
                },
                resize: function() {
                    this._resetMark(),
                    this.clear(),
                    this.option && this.option.toolbox && this.option.toolbox.show && this._buildShape(),
                    this._dataView && this._dataView.resize()
                },
                hideDataView: function() {
                    this._dataView && this._dataView.hide()
                },
                clear: function(i) {
                    this.zr && (this.zr.delShape(this.shapeList),
                    this.shapeList = [],
                    i || (this.zr.delShape(this._markShapeList),
                    this._markShapeList = []))
                },
                onbeforDispose: function() {
                    this._dataView && (this._dataView.dispose(),
                    this._dataView = null ),
                    this._markShapeList = null 
                },
                refresh: function(i) {
                    i && (this._resetMark(),
                    this._resetZoom(),
                    i.toolbox = this.reformOption(i.toolbox),
                    this.option = i,
                    this.clear(!0),
                    i.toolbox.show && this._buildShape(),
                    this.hideDataView())
                }
            },
            y.inherits(D, u),
            B("../component").define("toolbox", D),
            D
        }
        ),
        k("echarts/component", [], function() {
            var l = {}
              , i = {};
            return l.define = function(m, e) {
                return i[m] = e,
                l
            }
            ,
            l.get = function(m) {
                return i[m]
            }
            ,
            l
        }
        ),
        k("echarts/component/title", ["require", "./base", "zrender/shape/Text", "zrender/shape/Rectangle", "../config", "zrender/tool/util", "zrender/tool/area", "zrender/tool/color", "../component"], function(w) {
            function y(s, r, n, l, A) {
                q.call(this, s, r, n, l, A),
                this.refresh(l)
            }
            var q = w("./base")
              , v = w("zrender/shape/Text")
              , x = w("zrender/shape/Rectangle")
              , p = w("../config");
            p.title = {
                zlevel: 0,
                z: 6,
                show: !0,
                text: "",
                subtext: "",
                x: "left",
                y: "top",
                backgroundColor: "rgba(0,0,0,0)",
                borderColor: "#ccc",
                borderWidth: 0,
                padding: 5,
                itemGap: 5,
                textStyle: {
                    fontSize: 18,
                    fontWeight: "bolder",
                    color: "#333"
                },
                subtextStyle: {
                    color: "#aaa"
                }
            };
            var m = w("zrender/tool/util")
              , z = w("zrender/tool/area")
              , u = w("zrender/tool/color");
            return y.prototype = {
                type: p.COMPONENT_TYPE_TITLE,
                _buildShape: function() {
                    if (this.titleOption.show) {
                        this._itemGroupLocation = this._getItemGroupLocation(),
                        this._buildBackground(),
                        this._buildItem();
                        for (var l = 0, i = this.shapeList.length; i > l; l++) {
                            this.zr.addShape(this.shapeList[l])
                        }
                    }
                },
                _buildItem: function() {
                    var G = this.titleOption.text
                      , K = this.titleOption.link
                      , B = this.titleOption.target
                      , J = this.titleOption.subtext
                      , A = this.titleOption.sublink
                      , i = this.titleOption.subtarget
                      , L = this.getFont(this.titleOption.textStyle)
                      , F = this.getFont(this.titleOption.subtextStyle)
                      , D = this._itemGroupLocation.x
                      , C = this._itemGroupLocation.y
                      , E = this._itemGroupLocation.width
                      , H = this._itemGroupLocation.height
                      , l = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            y: C,
                            color: this.titleOption.textStyle.color,
                            text: G,
                            textFont: L,
                            textBaseline: "top"
                        },
                        highlightStyle: {
                            color: u.lift(this.titleOption.textStyle.color, 1),
                            brushType: "fill"
                        },
                        hoverable: !1
                    };
                    K && (l.hoverable = !0,
                    l.clickable = !0,
                    l.onclick = function() {
                        B && "self" == B ? window.location = K : window.open(K)
                    }
                    );
                    var I = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            y: C + H,
                            color: this.titleOption.subtextStyle.color,
                            text: J,
                            textFont: F,
                            textBaseline: "bottom"
                        },
                        highlightStyle: {
                            color: u.lift(this.titleOption.subtextStyle.color, 1),
                            brushType: "fill"
                        },
                        hoverable: !1
                    };
                    switch (A && (I.hoverable = !0,
                    I.clickable = !0,
                    I.onclick = function() {
                        i && "self" == i ? window.location = A : window.open(A)
                    }
                    ),
                    this.titleOption.x) {
                    case "center":
                        l.style.x = I.style.x = D + E / 2,
                        l.style.textAlign = I.style.textAlign = "center";
                        break;
                    case "left":
                        l.style.x = I.style.x = D,
                        l.style.textAlign = I.style.textAlign = "left";
                        break;
                    case "right":
                        l.style.x = I.style.x = D + E,
                        l.style.textAlign = I.style.textAlign = "right";
                        break;
                    default:
                        D = this.titleOption.x - 0,
                        D = isNaN(D) ? 0 : D,
                        l.style.x = I.style.x = D
                    }
                    this.titleOption.textAlign && (l.style.textAlign = I.style.textAlign = this.titleOption.textAlign),
                    this.shapeList.push(new v(l)),
                    "" !== J && this.shapeList.push(new v(I))
                },
                _buildBackground: function() {
                    var i = this.reformCssArray(this.titleOption.padding);
                    this.shapeList.push(new x({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        hoverable: !1,
                        style: {
                            x: this._itemGroupLocation.x - i[3],
                            y: this._itemGroupLocation.y - i[0],
                            width: this._itemGroupLocation.width + i[3] + i[1],
                            height: this._itemGroupLocation.height + i[0] + i[2],
                            brushType: 0 === this.titleOption.borderWidth ? "fill" : "both",
                            color: this.titleOption.backgroundColor,
                            strokeColor: this.titleOption.borderColor,
                            lineWidth: this.titleOption.borderWidth
                        }
                    }))
                },
                _getItemGroupLocation: function() {
                    var H, J = this.reformCssArray(this.titleOption.padding), B = this.titleOption.text, F = this.titleOption.subtext, I = this.getFont(this.titleOption.textStyle), A = this.getFont(this.titleOption.subtextStyle), s = Math.max(z.getTextWidth(B, I), z.getTextWidth(F, A)), E = z.getTextHeight(B, I) + ("" === F ? 0 : this.titleOption.itemGap + z.getTextHeight(F, A)), G = this.zr.getWidth();
                    switch (this.titleOption.x) {
                    case "center":
                        H = Math.floor((G - s) / 2);
                        break;
                    case "left":
                        H = J[3] + this.titleOption.borderWidth;
                        break;
                    case "right":
                        H = G - s - J[1] - this.titleOption.borderWidth;
                        break;
                    default:
                        H = this.titleOption.x - 0,
                        H = isNaN(H) ? 0 : H
                    }
                    var D, C = this.zr.getHeight();
                    switch (this.titleOption.y) {
                    case "top":
                        D = J[0] + this.titleOption.borderWidth;
                        break;
                    case "bottom":
                        D = C - E - J[2] - this.titleOption.borderWidth;
                        break;
                    case "center":
                        D = Math.floor((C - E) / 2);
                        break;
                    default:
                        D = this.titleOption.y - 0,
                        D = isNaN(D) ? 0 : D
                    }
                    return {
                        x: H,
                        y: D,
                        width: s,
                        height: E
                    }
                },
                refresh: function(i) {
                    i && (this.option = i,
                    this.option.title = this.reformOption(this.option.title),
                    this.titleOption = this.option.title,
                    this.titleOption.textStyle = this.getTextStyle(this.titleOption.textStyle),
                    this.titleOption.subtextStyle = this.getTextStyle(this.titleOption.subtextStyle)),
                    this.clear(),
                    this._buildShape()
                }
            },
            m.inherits(y, q),
            w("../component").define("title", y),
            y
        }
        ),
        k("echarts/component/tooltip", ["require", "./base", "../util/shape/Cross", "zrender/shape/Line", "zrender/shape/Rectangle", "../config", "../util/ecData", "zrender/config", "zrender/tool/event", "zrender/tool/area", "zrender/tool/color", "zrender/tool/util", "zrender/shape/Base", "../component"], function(D) {
            function G(I, m, J, p, n) {
                w.call(this, I, m, J, p, n),
                this.dom = n.dom;
                var i = this;
                i._onmousemove = function(l) {
                    return i.__onmousemove(l)
                }
                ,
                i._onglobalout = function(l) {
                    return i.__onglobalout(l)
                }
                ,
                this.zr.on(C.EVENT.MOUSEMOVE, i._onmousemove),
                this.zr.on(C.EVENT.GLOBALOUT, i._onglobalout),
                i._hide = function(l) {
                    return i.__hide(l)
                }
                ,
                i._tryShow = function(l) {
                    return i.__tryShow(l)
                }
                ,
                i._refixed = function(l) {
                    return i.__refixed(l)
                }
                ,
                i._setContent = function(o, l) {
                    return i.__setContent(o, l)
                }
                ,
                this._tDom = this._tDom || document.createElement("div"),
                this._tDom.onselectstart = function() {
                    return !1
                }
                ,
                this._tDom.onmouseover = function() {
                    i._mousein = !0
                }
                ,
                this._tDom.onmouseout = function() {
                    i._mousein = !1
                }
                ,
                this._tDom.className = "echarts-tooltip",
                this._tDom.style.position = "absolute",
                this.hasAppend = !1,
                this._axisLineShape && this.zr.delShape(this._axisLineShape.id),
                this._axisLineShape = new F({
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase(),
                    invisible: !0,
                    hoverable: !1
                }),
                this.shapeList.push(this._axisLineShape),
                this.zr.addShape(this._axisLineShape),
                this._axisShadowShape && this.zr.delShape(this._axisShadowShape.id),
                this._axisShadowShape = new F({
                    zlevel: this.getZlevelBase(),
                    z: 1,
                    invisible: !0,
                    hoverable: !1
                }),
                this.shapeList.push(this._axisShadowShape),
                this.zr.addShape(this._axisShadowShape),
                this._axisCrossShape && this.zr.delShape(this._axisCrossShape.id),
                this._axisCrossShape = new B({
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase(),
                    invisible: !0,
                    hoverable: !1
                }),
                this.shapeList.push(this._axisCrossShape),
                this.zr.addShape(this._axisCrossShape),
                this.showing = !1,
                this.refresh(p)
            }
            var w = D("./base")
              , B = D("../util/shape/Cross")
              , F = D("zrender/shape/Line")
              , v = D("zrender/shape/Rectangle")
              , q = new v({})
              , H = D("../config");
            H.tooltip = {
                zlevel: 1,
                z: 8,
                show: !0,
                showContent: !0,
                trigger: "item",
                islandFormatter: "{a} <br/>{b} : {c}",
                showDelay: 20,
                hideDelay: 100,
                transitionDuration: 0.4,
                enterable: !1,
                backgroundColor: "rgba(0,0,0,0.7)",
                borderColor: "#333",
                borderRadius: 4,
                borderWidth: 0,
                padding: 5,
                axisPointer: {
                    type: "line",
                    lineStyle: {
                        color: "#48b",
                        width: 2,
                        type: "solid"
                    },
                    crossStyle: {
                        color: "#1e90ff",
                        width: 1,
                        type: "dashed"
                    },
                    shadowStyle: {
                        color: "rgba(150,150,150,0.3)",
                        width: "auto",
                        type: "default"
                    }
                },
                textStyle: {
                    color: "#fff"
                }
            };
            var A = D("../util/ecData")
              , C = D("zrender/config")
              , y = D("zrender/tool/event")
              , x = D("zrender/tool/area")
              , z = D("zrender/tool/color")
              , E = D("zrender/tool/util")
              , u = D("zrender/shape/Base");
            return G.prototype = {
                type: H.COMPONENT_TYPE_TOOLTIP,
                _gCssText: "position:absolute;display:block;border-style:solid;white-space:nowrap;",
                _style: function(p) {
                    if (!p) {
                        return ""
                    }
                    var o = [];
                    if (p.transitionDuration) {
                        var r = "left " + p.transitionDuration + "s,top " + p.transitionDuration + "s";
                        o.push("transition:" + r),
                        o.push("-moz-transition:" + r),
                        o.push("-webkit-transition:" + r),
                        o.push("-o-transition:" + r)
                    }
                    p.backgroundColor && (o.push("background-Color:" + z.toHex(p.backgroundColor)),
                    o.push("filter:alpha(opacity=70)"),
                    o.push("background-Color:" + p.backgroundColor)),
                    null  != p.borderWidth && o.push("border-width:" + p.borderWidth + "px"),
                    null  != p.borderColor && o.push("border-color:" + p.borderColor),
                    null  != p.borderRadius && (o.push("border-radius:" + p.borderRadius + "px"),
                    o.push("-moz-border-radius:" + p.borderRadius + "px"),
                    o.push("-webkit-border-radius:" + p.borderRadius + "px"),
                    o.push("-o-border-radius:" + p.borderRadius + "px"));
                    var m = p.textStyle;
                    m && (m.color && o.push("color:" + m.color),
                    m.decoration && o.push("text-decoration:" + m.decoration),
                    m.align && o.push("text-align:" + m.align),
                    m.fontFamily && o.push("font-family:" + m.fontFamily),
                    m.fontSize && o.push("font-size:" + m.fontSize + "px"),
                    m.fontSize && o.push("line-height:" + Math.round(3 * m.fontSize / 2) + "px"),
                    m.fontStyle && o.push("font-style:" + m.fontStyle),
                    m.fontWeight && o.push("font-weight:" + m.fontWeight));
                    var l = p.padding;
                    return null  != l && (l = this.reformCssArray(l),
                    o.push("padding:" + l[0] + "px " + l[1] + "px " + l[2] + "px " + l[3] + "px")),
                    o = o.join(";") + ";"
                },
                __hide: function() {
                    this._lastDataIndex = -1,
                    this._lastSeriesIndex = -1,
                    this._lastItemTriggerId = -1,
                    this._tDom && (this._tDom.style.display = "none");
                    var i = !1;
                    this._axisLineShape.invisible || (this._axisLineShape.invisible = !0,
                    this.zr.modShape(this._axisLineShape.id),
                    i = !0),
                    this._axisShadowShape.invisible || (this._axisShadowShape.invisible = !0,
                    this.zr.modShape(this._axisShadowShape.id),
                    i = !0),
                    this._axisCrossShape.invisible || (this._axisCrossShape.invisible = !0,
                    this.zr.modShape(this._axisCrossShape.id),
                    i = !0),
                    this._lastTipShape && this._lastTipShape.tipShape.length > 0 && (this.zr.delShape(this._lastTipShape.tipShape),
                    this._lastTipShape = !1,
                    this.shapeList.length = 2),
                    i && this.zr.refreshNextFrame(),
                    this.showing = !1
                },
                _show: function(r, p, I, m) {
                    var l = this._tDom.offsetHeight
                      , s = this._tDom.offsetWidth;
                    r && ("function" == typeof r && (r = r([p, I])),
                    r instanceof Array && (p = r[0],
                    I = r[1])),
                    p + s > this._zrWidth && (p -= s + 40),
                    I + l > this._zrHeight && (I -= l - 20),
                    20 > I && (I = 0),
                    this._tDom.style.cssText = this._gCssText + this._defaultCssText + (m ? m : "") + "left:" + p + "px;top:" + I + "px;",
                    (10 > l || 10 > s) && setTimeout(this._refixed, 20),
                    this.showing = !0
                },
                __refixed: function() {
                    if (this._tDom) {
                        var l = ""
                          , i = this._tDom.offsetHeight
                          , m = this._tDom.offsetWidth;
                        this._tDom.offsetLeft + m > this._zrWidth && (l += "left:" + (this._zrWidth - m - 20) + "px;"),
                        this._tDom.offsetTop + i > this._zrHeight && (l += "top:" + (this._zrHeight - i - 10) + "px;"),
                        "" !== l && (this._tDom.style.cssText += l)
                    }
                },
                __tryShow: function() {
                    var o, m;
                    if (this._curTarget) {
                        if ("island" === this._curTarget._type && this.option.tooltip.show) {
                            return this._showItemTrigger(),
                            void 0
                        }
                        var p = A.get(this._curTarget, "series")
                          , l = A.get(this._curTarget, "data");
                        o = this.deepQuery([l, p, this.option], "tooltip.show"),
                        null  != p && null  != l && o ? (m = this.deepQuery([l, p, this.option], "tooltip.trigger"),
                        "axis" === m ? this._showAxisTrigger(p.xAxisIndex, p.yAxisIndex, A.get(this._curTarget, "dataIndex")) : this._showItemTrigger()) : (clearTimeout(this._hidingTicket),
                        clearTimeout(this._showingTicket),
                        this._hidingTicket = setTimeout(this._hide, this._hideDelay))
                    } else {
                        this._findPolarTrigger() || this._findAxisTrigger()
                    }
                },
                _findAxisTrigger: function() {
                    if (!this.component.xAxis || !this.component.yAxis) {
                        return this._hidingTicket = setTimeout(this._hide, this._hideDelay),
                        void 0
                    }
                    for (var p, o, r = this.option.series, m = 0, l = r.length; l > m; m++) {
                        if ("axis" === this.deepQuery([r[m], this.option], "tooltip.trigger")) {
                            return p = r[m].xAxisIndex || 0,
                            o = r[m].yAxisIndex || 0,
                            this.component.xAxis.getAxis(p) && this.component.xAxis.getAxis(p).type === H.COMPONENT_TYPE_AXIS_CATEGORY ? (this._showAxisTrigger(p, o, this._getNearestDataIndex("x", this.component.xAxis.getAxis(p))),
                            void 0) : this.component.yAxis.getAxis(o) && this.component.yAxis.getAxis(o).type === H.COMPONENT_TYPE_AXIS_CATEGORY ? (this._showAxisTrigger(p, o, this._getNearestDataIndex("y", this.component.yAxis.getAxis(o))),
                            void 0) : (this._showAxisTrigger(p, o, -1),
                            void 0)
                        }
                    }
                    "cross" === this.option.tooltip.axisPointer.type && this._showAxisTrigger(-1, -1, -1)
                },
                _findPolarTrigger: function() {
                    if (!this.component.polar) {
                        return !1
                    }
                    var o, m = y.getX(this._event), p = y.getY(this._event), l = this.component.polar.getNearestIndex([m, p]);
                    return l ? (o = l.valueIndex,
                    l = l.polarIndex) : l = -1,
                    -1 != l ? this._showPolarTrigger(l, o) : !1
                },
                _getNearestDataIndex: function(O, Q) {
                    var I = -1
                      , M = y.getX(this._event)
                      , P = y.getY(this._event);
                    if ("x" === O) {
                        for (var p, m, R = this.component.grid.getXend(), L = Q.getCoordByIndex(I); R > L && (m = L,
                        M >= L); ) {
                            p = L,
                            L = Q.getCoordByIndex(++I)
                        }
                        return 0 >= I ? I = 0 : m - M >= M - p ? I -= 1 : null  == Q.getNameByIndex(I) && (I -= 1),
                        I
                    }
                    for (var N, J, K = this.component.grid.getY(), L = Q.getCoordByIndex(I); L > K && (N = L,
                    L >= P); ) {
                        J = L,
                        L = Q.getCoordByIndex(++I)
                    }
                    return 0 >= I ? I = 0 : P - N >= J - P ? I -= 1 : null  == Q.getNameByIndex(I) && (I -= 1),
                    I
                },
                _showAxisTrigger: function(Y, L, P) {
                    if (!this._event.connectTrigger && this.messageCenter.dispatch(H.EVENT.TOOLTIP_IN_GRID, this._event, null , this.myChart),
                    null  == this.component.xAxis || null  == this.component.yAxis || null  == Y || null  == L) {
                        return clearTimeout(this._hidingTicket),
                        clearTimeout(this._showingTicket),
                        this._hidingTicket = setTimeout(this._hide, this._hideDelay),
                        void 0
                    }
                    var S, ac, O, M, Q = this.option.series, T = [], m = [], s = "";
                    if ("axis" === this.option.tooltip.trigger) {
                        if (!this.option.tooltip.show) {
                            return
                        }
                        ac = this.option.tooltip.formatter,
                        O = this.option.tooltip.position
                    }
                    var Z, N, aa = -1 != Y && this.component.xAxis.getAxis(Y).type === H.COMPONENT_TYPE_AXIS_CATEGORY ? "xAxis" : -1 != L && this.component.yAxis.getAxis(L).type === H.COMPONENT_TYPE_AXIS_CATEGORY ? "yAxis" : !1;
                    if (aa) {
                        var K = "xAxis" == aa ? Y : L;
                        S = this.component[aa].getAxis(K);
                        for (var I = 0, W = Q.length; W > I; I++) {
                            this._isSelected(Q[I].name) && Q[I][aa + "Index"] === K && "axis" === this.deepQuery([Q[I], this.option], "tooltip.trigger") && (M = this.query(Q[I], "tooltip.showContent") || M,
                            ac = this.query(Q[I], "tooltip.formatter") || ac,
                            O = this.query(Q[I], "tooltip.position") || O,
                            s += this._style(this.query(Q[I], "tooltip")),
                            null  != Q[I].stack && "xAxis" == aa ? (T.unshift(Q[I]),
                            m.unshift(I)) : (T.push(Q[I]),
                            m.push(I)))
                        }
                        this.messageCenter.dispatch(H.EVENT.TOOLTIP_HOVER, this._event, {
                            seriesIndex: m,
                            dataIndex: P
                        }, this.myChart);
                        var ab;
                        "xAxis" == aa ? (Z = this.subPixelOptimize(S.getCoordByIndex(P), this._axisLineWidth),
                        N = y.getY(this._event),
                        ab = [Z, this.component.grid.getY(), Z, this.component.grid.getYend()]) : (Z = y.getX(this._event),
                        N = this.subPixelOptimize(S.getCoordByIndex(P), this._axisLineWidth),
                        ab = [this.component.grid.getX(), N, this.component.grid.getXend(), N]),
                        this._styleAxisPointer(T, ab[0], ab[1], ab[2], ab[3], S.getGap(), Z, N)
                    } else {
                        Z = y.getX(this._event),
                        N = y.getY(this._event),
                        this._styleAxisPointer(Q, this.component.grid.getX(), N, this.component.grid.getXend(), N, 0, Z, N),
                        P >= 0 ? this._showItemTrigger(!0) : (clearTimeout(this._hidingTicket),
                        clearTimeout(this._showingTicket),
                        this._tDom.style.display = "none")
                    }
                    if (T.length > 0) {
                        if (this._lastItemTriggerId = -1,
                        this._lastDataIndex != P || this._lastSeriesIndex != m[0]) {
                            this._lastDataIndex = P,
                            this._lastSeriesIndex = m[0];
                            var X, R;
                            if ("function" == typeof ac) {
                                for (var J = [], I = 0, W = T.length; W > I; I++) {
                                    X = T[I].data[P],
                                    R = this.getDataFromOption(X, "-"),
                                    J.push({
                                        seriesIndex: m[I],
                                        seriesName: T[I].name || "",
                                        series: T[I],
                                        dataIndex: P,
                                        data: X,
                                        name: S.getNameByIndex(P),
                                        value: R,
                                        0: T[I].name || "",
                                        1: S.getNameByIndex(P),
                                        2: R,
                                        3: X
                                    })
                                }
                                this._curTicket = "axis:" + P,
                                this._tDom.innerHTML = ac.call(this.myChart, J, this._curTicket, this._setContent)
                            } else {
                                if ("string" == typeof ac) {
                                    this._curTicket = 0 / 0,
                                    ac = ac.replace("{a}", "{a0}").replace("{b}", "{b0}").replace("{c}", "{c0}");
                                    for (var I = 0, W = T.length; W > I; I++) {
                                        ac = ac.replace("{a" + I + "}", this._encodeHTML(T[I].name || "")),
                                        ac = ac.replace("{b" + I + "}", this._encodeHTML(S.getNameByIndex(P))),
                                        X = T[I].data[P],
                                        X = this.getDataFromOption(X, "-"),
                                        ac = ac.replace("{c" + I + "}", X instanceof Array ? X : this.numAddCommas(X))
                                    }
                                    this._tDom.innerHTML = ac
                                } else {
                                    this._curTicket = 0 / 0,
                                    ac = this._encodeHTML(S.getNameByIndex(P));
                                    for (var I = 0, W = T.length; W > I; I++) {
                                        ac += "<br/>" + this._encodeHTML(T[I].name || "") + " : ",
                                        X = T[I].data[P],
                                        X = this.getDataFromOption(X, "-"),
                                        ac += X instanceof Array ? X : this.numAddCommas(X)
                                    }
                                    this._tDom.innerHTML = ac
                                }
                            }
                        }
                        if (M === !1 || !this.option.tooltip.showContent) {
                            return
                        }
                        this.hasAppend || (this._tDom.style.left = this._zrWidth / 2 + "px",
                        this._tDom.style.top = this._zrHeight / 2 + "px",
                        this.dom.firstChild.appendChild(this._tDom),
                        this.hasAppend = !0),
                        this._show(O, Z + 10, N + 10, s)
                    }
                },
                _showPolarTrigger: function(X, L) {
                    if (null  == this.component.polar || null  == X || null  == L || 0 > L) {
                        return !1
                    }
                    var Q, S, aa, P = this.option.series, N = [], M = [], R = "";
                    if ("axis" === this.option.tooltip.trigger) {
                        if (!this.option.tooltip.show) {
                            return !1
                        }
                        Q = this.option.tooltip.formatter,
                        S = this.option.tooltip.position
                    }
                    for (var T = this.option.polar[X].indicator[L].text, m = 0, I = P.length; I > m; m++) {
                        this._isSelected(P[m].name) && P[m].polarIndex === X && "axis" === this.deepQuery([P[m], this.option], "tooltip.trigger") && (aa = this.query(P[m], "tooltip.showContent") || aa,
                        Q = this.query(P[m], "tooltip.formatter") || Q,
                        S = this.query(P[m], "tooltip.position") || S,
                        R += this._style(this.query(P[m], "tooltip")),
                        N.push(P[m]),
                        M.push(m))
                    }
                    if (N.length > 0) {
                        for (var Y, O, Z, K = [], m = 0, I = N.length; I > m; m++) {
                            Y = N[m].data;
                            for (var J = 0, W = Y.length; W > J; J++) {
                                O = Y[J],
                                this._isSelected(O.name) && (O = null  != O ? O : {
                                    name: "",
                                    value: {
                                        dataIndex: "-"
                                    }
                                },
                                Z = this.getDataFromOption(O.value[L]),
                                K.push({
                                    seriesIndex: M[m],
                                    seriesName: N[m].name || "",
                                    series: N[m],
                                    dataIndex: L,
                                    data: O,
                                    name: O.name,
                                    indicator: T,
                                    value: Z,
                                    0: N[m].name || "",
                                    1: O.name,
                                    2: Z,
                                    3: T
                                }))
                            }
                        }
                        if (0 >= K.length) {
                            return
                        }
                        if (this._lastItemTriggerId = -1,
                        this._lastDataIndex != L || this._lastSeriesIndex != M[0]) {
                            if (this._lastDataIndex = L,
                            this._lastSeriesIndex = M[0],
                            "function" == typeof Q) {
                                this._curTicket = "axis:" + L,
                                this._tDom.innerHTML = Q.call(this.myChart, K, this._curTicket, this._setContent)
                            } else {
                                if ("string" == typeof Q) {
                                    Q = Q.replace("{a}", "{a0}").replace("{b}", "{b0}").replace("{c}", "{c0}").replace("{d}", "{d0}");
                                    for (var m = 0, I = K.length; I > m; m++) {
                                        Q = Q.replace("{a" + m + "}", this._encodeHTML(K[m].seriesName)),
                                        Q = Q.replace("{b" + m + "}", this._encodeHTML(K[m].name)),
                                        Q = Q.replace("{c" + m + "}", this.numAddCommas(K[m].value)),
                                        Q = Q.replace("{d" + m + "}", this._encodeHTML(K[m].indicator))
                                    }
                                    this._tDom.innerHTML = Q
                                } else {
                                    Q = this._encodeHTML(K[0].name) + "<br/>" + this._encodeHTML(K[0].indicator) + " : " + this.numAddCommas(K[0].value);
                                    for (var m = 1, I = K.length; I > m; m++) {
                                        Q += "<br/>" + this._encodeHTML(K[m].name) + "<br/>",
                                        Q += this._encodeHTML(K[m].indicator) + " : " + this.numAddCommas(K[m].value)
                                    }
                                    this._tDom.innerHTML = Q
                                }
                            }
                        }
                        if (aa === !1 || !this.option.tooltip.showContent) {
                            return
                        }
                        return this.hasAppend || (this._tDom.style.left = this._zrWidth / 2 + "px",
                        this._tDom.style.top = this._zrHeight / 2 + "px",
                        this.dom.firstChild.appendChild(this._tDom),
                        this.hasAppend = !0),
                        this._show(S, y.getX(this._event), y.getY(this._event), R),
                        !0
                    }
                },
                _showItemTrigger: function(O) {
                    if (this._curTarget) {
                        var X, I, L, T = A.get(this._curTarget, "series"), s = A.get(this._curTarget, "seriesIndex"), l = A.get(this._curTarget, "data"), M = A.get(this._curTarget, "dataIndex"), J = A.get(this._curTarget, "name"), K = A.get(this._curTarget, "value"), P = A.get(this._curTarget, "special"), m = A.get(this._curTarget, "special2"), Q = [l, T, this.option], W = "";
                        if ("island" != this._curTarget._type) {
                            var S = O ? "axis" : "item";
                            this.option.tooltip.trigger === S && (X = this.option.tooltip.formatter,
                            I = this.option.tooltip.position),
                            this.query(T, "tooltip.trigger") === S && (L = this.query(T, "tooltip.showContent") || L,
                            X = this.query(T, "tooltip.formatter") || X,
                            I = this.query(T, "tooltip.position") || I,
                            W += this._style(this.query(T, "tooltip"))),
                            L = this.query(l, "tooltip.showContent") || L,
                            X = this.query(l, "tooltip.formatter") || X,
                            I = this.query(l, "tooltip.position") || I,
                            W += this._style(this.query(l, "tooltip"))
                        } else {
                            this._lastItemTriggerId = 0 / 0,
                            L = this.deepQuery(Q, "tooltip.showContent"),
                            X = this.deepQuery(Q, "tooltip.islandFormatter"),
                            I = this.deepQuery(Q, "tooltip.islandPosition")
                        }
                        this._lastDataIndex = -1,
                        this._lastSeriesIndex = -1,
                        this._lastItemTriggerId !== this._curTarget.id && (this._lastItemTriggerId = this._curTarget.id,
                        "function" == typeof X ? (this._curTicket = (T.name || "") + ":" + M,
                        this._tDom.innerHTML = X.call(this.myChart, {
                            seriesIndex: s,
                            seriesName: T.name || "",
                            series: T,
                            dataIndex: M,
                            data: l,
                            name: J,
                            value: K,
                            percent: P,
                            indicator: P,
                            value2: m,
                            indicator2: m,
                            0: T.name || "",
                            1: J,
                            2: K,
                            3: P,
                            4: m,
                            5: l,
                            6: s,
                            7: M
                        }, this._curTicket, this._setContent)) : "string" == typeof X ? (this._curTicket = 0 / 0,
                        X = X.replace("{a}", "{a0}").replace("{b}", "{b0}").replace("{c}", "{c0}"),
                        X = X.replace("{a0}", this._encodeHTML(T.name || "")).replace("{b0}", this._encodeHTML(J)).replace("{c0}", K instanceof Array ? K : this.numAddCommas(K)),
                        X = X.replace("{d}", "{d0}").replace("{d0}", P || ""),
                        X = X.replace("{e}", "{e0}").replace("{e0}", A.get(this._curTarget, "special2") || ""),
                        this._tDom.innerHTML = X) : (this._curTicket = 0 / 0,
                        this._tDom.innerHTML = T.type === H.CHART_TYPE_RADAR && P ? this._itemFormatter.radar.call(this, T, J, K, P) : T.type === H.CHART_TYPE_EVENTRIVER ? this._itemFormatter.eventRiver.call(this, T, J, K, l) : "" + (null  != T.name ? this._encodeHTML(T.name) + "<br/>" : "") + ("" === J ? "" : this._encodeHTML(J) + " : ") + (K instanceof Array ? K : this.numAddCommas(K))));
                        var N = y.getX(this._event)
                          , R = y.getY(this._event);
                        this.deepQuery(Q, "tooltip.axisPointer.show") && this.component.grid ? this._styleAxisPointer([T], this.component.grid.getX(), R, this.component.grid.getXend(), R, 0, N, R) : this._hide(),
                        L !== !1 && this.option.tooltip.showContent && (this.hasAppend || (this._tDom.style.left = this._zrWidth / 2 + "px",
                        this._tDom.style.top = this._zrHeight / 2 + "px",
                        this.dom.firstChild.appendChild(this._tDom),
                        this.hasAppend = !0),
                        this._show(I, N + 20, R - 20, W))
                    }
                },
                _itemFormatter: {
                    radar: function(r, p, I, m) {
                        var l = "";
                        l += this._encodeHTML("" === p ? r.name || "" : p),
                        l += "" === l ? "" : "<br />";
                        for (var s = 0; m.length > s; s++) {
                            l += this._encodeHTML(m[s].text) + " : " + this.numAddCommas(I[s]) + "<br />"
                        }
                        return l
                    },
                    chord: function(I, p, K, m, l) {
                        if (null  == l) {
                            return this._encodeHTML(p) + " (" + this.numAddCommas(K) + ")"
                        }
                        var J = this._encodeHTML(p)
                          , s = this._encodeHTML(m);
                        return "" + (null  != I.name ? this._encodeHTML(I.name) + "<br/>" : "") + J + " -> " + s + " (" + this.numAddCommas(K) + ")<br />" + s + " -> " + J + " (" + this.numAddCommas(l) + ")"
                    },
                    eventRiver: function(I, p, K, m) {
                        var l = "";
                        l += this._encodeHTML("" === I.name ? "" : I.name + " : "),
                        l += this._encodeHTML(p),
                        l += "" === l ? "" : "<br />",
                        m = m.evolution;
                        for (var J = 0, s = m.length; s > J; J++) {
                            l += '<div style="padding-top:5px;">',
                            m[J].detail && (m[J].detail.img && (l += '<img src="' + m[J].detail.img + '" style="float:left;width:40px;height:40px;">'),
                            l += '<div style="margin-left:45px;">' + m[J].time + "<br/>",
                            l += '<a href="' + m[J].detail.link + '" target="_blank">',
                            l += m[J].detail.text + "</a></div>",
                            l += "</div>")
                        }
                        return l
                    }
                },
                _styleAxisPointer: function(Z, M, R, W, ac, Q, O, N) {
                    if (Z.length > 0) {
                        var T, X, S = this.option.tooltip.axisPointer, I = S.type, J = {
                            line: {},
                            cross: {},
                            shadow: {}
                        };
                        for (var aa in J) {
                            J[aa].color = S[aa + "Style"].color,
                            J[aa].width = S[aa + "Style"].width,
                            J[aa].type = S[aa + "Style"].type
                        }
                        for (var P = 0, ab = Z.length; ab > P; P++) {
                            T = Z[P],
                            X = this.query(T, "tooltip.axisPointer.type"),
                            I = X || I,
                            X && (J[X].color = this.query(T, "tooltip.axisPointer." + X + "Style.color") || J[X].color,
                            J[X].width = this.query(T, "tooltip.axisPointer." + X + "Style.width") || J[X].width,
                            J[X].type = this.query(T, "tooltip.axisPointer." + X + "Style.type") || J[X].type)
                        }
                        if ("line" === I) {
                            var L = J.line.width
                              , K = M == W;
                            this._axisLineShape.style = {
                                xStart: K ? this.subPixelOptimize(M, L) : M,
                                yStart: K ? R : this.subPixelOptimize(R, L),
                                xEnd: K ? this.subPixelOptimize(W, L) : W,
                                yEnd: K ? ac : this.subPixelOptimize(ac, L),
                                strokeColor: J.line.color,
                                lineWidth: L,
                                lineType: J.line.type
                            },
                            this._axisLineShape.invisible = !1,
                            this.zr.modShape(this._axisLineShape.id)
                        } else {
                            if ("cross" === I) {
                                var Y = J.cross.width;
                                this._axisCrossShape.style = {
                                    brushType: "stroke",
                                    rect: this.component.grid.getArea(),
                                    x: this.subPixelOptimize(O, Y),
                                    y: this.subPixelOptimize(N, Y),
                                    text: ("( " + this.component.xAxis.getAxis(0).getValueFromCoord(O) + " , " + this.component.yAxis.getAxis(0).getValueFromCoord(N) + " )").replace("  , ", " ").replace(" ,  ", " "),
                                    textPosition: "specific",
                                    strokeColor: J.cross.color,
                                    lineWidth: Y,
                                    lineType: J.cross.type
                                },
                                this.component.grid.getXend() - O > 100 ? (this._axisCrossShape.style.textAlign = "left",
                                this._axisCrossShape.style.textX = O + 10) : (this._axisCrossShape.style.textAlign = "right",
                                this._axisCrossShape.style.textX = O - 10),
                                N - this.component.grid.getY() > 50 ? (this._axisCrossShape.style.textBaseline = "bottom",
                                this._axisCrossShape.style.textY = N - 10) : (this._axisCrossShape.style.textBaseline = "top",
                                this._axisCrossShape.style.textY = N + 10),
                                this._axisCrossShape.invisible = !1,
                                this.zr.modShape(this._axisCrossShape.id)
                            } else {
                                "shadow" === I && ((null  == J.shadow.width || "auto" === J.shadow.width || isNaN(J.shadow.width)) && (J.shadow.width = Q),
                                M === W ? 2 > Math.abs(this.component.grid.getX() - M) ? (J.shadow.width /= 2,
                                M = W += J.shadow.width / 2) : 2 > Math.abs(this.component.grid.getXend() - M) && (J.shadow.width /= 2,
                                M = W -= J.shadow.width / 2) : R === ac && (2 > Math.abs(this.component.grid.getY() - R) ? (J.shadow.width /= 2,
                                R = ac += J.shadow.width / 2) : 2 > Math.abs(this.component.grid.getYend() - R) && (J.shadow.width /= 2,
                                R = ac -= J.shadow.width / 2)),
                                this._axisShadowShape.style = {
                                    xStart: M,
                                    yStart: R,
                                    xEnd: W,
                                    yEnd: ac,
                                    strokeColor: J.shadow.color,
                                    lineWidth: J.shadow.width
                                },
                                this._axisShadowShape.invisible = !1,
                                this.zr.modShape(this._axisShadowShape.id))
                            }
                        }
                        this.zr.refreshNextFrame()
                    }
                },
                __onmousemove: function(J) {
                    if (clearTimeout(this._hidingTicket),
                    clearTimeout(this._showingTicket),
                    !this._mousein || !this._enterable) {
                        var s = J.target
                          , L = y.getX(J.event)
                          , r = y.getY(J.event);
                        if (s) {
                            this._curTarget = s,
                            this._event = J.event,
                            this._event.zrenderX = L,
                            this._event.zrenderY = r;
                            var p;
                            if (this._needAxisTrigger && this.component.polar && -1 != (p = this.component.polar.isInside([L, r]))) {
                                for (var K = this.option.series, m = 0, I = K.length; I > m; m++) {
                                    if (K[m].polarIndex === p && "axis" === this.deepQuery([K[m], this.option], "tooltip.trigger")) {
                                        this._curTarget = null ;
                                        break
                                    }
                                }
                            }
                            this._showingTicket = setTimeout(this._tryShow, this._showDelay)
                        } else {
                            this._curTarget = !1,
                            this._event = J.event,
                            this._event.zrenderX = L,
                            this._event.zrenderY = r,
                            this._needAxisTrigger && this.component.grid && x.isInside(q, this.component.grid.getArea(), L, r) ? this._showingTicket = setTimeout(this._tryShow, this._showDelay) : this._needAxisTrigger && this.component.polar && -1 != this.component.polar.isInside([L, r]) ? this._showingTicket = setTimeout(this._tryShow, this._showDelay) : (!this._event.connectTrigger && this.messageCenter.dispatch(H.EVENT.TOOLTIP_OUT_GRID, this._event, null , this.myChart),
                            this._hidingTicket = setTimeout(this._hide, this._hideDelay))
                        }
                    }
                },
                __onglobalout: function() {
                    clearTimeout(this._hidingTicket),
                    clearTimeout(this._showingTicket),
                    this._hidingTicket = setTimeout(this._hide, this._hideDelay)
                },
                __setContent: function(l, i) {
                    this._tDom && (l === this._curTicket && (this._tDom.innerHTML = i),
                    setTimeout(this._refixed, 20))
                },
                ontooltipHover: function(o, m) {
                    if (!this._lastTipShape || this._lastTipShape && this._lastTipShape.dataIndex != o.dataIndex) {
                        this._lastTipShape && this._lastTipShape.tipShape.length > 0 && (this.zr.delShape(this._lastTipShape.tipShape),
                        this.shapeList.length = 2);
                        for (var p = 0, l = m.length; l > p; p++) {
                            m[p].zlevel = this.getZlevelBase(),
                            m[p].z = this.getZBase(),
                            m[p].style = u.prototype.getHighlightStyle(m[p].style, m[p].highlightStyle),
                            m[p].draggable = !1,
                            m[p].hoverable = !1,
                            m[p].clickable = !1,
                            m[p].ondragend = null ,
                            m[p].ondragover = null ,
                            m[p].ondrop = null ,
                            this.shapeList.push(m[p]),
                            this.zr.addShape(m[p])
                        }
                        this._lastTipShape = {
                            dataIndex: o.dataIndex,
                            tipShape: m
                        }
                    }
                },
                ondragend: function() {
                    this._hide()
                },
                onlegendSelected: function(i) {
                    this._selectedMap = i.selected
                },
                _setSelectedMap: function() {
                    this._selectedMap = this.component.legend ? E.clone(this.component.legend.getSelectedMap()) : {}
                },
                _isSelected: function(i) {
                    return null  != this._selectedMap[i] ? this._selectedMap[i] : !0
                },
                showTip: function(X) {
                    if (X) {
                        var L, P = this.option.series;
                        if (null  != X.seriesIndex) {
                            L = X.seriesIndex
                        } else {
                            for (var S = X.seriesName, ab = 0, O = P.length; O > ab; ab++) {
                                if (P[ab].name === S) {
                                    L = ab;
                                    break
                                }
                            }
                        }
                        var M = P[L];
                        if (null  != M) {
                            var Q = this.myChart.chart[M.type]
                              , l = "axis" === this.deepQuery([M, this.option], "tooltip.trigger");
                            if (Q) {
                                if (l) {
                                    var s = X.dataIndex;
                                    switch (Q.type) {
                                    case H.CHART_TYPE_LINE:
                                    case H.CHART_TYPE_BAR:
                                    case H.CHART_TYPE_K:
                                        if (null  == this.component.xAxis || null  == this.component.yAxis || s >= M.data.length) {
                                            return
                                        }
                                        var Y = M.xAxisIndex || 0
                                          , N = M.yAxisIndex || 0;
                                        this._event = this.component.xAxis.getAxis(Y).type === H.COMPONENT_TYPE_AXIS_CATEGORY ? {
                                            zrenderX: this.component.xAxis.getAxis(Y).getCoordByIndex(s),
                                            zrenderY: this.component.grid.getY() + (this.component.grid.getYend() - this.component.grid.getY()) / 4
                                        } : {
                                            zrenderX: this.component.grid.getX() + (this.component.grid.getXend() - this.component.grid.getX()) / 4,
                                            zrenderY: this.component.yAxis.getAxis(N).getCoordByIndex(s)
                                        },
                                        this._showAxisTrigger(Y, N, s);
                                        break;
                                    case H.CHART_TYPE_RADAR:
                                        if (null  == this.component.polar || s >= M.data[0].value.length) {
                                            return
                                        }
                                        var Z = M.polarIndex || 0
                                          , K = this.component.polar.getVector(Z, s, "max");
                                        this._event = {
                                            zrenderX: K[0],
                                            zrenderY: K[1]
                                        },
                                        this._showPolarTrigger(Z, s)
                                    }
                                } else {
                                    var I, T, aa = Q.shapeList;
                                    switch (Q.type) {
                                    case H.CHART_TYPE_LINE:
                                    case H.CHART_TYPE_BAR:
                                    case H.CHART_TYPE_K:
                                    case H.CHART_TYPE_SCATTER:
                                        for (var s = X.dataIndex, ab = 0, O = aa.length; O > ab; ab++) {
                                            if (null  == aa[ab]._mark && A.get(aa[ab], "seriesIndex") == L && A.get(aa[ab], "dataIndex") == s) {
                                                this._curTarget = aa[ab],
                                                I = aa[ab].style.x,
                                                T = Q.type != H.CHART_TYPE_K ? aa[ab].style.y : aa[ab].style.y[0];
                                                break
                                            }
                                        }
                                        break;
                                    case H.CHART_TYPE_RADAR:
                                        for (var s = X.dataIndex, ab = 0, O = aa.length; O > ab; ab++) {
                                            if ("polygon" === aa[ab].type && A.get(aa[ab], "seriesIndex") == L && A.get(aa[ab], "dataIndex") == s) {
                                                this._curTarget = aa[ab];
                                                var K = this.component.polar.getCenter(M.polarIndex || 0);
                                                I = K[0],
                                                T = K[1];
                                                break
                                            }
                                        }
                                        break;
                                    case H.CHART_TYPE_PIE:
                                        for (var W = X.name, ab = 0, O = aa.length; O > ab; ab++) {
                                            if ("sector" === aa[ab].type && A.get(aa[ab], "seriesIndex") == L && A.get(aa[ab], "name") == W) {
                                                this._curTarget = aa[ab];
                                                var R = this._curTarget.style
                                                  , J = (R.startAngle + R.endAngle) / 2 * Math.PI / 180;
                                                I = this._curTarget.style.x + Math.cos(J) * R.r / 1.5,
                                                T = this._curTarget.style.y - Math.sin(J) * R.r / 1.5;
                                                break
                                            }
                                        }
                                        break;
                                    case H.CHART_TYPE_MAP:
                                        for (var W = X.name, ac = M.mapType, ab = 0, O = aa.length; O > ab; ab++) {
                                            if ("text" === aa[ab].type && aa[ab]._mapType === ac && aa[ab].style._name === W) {
                                                this._curTarget = aa[ab],
                                                I = this._curTarget.style.x + this._curTarget.position[0],
                                                T = this._curTarget.style.y + this._curTarget.position[1];
                                                break
                                            }
                                        }
                                        break;
                                    case H.CHART_TYPE_CHORD:
                                        for (var W = X.name, ab = 0, O = aa.length; O > ab; ab++) {
                                            if ("sector" === aa[ab].type && A.get(aa[ab], "name") == W) {
                                                this._curTarget = aa[ab];
                                                var R = this._curTarget.style
                                                  , J = (R.startAngle + R.endAngle) / 2 * Math.PI / 180;
                                                return I = this._curTarget.style.x + Math.cos(J) * (R.r - 2),
                                                T = this._curTarget.style.y - Math.sin(J) * (R.r - 2),
                                                this.zr.trigger(C.EVENT.MOUSEMOVE, {
                                                    zrenderX: I,
                                                    zrenderY: T
                                                }),
                                                void 0
                                            }
                                        }
                                        break;
                                    case H.CHART_TYPE_FORCE:
                                        for (var W = X.name, ab = 0, O = aa.length; O > ab; ab++) {
                                            if ("circle" === aa[ab].type && A.get(aa[ab], "name") == W) {
                                                this._curTarget = aa[ab],
                                                I = this._curTarget.position[0],
                                                T = this._curTarget.position[1];
                                                break
                                            }
                                        }
                                    }
                                    null  != I && null  != T && (this._event = {
                                        zrenderX: I,
                                        zrenderY: T
                                    },
                                    this.zr.addHoverShape(this._curTarget),
                                    this.zr.refreshHover(),
                                    this._showItemTrigger())
                                }
                            }
                        }
                    }
                },
                hideTip: function() {
                    this._hide()
                },
                refresh: function(p) {
                    if (this._zrHeight = this.zr.getHeight(),
                    this._zrWidth = this.zr.getWidth(),
                    this._lastTipShape && this._lastTipShape.tipShape.length > 0 && this.zr.delShape(this._lastTipShape.tipShape),
                    this._lastTipShape = !1,
                    this.shapeList.length = 2,
                    this._lastDataIndex = -1,
                    this._lastSeriesIndex = -1,
                    this._lastItemTriggerId = -1,
                    p) {
                        this.option = p,
                        this.option.tooltip = this.reformOption(this.option.tooltip),
                        this.option.tooltip.textStyle = E.merge(this.option.tooltip.textStyle, this.ecTheme.textStyle),
                        this._needAxisTrigger = !1,
                        "axis" === this.option.tooltip.trigger && (this._needAxisTrigger = !0);
                        for (var o = this.option.series, r = 0, m = o.length; m > r; r++) {
                            if ("axis" === this.query(o[r], "tooltip.trigger")) {
                                this._needAxisTrigger = !0;
                                break
                            }
                        }
                        this._showDelay = this.option.tooltip.showDelay,
                        this._hideDelay = this.option.tooltip.hideDelay,
                        this._defaultCssText = this._style(this.option.tooltip),
                        this._setSelectedMap(),
                        this._axisLineWidth = this.option.tooltip.axisPointer.lineStyle.width,
                        this._enterable = this.option.tooltip.enterable
                    }
                    if (this.showing) {
                        var l = this;
                        setTimeout(function() {
                            l.zr.trigger(C.EVENT.MOUSEMOVE, l.zr.handler._event)
                        }
                        , 50)
                    }
                },
                onbeforDispose: function() {
                    this._lastTipShape && this._lastTipShape.tipShape.length > 0 && this.zr.delShape(this._lastTipShape.tipShape),
                    clearTimeout(this._hidingTicket),
                    clearTimeout(this._showingTicket),
                    this.zr.un(C.EVENT.MOUSEMOVE, this._onmousemove),
                    this.zr.un(C.EVENT.GLOBALOUT, this._onglobalout),
                    this.hasAppend && this.dom.firstChild && this.dom.firstChild.removeChild(this._tDom),
                    this._tDom = null 
                },
                _encodeHTML: function(i) {
                    return (i + "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;")
                }
            },
            E.inherits(G, w),
            D("../component").define("tooltip", G),
            G
        }
        ),
        k("echarts/component/legend", ["require", "./base", "zrender/shape/Text", "zrender/shape/Rectangle", "zrender/shape/Sector", "../util/shape/Icon", "../util/shape/Candle", "../config", "zrender/tool/util", "zrender/tool/area", "../component"], function(B) {
            function D(F, n, m, l, G) {
                if (!this.query(l, "legend.data")) {
                    return console.error("option.legend.data has not been defined."),
                    void 0
                }
                u.call(this, F, n, m, l, G);
                var s = this;
                s._legendSelected = function(i) {
                    s.__legendSelected(i)
                }
                ,
                s._dispatchHoverLink = function(i) {
                    return s.__dispatchHoverLink(i)
                }
                ,
                this._colorIndex = 0,
                this._colorMap = {},
                this._selectedMap = {},
                this._hasDataMap = {},
                this.refresh(l)
            }
            var u = B("./base")
              , z = B("zrender/shape/Text")
              , C = B("zrender/shape/Rectangle")
              , q = B("zrender/shape/Sector")
              , p = B("../util/shape/Icon")
              , E = B("../util/shape/Candle")
              , y = B("../config");
            y.legend = {
                zlevel: 0,
                z: 4,
                show: !0,
                orient: "horizontal",
                x: "center",
                y: "top",
                backgroundColor: "rgba(0,0,0,0)",
                borderColor: "#ccc",
                borderWidth: 0,
                padding: 5,
                itemGap: 10,
                itemWidth: 20,
                itemHeight: 14,
                textStyle: {
                    color: "#333"
                },
                selectedMode: !0
            };
            var A = B("zrender/tool/util")
              , w = B("zrender/tool/area");
            D.prototype = {
                type: y.COMPONENT_TYPE_LEGEND,
                _buildShape: function() {
                    if (this.legendOption.show) {
                        this._itemGroupLocation = this._getItemGroupLocation(),
                        this._buildBackground(),
                        this._buildItem();
                        for (var l = 0, i = this.shapeList.length; i > l; l++) {
                            this.zr.addShape(this.shapeList[l])
                        }
                    }
                },
                _buildItem: function() {
                    var Q, H, L, W, K, I, M, i, m = this.legendOption.data, R = m.length, J = this.legendOption.textStyle, S = this.zr.getWidth(), G = this.zr.getHeight(), r = this._itemGroupLocation.x, O = this._itemGroupLocation.y, T = this.legendOption.itemWidth, P = this.legendOption.itemHeight, N = this.legendOption.itemGap;
                    "vertical" === this.legendOption.orient && "right" === this.legendOption.x && (r = this._itemGroupLocation.x + this._itemGroupLocation.width - T);
                    for (var F = 0; R > F; F++) {
                        K = A.merge(m[F].textStyle || {}, J),
                        I = this.getFont(K),
                        Q = this._getName(m[F]),
                        M = this._getFormatterName(Q),
                        "" !== Q ? (H = m[F].icon || this._getSomethingByName(Q).type,
                        i = this.getColor(Q),
                        "horizontal" === this.legendOption.orient ? 200 > S - r && T + 5 + w.getTextWidth(M, I) + (F === R - 1 || "" === m[F + 1] ? 0 : N) >= S - r && (r = this._itemGroupLocation.x,
                        O += P + N) : 200 > G - O && P + (F === R - 1 || "" === m[F + 1] ? 0 : N) >= G - O && ("right" === this.legendOption.x ? r -= this._itemGroupLocation.maxWidth + N : r += this._itemGroupLocation.maxWidth + N,
                        O = this._itemGroupLocation.y),
                        L = this._getItemShapeByType(r, O, T, P, this._selectedMap[Q] && this._hasDataMap[Q] ? i : "#ccc", H, i),
                        L._name = Q,
                        L = new p(L),
                        W = {
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase(),
                            style: {
                                x: r + T + 5,
                                y: O + P / 2,
                                color: this._selectedMap[Q] ? "auto" === K.color ? i : K.color : "#ccc",
                                text: M,
                                textFont: I,
                                textBaseline: "middle"
                            },
                            highlightStyle: {
                                color: i,
                                brushType: "fill"
                            },
                            hoverable: !!this.legendOption.selectedMode,
                            clickable: !!this.legendOption.selectedMode
                        },
                        "vertical" === this.legendOption.orient && "right" === this.legendOption.x && (W.style.x -= T + 10,
                        W.style.textAlign = "right"),
                        W._name = Q,
                        W = new z(W),
                        this.legendOption.selectedMode && (L.onclick = W.onclick = this._legendSelected,
                        L.onmouseover = W.onmouseover = this._dispatchHoverLink,
                        L.hoverConnect = W.id,
                        W.hoverConnect = L.id),
                        this.shapeList.push(L),
                        this.shapeList.push(W),
                        "horizontal" === this.legendOption.orient ? r += T + 5 + w.getTextWidth(M, I) + N : O += P + N) : "horizontal" === this.legendOption.orient ? (r = this._itemGroupLocation.x,
                        O += P + N) : ("right" === this.legendOption.x ? r -= this._itemGroupLocation.maxWidth + N : r += this._itemGroupLocation.maxWidth + N,
                        O = this._itemGroupLocation.y)
                    }
                    "horizontal" === this.legendOption.orient && "center" === this.legendOption.x && O != this._itemGroupLocation.y && this._mLineOptimize()
                },
                _getName: function(i) {
                    return i.name !== void 0 ? i.name : i
                },
                _getFormatterName: function(l) {
                    var i, m = this.legendOption.formatter;
                    return i = "function" == typeof m ? m.call(this.myChart, l) : "string" == typeof m ? m.replace("{name}", l) : l
                },
                _getFormatterNameFromData: function(l) {
                    var i = this._getName(l);
                    return this._getFormatterName(i)
                },
                _mLineOptimize: function() {
                    for (var r = [], o = this._itemGroupLocation.x, s = 2, m = this.shapeList.length; m > s; s++) {
                        this.shapeList[s].style.x === o ? r.push((this._itemGroupLocation.width - (this.shapeList[s - 1].style.x + w.getTextWidth(this.shapeList[s - 1].style.text, this.shapeList[s - 1].style.textFont) - o)) / 2) : s === m - 1 && r.push((this._itemGroupLocation.width - (this.shapeList[s].style.x + w.getTextWidth(this.shapeList[s].style.text, this.shapeList[s].style.textFont) - o)) / 2)
                    }
                    for (var l = -1, s = 1, m = this.shapeList.length; m > s; s++) {
                        this.shapeList[s].style.x === o && l++,
                        0 !== r[l] && (this.shapeList[s].style.x += r[l])
                    }
                },
                _buildBackground: function() {
                    var i = this.reformCssArray(this.legendOption.padding);
                    this.shapeList.push(new C({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        hoverable: !1,
                        style: {
                            x: this._itemGroupLocation.x - i[3],
                            y: this._itemGroupLocation.y - i[0],
                            width: this._itemGroupLocation.width + i[3] + i[1],
                            height: this._itemGroupLocation.height + i[0] + i[2],
                            brushType: 0 === this.legendOption.borderWidth ? "fill" : "both",
                            color: this.legendOption.backgroundColor,
                            strokeColor: this.legendOption.borderColor,
                            lineWidth: this.legendOption.borderWidth
                        }
                    }))
                },
                _getItemGroupLocation: function() {
                    var R = this.legendOption.data
                      , I = R.length
                      , N = this.legendOption.itemGap
                      , P = this.legendOption.itemWidth + 5
                      , X = this.legendOption.itemHeight
                      , M = this.legendOption.textStyle
                      , K = this.getFont(M)
                      , J = 0
                      , O = 0
                      , m = this.reformCssArray(this.legendOption.padding)
                      , F = this.zr.getWidth() - m[1] - m[3]
                      , S = this.zr.getHeight() - m[0] - m[2]
                      , L = 0
                      , T = 0;
                    if ("horizontal" === this.legendOption.orient) {
                        O = X;
                        for (var H = 0; I > H; H++) {
                            if ("" !== this._getName(R[H])) {
                                var G = w.getTextWidth(this._getFormatterNameFromData(R[H]), R[H].textStyle ? this.getFont(A.merge(R[H].textStyle || {}, M)) : K);
                                L + P + G + N > F ? (L -= N,
                                J = Math.max(J, L),
                                O += X + N,
                                L = 0) : (L += P + G + N,
                                J = Math.max(J, L - N))
                            } else {
                                L -= N,
                                J = Math.max(J, L),
                                O += X + N,
                                L = 0
                            }
                        }
                    } else {
                        for (var H = 0; I > H; H++) {
                            T = Math.max(T, w.getTextWidth(this._getFormatterNameFromData(R[H]), R[H].textStyle ? this.getFont(A.merge(R[H].textStyle || {}, M)) : K))
                        }
                        T += P,
                        J = T;
                        for (var H = 0; I > H; H++) {
                            "" !== this._getName(R[H]) ? L + X + N > S ? (J += T + N,
                            L -= N,
                            O = Math.max(O, L),
                            L = 0) : (L += X + N,
                            O = Math.max(O, L - N)) : (J += T + N,
                            L -= N,
                            O = Math.max(O, L),
                            L = 0)
                        }
                    }
                    F = this.zr.getWidth(),
                    S = this.zr.getHeight();
                    var Q;
                    switch (this.legendOption.x) {
                    case "center":
                        Q = Math.floor((F - J) / 2);
                        break;
                    case "left":
                        Q = m[3] + this.legendOption.borderWidth;
                        break;
                    case "right":
                        Q = F - J - m[1] - m[3] - 2 * this.legendOption.borderWidth;
                        break;
                    default:
                        Q = this.parsePercent(this.legendOption.x, F)
                    }
                    var W;
                    switch (this.legendOption.y) {
                    case "top":
                        W = m[0] + this.legendOption.borderWidth;
                        break;
                    case "bottom":
                        W = S - O - m[0] - m[2] - 2 * this.legendOption.borderWidth;
                        break;
                    case "center":
                        W = Math.floor((S - O) / 2);
                        break;
                    default:
                        W = this.parsePercent(this.legendOption.y, S)
                    }
                    return {
                        x: Q,
                        y: W,
                        width: J,
                        height: O,
                        maxWidth: T
                    }
                },
                _getSomethingByName: function(G) {
                    for (var s, I = this.option.series, m = 0, l = I.length; l > m; m++) {
                        if (I[m].name === G) {
                            return {
                                type: I[m].type,
                                series: I[m],
                                seriesIndex: m,
                                data: null ,
                                dataIndex: -1
                            }
                        }
                        if (I[m].type === y.CHART_TYPE_PIE || I[m].type === y.CHART_TYPE_RADAR || I[m].type === y.CHART_TYPE_CHORD || I[m].type === y.CHART_TYPE_FORCE || I[m].type === y.CHART_TYPE_FUNNEL) {
                            s = I[m].categories || I[m].data || I[m].nodes;
                            for (var H = 0, F = s.length; F > H; H++) {
                                if (s[H].name === G) {
                                    return {
                                        type: I[m].type,
                                        series: I[m],
                                        seriesIndex: m,
                                        data: s[H],
                                        dataIndex: H
                                    }
                                }
                            }
                        }
                    }
                    return {
                        type: "bar",
                        series: null ,
                        seriesIndex: -1,
                        data: null ,
                        dataIndex: -1
                    }
                },
                _getItemShapeByType: function(K, M, G, I, L, F, l) {
                    var N, J = "#ccc" === L ? l : L, H = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            iconType: "legendicon" + F,
                            x: K,
                            y: M,
                            width: G,
                            height: I,
                            color: L,
                            strokeColor: L,
                            lineWidth: 2
                        },
                        highlightStyle: {
                            color: J,
                            strokeColor: J,
                            lineWidth: 1
                        },
                        hoverable: this.legendOption.selectedMode,
                        clickable: this.legendOption.selectedMode
                    };
                    if (F.match("image")) {
                        var N = F.replace(RegExp("^image:\\/\\/"), "");
                        F = "image"
                    }
                    switch (F) {
                    case "line":
                        H.style.brushType = "stroke",
                        H.highlightStyle.lineWidth = 3;
                        break;
                    case "radar":
                    case "scatter":
                        H.highlightStyle.lineWidth = 3;
                        break;
                    case "k":
                        H.style.brushType = "both",
                        H.highlightStyle.lineWidth = 3,
                        H.highlightStyle.color = H.style.color = this.deepQuery([this.ecTheme, y], "k.itemStyle.normal.color") || "#fff",
                        H.style.strokeColor = "#ccc" != L ? this.deepQuery([this.ecTheme, y], "k.itemStyle.normal.lineStyle.color") || "#ff3200" : L;
                        break;
                    case "image":
                        H.style.iconType = "image",
                        H.style.image = N,
                        "#ccc" === L && (H.style.opacity = 0.5)
                    }
                    return H
                },
                __legendSelected: function(l) {
                    var i = l.target._name;
                    if ("single" === this.legendOption.selectedMode) {
                        for (var m in this._selectedMap) {
                            this._selectedMap[m] = !1
                        }
                    }
                    this._selectedMap[i] = !this._selectedMap[i],
                    this.messageCenter.dispatch(y.EVENT.LEGEND_SELECTED, l.event, {
                        selected: this._selectedMap,
                        target: i
                    }, this.myChart)
                },
                __dispatchHoverLink: function(i) {
                    this.messageCenter.dispatch(y.EVENT.LEGEND_HOVERLINK, i.event, {
                        target: i.target._name
                    }, this.myChart)
                },
                refresh: function(I) {
                    if (I) {
                        this.option = I || this.option,
                        this.option.legend = this.reformOption(this.option.legend),
                        this.legendOption = this.option.legend;
                        var K, F, G, J, m = this.legendOption.data || [];
                        if (this.legendOption.selected) {
                            for (var l in this.legendOption.selected) {
                                this._selectedMap[l] = this._selectedMap[l] !== void 0 ? this._selectedMap[l] : this.legendOption.selected[l]
                            }
                        }
                        for (var L = 0, H = m.length; H > L; L++) {
                            K = this._getName(m[L]),
                            "" !== K && (F = this._getSomethingByName(K),
                            F.series ? (this._hasDataMap[K] = !0,
                            J = !F.data || F.type !== y.CHART_TYPE_PIE && F.type !== y.CHART_TYPE_FORCE && F.type !== y.CHART_TYPE_FUNNEL ? [F.series] : [F.data, F.series],
                            G = this.getItemStyleColor(this.deepQuery(J, "itemStyle.normal.color"), F.seriesIndex, F.dataIndex, F.data),
                            G && F.type != y.CHART_TYPE_K && this.setColor(K, G),
                            this._selectedMap[K] = null  != this._selectedMap[K] ? this._selectedMap[K] : !0) : this._hasDataMap[K] = !1)
                        }
                    }
                    this.clear(),
                    this._buildShape()
                },
                getRelatedAmount: function(I) {
                    for (var F, K = 0, m = this.option.series, l = 0, J = m.length; J > l; l++) {
                        if (m[l].name === I && K++,
                        m[l].type === y.CHART_TYPE_PIE || m[l].type === y.CHART_TYPE_RADAR || m[l].type === y.CHART_TYPE_CHORD || m[l].type === y.CHART_TYPE_FORCE || m[l].type === y.CHART_TYPE_FUNNEL) {
                            F = m[l].type != y.CHART_TYPE_FORCE ? m[l].data : m[l].categories;
                            for (var H = 0, G = F.length; G > H; H++) {
                                F[H].name === I && "-" != F[H].value && K++
                            }
                        }
                    }
                    return K
                },
                setColor: function(l, i) {
                    this._colorMap[l] = i
                },
                getColor: function(i) {
                    return this._colorMap[i] || (this._colorMap[i] = this.zr.getColor(this._colorIndex++)),
                    this._colorMap[i]
                },
                hasColor: function(i) {
                    return this._colorMap[i] ? this._colorMap[i] : !1
                },
                add: function(r, o) {
                    for (var s = this.legendOption.data, m = 0, l = s.length; l > m; m++) {
                        if (this._getName(s[m]) === r) {
                            return
                        }
                    }
                    this.legendOption.data.push(r),
                    this.setColor(r, o),
                    this._selectedMap[r] = !0,
                    this._hasDataMap[r] = !0
                },
                del: function(o) {
                    for (var m = this.legendOption.data, r = 0, l = m.length; l > r; r++) {
                        if (this._getName(m[r]) === o) {
                            return this.legendOption.data.splice(r, 1)
                        }
                    }
                },
                getItemShape: function(o) {
                    if (null  != o) {
                        for (var m, r = 0, l = this.shapeList.length; l > r; r++) {
                            if (m = this.shapeList[r],
                            m._name === o && "text" != m.type) {
                                return m
                            }
                        }
                    }
                },
                setItemShape: function(r, o) {
                    for (var s, m = 0, l = this.shapeList.length; l > m; m++) {
                        s = this.shapeList[m],
                        s._name === r && "text" != s.type && (this._selectedMap[r] || (o.style.color = "#ccc",
                        o.style.strokeColor = "#ccc"),
                        this.zr.modShape(s.id, o))
                    }
                },
                isSelected: function(i) {
                    return this._selectedMap[i] !== void 0 ? this._selectedMap[i] : !0
                },
                getSelectedMap: function() {
                    return this._selectedMap
                },
                setSelected: function(l, i) {
                    if ("single" === this.legendOption.selectedMode) {
                        for (var m in this._selectedMap) {
                            this._selectedMap[m] = !1
                        }
                    }
                    this._selectedMap[l] = i,
                    this.messageCenter.dispatch(y.EVENT.LEGEND_SELECTED, null , {
                        selected: this._selectedMap,
                        target: l
                    }, this.myChart)
                },
                onlegendSelected: function(o, m) {
                    var r = o.selected;
                    for (var l in r) {
                        this._selectedMap[l] != r[l] && (m.needRefresh = !0),
                        this._selectedMap[l] = r[l]
                    }
                }
            };
            var v = {
                line: function(l, i) {
                    var m = i.height / 2;
                    l.moveTo(i.x, i.y + m),
                    l.lineTo(i.x + i.width, i.y + m)
                },
                pie: function(F, o) {
                    var G = o.x
                      , m = o.y
                      , l = o.width
                      , s = o.height;
                    q.prototype.buildPath(F, {
                        x: G + l / 2,
                        y: m + s + 2,
                        r: s,
                        r0: 6,
                        startAngle: 45,
                        endAngle: 135
                    })
                },
                eventRiver: function(s, r) {
                    var G = r.x
                      , m = r.y
                      , l = r.width
                      , F = r.height;
                    s.moveTo(G, m + F),
                    s.bezierCurveTo(G + l, m + F, G, m + 4, G + l, m + 4),
                    s.lineTo(G + l, m),
                    s.bezierCurveTo(G, m, G + l, m + F - 4, G, m + F - 4),
                    s.lineTo(G, m + F)
                },
                k: function(s, r) {
                    var G = r.x
                      , m = r.y
                      , l = r.width
                      , F = r.height;
                    E.prototype.buildPath(s, {
                        x: G + l / 2,
                        y: [m + 1, m + 1, m + F - 6, m + F],
                        width: l - 6
                    })
                },
                bar: function(G, s) {
                    var I = s.x
                      , m = s.y + 1
                      , l = s.width
                      , H = s.height - 2
                      , F = 3;
                    G.moveTo(I + F, m),
                    G.lineTo(I + l - F, m),
                    G.quadraticCurveTo(I + l, m, I + l, m + F),
                    G.lineTo(I + l, m + H - F),
                    G.quadraticCurveTo(I + l, m + H, I + l - F, m + H),
                    G.lineTo(I + F, m + H),
                    G.quadraticCurveTo(I, m + H, I, m + H - F),
                    G.lineTo(I, m + F),
                    G.quadraticCurveTo(I, m, I + F, m)
                },
                force: function(l, i) {
                    p.prototype.iconLibrary.circle(l, i)
                },
                radar: function(N, P) {
                    var H = 6
                      , L = P.x + P.width / 2
                      , O = P.y + P.height / 2
                      , G = P.height / 2
                      , F = 2 * Math.PI / H
                      , Q = -Math.PI / 2
                      , K = L + G * Math.cos(Q)
                      , M = O + G * Math.sin(Q);
                    N.moveTo(K, M),
                    Q += F;
                    for (var J = 0, I = H - 1; I > J; J++) {
                        N.lineTo(L + G * Math.cos(Q), O + G * Math.sin(Q)),
                        Q += F
                    }
                    N.lineTo(K, M)
                }
            };
            v.chord = v.pie,
            v.map = v.bar;
            for (var x in v) {
                p.prototype.iconLibrary["legendicon" + x] = v[x]
            }
            return A.inherits(D, u),
            B("../component").define("legend", D),
            D
        }
        ),
        k("echarts/util/ecData", [], function() {
            function o(y, A, v, x, z, u, q, B) {
                var w;
                return x !== void 0 && (w = null  == x.value ? x : x.value),
                y._echartsData = {
                    _series: A,
                    _seriesIndex: v,
                    _data: x,
                    _dataIndex: z,
                    _name: u,
                    _value: w,
                    _special: q,
                    _special2: B
                },
                y._echartsData
            }
            function m(q, i) {
                var r = q._echartsData;
                if (!i) {
                    return r
                }
                switch (i) {
                case "series":
                case "seriesIndex":
                case "data":
                case "dataIndex":
                case "name":
                case "value":
                case "special":
                case "special2":
                    return r && r["_" + i]
                }
                return null 
            }
            function p(q, i, r) {
                switch (q._echartsData = q._echartsData || {},
                i) {
                case "series":
                case "seriesIndex":
                case "data":
                case "dataIndex":
                case "name":
                case "value":
                case "special":
                case "special2":
                    q._echartsData["_" + i] = r
                }
            }
            function l(n, i) {
                i._echartsData = {
                    _series: n._echartsData._series,
                    _seriesIndex: n._echartsData._seriesIndex,
                    _data: n._echartsData._data,
                    _dataIndex: n._echartsData._dataIndex,
                    _name: n._echartsData._name,
                    _value: n._echartsData._value,
                    _special: n._echartsData._special,
                    _special2: n._echartsData._special2
                }
            }
            return {
                pack: o,
                set: p,
                get: m,
                clone: l
            }
        }
        ),
        k("echarts/chart", [], function() {
            var l = {}
              , i = {};
            return l.define = function(m, e) {
                return i[m] = e,
                l
            }
            ,
            l.get = function(m) {
                return i[m]
            }
            ,
            l
        }
        ),
        k("zrender/tool/color", ["require", "../tool/util"], function(aN) {
            function aA(i) {
                ap = i
            }
            function aF() {
                ap = af
            }
            function aJ(l, i) {
                return l = 0 | l,
                i = i || ap,
                i[l % i.length]
            }
            function aR(i) {
                ar = i
            }
            function aE() {
                al = ar
            }
            function aC() {
                return ar
            }
            function aB(y, A, u, w, z, p, m) {
                ae || (ae = ad.getContext());
                for (var B = ae.createRadialGradient(y, A, u, w, z, p), v = 0, x = m.length; x > v; v++) {
                    B.addColorStop(m[v][0], m[v][1])
                }
                return B.__nonRecursion = !0,
                B
            }
            function aH(w, p, y, m, l) {
                ae || (ae = ad.getContext());
                for (var x = ae.createLinearGradient(w, p, y, m), v = 0, u = l.length; u > v; v++) {
                    x.addColorStop(l[v][0], l[v][1])
                }
                return x.__nonRecursion = !0,
                x
            }
            function aK(B, E, v) {
                B = aD(B),
                E = aD(E),
                B = ak(B),
                E = ak(E);
                for (var z = [], D = (E[0] - B[0]) / v, u = (E[1] - B[1]) / v, p = (E[2] - B[2]) / v, F = (E[3] - B[3]) / v, y = 0, A = B[0], w = B[1], x = B[2], C = B[3]; v > y; y++) {
                    z[y] = Y([ab(Math.floor(A), [0, 255]), ab(Math.floor(w), [0, 255]), ab(Math.floor(x), [0, 255]), C.toFixed(4) - 0], "rgba"),
                    A += D,
                    w += u,
                    x += p,
                    C += F
                }
                return A = E[0],
                w = E[1],
                x = E[2],
                C = E[3],
                z[y] = Y([A, w, x, C], "rgba"),
                z
            }
            function aG(u, p) {
                var w = []
                  , m = u.length;
                if (void 0 === p && (p = 20),
                1 === m) {
                    w = aK(u[0], u[0], p)
                } else {
                    if (m > 1) {
                        for (var l = 0, v = m - 1; v > l; l++) {
                            var s = aK(u[l], u[l + 1], p);
                            v - 1 > l && s.pop(),
                            w = w.concat(s)
                        }
                    }
                }
                return w
            }
            function Y(l, i) {
                if (i = i || "rgb",
                l && (3 === l.length || 4 === l.length)) {
                    if (l = aq(l, function(n) {
                        return n > 1 ? Math.ceil(n) : n
                    }
                    ),
                    i.indexOf("hex") > -1) {
                        return "#" + ((1 << 24) + (l[0] << 16) + (l[1] << 8) + +l[2]).toString(16).slice(1)
                    }
                    if (i.indexOf("hs") > -1) {
                        var m = aq(l.slice(1, 3), function(n) {
                            return n + "%"
                        }
                        );
                        l[1] = m[0],
                        l[2] = m[1]
                    }
                    return i.indexOf("a") > -1 ? (3 === l.length && l.push(1),
                    l[3] = ab(l[3], [0, 1]),
                    i + "(" + l.slice(0, 4).join(",") + ")") : i + "(" + l.slice(0, 3).join(",") + ")"
                }
            }
            function Z(l) {
                l = ah(l),
                0 > l.indexOf("rgba") && (l = aD(l));
                var i = []
                  , m = 0;
                return l.replace(/[\d.]+/g, function(n) {
                    n = 3 > m ? 0 | n : +n,
                    i[m++] = n
                }
                ),
                i
            }
            function aO(o, m) {
                if (!ao(o)) {
                    return o
                }
                var p = ak(o)
                  , l = p[3];
                return l === void 0 && (l = 1),
                o.indexOf("hsb") > -1 ? p = an(p) : o.indexOf("hsl") > -1 && (p = aa(p)),
                m.indexOf("hsb") > -1 || m.indexOf("hsv") > -1 ? p = ag(p) : m.indexOf("hsl") > -1 && (p = au(p)),
                p[3] = l,
                Y(p, m)
            }
            function aD(i) {
                return aO(i, "rgba")
            }
            function aP(i) {
                return aO(i, "rgb")
            }
            function az(i) {
                return aO(i, "hex")
            }
            function av(i) {
                return aO(i, "hsva")
            }
            function aL(i) {
                return aO(i, "hsv")
            }
            function aQ(i) {
                return aO(i, "hsba")
            }
            function aM(i) {
                return aO(i, "hsb")
            }
            function aI(i) {
                return aO(i, "hsla")
            }
            function aw(i) {
                return aO(i, "hsl")
            }
            function aS(l) {
                for (var i in am) {
                    if (az(am[i]) === az(l)) {
                        return i
                    }
                }
                return null 
            }
            function ah(i) {
                return (i + "").replace(/\s+/g, "")
            }
            function Q(o) {
                if (am[o] && (o = am[o]),
                o = ah(o),
                o = o.replace(/hsv/i, "hsb"),
                /^#[\da-f]{3}$/i.test(o)) {
                    o = parseInt(o.slice(1), 16);
                    var m = (3840 & o) << 8
                      , p = (240 & o) << 4
                      , l = 15 & o;
                    o = "#" + ((1 << 24) + (m << 4) + m + (p << 4) + p + (l << 4) + l).toString(16).slice(1)
                }
                return o
            }
            function q(p, o) {
                if (!ao(p)) {
                    return p
                }
                var r = o > 0 ? 1 : -1;
                o === void 0 && (o = 0),
                o = Math.abs(o) > 1 ? 1 : Math.abs(o),
                p = aP(p);
                for (var m = ak(p), l = 0; 3 > l; l++) {
                    m[l] = 1 === r ? 0 | m[l] * (1 - o) : 0 | (255 - m[l]) * o + m[l]
                }
                return "rgb(" + m.join(",") + ")"
            }
            function ai(l) {
                if (!ao(l)) {
                    return l
                }
                var i = ak(aD(l));
                return i = aq(i, function(m) {
                    return 255 - m
                }
                ),
                Y(i, "rgb")
            }
            function ay(B, D, v) {
                if (!ao(B) || !ao(D)) {
                    return B
                }
                v === void 0 && (v = 0.5),
                v = 1 - ab(v, [0, 1]);
                for (var z = 2 * v - 1, C = ak(aD(B)), u = ak(aD(D)), p = C[3] - u[3], E = ((-1 === z * p ? z : (z + p) / (1 + z * p)) + 1) / 2, y = 1 - E, A = [], w = 0; 3 > w; w++) {
                    A[w] = C[w] * E + u[w] * y
                }
                var x = C[3] * v + u[3] * (1 - v);
                return x = Math.max(0, Math.min(1, x)),
                1 === C[3] && 1 === u[3] ? Y(A, "rgb") : (A[3] = x,
                Y(A, "rgba"))
            }
            function ax() {
                return "#" + (Math.random().toString(16) + "0000").slice(2, 8)
            }
            function ak(A) {
                A = Q(A);
                var C = A.match(ac);
                if (null  === C) {
                    throw Error("The color format error")
                }
                var v, y, B, u = [];
                if (C[2]) {
                    v = C[2].replace("#", "").split(""),
                    B = [v[0] + v[1], v[2] + v[3], v[4] + v[5]],
                    u = aq(B, function(i) {
                        return ab(parseInt(i, 16), [0, 255])
                    }
                    )
                } else {
                    if (C[4]) {
                        var p = C[4].split(",");
                        y = p[3],
                        B = p.slice(0, 3),
                        u = aq(B, function(i) {
                            return i = Math.floor(i.indexOf("%") > 0 ? 2.55 * parseInt(i, 0) : i),
                            ab(i, [0, 255])
                        }
                        ),
                        y !== void 0 && u.push(ab(parseFloat(y), [0, 1]))
                    } else {
                        if (C[5] || C[6]) {
                            var D = (C[5] || C[6]).split(",")
                              , x = parseInt(D[0], 0) / 360
                              , z = D[1]
                              , w = D[2];
                            y = D[3],
                            u = aq([z, w], function(i) {
                                return ab(parseFloat(i) / 100, [0, 1])
                            }
                            ),
                            u.unshift(x),
                            y !== void 0 && u.push(ab(parseFloat(y), [0, 1]))
                        }
                    }
                }
                return u
            }
            function aj(l, i) {
                if (!ao(l)) {
                    return l
                }
                null  === i && (i = 1);
                var m = ak(aD(l));
                return m[3] = ab(Number(i).toFixed(4), [0, 1]),
                Y(m, "rgba")
            }
            function aq(o, m) {
                if ("function" != typeof m) {
                    throw new TypeError
                }
                for (var p = o ? o.length : 0, l = 0; p > l; l++) {
                    o[l] = m(o[l])
                }
                return o
            }
            function ab(l, i) {
                return i[0] >= l ? l = i[0] : l >= i[1] && (l = i[1]),
                l
            }
            function ao(i) {
                return i instanceof Array || "string" == typeof i
            }
            function an(E) {
                var H, x, C, G = E[0], w = E[1], u = E[2];
                if (0 === w) {
                    H = 255 * u,
                    x = 255 * u,
                    C = 255 * u
                } else {
                    var I = 6 * G;
                    6 === I && (I = 0);
                    var B = 0 | I
                      , D = u * (1 - w)
                      , z = u * (1 - w * (I - B))
                      , y = u * (1 - w * (1 - (I - B)))
                      , A = 0
                      , F = 0
                      , v = 0;
                    0 === B ? (A = u,
                    F = y,
                    v = D) : 1 === B ? (A = z,
                    F = u,
                    v = D) : 2 === B ? (A = D,
                    F = u,
                    v = y) : 3 === B ? (A = D,
                    F = z,
                    v = u) : 4 === B ? (A = y,
                    F = D,
                    v = u) : (A = u,
                    F = D,
                    v = z),
                    H = 255 * A,
                    x = 255 * F,
                    C = 255 * v
                }
                return [H, x, C]
            }
            function aa(x) {
                var z, u, w, y = x[0], p = x[1], m = x[2];
                if (0 === p) {
                    z = 255 * m,
                    u = 255 * m,
                    w = 255 * m
                } else {
                    var A;
                    A = 0.5 > m ? m * (1 + p) : m + p - p * m;
                    var v = 2 * m - A;
                    z = 255 * at(v, A, y + 1 / 3),
                    u = 255 * at(v, A, y),
                    w = 255 * at(v, A, y - 1 / 3)
                }
                return [z, u, w]
            }
            function at(l, i, m) {
                return 0 > m && (m += 1),
                m > 1 && (m -= 1),
                1 > 6 * m ? l + 6 * (i - l) * m : 1 > 2 * m ? i : 2 > 3 * m ? l + 6 * (i - l) * (2 / 3 - m) : l
            }
            function ag(C) {
                var E, v, A = C[0] / 255, D = C[1] / 255, u = C[2] / 255, p = Math.min(A, D, u), F = Math.max(A, D, u), z = F - p, B = F;
                if (0 === z) {
                    E = 0,
                    v = 0
                } else {
                    v = z / F;
                    var x = ((F - A) / 6 + z / 2) / z
                      , w = ((F - D) / 6 + z / 2) / z
                      , y = ((F - u) / 6 + z / 2) / z;
                    A === F ? E = y - w : D === F ? E = 1 / 3 + x - y : u === F && (E = 2 / 3 + w - x),
                    0 > E && (E += 1),
                    E > 1 && (E -= 1)
                }
                return E = 360 * E,
                v = 100 * v,
                B = 100 * B,
                [E, v, B]
            }
            function au(C) {
                var E, v, A = C[0] / 255, D = C[1] / 255, u = C[2] / 255, p = Math.min(A, D, u), F = Math.max(A, D, u), z = F - p, B = (F + p) / 2;
                if (0 === z) {
                    E = 0,
                    v = 0
                } else {
                    v = 0.5 > B ? z / (F + p) : z / (2 - F - p);
                    var x = ((F - A) / 6 + z / 2) / z
                      , w = ((F - D) / 6 + z / 2) / z
                      , y = ((F - u) / 6 + z / 2) / z;
                    A === F ? E = y - w : D === F ? E = 1 / 3 + x - y : u === F && (E = 2 / 3 + w - x),
                    0 > E && (E += 1),
                    E > 1 && (E -= 1)
                }
                return E = 360 * E,
                v = 100 * v,
                B = 100 * B,
                [E, v, B]
            }
            var ae, ad = aN("../tool/util"), ap = ["#ff9277", " #dddd00", " #ffc877", " #bbe3ff", " #d5ffbb", "#bbbbff", " #ddb000", " #b0dd00", " #e2bbff", " #ffbbe3", "#ff7777", " #ff9900", " #83dd00", " #77e3ff", " #778fff", "#c877ff", " #ff77ab", " #ff6600", " #aa8800", " #77c7ff", "#ad77ff", " #ff77ff", " #dd0083", " #777700", " #00aa00", "#0088aa", " #8400dd", " #aa0088", " #dd0000", " #772e00"], af = ap, ar = "rgba(255,255,0,0.5)", al = ar, ac = /^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+)?)%?\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+)?)%?\s*\))\s*$/i, am = {
                aliceblue: "#f0f8ff",
                antiquewhite: "#faebd7",
                aqua: "#0ff",
                aquamarine: "#7fffd4",
                azure: "#f0ffff",
                beige: "#f5f5dc",
                bisque: "#ffe4c4",
                black: "#000",
                blanchedalmond: "#ffebcd",
                blue: "#00f",
                blueviolet: "#8a2be2",
                brown: "#a52a2a",
                burlywood: "#deb887",
                cadetblue: "#5f9ea0",
                chartreuse: "#7fff00",
                chocolate: "#d2691e",
                coral: "#ff7f50",
                cornflowerblue: "#6495ed",
                cornsilk: "#fff8dc",
                crimson: "#dc143c",
                cyan: "#0ff",
                darkblue: "#00008b",
                darkcyan: "#008b8b",
                darkgoldenrod: "#b8860b",
                darkgray: "#a9a9a9",
                darkgrey: "#a9a9a9",
                darkgreen: "#006400",
                darkkhaki: "#bdb76b",
                darkmagenta: "#8b008b",
                darkolivegreen: "#556b2f",
                darkorange: "#ff8c00",
                darkorchid: "#9932cc",
                darkred: "#8b0000",
                darksalmon: "#e9967a",
                darkseagreen: "#8fbc8f",
                darkslateblue: "#483d8b",
                darkslategray: "#2f4f4f",
                darkslategrey: "#2f4f4f",
                darkturquoise: "#00ced1",
                darkviolet: "#9400d3",
                deeppink: "#ff1493",
                deepskyblue: "#00bfff",
                dimgray: "#696969",
                dimgrey: "#696969",
                dodgerblue: "#1e90ff",
                firebrick: "#b22222",
                floralwhite: "#fffaf0",
                forestgreen: "#228b22",
                fuchsia: "#f0f",
                gainsboro: "#dcdcdc",
                ghostwhite: "#f8f8ff",
                gold: "#ffd700",
                goldenrod: "#daa520",
                gray: "#808080",
                grey: "#808080",
                green: "#008000",
                greenyellow: "#adff2f",
                honeydew: "#f0fff0",
                hotpink: "#ff69b4",
                indianred: "#cd5c5c",
                indigo: "#4b0082",
                ivory: "#fffff0",
                khaki: "#f0e68c",
                lavender: "#e6e6fa",
                lavenderblush: "#fff0f5",
                lawngreen: "#7cfc00",
                lemonchiffon: "#fffacd",
                lightblue: "#add8e6",
                lightcoral: "#f08080",
                lightcyan: "#e0ffff",
                lightgoldenrodyellow: "#fafad2",
                lightgray: "#d3d3d3",
                lightgrey: "#d3d3d3",
                lightgreen: "#90ee90",
                lightpink: "#ffb6c1",
                lightsalmon: "#ffa07a",
                lightseagreen: "#20b2aa",
                lightskyblue: "#87cefa",
                lightslategray: "#789",
                lightslategrey: "#789",
                lightsteelblue: "#b0c4de",
                lightyellow: "#ffffe0",
                lime: "#0f0",
                limegreen: "#32cd32",
                linen: "#faf0e6",
                magenta: "#f0f",
                maroon: "#800000",
                mediumaquamarine: "#66cdaa",
                mediumblue: "#0000cd",
                mediumorchid: "#ba55d3",
                mediumpurple: "#9370d8",
                mediumseagreen: "#3cb371",
                mediumslateblue: "#7b68ee",
                mediumspringgreen: "#00fa9a",
                mediumturquoise: "#48d1cc",
                mediumvioletred: "#c71585",
                midnightblue: "#191970",
                mintcream: "#f5fffa",
                mistyrose: "#ffe4e1",
                moccasin: "#ffe4b5",
                navajowhite: "#ffdead",
                navy: "#000080",
                oldlace: "#fdf5e6",
                olive: "#808000",
                olivedrab: "#6b8e23",
                orange: "#ffa500",
                orangered: "#ff4500",
                orchid: "#da70d6",
                palegoldenrod: "#eee8aa",
                palegreen: "#98fb98",
                paleturquoise: "#afeeee",
                palevioletred: "#d87093",
                papayawhip: "#ffefd5",
                peachpuff: "#ffdab9",
                peru: "#cd853f",
                pink: "#ffc0cb",
                plum: "#dda0dd",
                powderblue: "#b0e0e6",
                purple: "#800080",
                red: "#f00",
                rosybrown: "#bc8f8f",
                royalblue: "#4169e1",
                saddlebrown: "#8b4513",
                salmon: "#fa8072",
                sandybrown: "#f4a460",
                seagreen: "#2e8b57",
                seashell: "#fff5ee",
                sienna: "#a0522d",
                silver: "#c0c0c0",
                skyblue: "#87ceeb",
                slateblue: "#6a5acd",
                slategray: "#708090",
                slategrey: "#708090",
                snow: "#fffafa",
                springgreen: "#00ff7f",
                steelblue: "#4682b4",
                tan: "#d2b48c",
                teal: "#008080",
                thistle: "#d8bfd8",
                tomato: "#ff6347",
                turquoise: "#40e0d0",
                violet: "#ee82ee",
                wheat: "#f5deb3",
                white: "#fff",
                whitesmoke: "#f5f5f5",
                yellow: "#ff0",
                yellowgreen: "#9acd32"
            };
            return {
                customPalette: aA,
                resetPalette: aF,
                getColor: aJ,
                getHighlightColor: aC,
                customHighlight: aR,
                resetHighlight: aE,
                getRadialGradient: aB,
                getLinearGradient: aH,
                getGradientColors: aG,
                getStepColors: aK,
                reverse: ai,
                mix: ay,
                lift: q,
                trim: ah,
                random: ax,
                toRGB: aP,
                toRGBA: aD,
                toHex: az,
                toHSL: aw,
                toHSLA: aI,
                toHSB: aM,
                toHSBA: aQ,
                toHSV: aL,
                toHSVA: av,
                toName: aS,
                toColor: Y,
                toArray: Z,
                alpha: aj,
                getData: ak
            }
        }
        ),
        k("echarts/component/timeline", ["require", "./base", "zrender/shape/Rectangle", "../util/shape/Icon", "../util/shape/Chain", "../config", "zrender/tool/util", "zrender/tool/area", "zrender/tool/event", "../component"], function(z) {
            function B(s, l, E, i, D) {
                x.call(this, s, l, E, i, D);
                var m = this;
                if (m._onclick = function(n) {
                    return m.__onclick(n)
                }
                ,
                m._ondrift = function(o, n) {
                    return m.__ondrift(this, o, n)
                }
                ,
                m._ondragend = function() {
                    return m.__ondragend()
                }
                ,
                m._setCurrentOption = function() {
                    var o = m.timelineOption;
                    m.currentIndex %= o.data.length;
                    var n = m.options[m.currentIndex] || {};
                    m.myChart.setOption(n, o.notMerge),
                    m.messageCenter.dispatch(C.EVENT.TIMELINE_CHANGED, null , {
                        currentIndex: m.currentIndex,
                        data: null  != o.data[m.currentIndex].name ? o.data[m.currentIndex].name : o.data[m.currentIndex]
                    }, m.myChart)
                }
                ,
                m._onFrame = function() {
                    m._setCurrentOption(),
                    m._syncHandleShape(),
                    m.timelineOption.autoPlay && (m.playTicket = setTimeout(function() {
                        return m.currentIndex += 1,
                        !m.timelineOption.loop && m.currentIndex >= m.timelineOption.data.length ? (m.currentIndex = m.timelineOption.data.length - 1,
                        m.stop(),
                        void 0) : (m._onFrame(),
                        void 0)
                    }
                    , m.timelineOption.playInterval))
                }
                ,
                this.setTheme(!1),
                this.options = this.option.options,
                this.currentIndex = this.timelineOption.currentIndex % this.timelineOption.data.length,
                this.timelineOption.notMerge || 0 === this.currentIndex || (this.options[this.currentIndex] = w.merge(this.options[this.currentIndex], this.options[0])),
                this.timelineOption.show && (this._buildShape(),
                this._syncHandleShape()),
                this._setCurrentOption(),
                this.timelineOption.autoPlay) {
                    var m = this;
                    this.playTicket = setTimeout(function() {
                        m.play()
                    }
                    , null  != this.ecTheme.animationDuration ? this.ecTheme.animationDuration : C.animationDuration)
                }
            }
            function u(I, K) {
                var D = 2
                  , G = K.x + D
                  , J = K.y + D + 2
                  , o = K.width - D
                  , L = K.height - D
                  , F = K.symbol;
                if ("last" === F) {
                    I.moveTo(G + o - 2, J + L / 3),
                    I.lineTo(G + o - 2, J),
                    I.lineTo(G + 2, J + L / 2),
                    I.lineTo(G + o - 2, J + L),
                    I.lineTo(G + o - 2, J + 2 * (L / 3)),
                    I.moveTo(G, J),
                    I.lineTo(G, J)
                } else {
                    if ("next" === F) {
                        I.moveTo(G + 2, J + L / 3),
                        I.lineTo(G + 2, J),
                        I.lineTo(G + o - 2, J + L / 2),
                        I.lineTo(G + 2, J + L),
                        I.lineTo(G + 2, J + 2 * (L / 3)),
                        I.moveTo(G, J),
                        I.lineTo(G, J)
                    } else {
                        if ("play" === F) {
                            if ("stop" === K.status) {
                                I.moveTo(G + 2, J),
                                I.lineTo(G + o - 2, J + L / 2),
                                I.lineTo(G + 2, J + L),
                                I.lineTo(G + 2, J)
                            } else {
                                var H = "both" === K.brushType ? 2 : 3;
                                I.rect(G + 2, J, H, L),
                                I.rect(G + o - H - 2, J, H, L)
                            }
                        } else {
                            if (F.match("image")) {
                                var E = "";
                                E = F.replace(RegExp("^image:\\/\\/"), ""),
                                F = q.prototype.iconLibrary.image,
                                F(I, {
                                    x: G,
                                    y: J,
                                    width: o,
                                    height: L,
                                    image: E
                                })
                            }
                        }
                    }
                }
            }
            var x = z("./base")
              , A = z("zrender/shape/Rectangle")
              , q = z("../util/shape/Icon")
              , p = z("../util/shape/Chain")
              , C = z("../config");
            C.timeline = {
                zlevel: 0,
                z: 4,
                show: !0,
                type: "time",
                notMerge: !1,
                realtime: !0,
                x: 80,
                x2: 80,
                y2: 0,
                height: 50,
                backgroundColor: "rgba(0,0,0,0)",
                borderColor: "#ccc",
                borderWidth: 0,
                padding: 5,
                controlPosition: "left",
                autoPlay: !1,
                loop: !0,
                playInterval: 2000,
                lineStyle: {
                    width: 1,
                    color: "#666",
                    type: "dashed"
                },
                label: {
                    show: !0,
                    interval: "auto",
                    rotate: 0,
                    textStyle: {
                        color: "#333"
                    }
                },
                checkpointStyle: {
                    symbol: "auto",
                    symbolSize: "auto",
                    color: "auto",
                    borderColor: "auto",
                    borderWidth: "auto",
                    label: {
                        show: !1,
                        textStyle: {
                            color: "auto"
                        }
                    }
                },
                controlStyle: {
                    itemSize: 15,
                    itemGap: 5,
                    normal: {
                        color: "#333"
                    },
                    emphasis: {
                        color: "#1e90ff"
                    }
                },
                symbol: "emptyDiamond",
                symbolSize: 4,
                currentIndex: 0
            };
            var w = z("zrender/tool/util")
              , y = z("zrender/tool/area")
              , v = z("zrender/tool/event");
            return B.prototype = {
                type: C.COMPONENT_TYPE_TIMELINE,
                _buildShape: function() {
                    if (this._location = this._getLocation(),
                    this._buildBackground(),
                    this._buildControl(),
                    this._chainPoint = this._getChainPoint(),
                    this.timelineOption.label.show) {
                        for (var o = this._getInterval(), m = 0, r = this._chainPoint.length; r > m; m += o) {
                            this._chainPoint[m].showLabel = !0
                        }
                    }
                    this._buildChain(),
                    this._buildHandle();
                    for (var m = 0, l = this.shapeList.length; l > m; m++) {
                        this.zr.addShape(this.shapeList[m])
                    }
                },
                _getLocation: function() {
                    var I, K = this.timelineOption, E = this.reformCssArray(this.timelineOption.padding), G = this.zr.getWidth(), J = this.parsePercent(K.x, G), D = this.parsePercent(K.x2, G);
                    null  == K.width ? (I = G - J - D,
                    D = G - D) : (I = this.parsePercent(K.width, G),
                    D = J + I);
                    var m, L, F = this.zr.getHeight(), H = this.parsePercent(K.height, F);
                    return null  != K.y ? (m = this.parsePercent(K.y, F),
                    L = m + H) : (L = F - this.parsePercent(K.y2, F),
                    m = L - H),
                    {
                        x: J + E[3],
                        y: m + E[0],
                        x2: D - E[1],
                        y2: L - E[2],
                        width: I - E[1] - E[3],
                        height: H - E[0] - E[2]
                    }
                },
                _getReformedLabel: function(o) {
                    var m = this.timelineOption
                      , r = null  != m.data[o].name ? m.data[o].name : m.data[o]
                      , l = m.data[o].formatter || m.label.formatter;
                    return l && ("function" == typeof l ? r = l.call(this.myChart, r) : "string" == typeof l && (r = l.replace("{value}", r))),
                    r
                },
                _getInterval: function() {
                    var L = this._chainPoint
                      , O = this.timelineOption
                      , F = O.label.interval;
                    if ("auto" === F) {
                        var K = O.label.textStyle.fontSize
                          , N = O.data
                          , E = O.data.length;
                        if (E > 3) {
                            var D, P, J = !1;
                            for (F = 0; !J && E > F; ) {
                                F++,
                                J = !0;
                                for (var H = F; E > H; H += F) {
                                    if (D = L[H].x - L[H - F].x,
                                    0 !== O.label.rotate) {
                                        P = K
                                    } else {
                                        if (N[H].textStyle) {
                                            P = y.getTextWidth(L[H].name, L[H].textFont)
                                        } else {
                                            var G = L[H].name + ""
                                              , I = (G.match(/\w/g) || "").length
                                              , M = G.length - I;
                                            P = 2 * I * K / 3 + M * K
                                        }
                                    }
                                    if (P > D) {
                                        J = !1;
                                        break
                                    }
                                }
                            }
                        } else {
                            F = 1
                        }
                    } else {
                        F = F - 0 + 1
                    }
                    return F
                },
                _getChainPoint: function() {
                    function T(i) {
                        return null  != Q[i].name ? Q[i].name : Q[i] + ""
                    }
                    var H, M = this.timelineOption, P = M.symbol.toLowerCase(), Z = M.symbolSize, L = M.label.rotate, J = M.label.textStyle, I = this.getFont(J), Q = M.data, N = this._location.x, l = this._location.y + 3 * (this._location.height / 4), D = this._location.x2 - this._location.x, W = Q.length, K = [];
                    if (W > 1) {
                        var X = D / W;
                        if (X = X > 50 ? 50 : 20 > X ? 5 : X,
                        D -= 2 * X,
                        "number" === M.type) {
                            for (var G = 0; W > G; G++) {
                                K.push(N + X + D / (W - 1) * G)
                            }
                        } else {
                            K[0] = new Date(T(0).replace(/-/g, "/")),
                            K[W - 1] = new Date(T(W - 1).replace(/-/g, "/")) - K[0];
                            for (var G = 1; W > G; G++) {
                                K[G] = N + X + D * (new Date(T(G).replace(/-/g, "/")) - K[0]) / K[W - 1]
                            }
                            K[0] = N + X
                        }
                    } else {
                        K.push(N + D / 2)
                    }
                    for (var E, R, Y, S, O, F = [], G = 0; W > G; G++) {
                        N = K[G],
                        E = Q[G].symbol && Q[G].symbol.toLowerCase() || P,
                        E.match("empty") ? (E = E.replace("empty", ""),
                        Y = !0) : Y = !1,
                        E.match("star") && (R = E.replace("star", "") - 0 || 5,
                        E = "star"),
                        H = Q[G].textStyle ? w.merge(Q[G].textStyle || {}, J) : J,
                        S = H.align || "center",
                        L ? (S = L > 0 ? "right" : "left",
                        O = [L * Math.PI / 180, N, l - 5]) : O = !1,
                        F.push({
                            x: N,
                            n: R,
                            isEmpty: Y,
                            symbol: E,
                            symbolSize: Q[G].symbolSize || Z,
                            color: Q[G].color,
                            borderColor: Q[G].borderColor,
                            borderWidth: Q[G].borderWidth,
                            name: this._getReformedLabel(G),
                            textColor: H.color,
                            textAlign: S,
                            textBaseline: H.baseline || "middle",
                            textX: N,
                            textY: l - (L ? 5 : 0),
                            textFont: Q[G].textStyle ? this.getFont(H) : I,
                            rotation: O,
                            showLabel: !1
                        })
                    }
                    return F
                },
                _buildBackground: function() {
                    var o = this.timelineOption
                      , m = this.reformCssArray(this.timelineOption.padding)
                      , r = this._location.width
                      , l = this._location.height;
                    (0 !== o.borderWidth || "rgba(0,0,0,0)" != o.backgroundColor.replace(/\s/g, "")) && this.shapeList.push(new A({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        hoverable: !1,
                        style: {
                            x: this._location.x - m[3],
                            y: this._location.y - m[0],
                            width: r + m[1] + m[3],
                            height: l + m[0] + m[2],
                            brushType: 0 === o.borderWidth ? "fill" : "both",
                            color: o.backgroundColor,
                            strokeColor: o.borderColor,
                            lineWidth: o.borderWidth
                        }
                    }))
                },
                _buildControl: function() {
                    var G = this
                      , I = this.timelineOption
                      , o = I.lineStyle
                      , E = I.controlStyle;
                    if ("none" !== I.controlPosition) {
                        var H, l = E.itemSize, J = E.itemGap;
                        "left" === I.controlPosition ? (H = this._location.x,
                        this._location.x += 3 * (l + J)) : (H = this._location.x2 - (3 * (l + J) - J),
                        this._location.x2 -= 3 * (l + J));
                        var F = this._location.y
                          , D = {
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase() + 1,
                            style: {
                                iconType: "timelineControl",
                                symbol: "last",
                                x: H,
                                y: F,
                                width: l,
                                height: l,
                                brushType: "stroke",
                                color: E.normal.color,
                                strokeColor: E.normal.color,
                                lineWidth: o.width
                            },
                            highlightStyle: {
                                color: E.emphasis.color,
                                strokeColor: E.emphasis.color,
                                lineWidth: o.width + 1
                            },
                            clickable: !0
                        };
                        this._ctrLastShape = new q(D),
                        this._ctrLastShape.onclick = function() {
                            G.last()
                        }
                        ,
                        this.shapeList.push(this._ctrLastShape),
                        H += l + J,
                        this._ctrPlayShape = new q(w.clone(D)),
                        this._ctrPlayShape.style.brushType = "fill",
                        this._ctrPlayShape.style.symbol = "play",
                        this._ctrPlayShape.style.status = this.timelineOption.autoPlay ? "playing" : "stop",
                        this._ctrPlayShape.style.x = H,
                        this._ctrPlayShape.onclick = function() {
                            "stop" === G._ctrPlayShape.style.status ? G.play() : G.stop()
                        }
                        ,
                        this.shapeList.push(this._ctrPlayShape),
                        H += l + J,
                        this._ctrNextShape = new q(w.clone(D)),
                        this._ctrNextShape.style.symbol = "next",
                        this._ctrNextShape.style.x = H,
                        this._ctrNextShape.onclick = function() {
                            G.next()
                        }
                        ,
                        this.shapeList.push(this._ctrNextShape)
                    }
                },
                _buildChain: function() {
                    var l = this.timelineOption
                      , i = l.lineStyle;
                    this._timelineShae = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            x: this._location.x,
                            y: this.subPixelOptimize(this._location.y, i.width),
                            width: this._location.x2 - this._location.x,
                            height: this._location.height,
                            chainPoint: this._chainPoint,
                            brushType: "both",
                            strokeColor: i.color,
                            lineWidth: i.width,
                            lineType: i.type
                        },
                        hoverable: !1,
                        clickable: !0,
                        onclick: this._onclick
                    },
                    this._timelineShae = new p(this._timelineShae),
                    this.shapeList.push(this._timelineShae)
                },
                _buildHandle: function() {
                    var l = this._chainPoint[this.currentIndex]
                      , i = l.symbolSize + 1;
                    i = 5 > i ? 5 : i,
                    this._handleShape = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase() + 1,
                        hoverable: !1,
                        draggable: !0,
                        style: {
                            iconType: "diamond",
                            n: l.n,
                            x: l.x - i,
                            y: this._location.y + this._location.height / 4 - i,
                            width: 2 * i,
                            height: 2 * i,
                            brushType: "both",
                            textPosition: "specific",
                            textX: l.x,
                            textY: this._location.y - this._location.height / 4,
                            textAlign: "center",
                            textBaseline: "middle"
                        },
                        highlightStyle: {},
                        ondrift: this._ondrift,
                        ondragend: this._ondragend
                    },
                    this._handleShape = new q(this._handleShape),
                    this.shapeList.push(this._handleShape)
                },
                _syncHandleShape: function() {
                    if (this.timelineOption.show) {
                        var o = this.timelineOption
                          , m = o.checkpointStyle
                          , r = this._chainPoint[this.currentIndex];
                        this._handleShape.style.text = m.label.show ? r.name : "",
                        this._handleShape.style.textFont = r.textFont,
                        this._handleShape.style.n = r.n,
                        "auto" === m.symbol ? this._handleShape.style.iconType = "none" != r.symbol ? r.symbol : "diamond" : (this._handleShape.style.iconType = m.symbol,
                        m.symbol.match("star") && (this._handleShape.style.n = m.symbol.replace("star", "") - 0 || 5,
                        this._handleShape.style.iconType = "star"));
                        var l;
                        "auto" === m.symbolSize ? (l = r.symbolSize + 2,
                        l = 5 > l ? 5 : l) : l = m.symbolSize - 0,
                        this._handleShape.style.color = "auto" === m.color ? r.color ? r.color : o.controlStyle.emphasis.color : m.color,
                        this._handleShape.style.textColor = "auto" === m.label.textStyle.color ? this._handleShape.style.color : m.label.textStyle.color,
                        this._handleShape.highlightStyle.strokeColor = this._handleShape.style.strokeColor = "auto" === m.borderColor ? r.borderColor ? r.borderColor : "#fff" : m.borderColor,
                        this._handleShape.style.lineWidth = "auto" === m.borderWidth ? r.borderWidth ? r.borderWidth : 0 : m.borderWidth - 0,
                        this._handleShape.highlightStyle.lineWidth = this._handleShape.style.lineWidth + 1,
                        this.zr.animate(this._handleShape.id, "style").when(500, {
                            x: r.x - l,
                            textX: r.x,
                            y: this._location.y + this._location.height / 4 - l,
                            width: 2 * l,
                            height: 2 * l
                        }).start("ExponentialOut")
                    }
                },
                _findChainIndex: function(o) {
                    var m = this._chainPoint
                      , r = m.length;
                    if (m[0].x >= o) {
                        return 0
                    }
                    if (o >= m[r - 1].x) {
                        return r - 1
                    }
                    for (var l = 0; r - 1 > l; l++) {
                        if (o >= m[l].x && m[l + 1].x >= o) {
                            return Math.abs(o - m[l].x) < Math.abs(o - m[l + 1].x) ? l : l + 1
                        }
                    }
                },
                __onclick: function(l) {
                    var i = v.getX(l.event)
                      , m = this._findChainIndex(i);
                    return m === this.currentIndex ? !0 : (this.currentIndex = m,
                    this.timelineOption.autoPlay && this.stop(),
                    clearTimeout(this.playTicket),
                    this._onFrame(),
                    void 0)
                },
                __ondrift: function(G, D) {
                    this.timelineOption.autoPlay && this.stop();
                    var I, m = this._chainPoint, l = m.length;
                    G.style.x + D <= m[0].x - m[0].symbolSize ? (G.style.x = m[0].x - m[0].symbolSize,
                    I = 0) : G.style.x + D >= m[l - 1].x - m[l - 1].symbolSize ? (G.style.x = m[l - 1].x - m[l - 1].symbolSize,
                    I = l - 1) : (G.style.x += D,
                    I = this._findChainIndex(G.style.x));
                    var H = m[I]
                      , F = H.symbolSize + 2;
                    if (G.style.iconType = H.symbol,
                    G.style.n = H.n,
                    G.style.textX = G.style.x + F / 2,
                    G.style.y = this._location.y + this._location.height / 4 - F,
                    G.style.width = 2 * F,
                    G.style.height = 2 * F,
                    G.style.text = H.name,
                    I === this.currentIndex) {
                        return !0
                    }
                    if (this.currentIndex = I,
                    this.timelineOption.realtime) {
                        clearTimeout(this.playTicket);
                        var E = this;
                        this.playTicket = setTimeout(function() {
                            E._setCurrentOption()
                        }
                        , 200)
                    }
                    return !0
                },
                __ondragend: function() {
                    this.isDragend = !0
                },
                ondragend: function(l, i) {
                    this.isDragend && l.target && (!this.timelineOption.realtime && this._setCurrentOption(),
                    i.dragOut = !0,
                    i.dragIn = !0,
                    i.needRefresh = !1,
                    this.isDragend = !1,
                    this._syncHandleShape())
                },
                last: function() {
                    return this.timelineOption.autoPlay && this.stop(),
                    this.currentIndex -= 1,
                    0 > this.currentIndex && (this.currentIndex = this.timelineOption.data.length - 1),
                    this._onFrame(),
                    this.currentIndex
                },
                next: function() {
                    return this.timelineOption.autoPlay && this.stop(),
                    this.currentIndex += 1,
                    this.currentIndex >= this.timelineOption.data.length && (this.currentIndex = 0),
                    this._onFrame(),
                    this.currentIndex
                },
                play: function(l, i) {
                    return this._ctrPlayShape && "playing" != this._ctrPlayShape.style.status && (this._ctrPlayShape.style.status = "playing",
                    this.zr.modShape(this._ctrPlayShape.id),
                    this.zr.refreshNextFrame()),
                    this.timelineOption.autoPlay = null  != i ? i : !0,
                    this.timelineOption.autoPlay || clearTimeout(this.playTicket),
                    this.currentIndex = null  != l ? l : this.currentIndex + 1,
                    this.currentIndex >= this.timelineOption.data.length && (this.currentIndex = 0),
                    this._onFrame(),
                    this.currentIndex
                },
                stop: function() {
                    return this._ctrPlayShape && "stop" != this._ctrPlayShape.style.status && (this._ctrPlayShape.style.status = "stop",
                    this.zr.modShape(this._ctrPlayShape.id),
                    this.zr.refreshNextFrame()),
                    this.timelineOption.autoPlay = !1,
                    clearTimeout(this.playTicket),
                    this.currentIndex
                },
                resize: function() {
                    this.timelineOption.show && (this.clear(),
                    this._buildShape(),
                    this._syncHandleShape())
                },
                setTheme: function(i) {
                    this.timelineOption = this.reformOption(w.clone(this.option.timeline)),
                    this.timelineOption.label.textStyle = this.getTextStyle(this.timelineOption.label.textStyle),
                    this.timelineOption.checkpointStyle.label.textStyle = this.getTextStyle(this.timelineOption.checkpointStyle.label.textStyle),
                    this.myChart.canvasSupported || (this.timelineOption.realtime = !1),
                    this.timelineOption.show && i && (this.clear(),
                    this._buildShape(),
                    this._syncHandleShape())
                },
                onbeforDispose: function() {
                    clearTimeout(this.playTicket)
                }
            },
            q.prototype.iconLibrary.timelineControl = u,
            w.inherits(B, x),
            z("../component").define("timeline", B),
            B
        }
        ),
        k("zrender/shape/Image", ["require", "./Base", "../tool/util"], function(l) {
            var i = l("./Base")
              , m = function(n) {
                i.call(this, n)
            }
            ;
            return m.prototype = {
                type: "image",
                brush: function(D, G, w) {
                    var B = this.style || {};
                    G && (B = this.getHighlightStyle(B, this.highlightStyle || {}));
                    var F = B.image
                      , v = this;
                    if (this._imageCache || (this._imageCache = {}),
                    "string" == typeof F) {
                        var q = F;
                        this._imageCache[q] ? F = this._imageCache[q] : (F = new Image,
                        F.onload = function() {
                            F.onload = null ,
                            v.modSelf(),
                            w()
                        }
                        ,
                        F.src = q,
                        this._imageCache[q] = F)
                    }
                    if (F) {
                        if ("IMG" == F.nodeName.toUpperCase()) {
                            if (window.ActiveXObject) {
                                if ("complete" != F.readyState) {
                                    return
                                }
                            } else {
                                if (!F.complete) {
                                    return
                                }
                            }
                        }
                        var H = B.width || F.width
                          , A = B.height || F.height
                          , C = B.x
                          , y = B.y;
                        if (!F.width || !F.height) {
                            return
                        }
                        if (D.save(),
                        this.doClip(D),
                        this.setContext(D, B),
                        this.setTransform(D),
                        B.sWidth && B.sHeight) {
                            var x = B.sx || 0
                              , z = B.sy || 0;
                            D.drawImage(F, x, z, B.sWidth, B.sHeight, C, y, H, A)
                        } else {
                            if (B.sx && B.sy) {
                                var x = B.sx
                                  , z = B.sy
                                  , E = H - x
                                  , u = A - z;
                                D.drawImage(F, x, z, E, u, C, y, H, A)
                            } else {
                                D.drawImage(F, C, y, H, A)
                            }
                        }
                        B.width || (B.width = H),
                        B.height || (B.height = A),
                        this.style.width || (this.style.width = H),
                        this.style.height || (this.style.height = A),
                        this.drawText(D, B, this.style),
                        D.restore()
                    }
                },
                getRect: function(n) {
                    return {
                        x: n.x,
                        y: n.y,
                        width: n.width,
                        height: n.height
                    }
                },
                clearCache: function() {
                    this._imageCache = {}
                }
            },
            l("../tool/util").inherits(m, i),
            m
        }
        ),
        k("zrender/loadingEffect/Bar", ["require", "./Base", "../tool/util", "../tool/color", "../shape/Rectangle"], function(q) {
            function p(i) {
                s.call(this, i)
            }
            var s = q("./Base")
              , m = q("../tool/util")
              , l = q("../tool/color")
              , r = q("../shape/Rectangle");
            return m.inherits(p, s),
            p.prototype._start = function(x, o) {
                var y = m.merge(this.options, {
                    textStyle: {
                        color: "#888"
                    },
                    backgroundColor: "rgba(250, 250, 250, 0.8)",
                    effectOption: {
                        x: 0,
                        y: this.canvasHeight / 2 - 30,
                        width: this.canvasWidth,
                        height: 5,
                        brushType: "fill",
                        timeInterval: 100
                    }
                })
                  , w = this.createTextShape(y.textStyle)
                  , v = this.createBackgroundShape(y.backgroundColor)
                  , i = y.effectOption
                  , u = new r({
                    highlightStyle: m.clone(i)
                });
                return u.highlightStyle.color = i.color || l.getLinearGradient(i.x, i.y, i.x + i.width, i.y + i.height, [[0, "#ff6400"], [0.5, "#ffe100"], [1, "#b1ff00"]]),
                null  != y.progress ? (x(v),
                u.highlightStyle.width = this.adjust(y.progress, [0, 1]) * y.effectOption.width,
                x(u),
                x(w),
                o(),
                void 0) : (u.highlightStyle.width = 0,
                setInterval(function() {
                    x(v),
                    u.highlightStyle.width < i.width ? u.highlightStyle.width += 8 : u.highlightStyle.width = 0,
                    x(u),
                    x(w),
                    o()
                }
                , i.timeInterval))
            }
            ,
            p
        }
        ),
        k("zrender/loadingEffect/Bubble", ["require", "./Base", "../tool/util", "../tool/color", "../shape/Circle"], function(q) {
            function p(i) {
                s.call(this, i)
            }
            var s = q("./Base")
              , m = q("../tool/util")
              , l = q("../tool/color")
              , r = q("../shape/Circle");
            return m.inherits(p, s),
            p.prototype._start = function(B, F) {
                for (var v = m.merge(this.options, {
                    textStyle: {
                        color: "#888"
                    },
                    backgroundColor: "rgba(250, 250, 250, 0.8)",
                    effect: {
                        n: 50,
                        lineWidth: 2,
                        brushType: "stroke",
                        color: "random",
                        timeInterval: 100
                    }
                }), i = this.createTextShape(v.textStyle), G = this.createBackgroundShape(v.backgroundColor), z = v.effect, A = z.n, x = z.brushType, w = z.lineWidth, y = [], C = this.canvasWidth, o = this.canvasHeight, D = 0; A > D; D++) {
                    var E = "random" == z.color ? l.alpha(l.random(), 0.3) : z.color;
                    y[D] = new r({
                        highlightStyle: {
                            x: Math.ceil(Math.random() * C),
                            y: Math.ceil(Math.random() * o),
                            r: Math.ceil(40 * Math.random()),
                            brushType: x,
                            color: E,
                            strokeColor: E,
                            lineWidth: w
                        },
                        animationY: Math.ceil(20 * Math.random())
                    })
                }
                return setInterval(function() {
                    B(G);
                    for (var t = 0; A > t; t++) {
                        var e = y[t].highlightStyle;
                        0 >= e.y - y[t].animationY + e.r && (y[t].highlightStyle.y = o + e.r,
                        y[t].highlightStyle.x = Math.ceil(Math.random() * C)),
                        y[t].highlightStyle.y -= y[t].animationY,
                        B(y[t])
                    }
                    B(i),
                    F()
                }
                , z.timeInterval)
            }
            ,
            p
        }
        ),
        k("zrender/loadingEffect/DynamicLine", ["require", "./Base", "../tool/util", "../tool/color", "../shape/Line"], function(q) {
            function p(i) {
                s.call(this, i)
            }
            var s = q("./Base")
              , m = q("../tool/util")
              , l = q("../tool/color")
              , r = q("../shape/Line");
            return m.inherits(p, s),
            p.prototype._start = function(D, I) {
                for (var v = m.merge(this.options, {
                    textStyle: {
                        color: "#fff"
                    },
                    backgroundColor: "rgba(0, 0, 0, 0.8)",
                    effectOption: {
                        n: 30,
                        lineWidth: 1,
                        color: "random",
                        timeInterval: 100
                    }
                }), i = this.createTextShape(v.textStyle), J = this.createBackgroundShape(v.backgroundColor), A = v.effectOption, B = A.n, x = A.lineWidth, w = [], z = this.canvasWidth, E = this.canvasHeight, o = 0; B > o; o++) {
                    var F = -Math.ceil(1000 * Math.random())
                      , H = Math.ceil(400 * Math.random())
                      , G = Math.ceil(Math.random() * E)
                      , C = "random" == A.color ? l.random() : A.color;
                    w[o] = new r({
                        highlightStyle: {
                            xStart: F,
                            yStart: G,
                            xEnd: F + H,
                            yEnd: G,
                            strokeColor: C,
                            lineWidth: x
                        },
                        animationX: Math.ceil(100 * Math.random()),
                        len: H
                    })
                }
                return setInterval(function() {
                    D(J);
                    for (var t = 0; B > t; t++) {
                        var e = w[t].highlightStyle;
                        e.xStart >= z && (w[t].len = Math.ceil(400 * Math.random()),
                        e.xStart = -400,
                        e.xEnd = -400 + w[t].len,
                        e.yStart = Math.ceil(Math.random() * E),
                        e.yEnd = e.yStart),
                        e.xStart += w[t].animationX,
                        e.xEnd += w[t].animationX,
                        D(w[t])
                    }
                    D(i),
                    I()
                }
                , A.timeInterval)
            }
            ,
            p
        }
        ),
        k("zrender/loadingEffect/Ring", ["require", "./Base", "../tool/util", "../tool/color", "../shape/Ring", "../shape/Sector"], function(s) {
            function p(i) {
                v.call(this, i)
            }
            var v = s("./Base")
              , m = s("../tool/util")
              , l = s("../tool/color")
              , u = s("../shape/Ring")
              , q = s("../shape/Sector");
            return m.inherits(p, v),
            p.prototype._start = function(K, A) {
                var D = m.merge(this.options, {
                    textStyle: {
                        color: "#07a"
                    },
                    backgroundColor: "rgba(250, 250, 250, 0.8)",
                    effect: {
                        x: this.canvasWidth / 2,
                        y: this.canvasHeight / 2,
                        r0: 60,
                        r: 100,
                        color: "#bbdcff",
                        brushType: "fill",
                        textPosition: "inside",
                        textFont: "normal 30px verdana",
                        textColor: "rgba(30, 144, 255, 0.6)",
                        timeInterval: 100
                    }
                })
                  , B = D.effect
                  , F = D.textStyle;
                null  == F.x && (F.x = B.x),
                null  == F.y && (F.y = B.y + (B.r0 + B.r) / 2 - 5);
                for (var H = this.createTextShape(D.textStyle), E = this.createBackgroundShape(D.backgroundColor), i = B.x, o = B.y, L = B.r0 + 6, C = B.r - 6, M = B.color, z = l.lift(M, 0.1), r = new u({
                    highlightStyle: m.clone(B)
                }), I = [], N = l.getGradientColors(["#ff6400", "#ffe100", "#97ff00"], 25), J = 15, G = 240, w = 0; 16 > w; w++) {
                    I.push(new q({
                        highlightStyle: {
                            x: i,
                            y: o,
                            r0: L,
                            r: C,
                            startAngle: G - J,
                            endAngle: G,
                            brushType: "fill",
                            color: z
                        },
                        _color: l.getLinearGradient(i + L * Math.cos(G, !0), o - L * Math.sin(G, !0), i + L * Math.cos(G - J, !0), o - L * Math.sin(G - J, !0), [[0, N[2 * w]], [1, N[2 * w + 1]]])
                    })),
                    G -= J
                }
                G = 360;
                for (var w = 0; 4 > w; w++) {
                    I.push(new q({
                        highlightStyle: {
                            x: i,
                            y: o,
                            r0: L,
                            r: C,
                            startAngle: G - J,
                            endAngle: G,
                            brushType: "fill",
                            color: z
                        },
                        _color: l.getLinearGradient(i + L * Math.cos(G, !0), o - L * Math.sin(G, !0), i + L * Math.cos(G - J, !0), o - L * Math.sin(G - J, !0), [[0, N[2 * w + 32]], [1, N[2 * w + 33]]])
                    })),
                    G -= J
                }
                var O = 0;
                if (null  != D.progress) {
                    K(E),
                    O = 100 * this.adjust(D.progress, [0, 1]).toFixed(2) / 5,
                    r.highlightStyle.text = 5 * O + "%",
                    K(r);
                    for (var w = 0; 20 > w; w++) {
                        I[w].highlightStyle.color = O > w ? I[w]._color : z,
                        K(I[w])
                    }
                    return K(H),
                    A(),
                    void 0
                }
                return setInterval(function() {
                    K(E),
                    O += O >= 20 ? -20 : 1,
                    K(r);
                    for (var e = 0; 20 > e; e++) {
                        I[e].highlightStyle.color = O > e ? I[e]._color : z,
                        K(I[e])
                    }
                    K(H),
                    A()
                }
                , B.timeInterval)
            }
            ,
            p
        }
        ),
        k("zrender/loadingEffect/Spin", ["require", "./Base", "../tool/util", "../tool/color", "../tool/area", "../shape/Sector"], function(s) {
            function p(i) {
                v.call(this, i)
            }
            var v = s("./Base")
              , m = s("../tool/util")
              , l = s("../tool/color")
              , u = s("../tool/area")
              , q = s("../shape/Sector");
            return m.inherits(p, v),
            p.prototype._start = function(K, A) {
                var D = m.merge(this.options, {
                    textStyle: {
                        color: "#fff",
                        textAlign: "start"
                    },
                    backgroundColor: "rgba(0, 0, 0, 0.8)"
                })
                  , B = this.createTextShape(D.textStyle)
                  , F = 10
                  , H = u.getTextWidth(B.highlightStyle.text, B.highlightStyle.textFont)
                  , E = u.getTextHeight(B.highlightStyle.text, B.highlightStyle.textFont)
                  , i = m.merge(this.options.effect || {}, {
                    r0: 9,
                    r: 15,
                    n: 18,
                    color: "#fff",
                    timeInterval: 100
                })
                  , o = this.getLocation(this.options.textStyle, H + F + 2 * i.r, Math.max(2 * i.r, E));
                i.x = o.x + i.r,
                i.y = B.highlightStyle.y = o.y + o.height / 2,
                B.highlightStyle.x = i.x + i.r + F;
                for (var L = this.createBackgroundShape(D.backgroundColor), C = i.n, M = i.x, z = i.y, r = i.r0, I = i.r, N = i.color, J = [], G = Math.round(180 / C), w = 0; C > w; w++) {
                    J[w] = new q({
                        highlightStyle: {
                            x: M,
                            y: z,
                            r0: r,
                            r: I,
                            startAngle: 2 * G * w,
                            endAngle: 2 * G * w + G,
                            color: l.alpha(N, (w + 1) / C),
                            brushType: "fill"
                        }
                    })
                }
                var O = [0, M, z];
                return setInterval(function() {
                    K(L),
                    O[0] -= 0.3;
                    for (var e = 0; C > e; e++) {
                        J[e].rotation = O,
                        K(J[e])
                    }
                    K(B),
                    A()
                }
                , i.timeInterval)
            }
            ,
            p
        }
        ),
        k("zrender/loadingEffect/Whirling", ["require", "./Base", "../tool/util", "../tool/area", "../shape/Ring", "../shape/Droplet", "../shape/Circle"], function(v) {
            function p(i) {
                x.call(this, i)
            }
            var x = v("./Base")
              , m = v("../tool/util")
              , l = v("../tool/area")
              , w = v("../shape/Ring")
              , u = v("../shape/Droplet")
              , q = v("../shape/Circle");
            return m.inherits(p, x),
            p.prototype._start = function(D, I) {
                var o = m.merge(this.options, {
                    textStyle: {
                        color: "#888",
                        textAlign: "start"
                    },
                    backgroundColor: "rgba(250, 250, 250, 0.8)"
                })
                  , A = this.createTextShape(o.textStyle)
                  , B = 10
                  , s = l.getTextWidth(A.highlightStyle.text, A.highlightStyle.textFont)
                  , r = l.getTextHeight(A.highlightStyle.text, A.highlightStyle.textFont)
                  , z = m.merge(this.options.effect || {}, {
                    r: 18,
                    colorIn: "#fff",
                    colorOut: "#555",
                    colorWhirl: "#6cf",
                    timeInterval: 50
                })
                  , E = this.getLocation(this.options.textStyle, s + B + 2 * z.r, Math.max(2 * z.r, r));
                z.x = E.x + z.r,
                z.y = A.highlightStyle.y = E.y + E.height / 2,
                A.highlightStyle.x = z.x + z.r + B;
                var i = this.createBackgroundShape(o.backgroundColor)
                  , F = new u({
                    highlightStyle: {
                        a: Math.round(z.r / 2),
                        b: Math.round(z.r - z.r / 6),
                        brushType: "fill",
                        color: z.colorWhirl
                    }
                })
                  , H = new q({
                    highlightStyle: {
                        r: Math.round(z.r / 6),
                        brushType: "fill",
                        color: z.colorIn
                    }
                })
                  , G = new w({
                    highlightStyle: {
                        r0: Math.round(z.r - z.r / 3),
                        r: z.r,
                        brushType: "fill",
                        color: z.colorOut
                    }
                })
                  , C = [0, z.x, z.y];
                return F.highlightStyle.x = H.highlightStyle.x = G.highlightStyle.x = C[1],
                F.highlightStyle.y = H.highlightStyle.y = G.highlightStyle.y = C[2],
                setInterval(function() {
                    D(i),
                    D(G),
                    C[0] -= 0.3,
                    F.rotation = C,
                    D(F),
                    D(H),
                    D(A),
                    I()
                }
                , z.timeInterval)
            }
            ,
            p
        }
        ),
        k("echarts/theme/macarons", [], function() {
            var i = {
                color: ["#2ec7c9", "#b6a2de", "#5ab1ef", "#ffb980", "#d87a80", "#8d98b3", "#e5cf0d", "#97b552", "#95706d", "#dc69aa", "#07a2a4", "#9a7fd1", "#588dd5", "#f5994e", "#c05050", "#59678c", "#c9ab00", "#7eb00a", "#6f5553", "#c14089"],
                title: {
                    textStyle: {
                        fontWeight: "normal",
                        color: "#008acd"
                    }
                },
                dataRange: {
                    itemWidth: 15,
                    color: ["#5ab1ef", "#e0ffff"]
                },
                toolbox: {
                    color: ["#1e90ff", "#1e90ff", "#1e90ff", "#1e90ff"],
                    effectiveColor: "#ff4500"
                },
                tooltip: {
                    backgroundColor: "rgba(50,50,50,0.5)",
                    axisPointer: {
                        type: "line",
                        lineStyle: {
                            color: "#008acd"
                        },
                        crossStyle: {
                            color: "#008acd"
                        },
                        shadowStyle: {
                            color: "rgba(200,200,200,0.2)"
                        }
                    }
                },
                dataZoom: {
                    dataBackgroundColor: "#efefff",
                    fillerColor: "rgba(182,162,222,0.2)",
                    handleColor: "#008acd"
                },
                grid: {
                    borderColor: "#eee"
                },
                categoryAxis: {
                    axisLine: {
                        lineStyle: {
                            color: "#008acd"
                        }
                    },
                    splitLine: {
                        lineStyle: {
                            color: ["#eee"]
                        }
                    }
                },
                valueAxis: {
                    axisLine: {
                        lineStyle: {
                            color: "#008acd"
                        }
                    },
                    splitArea: {
                        show: !0,
                        areaStyle: {
                            color: ["rgba(250,250,250,0.1)", "rgba(200,200,200,0.1)"]
                        }
                    },
                    splitLine: {
                        lineStyle: {
                            color: ["#eee"]
                        }
                    }
                },
                polar: {
                    axisLine: {
                        lineStyle: {
                            color: "#ddd"
                        }
                    },
                    splitArea: {
                        show: !0,
                        areaStyle: {
                            color: ["rgba(250,250,250,0.2)", "rgba(200,200,200,0.2)"]
                        }
                    },
                    splitLine: {
                        lineStyle: {
                            color: "#ddd"
                        }
                    }
                },
                timeline: {
                    lineStyle: {
                        color: "#008acd"
                    },
                    controlStyle: {
                        normal: {
                            color: "#008acd"
                        },
                        emphasis: {
                            color: "#008acd"
                        }
                    },
                    symbol: "emptyCircle",
                    symbolSize: 3
                },
                bar: {
                    itemStyle: {
                        normal: {
                            barBorderRadius: 5
                        },
                        emphasis: {
                            barBorderRadius: 5
                        }
                    }
                },
                line: {
                    smooth: !0,
                    symbol: "emptyCircle",
                    symbolSize: 3
                },
                k: {
                    itemStyle: {
                        normal: {
                            color: "#d87a80",
                            color0: "#2ec7c9",
                            lineStyle: {
                                color: "#d87a80",
                                color0: "#2ec7c9"
                            }
                        }
                    }
                },
                scatter: {
                    symbol: "circle",
                    symbolSize: 4
                },
                radar: {
                    symbol: "emptyCircle",
                    symbolSize: 3
                },
                map: {
                    itemStyle: {
                        normal: {
                            areaStyle: {
                                color: "#ddd"
                            },
                            label: {
                                textStyle: {
                                    color: "#d87a80"
                                }
                            }
                        },
                        emphasis: {
                            areaStyle: {
                                color: "#fe994e"
                            }
                        }
                    }
                },
                force: {
                    itemStyle: {
                        normal: {
                            linkStyle: {
                                color: "#1e90ff"
                            }
                        }
                    }
                },
                chord: {
                    itemStyle: {
                        normal: {
                            borderWidth: 1,
                            borderColor: "rgba(128, 128, 128, 0.5)",
                            chordStyle: {
                                lineStyle: {
                                    color: "rgba(128, 128, 128, 0.5)"
                                }
                            }
                        },
                        emphasis: {
                            borderWidth: 1,
                            borderColor: "rgba(128, 128, 128, 0.5)",
                            chordStyle: {
                                lineStyle: {
                                    color: "rgba(128, 128, 128, 0.5)"
                                }
                            }
                        }
                    }
                },
                gauge: {
                    axisLine: {
                        lineStyle: {
                            color: [[0.2, "#2ec7c9"], [0.8, "#5ab1ef"], [1, "#d87a80"]],
                            width: 10
                        }
                    },
                    axisTick: {
                        splitNumber: 10,
                        length: 15,
                        lineStyle: {
                            color: "auto"
                        }
                    },
                    splitLine: {
                        length: 22,
                        lineStyle: {
                            color: "auto"
                        }
                    },
                    pointer: {
                        width: 5
                    }
                },
                textStyle: {
                    fontFamily: "微软雅黑, Arial, Verdana, sans-serif"
                }
            };
            return i
        }
        ),
        k("echarts/theme/infographic", [], function() {
            var i = {
                color: ["#C1232B", "#B5C334", "#FCCE10", "#E87C25", "#27727B", "#FE8463", "#9BCA63", "#FAD860", "#F3A43B", "#60C0DD", "#D7504B", "#C6E579", "#F4E001", "#F0805A", "#26C0C0"],
                title: {
                    textStyle: {
                        fontWeight: "normal",
                        color: "#27727B"
                    }
                },
                dataRange: {
                    x: "right",
                    y: "center",
                    itemWidth: 5,
                    itemHeight: 25,
                    color: ["#C1232B", "#FCCE10"]
                },
                toolbox: {
                    color: ["#C1232B", "#B5C334", "#FCCE10", "#E87C25", "#27727B", "#FE8463", "#9BCA63", "#FAD860", "#F3A43B", "#60C0DD"],
                    effectiveColor: "#ff4500"
                },
                tooltip: {
                    backgroundColor: "rgba(50,50,50,0.5)",
                    axisPointer: {
                        type: "line",
                        lineStyle: {
                            color: "#27727B",
                            type: "dashed"
                        },
                        crossStyle: {
                            color: "#27727B"
                        },
                        shadowStyle: {
                            color: "rgba(200,200,200,0.3)"
                        }
                    }
                },
                dataZoom: {
                    dataBackgroundColor: "rgba(181,195,52,0.3)",
                    fillerColor: "rgba(181,195,52,0.2)",
                    handleColor: "#27727B"
                },
                grid: {
                    borderWidth: 0
                },
                categoryAxis: {
                    axisLine: {
                        lineStyle: {
                            color: "#27727B"
                        }
                    },
                    splitLine: {
                        show: !1
                    }
                },
                valueAxis: {
                    axisLine: {
                        show: !1
                    },
                    splitArea: {
                        show: !1
                    },
                    splitLine: {
                        lineStyle: {
                            color: ["#ccc"],
                            type: "dashed"
                        }
                    }
                },
                polar: {
                    axisLine: {
                        lineStyle: {
                            color: "#ddd"
                        }
                    },
                    splitArea: {
                        show: !0,
                        areaStyle: {
                            color: ["rgba(250,250,250,0.2)", "rgba(200,200,200,0.2)"]
                        }
                    },
                    splitLine: {
                        lineStyle: {
                            color: "#ddd"
                        }
                    }
                },
                timeline: {
                    lineStyle: {
                        color: "#27727B"
                    },
                    controlStyle: {
                        normal: {
                            color: "#27727B"
                        },
                        emphasis: {
                            color: "#27727B"
                        }
                    },
                    symbol: "emptyCircle",
                    symbolSize: 3
                },
                line: {
                    itemStyle: {
                        normal: {
                            borderWidth: 2,
                            borderColor: "#fff",
                            lineStyle: {
                                width: 3
                            }
                        },
                        emphasis: {
                            borderWidth: 0
                        }
                    },
                    symbol: "circle",
                    symbolSize: 3.5
                },
                k: {
                    itemStyle: {
                        normal: {
                            color: "#C1232B",
                            color0: "#B5C334",
                            lineStyle: {
                                width: 1,
                                color: "#C1232B",
                                color0: "#B5C334"
                            }
                        }
                    }
                },
                scatter: {
                    itemStyle: {
                        normal: {
                            borderWidth: 1,
                            borderColor: "rgba(200,200,200,0.5)"
                        },
                        emphasis: {
                            borderWidth: 0
                        }
                    },
                    symbol: "star4",
                    symbolSize: 4
                },
                radar: {
                    symbol: "emptyCircle",
                    symbolSize: 3
                },
                map: {
                    itemStyle: {
                        normal: {
                            areaStyle: {
                                color: "#ddd"
                            },
                            label: {
                                textStyle: {
                                    color: "#C1232B"
                                }
                            }
                        },
                        emphasis: {
                            areaStyle: {
                                color: "#fe994e"
                            },
                            label: {
                                textStyle: {
                                    color: "rgb(100,0,0)"
                                }
                            }
                        }
                    }
                },
                force: {
                    itemStyle: {
                        normal: {
                            linkStyle: {
                                color: "#27727B"
                            }
                        }
                    }
                },
                chord: {
                    itemStyle: {
                        normal: {
                            borderWidth: 1,
                            borderColor: "rgba(128, 128, 128, 0.5)",
                            chordStyle: {
                                lineStyle: {
                                    color: "rgba(128, 128, 128, 0.5)"
                                }
                            }
                        },
                        emphasis: {
                            borderWidth: 1,
                            borderColor: "rgba(128, 128, 128, 0.5)",
                            chordStyle: {
                                lineStyle: {
                                    color: "rgba(128, 128, 128, 0.5)"
                                }
                            }
                        }
                    }
                },
                gauge: {
                    center: ["50%", "80%"],
                    radius: "100%",
                    startAngle: 180,
                    endAngle: 0,
                    axisLine: {
                        show: !0,
                        lineStyle: {
                            color: [[0.2, "#B5C334"], [0.8, "#27727B"], [1, "#C1232B"]],
                            width: "40%"
                        }
                    },
                    axisTick: {
                        splitNumber: 2,
                        length: 5,
                        lineStyle: {
                            color: "#fff"
                        }
                    },
                    axisLabel: {
                        textStyle: {
                            color: "#fff",
                            fontWeight: "bolder"
                        }
                    },
                    splitLine: {
                        length: "5%",
                        lineStyle: {
                            color: "#fff"
                        }
                    },
                    pointer: {
                        width: "40%",
                        length: "80%",
                        color: "#fff"
                    },
                    title: {
                        offsetCenter: [0, -20],
                        textStyle: {
                            color: "auto",
                            fontSize: 20
                        }
                    },
                    detail: {
                        offsetCenter: [0, 0],
                        textStyle: {
                            color: "auto",
                            fontSize: 40
                        }
                    }
                },
                textStyle: {
                    fontFamily: "微软雅黑, Arial, Verdana, sans-serif"
                }
            };
            return i
        }
        ),
        k("zrender/dep/excanvas", ["require"], function() {
            return document.createElement("canvas").getContext ? G_vmlCanvasManager = !1 : function() {
                function aV() {
                    return this.context_ || (this.context_ = new aU(this))
                }
                function aH(l, i) {
                    var m = al.call(arguments, 2);
                    return function() {
                        return l.apply(i, m.concat(al.call(arguments)))
                    }
                }
                function aN(i) {
                    return (i + "").replace(/&/g, "&amp;").replace(/"/g, "&quot;")
                }
                function aR(l, i, m) {
                    l.namespaces[i] || l.namespaces.add(i, m, "#default#VML")
                }
                function aZ(l) {
                    if (aR(l, "g_vml_", "urn:schemas-microsoft-com:vml"),
                    aR(l, "g_o_", "urn:schemas-microsoft-com:office:office"),
                    !l.styleSheets.ex_canvas_) {
                        var i = l.createStyleSheet();
                        i.owningElement.id = "ex_canvas_",
                        i.cssText = "canvas{display:inline-block;overflow:hidden;text-align:left;width:300px;height:150px}"
                    }
                }
                function aM(l) {
                    var i = l.srcElement;
                    switch (l.propertyName) {
                    case "width":
                        i.getContext().clearRect(),
                        i.style.width = i.attributes.width.nodeValue + "px",
                        i.firstChild.style.width = i.clientWidth + "px";
                        break;
                    case "height":
                        i.getContext().clearRect(),
                        i.style.height = i.attributes.height.nodeValue + "px",
                        i.firstChild.style.height = i.clientHeight + "px"
                    }
                }
                function aJ(l) {
                    var i = l.srcElement;
                    i.firstChild && (i.firstChild.style.width = i.clientWidth + "px",
                    i.firstChild.style.height = i.clientHeight + "px")
                }
                function aI() {
                    return [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
                }
                function aP(s, p) {
                    for (var v = aI(), m = 0; 3 > m; m++) {
                        for (var l = 0; 3 > l; l++) {
                            for (var u = 0, q = 0; 3 > q; q++) {
                                u += s[m][q] * p[q][l]
                            }
                            v[m][l] = u
                        }
                    }
                    return v
                }
                function aS(l, i) {
                    i.fillStyle = l.fillStyle,
                    i.lineCap = l.lineCap,
                    i.lineJoin = l.lineJoin,
                    i.lineWidth = l.lineWidth,
                    i.miterLimit = l.miterLimit,
                    i.shadowBlur = l.shadowBlur,
                    i.shadowColor = l.shadowColor,
                    i.shadowOffsetX = l.shadowOffsetX,
                    i.shadowOffsetY = l.shadowOffsetY,
                    i.strokeStyle = l.strokeStyle,
                    i.globalAlpha = l.globalAlpha,
                    i.font = l.font,
                    i.textAlign = l.textAlign,
                    i.textBaseline = l.textBaseline,
                    i.scaleX_ = l.scaleX_,
                    i.scaleY_ = l.scaleY_,
                    i.lineScale_ = l.lineScale_
                }
                function aO(o) {
                    var m = o.indexOf("(", 3)
                      , p = o.indexOf(")", m + 1)
                      , l = o.substring(m + 1, p).split(",");
                    return (4 != l.length || "a" != o.charAt(3)) && (l[3] = 1),
                    l
                }
                function ae(i) {
                    return parseFloat(i) / 100
                }
                function af(l, i, m) {
                    return Math.min(m, Math.max(i, l))
                }
                function aW(w) {
                    var y, q, v, x, p, m;
                    if (x = parseFloat(w[0]) / 360 % 360,
                    0 > x && x++,
                    p = af(ae(w[1]), 0, 1),
                    m = af(ae(w[2]), 0, 1),
                    0 == p) {
                        y = q = v = m
                    } else {
                        var z = 0.5 > m ? m * (1 + p) : m + p - m * p
                          , u = 2 * m - z;
                        y = aL(u, z, x + 1 / 3),
                        q = aL(u, z, x),
                        v = aL(u, z, x - 1 / 3)
                    }
                    return "#" + ax[Math.floor(255 * y)] + ax[Math.floor(255 * q)] + ax[Math.floor(255 * v)]
                }
                function aL(l, i, m) {
                    return 0 > m && m++,
                    m > 1 && m--,
                    1 > 6 * m ? l + 6 * (i - l) * m : 1 > 2 * m ? i : 2 > 3 * m ? l + 6 * (i - l) * (2 / 3 - m) : l
                }
                function aX(q) {
                    if (q in ai) {
                        return ai[q]
                    }
                    var p, s = 1;
                    if (q += "",
                    "#" == q.charAt(0)) {
                        p = q
                    } else {
                        if (/^rgb/.test(q)) {
                            for (var m, l = aO(q), p = "#", r = 0; 3 > r; r++) {
                                m = -1 != l[r].indexOf("%") ? Math.floor(255 * ae(l[r])) : +l[r],
                                p += ax[af(m, 0, 255)]
                            }
                            s = +l[3]
                        } else {
                            if (/^hsl/.test(q)) {
                                var l = aO(q);
                                p = aW(l),
                                s = l[3]
                            } else {
                                p = at[q] || q
                            }
                        }
                    }
                    return ai[q] = {
                        color: p,
                        alpha: s
                    }
                }
                function aG(p) {
                    if (ab[p]) {
                        return ab[p]
                    }
                    var o, q = document.createElement("div"), m = q.style;
                    try {
                        m.font = p,
                        o = m.fontFamily.split(",")[0]
                    } catch (l) {}
                    return ab[p] = {
                        style: m.fontStyle || au.style,
                        variant: m.fontVariant || au.variant,
                        weight: m.fontWeight || au.weight,
                        size: m.fontSize || au.size,
                        family: o || au.family
                    }
                }
                function aC(q, p) {
                    var s = {};
                    for (var m in q) {
                        s[m] = q[m]
                    }
                    var l = parseFloat(p.currentStyle.fontSize)
                      , r = parseFloat(q.size);
                    return s.size = "number" == typeof q.size ? q.size : -1 != q.size.indexOf("px") ? r : -1 != q.size.indexOf("em") ? l * r : -1 != q.size.indexOf("%") ? l / 100 * r : -1 != q.size.indexOf("pt") ? r / 0.75 : l,
                    s
                }
                function aT(i) {
                    return i.style + " " + i.variant + " " + i.weight + " " + i.size + "px '" + i.family + "'"
                }
                function aY(i) {
                    return aj[i] || "square"
                }
                function aU(o) {
                    this.m_ = aI(),
                    this.mStack_ = [],
                    this.aStack_ = [],
                    this.currentPath_ = [],
                    this.strokeStyle = "#000",
                    this.fillStyle = "#000",
                    this.lineWidth = 1,
                    this.lineJoin = "miter",
                    this.lineCap = "butt",
                    this.miterLimit = 1 * an,
                    this.globalAlpha = 1,
                    this.font = "12px 微软雅黑",
                    this.textAlign = "left",
                    this.textBaseline = "alphabetic",
                    this.canvas = o;
                    var m = "width:" + o.clientWidth + "px;height:" + o.clientHeight + "px;overflow:hidden;position:absolute"
                      , p = o.ownerDocument.createElement("div");
                    p.style.cssText = m,
                    o.appendChild(p);
                    var l = p.cloneNode(!1);
                    l.style.backgroundColor = "#fff",
                    l.style.filter = "alpha(opacity=0)",
                    o.appendChild(l),
                    this.element_ = p,
                    this.scaleX_ = 1,
                    this.scaleY_ = 1,
                    this.lineScale_ = 1
                }
                function aQ(o, m, p, l) {
                    o.currentPath_.push({
                        type: "bezierCurveTo",
                        cp1x: m.x,
                        cp1y: m.y,
                        cp2x: p.x,
                        cp2y: p.y,
                        x: l.x,
                        y: l.y
                    }),
                    o.currentX_ = l.x,
                    o.currentY_ = l.y
                }
                function aD(q, p) {
                    var s = aX(q.strokeStyle)
                      , m = s.color
                      , l = s.alpha * q.globalAlpha
                      , r = q.lineScale_ * q.lineWidth;
                    1 > r && (l *= r),
                    p.push("<g_vml_:stroke", ' opacity="', l, '"', ' joinstyle="', q.lineJoin, '"', ' miterlimit="', q.miterLimit, '"', ' endcap="', aY(q.lineCap), '"', ' weight="', r, 'px"', ' color="', m, '" />')
                }
                function a0(bh, a4, a9, bd) {
                    var bk = bh.fillStyle
                      , a8 = bh.scaleX_
                      , a6 = bh.scaleY_
                      , a5 = bd.x - a9.x
                      , bb = bd.y - a9.y;
                    if (bk instanceof ap) {
                        var be = 0
                          , ba = {
                            x: 0,
                            y: 0
                        }
                          , B = 0
                          , C = 1;
                        if ("gradient" == bk.type_) {
                            var bi = bk.x0_ / a8
                              , a7 = bk.y0_ / a6
                              , a3 = bk.x1_ / a8
                              , Z = bk.y1_ / a6
                              , bf = ao(bh, bi, a7)
                              , bj = ao(bh, a3, Z)
                              , bg = bj.x - bf.x
                              , bc = bj.y - bf.y;
                            be = 180 * Math.atan2(bg, bc) / Math.PI,
                            0 > be && (be += 360),
                            0.000001 > be && (be = 0)
                        } else {
                            var bf = ao(bh, bk.x0_, bk.y0_);
                            ba = {
                                x: (bf.x - a9.x) / a5,
                                y: (bf.y - a9.y) / bb
                            },
                            a5 /= a8 * an,
                            bb /= a6 * an;
                            var a1 = ay.max(a5, bb);
                            B = 2 * bk.r0_ / a1,
                            C = 2 * bk.r1_ / a1 - B
                        }
                        var bl = bk.colors_;
                        bl.sort(function(l, i) {
                            return l.offset - i.offset
                        }
                        );
                        for (var v = bl.length, q = bl[0].color, a2 = bl[v - 1].color, M = bl[0].alpha * bh.globalAlpha, L = bl[v - 1].alpha * bh.globalAlpha, G = [], Q = 0; v > Q; Q++) {
                            var N = bl[Q];
                            G.push(N.offset * C + B + " " + N.color)
                        }
                        a4.push('<g_vml_:fill type="', bk.type_, '"', ' method="none" focus="100%"', ' color="', q, '"', ' color2="', a2, '"', ' colors="', G.join(","), '"', ' opacity="', L, '"', ' g_o_:opacity2="', M, '"', ' angle="', be, '"', ' focusposition="', ba.x, ",", ba.y, '" />')
                    } else {
                        if (bk instanceof aF) {
                            if (a5 && bb) {
                                var D = -a9.x
                                  , R = -a9.y;
                                a4.push("<g_vml_:fill", ' position="', D / a5 * a8 * a8, ",", R / bb * a6 * a6, '"', ' type="tile"', ' src="', bk.src_, '" />')
                            }
                        } else {
                            var Y = aX(bh.fillStyle)
                              , K = Y.color
                              , H = Y.alpha * bh.globalAlpha;
                            a4.push('<g_vml_:fill color="', K, '" opacity="', H, '" />')
                        }
                    }
                }
                function ao(o, m, p) {
                    var l = o.m_;
                    return {
                        x: an * (m * l[0][0] + p * l[1][0] + l[2][0]) - aB,
                        y: an * (m * l[0][1] + p * l[1][1] + l[2][1]) - aB
                    }
                }
                function ad(i) {
                    return isFinite(i[0][0]) && isFinite(i[0][1]) && isFinite(i[1][0]) && isFinite(i[1][1]) && isFinite(i[2][0]) && isFinite(i[2][1])
                }
                function ac(o, m, p) {
                    if (ad(m) && (o.m_ = m,
                    o.scaleX_ = Math.sqrt(m[0][0] * m[0][0] + m[0][1] * m[0][1]),
                    o.scaleY_ = Math.sqrt(m[1][0] * m[1][0] + m[1][1] * m[1][1]),
                    p)) {
                        var l = m[0][0] * m[1][1] - m[0][1] * m[1][0];
                        o.lineScale_ = aA(ag(l))
                    }
                }
                function ap(i) {
                    this.type_ = i,
                    this.x0_ = 0,
                    this.y0_ = 0,
                    this.r0_ = 0,
                    this.x1_ = 0,
                    this.y1_ = 0,
                    this.r1_ = 0,
                    this.colors_ = []
                }
                function aF(l, i) {
                    switch (ar(l),
                    i) {
                    case "repeat":
                    case null :
                    case "":
                        this.repetition_ = "repeat";
                        break;
                    case "repeat-x":
                    case "repeat-y":
                    case "no-repeat":
                        this.repetition_ = i;
                        break;
                    default:
                        aE("SYNTAX_ERR")
                    }
                    this.src_ = l.src,
                    this.width_ = l.width,
                    this.height_ = l.height
                }
                function aE(i) {
                    throw new aq(i)
                }
                function ar(i) {
                    i && 1 == i.nodeType && "IMG" == i.tagName || aE("TYPE_MISMATCH_ERR"),
                    "complete" != i.readyState && aE("INVALID_STATE_ERR")
                }
                function aq(i) {
                    this.code = this[i],
                    this.message = i + ": DOM Exception " + this.code
                }
                var ay = Math
                  , ah = ay.round
                  , aw = ay.sin
                  , av = ay.cos
                  , ag = ay.abs
                  , aA = ay.sqrt
                  , an = 10
                  , aB = an / 2;
                +navigator.userAgent.match(/MSIE ([\d.]+)?/)[1];
                var al = Array.prototype.slice;
                aZ(document);
                var ak = {
                    init: function(i) {
                        var l = i || document;
                        l.createElement("canvas"),
                        l.attachEvent("onreadystatechange", aH(this.init_, this, l))
                    },
                    init_: function(l) {
                        for (var i = l.getElementsByTagName("canvas"), m = 0; i.length > m; m++) {
                            this.initElement(i[m])
                        }
                    },
                    initElement: function(e) {
                        if (!e.getContext) {
                            e.getContext = aV,
                            aZ(e.ownerDocument),
                            e.innerHTML = "",
                            e.attachEvent("onpropertychange", aM),
                            e.attachEvent("onresize", aJ);
                            var i = e.attributes;
                            i.width && i.width.specified ? e.style.width = i.width.nodeValue + "px" : e.width = e.clientWidth,
                            i.height && i.height.specified ? e.style.height = i.height.nodeValue + "px" : e.height = e.clientHeight
                        }
                        return e
                    }
                };
                ak.init();
                for (var ax = [], am = 0; 16 > am; am++) {
                    for (var az = 0; 16 > az; az++) {
                        ax[16 * am + az] = am.toString(16) + az.toString(16)
                    }
                }
                var at = {
                    aliceblue: "#F0F8FF",
                    antiquewhite: "#FAEBD7",
                    aquamarine: "#7FFFD4",
                    azure: "#F0FFFF",
                    beige: "#F5F5DC",
                    bisque: "#FFE4C4",
                    black: "#000000",
                    blanchedalmond: "#FFEBCD",
                    blueviolet: "#8A2BE2",
                    brown: "#A52A2A",
                    burlywood: "#DEB887",
                    cadetblue: "#5F9EA0",
                    chartreuse: "#7FFF00",
                    chocolate: "#D2691E",
                    coral: "#FF7F50",
                    cornflowerblue: "#6495ED",
                    cornsilk: "#FFF8DC",
                    crimson: "#DC143C",
                    cyan: "#00FFFF",
                    darkblue: "#00008B",
                    darkcyan: "#008B8B",
                    darkgoldenrod: "#B8860B",
                    darkgray: "#A9A9A9",
                    darkgreen: "#006400",
                    darkgrey: "#A9A9A9",
                    darkkhaki: "#BDB76B",
                    darkmagenta: "#8B008B",
                    darkolivegreen: "#556B2F",
                    darkorange: "#FF8C00",
                    darkorchid: "#9932CC",
                    darkred: "#8B0000",
                    darksalmon: "#E9967A",
                    darkseagreen: "#8FBC8F",
                    darkslateblue: "#483D8B",
                    darkslategray: "#2F4F4F",
                    darkslategrey: "#2F4F4F",
                    darkturquoise: "#00CED1",
                    darkviolet: "#9400D3",
                    deeppink: "#FF1493",
                    deepskyblue: "#00BFFF",
                    dimgray: "#696969",
                    dimgrey: "#696969",
                    dodgerblue: "#1E90FF",
                    firebrick: "#B22222",
                    floralwhite: "#FFFAF0",
                    forestgreen: "#228B22",
                    gainsboro: "#DCDCDC",
                    ghostwhite: "#F8F8FF",
                    gold: "#FFD700",
                    goldenrod: "#DAA520",
                    grey: "#808080",
                    greenyellow: "#ADFF2F",
                    honeydew: "#F0FFF0",
                    hotpink: "#FF69B4",
                    indianred: "#CD5C5C",
                    indigo: "#4B0082",
                    ivory: "#FFFFF0",
                    khaki: "#F0E68C",
                    lavender: "#E6E6FA",
                    lavenderblush: "#FFF0F5",
                    lawngreen: "#7CFC00",
                    lemonchiffon: "#FFFACD",
                    lightblue: "#ADD8E6",
                    lightcoral: "#F08080",
                    lightcyan: "#E0FFFF",
                    lightgoldenrodyellow: "#FAFAD2",
                    lightgreen: "#90EE90",
                    lightgrey: "#D3D3D3",
                    lightpink: "#FFB6C1",
                    lightsalmon: "#FFA07A",
                    lightseagreen: "#20B2AA",
                    lightskyblue: "#87CEFA",
                    lightslategray: "#778899",
                    lightslategrey: "#778899",
                    lightsteelblue: "#B0C4DE",
                    lightyellow: "#FFFFE0",
                    limegreen: "#32CD32",
                    linen: "#FAF0E6",
                    magenta: "#FF00FF",
                    mediumaquamarine: "#66CDAA",
                    mediumblue: "#0000CD",
                    mediumorchid: "#BA55D3",
                    mediumpurple: "#9370DB",
                    mediumseagreen: "#3CB371",
                    mediumslateblue: "#7B68EE",
                    mediumspringgreen: "#00FA9A",
                    mediumturquoise: "#48D1CC",
                    mediumvioletred: "#C71585",
                    midnightblue: "#191970",
                    mintcream: "#F5FFFA",
                    mistyrose: "#FFE4E1",
                    moccasin: "#FFE4B5",
                    navajowhite: "#FFDEAD",
                    oldlace: "#FDF5E6",
                    olivedrab: "#6B8E23",
                    orange: "#FFA500",
                    orangered: "#FF4500",
                    orchid: "#DA70D6",
                    palegoldenrod: "#EEE8AA",
                    palegreen: "#98FB98",
                    paleturquoise: "#AFEEEE",
                    palevioletred: "#DB7093",
                    papayawhip: "#FFEFD5",
                    peachpuff: "#FFDAB9",
                    peru: "#CD853F",
                    pink: "#FFC0CB",
                    plum: "#DDA0DD",
                    powderblue: "#B0E0E6",
                    rosybrown: "#BC8F8F",
                    royalblue: "#4169E1",
                    saddlebrown: "#8B4513",
                    salmon: "#FA8072",
                    sandybrown: "#F4A460",
                    seagreen: "#2E8B57",
                    seashell: "#FFF5EE",
                    sienna: "#A0522D",
                    skyblue: "#87CEEB",
                    slateblue: "#6A5ACD",
                    slategray: "#708090",
                    slategrey: "#708090",
                    snow: "#FFFAFA",
                    springgreen: "#00FF7F",
                    steelblue: "#4682B4",
                    tan: "#D2B48C",
                    thistle: "#D8BFD8",
                    tomato: "#FF6347",
                    turquoise: "#40E0D0",
                    violet: "#EE82EE",
                    wheat: "#F5DEB3",
                    whitesmoke: "#F5F5F5",
                    yellowgreen: "#9ACD32"
                }
                  , ai = {}
                  , au = {
                    style: "normal",
                    variant: "normal",
                    weight: "normal",
                    size: 12,
                    family: "微软雅黑"
                }
                  , ab = {}
                  , aj = {
                    butt: "flat",
                    round: "round"
                }
                  , aa = aU.prototype;
                aa.clearRect = function() {
                    this.textMeasureEl_ && (this.textMeasureEl_.removeNode(!0),
                    this.textMeasureEl_ = null ),
                    this.element_.innerHTML = ""
                }
                ,
                aa.beginPath = function() {
                    this.currentPath_ = []
                }
                ,
                aa.moveTo = function(l, i) {
                    var m = ao(this, l, i);
                    this.currentPath_.push({
                        type: "moveTo",
                        x: m.x,
                        y: m.y
                    }),
                    this.currentX_ = m.x,
                    this.currentY_ = m.y
                }
                ,
                aa.lineTo = function(l, i) {
                    var m = ao(this, l, i);
                    this.currentPath_.push({
                        type: "lineTo",
                        x: m.x,
                        y: m.y
                    }),
                    this.currentX_ = m.x,
                    this.currentY_ = m.y
                }
                ,
                aa.bezierCurveTo = function(w, y, q, v, x, p) {
                    var m = ao(this, x, p)
                      , z = ao(this, w, y)
                      , u = ao(this, q, v);
                    aQ(this, z, u, m)
                }
                ,
                aa.quadraticCurveTo = function(v, p, x, m) {
                    var l = ao(this, v, p)
                      , w = ao(this, x, m)
                      , u = {
                        x: this.currentX_ + 2 / 3 * (l.x - this.currentX_),
                        y: this.currentY_ + 2 / 3 * (l.y - this.currentY_)
                    }
                      , q = {
                        x: u.x + (w.x - this.currentX_) / 3,
                        y: u.y + (w.y - this.currentY_) / 3
                    };
                    aQ(this, u, q, w)
                }
                ,
                aa.arc = function(B, E, u, z, D, q) {
                    u *= an;
                    var p = q ? "at" : "wa"
                      , F = B + av(z) * u - aB
                      , y = E + aw(z) * u - aB
                      , A = B + av(D) * u - aB
                      , w = E + aw(D) * u - aB;
                    F != A || q || (F += 0.125);
                    var v = ao(this, B, E)
                      , x = ao(this, F, y)
                      , C = ao(this, A, w);
                    this.currentPath_.push({
                        type: p,
                        x: v.x,
                        y: v.y,
                        radius: u,
                        xStart: x.x,
                        yStart: x.y,
                        xEnd: C.x,
                        yEnd: C.y
                    })
                }
                ,
                aa.rect = function(o, m, p, l) {
                    this.moveTo(o, m),
                    this.lineTo(o + p, m),
                    this.lineTo(o + p, m + l),
                    this.lineTo(o, m + l),
                    this.closePath()
                }
                ,
                aa.strokeRect = function(p, o, q, m) {
                    var l = this.currentPath_;
                    this.beginPath(),
                    this.moveTo(p, o),
                    this.lineTo(p + q, o),
                    this.lineTo(p + q, o + m),
                    this.lineTo(p, o + m),
                    this.closePath(),
                    this.stroke(),
                    this.currentPath_ = l
                }
                ,
                aa.fillRect = function(p, o, q, m) {
                    var l = this.currentPath_;
                    this.beginPath(),
                    this.moveTo(p, o),
                    this.lineTo(p + q, o),
                    this.lineTo(p + q, o + m),
                    this.lineTo(p, o + m),
                    this.closePath(),
                    this.fill(),
                    this.currentPath_ = l
                }
                ,
                aa.createLinearGradient = function(p, o, q, m) {
                    var l = new ap("gradient");
                    return l.x0_ = p,
                    l.y0_ = o,
                    l.x1_ = q,
                    l.y1_ = m,
                    l
                }
                ,
                aa.createRadialGradient = function(s, p, v, m, l, u) {
                    var q = new ap("gradientradial");
                    return q.x0_ = s,
                    q.y0_ = p,
                    q.r0_ = v,
                    q.x1_ = m,
                    q.y1_ = l,
                    q.r1_ = u,
                    q
                }
                ,
                aa.drawImage = function(O) {
                    var B, G, K, S, F, D, C, I, L = O.runtimeStyle.width, H = O.runtimeStyle.height;
                    O.runtimeStyle.width = "auto",
                    O.runtimeStyle.height = "auto";
                    var q = O.width
                      , v = O.height;
                    if (O.runtimeStyle.width = L,
                    O.runtimeStyle.height = H,
                    3 == arguments.length) {
                        B = arguments[1],
                        G = arguments[2],
                        F = D = 0,
                        C = K = q,
                        I = S = v
                    } else {
                        if (5 == arguments.length) {
                            B = arguments[1],
                            G = arguments[2],
                            K = arguments[3],
                            S = arguments[4],
                            F = D = 0,
                            C = q,
                            I = v
                        } else {
                            if (9 != arguments.length) {
                                throw Error("Invalid number of arguments")
                            }
                            F = arguments[1],
                            D = arguments[2],
                            C = arguments[3],
                            I = arguments[4],
                            B = arguments[5],
                            G = arguments[6],
                            K = arguments[7],
                            S = arguments[8]
                        }
                    }
                    var P = ao(this, B, G)
                      , E = []
                      , Q = 10
                      , A = 10
                      , w = R = 1;
                    if (E.push(" <g_vml_:group", ' coordsize="', an * Q, ",", an * A, '"', ' coordorigin="0,0"', ' style="width:', Q, "px;height:", A, "px;position:absolute;"),
                    1 != this.m_[0][0] || this.m_[0][1] || 1 != this.m_[1][1] || this.m_[1][0]) {
                        var M = []
                          , w = this.scaleX_
                          , R = this.scaleY_;
                        M.push("M11=", this.m_[0][0] / w, ",", "M12=", this.m_[1][0] / R, ",", "M21=", this.m_[0][1] / w, ",", "M22=", this.m_[1][1] / R, ",", "Dx=", ah(P.x / an), ",", "Dy=", ah(P.y / an), "");
                        var N = P
                          , J = ao(this, B + K, G)
                          , z = ao(this, B, G + S)
                          , T = ao(this, B + K, G + S);
                        N.x = ay.max(N.x, J.x, z.x, T.x),
                        N.y = ay.max(N.y, J.y, z.y, T.y),
                        E.push("padding:0 ", ah(N.x / an), "px ", ah(N.y / an), "px 0;filter:progid:DXImageTransform.Microsoft.Matrix(", M.join(""), ", SizingMethod='clip');")
                    } else {
                        E.push("top:", ah(P.y / an), "px;left:", ah(P.x / an), "px;")
                    }
                    E.push(' ">'),
                    (F || D) && E.push('<div style="overflow: hidden; width:', Math.ceil((K + F * K / C) * w), "px;", " height:", Math.ceil((S + D * S / I) * R), "px;", " filter:progid:DxImageTransform.Microsoft.Matrix(Dx=", -F * K / C * w, ",Dy=", -D * S / I * R, ');">'),
                    E.push('<div style="width:', Math.round(w * q * K / C), "px;", " height:", Math.round(R * v * S / I), "px;", " filter:"),
                    1 > this.globalAlpha && E.push(" progid:DXImageTransform.Microsoft.Alpha(opacity=" + 100 * this.globalAlpha + ")"),
                    E.push(" progid:DXImageTransform.Microsoft.AlphaImageLoader(src=", O.src, ',sizingMethod=scale)">'),
                    (F || D) && E.push("</div>"),
                    E.push("</div></div>"),
                    this.element_.insertAdjacentHTML("BeforeEnd", E.join(""))
                }
                ,
                aa.stroke = function(w) {
                    var y = []
                      , q = 10
                      , v = 10;
                    y.push("<g_vml_:shape", ' filled="', !!w, '"', ' style="position:absolute;width:', q, "px;height:", v, 'px;"', ' coordorigin="0,0"', ' coordsize="', an * q, ",", an * v, '"', ' stroked="', !w, '"', ' path="');
                    for (var x = {
                        x: null ,
                        y: null 
                    }, p = {
                        x: null ,
                        y: null 
                    }, m = 0; this.currentPath_.length > m; m++) {
                        var z, u = this.currentPath_[m];
                        switch (u.type) {
                        case "moveTo":
                            z = u,
                            y.push(" m ", ah(u.x), ",", ah(u.y));
                            break;
                        case "lineTo":
                            y.push(" l ", ah(u.x), ",", ah(u.y));
                            break;
                        case "close":
                            y.push(" x "),
                            u = null ;
                            break;
                        case "bezierCurveTo":
                            y.push(" c ", ah(u.cp1x), ",", ah(u.cp1y), ",", ah(u.cp2x), ",", ah(u.cp2y), ",", ah(u.x), ",", ah(u.y));
                            break;
                        case "at":
                        case "wa":
                            y.push(" ", u.type, " ", ah(u.x - this.scaleX_ * u.radius), ",", ah(u.y - this.scaleY_ * u.radius), " ", ah(u.x + this.scaleX_ * u.radius), ",", ah(u.y + this.scaleY_ * u.radius), " ", ah(u.xStart), ",", ah(u.yStart), " ", ah(u.xEnd), ",", ah(u.yEnd))
                        }
                        u && ((null  == x.x || u.x < x.x) && (x.x = u.x),
                        (null  == p.x || u.x > p.x) && (p.x = u.x),
                        (null  == x.y || u.y < x.y) && (x.y = u.y),
                        (null  == p.y || u.y > p.y) && (p.y = u.y))
                    }
                    y.push(' ">'),
                    w ? a0(this, y, x, p) : aD(this, y),
                    y.push("</g_vml_:shape>"),
                    this.element_.insertAdjacentHTML("beforeEnd", y.join(""))
                }
                ,
                aa.fill = function() {
                    this.stroke(!0)
                }
                ,
                aa.closePath = function() {
                    this.currentPath_.push({
                        type: "close"
                    })
                }
                ,
                aa.save = function() {
                    var i = {};
                    aS(this, i),
                    this.aStack_.push(i),
                    this.mStack_.push(this.m_),
                    this.m_ = aP(aI(), this.m_)
                }
                ,
                aa.restore = function() {
                    this.aStack_.length && (aS(this.aStack_.pop(), this),
                    this.m_ = this.mStack_.pop())
                }
                ,
                aa.translate = function(l, i) {
                    var m = [[1, 0, 0], [0, 1, 0], [l, i, 1]];
                    ac(this, aP(m, this.m_), !1)
                }
                ,
                aa.rotate = function(o) {
                    var m = av(o)
                      , p = aw(o)
                      , l = [[m, p, 0], [-p, m, 0], [0, 0, 1]];
                    ac(this, aP(l, this.m_), !1)
                }
                ,
                aa.scale = function(l, i) {
                    var m = [[l, 0, 0], [0, i, 0], [0, 0, 1]];
                    ac(this, aP(m, this.m_), !0)
                }
                ,
                aa.transform = function(s, p, v, m, l, u) {
                    var q = [[s, p, 0], [v, m, 0], [l, u, 1]];
                    ac(this, aP(q, this.m_), !0)
                }
                ,
                aa.setTransform = function(s, p, v, m, l, u) {
                    var q = [[s, p, 0], [v, m, 0], [l, u, 1]];
                    ac(this, q, !0)
                }
                ,
                aa.drawText_ = function(F, u, C, J, y) {
                    var w = this.m_
                      , v = 1000
                      , A = 0
                      , D = v
                      , z = {
                        x: 0,
                        y: 0
                    }
                      , n = []
                      , q = aC(aG(this.font), this.element_)
                      , G = aT(q)
                      , x = this.element_.currentStyle
                      , H = this.textAlign.toLowerCase();
                    switch (H) {
                    case "left":
                    case "center":
                    case "right":
                        break;
                    case "end":
                        H = "ltr" == x.direction ? "right" : "left";
                        break;
                    case "start":
                        H = "rtl" == x.direction ? "right" : "left";
                        break;
                    default:
                        H = "left"
                    }
                    switch (this.textBaseline) {
                    case "hanging":
                    case "top":
                        z.y = q.size / 1.75;
                        break;
                    case "middle":
                        break;
                    default:
                    case null :
                    case "alphabetic":
                    case "ideographic":
                    case "bottom":
                        z.y = -q.size / 2.25
                    }
                    switch (H) {
                    case "right":
                        A = v,
                        D = 0.05;
                        break;
                    case "center":
                        A = D = v / 2
                    }
                    var I = ao(this, u + z.x, C + z.y);
                    n.push('<g_vml_:line from="', -A, ' 0" to="', D, ' 0.05" ', ' coordsize="100 100" coordorigin="0 0"', ' filled="', !y, '" stroked="', !!y, '" style="position:absolute;width:1px;height:1px;">'),
                    y ? aD(this, n) : a0(this, n, {
                        x: -A,
                        y: 0
                    }, {
                        x: D,
                        y: q.size
                    });
                    var E = w[0][0].toFixed(3) + "," + w[1][0].toFixed(3) + "," + w[0][1].toFixed(3) + "," + w[1][1].toFixed(3) + ",0,0"
                      , B = ah(I.x / an) + "," + ah(I.y / an);
                    n.push('<g_vml_:skew on="t" matrix="', E, '" ', ' offset="', B, '" origin="', A, ' 0" />', '<g_vml_:path textpathok="true" />', '<g_vml_:textpath on="true" string="', aN(F), '" style="v-text-align:', H, ";font:", aN(G), '" /></g_vml_:line>'),
                    this.element_.insertAdjacentHTML("beforeEnd", n.join(""))
                }
                ,
                aa.fillText = function(o, m, p, l) {
                    this.drawText_(o, m, p, l, !1)
                }
                ,
                aa.strokeText = function(o, m, p, l) {
                    this.drawText_(o, m, p, l, !0)
                }
                ,
                aa.measureText = function(o) {
                    if (!this.textMeasureEl_) {
                        var m = '<span style="position:absolute;top:-20000px;left:0;padding:0;margin:0;border:none;white-space:pre;"></span>';
                        this.element_.insertAdjacentHTML("beforeEnd", m),
                        this.textMeasureEl_ = this.element_.lastChild
                    }
                    var p = this.element_.ownerDocument;
                    this.textMeasureEl_.innerHTML = "";
                    try {
                        this.textMeasureEl_.style.font = this.font
                    } catch (l) {}
                    return this.textMeasureEl_.appendChild(p.createTextNode(o)),
                    {
                        width: this.textMeasureEl_.offsetWidth
                    }
                }
                ,
                aa.clip = function() {}
                ,
                aa.arcTo = function() {}
                ,
                aa.createPattern = function(l, i) {
                    return new aF(l,i)
                }
                ,
                ap.prototype.addColorStop = function(l, i) {
                    i = aX(i),
                    this.colors_.push({
                        offset: l,
                        color: i.color,
                        alpha: i.alpha
                    })
                }
                ;
                var aK = aq.prototype = Error();
                aK.INDEX_SIZE_ERR = 1,
                aK.DOMSTRING_SIZE_ERR = 2,
                aK.HIERARCHY_REQUEST_ERR = 3,
                aK.WRONG_DOCUMENT_ERR = 4,
                aK.INVALID_CHARACTER_ERR = 5,
                aK.NO_DATA_ALLOWED_ERR = 6,
                aK.NO_MODIFICATION_ALLOWED_ERR = 7,
                aK.NOT_FOUND_ERR = 8,
                aK.NOT_SUPPORTED_ERR = 9,
                aK.INUSE_ATTRIBUTE_ERR = 10,
                aK.INVALID_STATE_ERR = 11,
                aK.SYNTAX_ERR = 12,
                aK.INVALID_MODIFICATION_ERR = 13,
                aK.NAMESPACE_ERR = 14,
                aK.INVALID_ACCESS_ERR = 15,
                aK.VALIDATION_ERR = 16,
                aK.TYPE_MISMATCH_ERR = 17,
                G_vmlCanvasManager = ak,
                CanvasRenderingContext2D = aU,
                CanvasGradient = ap,
                CanvasPattern = aF,
                DOMException = aq
            }
            (),
            G_vmlCanvasManager
        }
        ),
        k("zrender/mixin/Eventful", ["require"], function() {
            var i = function() {
                this._handlers = {}
            }
            ;
            return i.prototype.one = function(o, m, p) {
                var l = this._handlers;
                return m && o ? (l[o] || (l[o] = []),
                l[o].push({
                    h: m,
                    one: !0,
                    ctx: p || this
                }),
                this) : this
            }
            ,
            i.prototype.bind = function(o, m, p) {
                var l = this._handlers;
                return m && o ? (l[o] || (l[o] = []),
                l[o].push({
                    h: m,
                    one: !1,
                    ctx: p || this
                }),
                this) : this
            }
            ,
            i.prototype.unbind = function(q, p) {
                var s = this._handlers;
                if (!q) {
                    return this._handlers = {},
                    this
                }
                if (p) {
                    if (s[q]) {
                        for (var m = [], l = 0, r = s[q].length; r > l; l++) {
                            s[q][l].h != p && m.push(s[q][l])
                        }
                        s[q] = m
                    }
                    s[q] && 0 === s[q].length && delete s[q]
                } else {
                    delete s[q]
                }
                return this
            }
            ,
            i.prototype.dispatch = function(q) {
                if (this._handlers[q]) {
                    var p = arguments
                      , s = p.length;
                    s > 3 && (p = Array.prototype.slice.call(p, 1));
                    for (var m = this._handlers[q], l = m.length, r = 0; l > r; ) {
                        switch (s) {
                        case 1:
                            m[r].h.call(m[r].ctx);
                            break;
                        case 2:
                            m[r].h.call(m[r].ctx, p[1]);
                            break;
                        case 3:
                            m[r].h.call(m[r].ctx, p[1], p[2]);
                            break;
                        default:
                            m[r].h.apply(m[r].ctx, p)
                        }
                        m[r].one ? (m.splice(r, 1),
                        l--) : r++
                    }
                }
                return this
            }
            ,
            i.prototype.dispatchWithContext = function(s) {
                if (this._handlers[s]) {
                    var p = arguments
                      , v = p.length;
                    v > 4 && (p = Array.prototype.slice.call(p, 1, p.length - 1));
                    for (var m = p[p.length - 1], l = this._handlers[s], u = l.length, q = 0; u > q; ) {
                        switch (v) {
                        case 1:
                            l[q].h.call(m);
                            break;
                        case 2:
                            l[q].h.call(m, p[1]);
                            break;
                        case 3:
                            l[q].h.call(m, p[1], p[2]);
                            break;
                        default:
                            l[q].h.apply(m, p)
                        }
                        l[q].one ? (l.splice(q, 1),
                        u--) : q++
                    }
                }
                return this
            }
            ,
            i
        }
        ),
        k("zrender/tool/log", ["require", "../config"], function(l) {
            var i = l("../config");
            return function() {
                if (0 !== i.debugMode) {
                    if (1 == i.debugMode) {
                        for (var m in arguments) {
                            throw Error(arguments[m])
                        }
                    } else {
                        if (i.debugMode > 1) {
                            for (var m in arguments) {
                                console.log(arguments[m])
                            }
                        }
                    }
                }
            }
        }
        ),
        k("zrender/tool/guid", [], function() {
            var i = 2311;
            return function() {
                return "zrender__" + i++
            }
        }
        ),
        k("zrender/Handler", ["require", "./config", "./tool/env", "./tool/event", "./tool/util", "./tool/vector", "./tool/matrix", "./mixin/Eventful"], function(E) {
            function J(l, i) {
                return function(e) {
                    return l.call(i, e)
                }
            }
            function x(l, i) {
                return function(o, m, e) {
                    return l.call(i, o, m, e)
                }
            }
            function C(m) {
                for (var o = F.length; o--; ) {
                    var l = F[o];
                    m["_" + l + "Handler"] = J(v[l], m)
                }
            }
            function H(p, o, r) {
                if (this._draggingTarget && this._draggingTarget.id == p.id || p.isSilent()) {
                    return !1
                }
                var m = this._event;
                if (p.isCover(o, r)) {
                    p.hoverable && this.storage.addHover(p);
                    for (var l = p.parent; l; ) {
                        if (l.clipShape && !l.clipShape.isCover(this._mouseX, this._mouseY)) {
                            return !1
                        }
                        l = l.parent
                    }
                    return this._lastHover != p && (this._processOutShape(m),
                    this._processDragLeave(m),
                    this._lastHover = p,
                    this._processDragEnter(m)),
                    this._processOverShape(m),
                    this._processDragOver(m),
                    this._hasfound = 1,
                    !0
                }
                return !1
            }
            var w = E("./config")
              , q = E("./tool/env")
              , K = E("./tool/event")
              , B = E("./tool/util")
              , D = E("./tool/vector")
              , z = E("./tool/matrix")
              , y = w.EVENT
              , A = E("./mixin/Eventful")
              , F = ["resize", "click", "dblclick", "mousewheel", "mousemove", "mouseout", "mouseup", "mousedown", "touchstart", "touchend", "touchmove"]
              , v = {
                resize: function(i) {
                    i = i || window.event,
                    this._lastHover = null ,
                    this._isMouseDown = 0,
                    this.dispatch(y.RESIZE, i)
                },
                click: function(l) {
                    l = this._zrenderEventFixed(l);
                    var i = this._lastHover;
                    (i && i.clickable || !i) && 5 > this._clickThreshold && this._dispatchAgency(i, y.CLICK, l),
                    this._mousemoveHandler(l)
                },
                dblclick: function(l) {
                    l = l || window.event,
                    l = this._zrenderEventFixed(l);
                    var i = this._lastHover;
                    (i && i.clickable || !i) && 5 > this._clickThreshold && this._dispatchAgency(i, y.DBLCLICK, l),
                    this._mousemoveHandler(l)
                },
                mousewheel: function(r) {
                    r = this._zrenderEventFixed(r);
                    var p = r.wheelDelta || -r.detail
                      , u = p > 0 ? 1.1 : 1 / 1.1
                      , m = !1
                      , l = this._mouseX
                      , s = this._mouseY;
                    this.painter.eachBuildinLayer(function(i) {
                        var n = i.position;
                        if (i.zoomable) {
                            i.__zoom = i.__zoom || 1;
                            var e = i.__zoom;
                            e *= u,
                            e = Math.max(Math.min(i.maxZoom, e), i.minZoom),
                            u = e / i.__zoom,
                            i.__zoom = e,
                            n[0] -= (l - n[0]) * (u - 1),
                            n[1] -= (s - n[1]) * (u - 1),
                            i.scale[0] *= u,
                            i.scale[1] *= u,
                            i.dirty = !0,
                            m = !0,
                            K.stop(r)
                        }
                    }
                    ),
                    m && this.painter.refresh(),
                    this._dispatchAgency(this._lastHover, y.MOUSEWHEEL, r),
                    this._mousemoveHandler(r)
                },
                mousemove: function(p) {
                    if (!this.painter.isLoading()) {
                        p = this._zrenderEventFixed(p),
                        this._lastX = this._mouseX,
                        this._lastY = this._mouseY,
                        this._mouseX = K.getX(p),
                        this._mouseY = K.getY(p);
                        var o = this._mouseX - this._lastX
                          , r = this._mouseY - this._lastY;
                        this._processDragStart(p),
                        this._hasfound = 0,
                        this._event = p,
                        this._iterateAndFindHover(),
                        this._hasfound || ((!this._draggingTarget || this._lastHover && this._lastHover != this._draggingTarget) && (this._processOutShape(p),
                        this._processDragLeave(p)),
                        this._lastHover = null ,
                        this.storage.delHover(),
                        this.painter.clearHover());
                        var m = "default";
                        if (this._draggingTarget) {
                            this.storage.drift(this._draggingTarget.id, o, r),
                            this._draggingTarget.modSelf(),
                            this.storage.addHover(this._draggingTarget),
                            this._clickThreshold++
                        } else {
                            if (this._isMouseDown) {
                                var l = !1;
                                this.painter.eachBuildinLayer(function(i) {
                                    i.panable && (m = "move",
                                    i.position[0] += o,
                                    i.position[1] += r,
                                    l = !0,
                                    i.dirty = !0)
                                }
                                ),
                                l && this.painter.refresh()
                            }
                        }
                        this._draggingTarget || this._hasfound && this._lastHover.draggable ? m = "move" : this._hasfound && this._lastHover.clickable && (m = "pointer"),
                        this.root.style.cursor = m,
                        this._dispatchAgency(this._lastHover, y.MOUSEMOVE, p),
                        (this._draggingTarget || this._hasfound || this.storage.hasHoverShape()) && this.painter.refreshHover()
                    }
                },
                mouseout: function(l) {
                    l = this._zrenderEventFixed(l);
                    var i = l.toElement || l.relatedTarget;
                    if (i != this.root) {
                        for (; i && 9 != i.nodeType; ) {
                            if (i == this.root) {
                                return this._mousemoveHandler(l),
                                void 0
                            }
                            i = i.parentNode
                        }
                    }
                    l.zrenderX = this._lastX,
                    l.zrenderY = this._lastY,
                    this.root.style.cursor = "default",
                    this._isMouseDown = 0,
                    this._processOutShape(l),
                    this._processDrop(l),
                    this._processDragEnd(l),
                    this.painter.isLoading() || this.painter.refreshHover(),
                    this.dispatch(y.GLOBALOUT, l)
                },
                mousedown: function(i) {
                    return this._clickThreshold = 0,
                    2 == this._lastDownButton ? (this._lastDownButton = i.button,
                    this._mouseDownTarget = null ,
                    void 0) : (this._lastMouseDownMoment = new Date,
                    i = this._zrenderEventFixed(i),
                    this._isMouseDown = 1,
                    this._mouseDownTarget = this._lastHover,
                    this._dispatchAgency(this._lastHover, y.MOUSEDOWN, i),
                    this._lastDownButton = i.button,
                    void 0)
                },
                mouseup: function(i) {
                    i = this._zrenderEventFixed(i),
                    this.root.style.cursor = "default",
                    this._isMouseDown = 0,
                    this._mouseDownTarget = null ,
                    this._dispatchAgency(this._lastHover, y.MOUSEUP, i),
                    this._processDrop(i),
                    this._processDragEnd(i)
                },
                touchstart: function(i) {
                    i = this._zrenderEventFixed(i, !0),
                    this._lastTouchMoment = new Date,
                    this._mobileFindFixed(i),
                    this._mousedownHandler(i)
                },
                touchmove: function(i) {
                    i = this._zrenderEventFixed(i, !0),
                    this._mousemoveHandler(i),
                    this._isDragging && K.stop(i)
                },
                touchend: function(l) {
                    l = this._zrenderEventFixed(l, !0),
                    this._mouseupHandler(l);
                    var i = new Date;
                    i - this._lastTouchMoment < y.touchClickDelay && (this._mobileFindFixed(l),
                    this._clickHandler(l),
                    i - this._lastClickMoment < y.touchClickDelay / 2 && (this._dblclickHandler(l),
                    this._lastHover && this._lastHover.clickable && K.stop(l)),
                    this._lastClickMoment = i),
                    this.painter.clearHover()
                }
            }
              , G = function(l, i, m) {
                A.call(this),
                this.root = l,
                this.storage = i,
                this.painter = m,
                this._lastX = this._lastY = this._mouseX = this._mouseY = 0,
                this._findHover = x(H, this),
                this._domHover = m.getDomHover(),
                C(this),
                window.addEventListener ? (window.addEventListener("resize", this._resizeHandler),
                q.os.tablet || q.os.phone ? (l.addEventListener("touchstart", this._touchstartHandler),
                l.addEventListener("touchmove", this._touchmoveHandler),
                l.addEventListener("touchend", this._touchendHandler)) : (l.addEventListener("click", this._clickHandler),
                l.addEventListener("dblclick", this._dblclickHandler),
                l.addEventListener("mousewheel", this._mousewheelHandler),
                l.addEventListener("mousemove", this._mousemoveHandler),
                l.addEventListener("mousedown", this._mousedownHandler),
                l.addEventListener("mouseup", this._mouseupHandler)),
                l.addEventListener("DOMMouseScroll", this._mousewheelHandler),
                l.addEventListener("mouseout", this._mouseoutHandler)) : (window.attachEvent("onresize", this._resizeHandler),
                l.attachEvent("onclick", this._clickHandler),
                l.ondblclick = this._dblclickHandler,
                l.attachEvent("onmousewheel", this._mousewheelHandler),
                l.attachEvent("onmousemove", this._mousemoveHandler),
                l.attachEvent("onmouseout", this._mouseoutHandler),
                l.attachEvent("onmousedown", this._mousedownHandler),
                l.attachEvent("onmouseup", this._mouseupHandler))
            }
            ;
            G.prototype.on = function(l, i, m) {
                return this.bind(l, i, m),
                this
            }
            ,
            G.prototype.un = function(l, i) {
                return this.unbind(l, i),
                this
            }
            ,
            G.prototype.trigger = function(l, i) {
                switch (l) {
                case y.RESIZE:
                case y.CLICK:
                case y.DBLCLICK:
                case y.MOUSEWHEEL:
                case y.MOUSEMOVE:
                case y.MOUSEDOWN:
                case y.MOUSEUP:
                case y.MOUSEOUT:
                    this["_" + l + "Handler"](i)
                }
            }
            ,
            G.prototype.dispose = function() {
                var i = this.root;
                window.removeEventListener ? (window.removeEventListener("resize", this._resizeHandler),
                q.os.tablet || q.os.phone ? (i.removeEventListener("touchstart", this._touchstartHandler),
                i.removeEventListener("touchmove", this._touchmoveHandler),
                i.removeEventListener("touchend", this._touchendHandler)) : (i.removeEventListener("click", this._clickHandler),
                i.removeEventListener("dblclick", this._dblclickHandler),
                i.removeEventListener("mousewheel", this._mousewheelHandler),
                i.removeEventListener("mousemove", this._mousemoveHandler),
                i.removeEventListener("mousedown", this._mousedownHandler),
                i.removeEventListener("mouseup", this._mouseupHandler)),
                i.removeEventListener("DOMMouseScroll", this._mousewheelHandler),
                i.removeEventListener("mouseout", this._mouseoutHandler)) : (window.detachEvent("onresize", this._resizeHandler),
                i.detachEvent("onclick", this._clickHandler),
                i.detachEvent("dblclick", this._dblclickHandler),
                i.detachEvent("onmousewheel", this._mousewheelHandler),
                i.detachEvent("onmousemove", this._mousemoveHandler),
                i.detachEvent("onmouseout", this._mouseoutHandler),
                i.detachEvent("onmousedown", this._mousedownHandler),
                i.detachEvent("onmouseup", this._mouseupHandler)),
                this.root = this._domHover = this.storage = this.painter = null ,
                this.un()
            }
            ,
            G.prototype._processDragStart = function(l) {
                var i = this._lastHover;
                if (this._isMouseDown && i && i.draggable && !this._draggingTarget && this._mouseDownTarget == i) {
                    if (i.dragEnableTime && new Date - this._lastMouseDownMoment < i.dragEnableTime) {
                        return
                    }
                    var m = i;
                    this._draggingTarget = m,
                    this._isDragging = 1,
                    m.invisible = !0,
                    this.storage.mod(m.id),
                    this._dispatchAgency(m, y.DRAGSTART, l),
                    this.painter.refresh()
                }
            }
            ,
            G.prototype._processDragEnter = function(i) {
                this._draggingTarget && this._dispatchAgency(this._lastHover, y.DRAGENTER, i, this._draggingTarget)
            }
            ,
            G.prototype._processDragOver = function(i) {
                this._draggingTarget && this._dispatchAgency(this._lastHover, y.DRAGOVER, i, this._draggingTarget)
            }
            ,
            G.prototype._processDragLeave = function(i) {
                this._draggingTarget && this._dispatchAgency(this._lastHover, y.DRAGLEAVE, i, this._draggingTarget)
            }
            ,
            G.prototype._processDrop = function(i) {
                this._draggingTarget && (this._draggingTarget.invisible = !1,
                this.storage.mod(this._draggingTarget.id),
                this.painter.refresh(),
                this._dispatchAgency(this._lastHover, y.DROP, i, this._draggingTarget))
            }
            ,
            G.prototype._processDragEnd = function(i) {
                this._draggingTarget && (this._dispatchAgency(this._draggingTarget, y.DRAGEND, i),
                this._lastHover = null ),
                this._isDragging = 0,
                this._draggingTarget = null 
            }
            ,
            G.prototype._processOverShape = function(i) {
                this._dispatchAgency(this._lastHover, y.MOUSEOVER, i)
            }
            ,
            G.prototype._processOutShape = function(i) {
                this._dispatchAgency(this._lastHover, y.MOUSEOUT, i)
            }
            ,
            G.prototype._dispatchAgency = function(M, p, O, m) {
                var l = "on" + p
                  , N = {
                    type: p,
                    event: O,
                    target: M,
                    cancelBubble: !1
                }
                  , L = M;
                for (m && (N.dragged = m); L && (L[l] && (N.cancelBubble = L[l](N)),
                L.dispatch(p, N),
                L = L.parent,
                !N.cancelBubble); ) {}
                if (M) {
                    N.cancelBubble || this.dispatch(p, N)
                } else {
                    if (!m) {
                        var u = {
                            type: p,
                            event: O
                        };
                        this.dispatch(p, u),
                        this.painter.eachOtherLayer(function(i) {
                            "function" == typeof i[l] && i[l](u),
                            i.dispatch && i.dispatch(p, u)
                        }
                        )
                    }
                }
            }
            ,
            G.prototype._iterateAndFindHover = function() {
                var i = z.create();
                return function() {
                    for (var m, u, l = this.storage.getShapeList(), e = [0, 0], s = l.length - 1; s >= 0; s--) {
                        var p = l[s];
                        if (m !== p.zlevel && (u = this.painter.getLayer(p.zlevel, u),
                        e[0] = this._mouseX,
                        e[1] = this._mouseY,
                        u.needTransform && (z.invert(i, u.transform),
                        D.applyTransform(e, e, i))),
                        this._findHover(p, e[0], e[1])) {
                            break
                        }
                    }
                }
            }
            ();
            var I = [{
                x: 10
            }, {
                x: -20
            }, {
                x: 10,
                y: 10
            }, {
                y: -20
            }];
            return G.prototype._mobileFindFixed = function(l) {
                this._lastHover = null ,
                this._mouseX = l.zrenderX,
                this._mouseY = l.zrenderY,
                this._event = l,
                this._iterateAndFindHover();
                for (var i = 0; !this._lastHover && I.length > i; i++) {
                    var m = I[i];
                    m.x && (this._mouseX += m.x),
                    m.y && (this._mouseY += m.y),
                    this._iterateAndFindHover()
                }
                this._lastHover && (l.zrenderX = this._mouseX,
                l.zrenderY = this._mouseY)
            }
            ,
            G.prototype._zrenderEventFixed = function(p, o) {
                if (p.zrenderFixed) {
                    return p
                }
                if (o) {
                    var r = "touchend" != p.type ? p.targetTouches[0] : p.changedTouches[0];
                    if (r) {
                        var m = this.painter._domRoot.getBoundingClientRect();
                        p.zrenderX = r.clientX - m.left,
                        p.zrenderY = r.clientY - m.top
                    }
                } else {
                    p = p || window.event;
                    var l = p.toElement || p.relatedTarget || p.srcElement || p.target;
                    l && l != this._domHover && (p.zrenderX = (p.offsetX !== void 0 ? p.offsetX : p.layerX) + l.offsetLeft,
                    p.zrenderY = (p.offsetY !== void 0 ? p.offsetY : p.layerY) + l.offsetTop)
                }
                return p.zrenderFixed = 1,
                p
            }
            ,
            B.merge(G.prototype, A.prototype, !0),
            G
        }
        ),
        k("zrender/Painter", ["require", "./config", "./tool/util", "./tool/log", "./loadingEffect/Base", "./Layer", "./shape/Image"], function(x) {
            function z() {
                return !1
            }
            function q() {}
            function v(i) {
                return i ? i.isBuildin ? !0 : "function" != typeof i.resize || "function" != typeof i.refresh ? !1 : !0 : !1
            }
            var y = x("./config")
              , p = x("./tool/util")
              , m = x("./tool/log")
              , A = x("./loadingEffect/Base")
              , u = x("./Layer")
              , w = function(r, s) {
                this.root = r,
                r.style["-webkit-tap-highlight-color"] = "transparent",
                r.style["-webkit-user-select"] = "none",
                r.style["user-select"] = "none",
                r.style["-webkit-touch-callout"] = "none",
                this.storage = s,
                r.innerHTML = "",
                this._width = this._getWidth(),
                this._height = this._getHeight();
                var o = document.createElement("div");
                this._domRoot = o,
                o.style.position = "relative",
                o.style.overflow = "hidden",
                o.style.width = this._width + "px",
                o.style.height = this._height + "px",
                r.appendChild(o),
                this._layers = {},
                this._zlevelList = [],
                this._layerConfig = {},
                this._loadingEffect = new A({}),
                this.shapeToImage = this._createShapeToImageProcessor(),
                this._bgDom = document.createElement("div"),
                this._bgDom.style.cssText = ["position:absolute;left:0px;top:0px;width:", this._width, "px;height:", this._height + "px;", "-webkit-user-select:none;user-select;none;", "-webkit-touch-callout:none;"].join(""),
                this._bgDom.setAttribute("data-zr-dom-id", "bg"),
                o.appendChild(this._bgDom),
                this._bgDom.onselectstart = z;
                var l = new u("_zrender_hover_",this);
                this._layers.hover = l,
                o.appendChild(l.dom),
                l.initContext(),
                l.dom.onselectstart = z,
                l.dom.style["-webkit-user-select"] = "none",
                l.dom.style["user-select"] = "none",
                l.dom.style["-webkit-touch-callout"] = "none",
                this.refreshNextFrame = null 
            }
            ;
            return w.prototype.render = function(i) {
                return this.isLoading() && this.hideLoading(),
                this.refresh(i, !0),
                this
            }
            ,
            w.prototype.refresh = function(B, s) {
                var D = this.storage.getShapeList(!0);
                this._paintList(D, s);
                for (var r = 0; this._zlevelList.length > r; r++) {
                    var l = this._zlevelList[r]
                      , C = this._layers[l];
                    !C.isBuildin && C.refresh && C.refresh()
                }
                return "function" == typeof B && B(),
                this
            }
            ,
            w.prototype._preProcessLayer = function(i) {
                i.unusedCount++,
                i.updateTransform()
            }
            ,
            w.prototype._postProcessLayer = function(i) {
                i.dirty = !1,
                1 == i.unusedCount && i.clear()
            }
            ,
            w.prototype._paintList = function(G, H) {
                H === void 0 && (H = !1),
                this._updateLayerStatus(G);
                var B, E, r;
                this.eachBuildinLayer(this._preProcessLayer);
                for (var I = 0, D = G.length; D > I; I++) {
                    var F = G[I];
                    if (E !== F.zlevel && (B && (B.needTransform && r.restore(),
                    r.flush && r.flush()),
                    E = F.zlevel,
                    B = this.getLayer(E),
                    B.isBuildin || m("ZLevel " + E + " has been used by unkown layer " + B.id),
                    r = B.ctx,
                    B.unusedCount = 0,
                    (B.dirty || H) && B.clear(),
                    B.needTransform && (r.save(),
                    B.setTransform(r))),
                    (B.dirty || H) && !F.invisible && (!F.onbrush || F.onbrush && !F.onbrush(r, !1))) {
                        if (y.catchBrushException) {
                            try {
                                F.brush(r, !1, this.refreshNextFrame)
                            } catch (C) {
                                m(C, "brush error of " + F.type, F)
                            }
                        } else {
                            F.brush(r, !1, this.refreshNextFrame)
                        }
                    }
                    F.__dirty = !1
                }
                B && (B.needTransform && r.restore(),
                r.flush && r.flush()),
                this.eachBuildinLayer(this._postProcessLayer)
            }
            ,
            w.prototype.getLayer = function(l) {
                var i = this._layers[l];
                return i || (i = new u(l,this),
                i.isBuildin = !0,
                this._layerConfig[l] && p.merge(i, this._layerConfig[l], !0),
                i.updateTransform(),
                this.insertLayer(l, i),
                i.initContext()),
                i
            }
            ,
            w.prototype.insertLayer = function(B, l) {
                if (this._layers[B]) {
                    return m("ZLevel " + B + " has been used already"),
                    void 0
                }
                if (!v(l)) {
                    return m("Layer of zlevel " + B + " is not valid"),
                    void 0
                }
                var D = this._zlevelList.length
                  , i = null 
                  , C = -1;
                if (D > 0 && B > this._zlevelList[0]) {
                    for (C = 0; D - 1 > C && !(B > this._zlevelList[C] && this._zlevelList[C + 1] > B); C++) {}
                    i = this._layers[this._zlevelList[C]]
                }
                this._zlevelList.splice(C + 1, 0, B);
                var r = i ? i.dom : this._bgDom;
                r.nextSibling ? r.parentNode.insertBefore(l.dom, r.nextSibling) : r.parentNode.appendChild(l.dom),
                this._layers[B] = l
            }
            ,
            w.prototype.eachLayer = function(r, o) {
                for (var s = 0; this._zlevelList.length > s; s++) {
                    var l = this._zlevelList[s];
                    r.call(o, this._layers[l], l)
                }
            }
            ,
            w.prototype.eachBuildinLayer = function(s, r) {
                for (var B = 0; this._zlevelList.length > B; B++) {
                    var o = this._zlevelList[B]
                      , l = this._layers[o];
                    l.isBuildin && s.call(r, l, o)
                }
            }
            ,
            w.prototype.eachOtherLayer = function(s, r) {
                for (var B = 0; this._zlevelList.length > B; B++) {
                    var o = this._zlevelList[B]
                      , l = this._layers[o];
                    l.isBuildin || s.call(r, l, o)
                }
            }
            ,
            w.prototype.getLayers = function() {
                return this._layers
            }
            ,
            w.prototype._updateLayerStatus = function(F) {
                var C = this._layers
                  , H = {};
                this.eachBuildinLayer(function(n, i) {
                    H[i] = n.elCount,
                    n.elCount = 0
                }
                );
                for (var B = 0, l = F.length; l > B; B++) {
                    var G = F[B]
                      , E = G.zlevel
                      , D = C[E];
                    if (D) {
                        if (D.elCount++,
                        D.dirty) {
                            continue
                        }
                        D.dirty = G.__dirty
                    }
                }
                this.eachBuildinLayer(function(n, i) {
                    H[i] !== n.elCount && (n.dirty = !0)
                }
                )
            }
            ,
            w.prototype.refreshShapes = function(s, r) {
                for (var B = 0, o = s.length; o > B; B++) {
                    var l = s[B];
                    l.modSelf()
                }
                return this.refresh(r),
                this
            }
            ,
            w.prototype.setLoadingEffect = function(i) {
                return this._loadingEffect = i,
                this
            }
            ,
            w.prototype.clear = function() {
                return this.eachBuildinLayer(this._clearLayer),
                this
            }
            ,
            w.prototype._clearLayer = function(i) {
                i.clear()
            }
            ,
            w.prototype.modLayer = function(l, i) {
                if (i) {
                    this._layerConfig[l] ? p.merge(this._layerConfig[l], i, !0) : this._layerConfig[l] = i;
                    var o = this._layers[l];
                    o && p.merge(o, this._layerConfig[l], !0)
                }
            }
            ,
            w.prototype.delLayer = function(l) {
                var i = this._layers[l];
                i && (this.modLayer(l, {
                    position: i.position,
                    rotation: i.rotation,
                    scale: i.scale
                }),
                i.dom.parentNode.removeChild(i.dom),
                delete this._layers[l],
                this._zlevelList.splice(p.indexOf(this._zlevelList, l), 1))
            }
            ,
            w.prototype.refreshHover = function() {
                this.clearHover();
                for (var r = this.storage.getHoverShapes(!0), o = 0, s = r.length; s > o; o++) {
                    this._brushHover(r[o])
                }
                var l = this._layers.hover.ctx;
                return l.flush && l.flush(),
                this.storage.delHover(),
                this
            }
            ,
            w.prototype.clearHover = function() {
                var i = this._layers.hover;
                return i && i.clear(),
                this
            }
            ,
            w.prototype.showLoading = function(i) {
                return this._loadingEffect && this._loadingEffect.stop(),
                i && this.setLoadingEffect(i),
                this._loadingEffect.start(this),
                this.loading = !0,
                this
            }
            ,
            w.prototype.hideLoading = function() {
                return this._loadingEffect.stop(),
                this.clearHover(),
                this.loading = !1,
                this
            }
            ,
            w.prototype.isLoading = function() {
                return this.loading
            }
            ,
            w.prototype.resize = function() {
                var r = this._domRoot;
                r.style.display = "none";
                var o = this._getWidth()
                  , s = this._getHeight();
                if (r.style.display = "",
                this._width != o || s != this._height) {
                    this._width = o,
                    this._height = s,
                    r.style.width = o + "px",
                    r.style.height = s + "px";
                    for (var l in this._layers) {
                        this._layers[l].resize(o, s)
                    }
                    this.refresh(null , !0)
                }
                return this
            }
            ,
            w.prototype.clearLayer = function(l) {
                var i = this._layers[l];
                i && i.clear()
            }
            ,
            w.prototype.dispose = function() {
                this.isLoading() && this.hideLoading(),
                this.root.innerHTML = "",
                this.root = this.storage = this._domRoot = this._layers = null 
            }
            ,
            w.prototype.getDomHover = function() {
                return this._layers.hover.dom
            }
            ,
            w.prototype.toDataURL = function(D, r, F) {
                if (window.G_vmlCanvasManager) {
                    return null 
                }
                var l = new u("image",this);
                this._bgDom.appendChild(l.dom),
                l.initContext();
                var E = l.ctx;
                l.clearColor = r || "#fff",
                l.clear();
                var C = this;
                this.storage.iterShape(function(n) {
                    if (!n.invisible && (!n.onbrush || n.onbrush && !n.onbrush(E, !1))) {
                        if (y.catchBrushException) {
                            try {
                                n.brush(E, !1, C.refreshNextFrame)
                            } catch (i) {
                                m(i, "brush error of " + n.type, n)
                            }
                        } else {
                            n.brush(E, !1, C.refreshNextFrame)
                        }
                    }
                }
                , {
                    normal: "up",
                    update: !0
                });
                var B = l.dom.toDataURL(D, F);
                return E = null ,
                this._bgDom.removeChild(l.dom),
                B
            }
            ,
            w.prototype.getWidth = function() {
                return this._width
            }
            ,
            w.prototype.getHeight = function() {
                return this._height
            }
            ,
            w.prototype._getWidth = function() {
                var l = this.root
                  , i = l.currentStyle || document.defaultView.getComputedStyle(l);
                return ((l.clientWidth || parseInt(i.width, 10)) - parseInt(i.paddingLeft, 10) - parseInt(i.paddingRight, 10)).toFixed(0) - 0
            }
            ,
            w.prototype._getHeight = function() {
                var l = this.root
                  , i = l.currentStyle || document.defaultView.getComputedStyle(l);
                return ((l.clientHeight || parseInt(i.height, 10)) - parseInt(i.paddingTop, 10) - parseInt(i.paddingBottom, 10)).toFixed(0) - 0
            }
            ,
            w.prototype._brushHover = function(r) {
                var o = this._layers.hover.ctx;
                if (!r.onbrush || r.onbrush && !r.onbrush(o, !0)) {
                    var s = this.getLayer(r.zlevel);
                    if (s.needTransform && (o.save(),
                    s.setTransform(o)),
                    y.catchBrushException) {
                        try {
                            r.brush(o, !0, this.refreshNextFrame)
                        } catch (l) {
                            m(l, "hoverBrush error of " + r.type, r)
                        }
                    } else {
                        r.brush(o, !0, this.refreshNextFrame)
                    }
                    s.needTransform && o.restore()
                }
            }
            ,
            w.prototype._shapeToImage = function(I, C, F, H, B) {
               //test~~  这里可能是设置
                 console.log('f='+F)
                var e = document.createElement("canvas")
                  , J = e.getContext("2d");
                e.style.width = F + "px",
                e.style.height = H + "px",
                e.setAttribute("width", F * B),
                e.setAttribute("height", H * B),
                J.clearRect(0, 0, F * B, H * B);
                var E = {
                    position: C.position,
                    rotation: C.rotation,
                    scale: C.scale
                };
                C.position = [0, 0, 0],
                C.rotation = 0,
                C.scale = [1, 1],
                C && C.brush(J, !1);
                var G = x("./shape/Image")
                  , D = new G({
                    id: I,
                    style: {
                        x: 0,
                        y: 0,
                        image: e
                    }
                });
                return null  != E.position && (D.position = C.position = E.position),
                null  != E.rotation && (D.rotation = C.rotation = E.rotation),
                null  != E.scale && (D.scale = C.scale = E.scale),
                D
            }
            ,
            w.prototype._createShapeToImageProcessor = function() {
                if (window.G_vmlCanvasManager) {
                    return q
                }
                var i = this;
                return function(l, s, e, r) {
                    return i._shapeToImage(l, s, e, r, y.devicePixelRatio)
                }
            }
            ,
            w
        }
        ),
        k("zrender/Storage", ["require", "./tool/util", "./Group"], function(q) {
            function p(n, i) {
                return n.zlevel == i.zlevel ? n.z == i.z ? n.__renderidx - i.__renderidx : n.z - i.z : n.zlevel - i.zlevel
            }
            var s = q("./tool/util")
              , m = q("./Group")
              , l = {
                hover: !1,
                normal: "down",
                update: !1
            }
              , r = function() {
                this._elements = {},
                this._hoverElements = [],
                this._roots = [],
                this._shapeList = [],
                this._shapeListOffset = 0
            }
            ;
            return r.prototype.iterShape = function(w, v) {
                if (v || (v = l),
                v.hover) {
                    for (var y = 0, u = this._hoverElements.length; u > y; y++) {
                        var x = this._hoverElements[y];
                        if (x.updateTransform(),
                        w(x)) {
                            return this
                        }
                    }
                }
                switch (v.update && this.updateShapeList(),
                v.normal) {
                case "down":
                    for (var u = this._shapeList.length; u--; ) {
                        if (w(this._shapeList[u])) {
                            return this
                        }
                    }
                    break;
                default:
                    for (var y = 0, u = this._shapeList.length; u > y; y++) {
                        if (w(this._shapeList[y])) {
                            return this
                        }
                    }
                }
                return this
            }
            ,
            r.prototype.getHoverShapes = function(y) {
                for (var A = [], v = 0, u = this._hoverElements.length; u > v; v++) {
                    A.push(this._hoverElements[v]);
                    var z = this._hoverElements[v].hoverConnect;
                    if (z) {
                        var x;
                        z = z instanceof Array ? z : [z];
                        for (var w = 0, t = z.length; t > w; w++) {
                            x = z[w].id ? z[w] : this.get(z[w]),
                            x && A.push(x)
                        }
                    }
                }
                if (A.sort(p),
                y) {
                    for (var v = 0, u = A.length; u > v; v++) {
                        A[v].updateTransform()
                    }
                }
                return A
            }
            ,
            r.prototype.getShapeList = function(i) {
                return i && this.updateShapeList(),
                this._shapeList
            }
            ,
            r.prototype.updateShapeList = function() {
                this._shapeListOffset = 0;
                for (var t = 0, u = this._roots.length; u > t; t++) {
                    var o = this._roots[t];
                    this._updateAndAddShape(o)
                }
                this._shapeList.length = this._shapeListOffset;
                for (var t = 0, u = this._shapeList.length; u > t; t++) {
                    this._shapeList[t].__renderidx = t
                }
                this._shapeList.sort(p)
            }
            ,
            r.prototype._updateAndAddShape = function(v, u) {
                if (!v.ignore) {
                    if (v.updateTransform(),
                    "group" == v.type) {
                        v.clipShape && (v.clipShape.parent = v,
                        v.clipShape.updateTransform(),
                        u ? (u = u.slice(),
                        u.push(v.clipShape)) : u = [v.clipShape]);
                        for (var w = 0; v._children.length > w; w++) {
                            var o = v._children[w];
                            o.__dirty = v.__dirty || o.__dirty,
                            this._updateAndAddShape(o, u)
                        }
                        v.__dirty = !1
                    } else {
                        v.__clipShapes = u,
                        this._shapeList[this._shapeListOffset++] = v
                    }
                }
            }
            ,
            r.prototype.mod = function(v, u) {
                if ("string" == typeof v && (v = this._elements[v]),
                v && (v.modSelf(),
                u)) {
                    if (u.parent || u._storage || u.__clipShapes) {
                        var o = {};
                        for (var n in u) {
                            "parent" !== n && "_storage" !== n && "__clipShapes" !== n && u.hasOwnProperty(n) && (o[n] = u[n])
                        }
                        s.merge(v, o, !0)
                    } else {
                        s.merge(v, u, !0)
                    }
                }
                return this
            }
            ,
            r.prototype.drift = function(v, u, w) {
                var o = this._elements[v];
                return o && (o.needTransform = !0,
                "horizontal" === o.draggable ? w = 0 : "vertical" === o.draggable && (u = 0),
                (!o.ondrift || o.ondrift && !o.ondrift(u, w)) && o.drift(u, w)),
                this
            }
            ,
            r.prototype.addHover = function(i) {
                return i.updateNeedTransform(),
                this._hoverElements.push(i),
                this
            }
            ,
            r.prototype.delHover = function() {
                return this._hoverElements = [],
                this
            }
            ,
            r.prototype.hasHoverShape = function() {
                return this._hoverElements.length > 0
            }
            ,
            r.prototype.addRoot = function(i) {
                this._elements[i.id] || (i instanceof m && i.addChildrenToStorage(this),
                this.addToMap(i),
                this._roots.push(i))
            }
            ,
            r.prototype.delRoot = function(w) {
                if (w === void 0) {
                    for (var n = 0; this._roots.length > n; n++) {
                        var i = this._roots[n];
                        i instanceof m && i.delChildrenFromStorage(this)
                    }
                    return this._elements = {},
                    this._hoverElements = [],
                    this._roots = [],
                    this._shapeList = [],
                    this._shapeListOffset = 0,
                    void 0
                }
                if (w instanceof Array) {
                    for (var n = 0, x = w.length; x > n; n++) {
                        this.delRoot(w[n])
                    }
                } else {
                    var v;
                    v = "string" == typeof w ? this._elements[w] : w;
                    var u = s.indexOf(this._roots, v);
                    u >= 0 && (this.delFromMap(v.id),
                    this._roots.splice(u, 1),
                    v instanceof m && v.delChildrenFromStorage(this))
                }
            }
            ,
            r.prototype.addToMap = function(i) {
                return i instanceof m && (i._storage = this),
                i.modSelf(),
                this._elements[i.id] = i,
                this
            }
            ,
            r.prototype.get = function(i) {
                return this._elements[i]
            }
            ,
            r.prototype.delFromMap = function(n) {
                var i = this._elements[n];
                return i && (delete this._elements[n],
                i instanceof m && (i._storage = null )),
                this
            }
            ,
            r.prototype.dispose = function() {
                this._elements = this._renderList = this._roots = this._hoverElements = null 
            }
            ,
            r
        }
        ),
        k("zrender/animation/Animation", ["require", "./Clip", "../tool/color", "../tool/util", "../tool/event"], function(J) {
            function z(l, i) {
                return l[i]
            }
            function E(l, i, m) {
                l[i] = m
            }
            function H(l, i, m) {
                return (i - l) * m + l
            }
            function M(N, P, p, O, m) {
                var i = N.length;
                if (1 == m) {
                    for (var Q = 0; i > Q; Q++) {
                        O[Q] = H(N[Q], P[Q], p)
                    }
                } else {
                    for (var u = N[0].length, Q = 0; i > Q; Q++) {
                        for (var y = 0; u > y; y++) {
                            O[Q][y] = H(N[Q][y], P[Q][y], p)
                        }
                    }
                }
            }
            function D(i) {
                switch (typeof i) {
                case "undefined":
                case "string":
                    return !1
                }
                return i.length !== void 0
            }
            function B(S, X, u, Q, W, s, p, P, R) {
                var N = S.length;
                if (1 == R) {
                    for (var y = 0; N > y; y++) {
                        P[y] = A(S[y], X[y], u[y], Q[y], W, s, p)
                    }
                } else {
                    for (var O = S[0].length, y = 0; N > y; y++) {
                        for (var T = 0; O > T; T++) {
                            P[y][T] = A(S[y][T], X[y][T], u[y][T], Q[y][T], W, s, p)
                        }
                    }
                }
            }
            function A(O, Q, u, N, P, p, m) {
                var R = 0.5 * (u - O)
                  , y = 0.5 * (N - Q);
                return (2 * (Q - u) + R + y) * m + (-3 * (Q - u) - 2 * R - y) * p + R * P + Q
            }
            function G(o) {
                if (D(o)) {
                    var m = o.length;
                    if (D(o[0])) {
                        for (var p = [], l = 0; m > l; l++) {
                            p.push(L.call(o[l]))
                        }
                        return p
                    }
                    return L.call(o)
                }
                return o
            }
            function I(i) {
                return i[0] = Math.floor(i[0]),
                i[1] = Math.floor(i[1]),
                i[2] = Math.floor(i[2]),
                "rgba(" + i.join(",") + ")"
            }
            var F = J("./Clip")
              , q = J("../tool/color")
              , v = J("../tool/util")
              , K = J("../tool/event").Dispatcher
              , C = window.requestAnimationFrame || window.msRequestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function(i) {
                setTimeout(i, 16)
            }
              , L = Array.prototype.slice
              , x = function(i) {
                i = i || {},
                this.stage = i.stage || {},
                this.onframe = i.onframe || function() {}
                ,
                this._clips = [],
                this._running = !1,
                this._time = 0,
                K.call(this)
            }
            ;
            x.prototype = {
                add: function(i) {
                    this._clips.push(i)
                },
                remove: function(l) {
                    var i = v.indexOf(this._clips, l);
                    i >= 0 && this._clips.splice(i, 1)
                },
                _update: function() {
                    for (var O = (new Date).getTime(), Q = O - this._time, u = this._clips, N = u.length, P = [], p = [], m = 0; N > m; m++) {
                        var R = u[m]
                          , y = R.step(O);
                        y && (P.push(y),
                        p.push(R))
                    }
                    for (var m = 0; N > m; ) {
                        u[m]._needsRemove ? (u[m] = u[N - 1],
                        u.pop(),
                        N--) : m++
                    }
                    N = P.length;
                    for (var m = 0; N > m; m++) {
                        p[m].fire(P[m])
                    }
                    this._time = O,
                    this.onframe(Q),
                    this.dispatch("frame", Q),
                    this.stage.update && this.stage.update()
                },
                start: function() {
                    function l() {
                        i._running && (C(l),
                        i._update())
                    }
                    var i = this;
                    this._running = !0,
                    this._time = (new Date).getTime(),
                    C(l)
                },
                stop: function() {
                    this._running = !1
                },
                clear: function() {
                    this._clips = []
                },
                animate: function(l, i) {
                    i = i || {};
                    var m = new w(l,i.loop,i.getter,i.setter);
                    return m.animation = this,
                    m
                },
                constructor: x
            },
            v.merge(x.prototype, K.prototype, !0);
            var w = function(n, m, l, p) {
                this._tracks = {},
                this._target = n,
                this._loop = m || !1,
                this._getter = l || z,
                this._setter = p || E,
                this._clipCount = 0,
                this._delay = 0,
                this._doneList = [],
                this._onframeList = [],
                this._clipList = []
            }
            ;
            return w.prototype = {
                when: function(l, i) {
                    for (var m in i) {
                        this._tracks[m] || (this._tracks[m] = [],
                        0 !== l && this._tracks[m].push({
                            time: 0,
                            value: G(this._getter(this._target, m))
                        })),
                        this._tracks[m].push({
                            time: parseInt(l, 10),
                            value: i[m]
                        })
                    }
                    return this
                },
                during: function(i) {
                    return this._onframeList.push(i),
                    this
                },
                start: function(s) {
                    var o = this
                      , N = this._setter
                      , i = this._getter
                      , m = "spline" === s
                      , u = function() {
                        if (o._clipCount--,
                        0 === o._clipCount) {
                            o._tracks = {};
                            for (var l = o._doneList.length, p = 0; l > p; p++) {
                                o._doneList[p].call(o)
                            }
                        }
                    }
                      , r = function(ae, ai) {
                        var ab = ae.length;
                        if (ab) {
                            var R = ae[0].value
                              , ag = D(R)
                              , aj = !1
                              , ah = ag && D(R[0]) ? 2 : 1;
                            ae.sort(function(S, p) {
                                return S.time - p.time
                            }
                            );
                            var af;
                            if (ab) {
                                af = ae[ab - 1].time;
                                for (var V = [], ak = [], O = 0; ab > O; O++) {
                                    V.push(ae[O].time / af);
                                    var l = ae[O].value;
                                    "string" == typeof l && (l = q.toArray(l),
                                    0 === l.length && (l[0] = l[1] = l[2] = 0,
                                    l[3] = 1),
                                    aj = !0),
                                    ak.push(l)
                                }
                                var e, O, P, Z, Y, U, Q, ad = 0, t = 0;
                                if (aj) {
                                    var ac = [0, 0, 0, 0]
                                }
                                var aa = function(T, W) {
                                    if (t > W) {
                                        for (e = Math.min(ad + 1, ab - 1),
                                        O = e; O >= 0 && !(W >= V[O]); O--) {}
                                        O = Math.min(O, ab - 2)
                                    } else {
                                        for (O = ad; ab > O && !(V[O] > W); O++) {}
                                        O = Math.min(O - 1, ab - 2)
                                    }
                                    ad = O,
                                    t = W;
                                    var p = V[O + 1] - V[O];
                                    if (0 !== p) {
                                        if (P = (W - V[O]) / p,
                                        m) {
                                            if (Y = ak[O],
                                            Z = ak[0 === O ? O : O - 1],
                                            U = ak[O > ab - 2 ? ab - 1 : O + 1],
                                            Q = ak[O > ab - 3 ? ab - 1 : O + 2],
                                            ag) {
                                                B(Z, Y, U, Q, P, P * P, P * P * P, i(T, ai), ah)
                                            } else {
                                                var S;
                                                aj ? (S = B(Z, Y, U, Q, P, P * P, P * P * P, ac, 1),
                                                S = I(ac)) : S = A(Z, Y, U, Q, P, P * P, P * P * P),
                                                N(T, ai, S)
                                            }
                                        } else {
                                            if (ag) {
                                                M(ak[O], ak[O + 1], P, i(T, ai), ah)
                                            } else {
                                                var S;
                                                aj ? (M(ak[O], ak[O + 1], P, ac, 1),
                                                S = I(ac)) : S = H(ak[O], ak[O + 1], P),
                                                N(T, ai, S)
                                            }
                                        }
                                        for (O = 0; o._onframeList.length > O; O++) {
                                            o._onframeList[O](T, W)
                                        }
                                    }
                                }
                                  , n = new F({
                                    target: o._target,
                                    life: af,
                                    loop: o._loop,
                                    delay: o._delay,
                                    onframe: aa,
                                    ondestroy: u
                                });
                                s && "spline" !== s && (n.easing = s),
                                o._clipList.push(n),
                                o._clipCount++,
                                o.animation.add(n)
                            }
                        }
                    }
                    ;
                    for (var y in this._tracks) {
                        r(this._tracks[y], y)
                    }
                    return this
                },
                stop: function() {
                    for (var l = 0; this._clipList.length > l; l++) {
                        var i = this._clipList[l];
                        this.animation.remove(i)
                    }
                    this._clipList = []
                },
                delay: function(i) {
                    return this._delay = i,
                    this
                },
                done: function(i) {
                    return i && this._doneList.push(i),
                    this
                }
            },
            x
        }
        ),
        k("zrender/tool/vector", [], function() {
            var l = "undefined" == typeof Float32Array ? Array : Float32Array
              , i = {
                create: function(m, o) {
                    var e = new l(2);
                    return e[0] = m || 0,
                    e[1] = o || 0,
                    e
                },
                copy: function(n, m) {
                    return n[0] = m[0],
                    n[1] = m[1],
                    n
                },
                clone: function(e) {
                    var m = new l(2);
                    return m[0] = e[0],
                    m[1] = e[1],
                    m
                },
                set: function(o, m, p) {
                    return o[0] = m,
                    o[1] = p,
                    o
                },
                add: function(o, m, p) {
                    return o[0] = m[0] + p[0],
                    o[1] = m[1] + p[1],
                    o
                },
                scaleAndAdd: function(p, o, q, m) {
                    return p[0] = o[0] + q[0] * m,
                    p[1] = o[1] + q[1] * m,
                    p
                },
                sub: function(o, m, p) {
                    return o[0] = m[0] - p[0],
                    o[1] = m[1] - p[1],
                    o
                },
                len: function(m) {
                    return Math.sqrt(this.lenSquare(m))
                },
                lenSquare: function(m) {
                    return m[0] * m[0] + m[1] * m[1]
                },
                mul: function(o, m, p) {
                    return o[0] = m[0] * p[0],
                    o[1] = m[1] * p[1],
                    o
                },
                div: function(o, m, p) {
                    return o[0] = m[0] / p[0],
                    o[1] = m[1] / p[1],
                    o
                },
                dot: function(n, m) {
                    return n[0] * m[0] + n[1] * m[1]
                },
                scale: function(o, m, p) {
                    return o[0] = m[0] * p,
                    o[1] = m[1] * p,
                    o
                },
                normalize: function(o, p) {
                    var m = i.len(p);
                    return 0 === m ? (o[0] = 0,
                    o[1] = 0) : (o[0] = p[0] / m,
                    o[1] = p[1] / m),
                    o
                },
                distance: function(n, m) {
                    return Math.sqrt((n[0] - m[0]) * (n[0] - m[0]) + (n[1] - m[1]) * (n[1] - m[1]))
                },
                distanceSquare: function(n, m) {
                    return (n[0] - m[0]) * (n[0] - m[0]) + (n[1] - m[1]) * (n[1] - m[1])
                },
                negate: function(n, m) {
                    return n[0] = -m[0],
                    n[1] = -m[1],
                    n
                },
                lerp: function(p, o, q, m) {
                    return p[0] = o[0] + m * (q[0] - o[0]),
                    p[1] = o[1] + m * (q[1] - o[1]),
                    p
                },
                applyTransform: function(q, p, r) {
                    var o = p[0]
                      , m = p[1];
                    return q[0] = r[0] * o + r[2] * m + r[4],
                    q[1] = r[1] * o + r[3] * m + r[5],
                    q
                },
                min: function(o, m, p) {
                    return o[0] = Math.min(m[0], p[0]),
                    o[1] = Math.min(m[1], p[1]),
                    o
                },
                max: function(o, m, p) {
                    return o[0] = Math.max(m[0], p[0]),
                    o[1] = Math.max(m[1], p[1]),
                    o
                }
            };
            return i.length = i.len,
            i.lengthSquare = i.lenSquare,
            i.dist = i.distance,
            i.distSquare = i.distanceSquare,
            i
        }
        ),
        k("zrender/tool/matrix", [], function() {
            var l = "undefined" == typeof Float32Array ? Array : Float32Array
              , i = {
                create: function() {
                    var e = new l(6);
                    return i.identity(e),
                    e
                },
                identity: function(m) {
                    return m[0] = 1,
                    m[1] = 0,
                    m[2] = 0,
                    m[3] = 1,
                    m[4] = 0,
                    m[5] = 0,
                    m
                },
                copy: function(n, m) {
                    return n[0] = m[0],
                    n[1] = m[1],
                    n[2] = m[2],
                    n[3] = m[3],
                    n[4] = m[4],
                    n[5] = m[5],
                    n
                },
                mul: function(o, m, p) {
                    return o[0] = m[0] * p[0] + m[2] * p[1],
                    o[1] = m[1] * p[0] + m[3] * p[1],
                    o[2] = m[0] * p[2] + m[2] * p[3],
                    o[3] = m[1] * p[2] + m[3] * p[3],
                    o[4] = m[0] * p[4] + m[2] * p[5] + m[4],
                    o[5] = m[1] * p[4] + m[3] * p[5] + m[5],
                    o
                },
                translate: function(o, m, p) {
                    return o[0] = m[0],
                    o[1] = m[1],
                    o[2] = m[2],
                    o[3] = m[3],
                    o[4] = m[4] + p[0],
                    o[5] = m[5] + p[1],
                    o
                },
                rotate: function(z, B, u) {
                    var x = B[0]
                      , A = B[2]
                      , q = B[4]
                      , p = B[1]
                      , C = B[3]
                      , w = B[5]
                      , y = Math.sin(u)
                      , v = Math.cos(u);
                    return z[0] = x * v + p * y,
                    z[1] = -x * y + p * v,
                    z[2] = A * v + C * y,
                    z[3] = -A * y + v * C,
                    z[4] = v * q + y * w,
                    z[5] = v * w - y * q,
                    z
                },
                scale: function(q, p, r) {
                    var o = r[0]
                      , m = r[1];
                    return q[0] = p[0] * o,
                    q[1] = p[1] * m,
                    q[2] = p[2] * o,
                    q[3] = p[3] * m,
                    q[4] = p[4] * o,
                    q[5] = p[5] * m,
                    q
                },
                invert: function(w, y) {
                    var q = y[0]
                      , v = y[2]
                      , x = y[4]
                      , p = y[1]
                      , m = y[3]
                      , z = y[5]
                      , u = q * m - p * v;
                    return u ? (u = 1 / u,
                    w[0] = m * u,
                    w[1] = -p * u,
                    w[2] = -v * u,
                    w[3] = q * u,
                    w[4] = (v * z - m * x) * u,
                    w[5] = (p * x - q * z) * u,
                    w) : null 
                },
                mulVector: function(w, y, q) {
                    var v = y[0]
                      , x = y[2]
                      , p = y[4]
                      , m = y[1]
                      , z = y[3]
                      , u = y[5];
                    return w[0] = q[0] * v + q[1] * x + p,
                    w[1] = q[0] * m + q[1] * z + u,
                    w
                }
            };
            return i
        }
        ),
        k("zrender/loadingEffect/Base", ["require", "../tool/util", "../shape/Text", "../shape/Rectangle"], function(s) {
            function p(i) {
                this.setOptions(i)
            }
            var v = s("../tool/util")
              , m = s("../shape/Text")
              , l = s("../shape/Rectangle")
              , u = "Loading..."
              , q = "normal 16px Arial";
            return p.prototype.createTextShape = function(i) {
                return new m({
                    highlightStyle: v.merge({
                        x: this.canvasWidth / 2,
                        y: this.canvasHeight / 2,
                        text: u,
                        textAlign: "center",
                        textBaseline: "middle",
                        textFont: q,
                        color: "#333",
                        brushType: "fill"
                    }, i, !0)
                })
            }
            ,
            p.prototype.createBackgroundShape = function(i) {
                return new l({
                    highlightStyle: {
                        x: 0,
                        y: 0,
                        width: this.canvasWidth,
                        height: this.canvasHeight,
                        brushType: "fill",
                        color: i
                    }
                })
            }
            ,
            p.prototype.start = function(o) {
                function i(e) {
                    o.storage.addHover(e)
                }
                function r() {
                    o.refreshHover()
                }
                this.canvasWidth = o._width,
                this.canvasHeight = o._height,
                this.loadingTimer = this._start(i, r)
            }
            ,
            p.prototype._start = function() {
                return setInterval(function() {}
                , 10000)
            }
            ,
            p.prototype.stop = function() {
                clearInterval(this.loadingTimer)
            }
            ,
            p.prototype.setOptions = function(i) {
                this.options = i || {}
            }
            ,
            p.prototype.adjust = function(n, i) {
                return i[0] >= n ? n = i[0] : n >= i[1] && (n = i[1]),
                n
            }
            ,
            p.prototype.getLocation = function(x, w, y) {
                var r = null  != x.x ? x.x : "center";
                switch (r) {
                case "center":
                    r = Math.floor((this.canvasWidth - w) / 2);
                    break;
                case "left":
                    r = 0;
                    break;
                case "right":
                    r = this.canvasWidth - w
                }
                var o = null  != x.y ? x.y : "center";
                switch (o) {
                case "center":
                    o = Math.floor((this.canvasHeight - y) / 2);
                    break;
                case "top":
                    o = 0;
                    break;
                case "bottom":
                    o = this.canvasHeight - y
                }
                return {
                    x: r,
                    y: o,
                    width: w,
                    height: y
                }
            }
            ,
            p
        }
        ),
        k("zrender/Layer", ["require", "./mixin/Transformable", "./tool/util", "./config"], function(v) {
            function p() {
                return !1
            }
            function x(z, y, B) {
                var s = document.createElement(y)
                  , r = B.getWidth()
                  , A = B.getHeight();
                return s.style.position = "absolute",
                s.style.left = 0,
                s.style.top = 0,
                s.style.width = r + "px",
                s.style.height = A + "px",
                s.width = r * u.devicePixelRatio,
                s.height = A * u.devicePixelRatio,
                s.setAttribute("data-zr-dom-id", z),
                s
            }
            var m = v("./mixin/Transformable")
              , l = v("./tool/util")
              , w = window.G_vmlCanvasManager
              , u = v("./config")
              , q = function(n, i) {
                this.id = n,
                this.dom = x(n, "canvas", i),
                this.dom.onselectstart = p,
                this.dom.style["-webkit-user-select"] = "none",
                this.dom.style["user-select"] = "none",
                this.dom.style["-webkit-touch-callout"] = "none",
                this.dom.style["-webkit-tap-highlight-color"] = "rgba(0,0,0,0)",
                w && w.initElement(this.dom),
                this.domBack = null ,
                this.ctxBack = null ,
                this.painter = i,
                this.unusedCount = 0,
                this.config = null ,
                this.dirty = !0,
                this.elCount = 0,
                this.clearColor = 0,
                this.motionBlur = !1,
                this.lastFrameAlpha = 0.7,
                this.zoomable = !1,
                this.panable = !1,
                this.maxZoom = 1 / 0,
                this.minZoom = 0,
                m.call(this)
            }
            ;
            return q.prototype.initContext = function() {
                this.ctx = this.dom.getContext("2d");
                var i = u.devicePixelRatio;
                1 != i && this.ctx.scale(i, i)
            }
            ,
            q.prototype.createBackBuffer = function() {
                if (!w) {
                    this.domBack = x("back-" + this.id, "canvas", this.painter),
                    this.ctxBack = this.domBack.getContext("2d");
                    var i = u.devicePixelRatio;
                    1 != i && this.ctxBack.scale(i, i)
                }
            }
            ,
            q.prototype.resize = function(o, i) {
                var r = u.devicePixelRatio;
                this.dom.style.width = o + "px",
                this.dom.style.height = i + "px",
                this.dom.setAttribute("width", o * r),
                this.dom.setAttribute("height", i * r),
                1 != r && this.ctx.scale(r, r),
                this.domBack && (this.domBack.setAttribute("width", o * r),
                this.domBack.setAttribute("height", i * r),
                1 != r && this.ctxBack.scale(r, r))
            }
            ,
            q.prototype.clear = function() {
                var B = this.dom
                  , D = this.ctx
                  , o = B.width
                  , z = B.height
                  , C = this.clearColor && !w
                  , E = this.motionBlur && !w
                  , y = this.lastFrameAlpha
                  , A = u.devicePixelRatio;
                if (E && (this.domBack || this.createBackBuffer(),
                this.ctxBack.globalCompositeOperation = "copy",
                this.ctxBack.drawImage(B, 0, 0, o / A, z / A)),
                D.clearRect(0, 0, o / A, z / A),
                C && (D.save(),
                D.fillStyle = this.clearColor,
                D.fillRect(0, 0, o / A, z / A),
                D.restore()),
                E) {
                    var r = this.domBack;
                    D.save(),
                    D.globalAlpha = y,
                    D.drawImage(r, 0, 0, o / A, z / A),
                    D.restore()
                }
            }
            ,
            l.merge(q.prototype, m.prototype),
            q
        }
        ),
        k("zrender/shape/Text", ["require", "../tool/area", "./Base", "../tool/util"], function(o) {
            var m = o("../tool/area")
              , p = o("./Base")
              , l = function(i) {
                p.call(this, i)
            }
            ;
            return l.prototype = {
                type: "text",
                brush: function(z, u) {
                    var x = this.style;
                    if (u && (x = this.getHighlightStyle(x, this.highlightStyle || {})),
                    void 0 !== x.text && x.text !== !1) {
                        z.save(),
                        this.doClip(z),
                        this.setContext(z, x),
                        this.setTransform(z),
                        x.textFont && (z.font = x.textFont),
                        z.textAlign = x.textAlign || "start",
                        z.textBaseline = x.textBaseline || "middle";
                        var A, t = (x.text + "").split("\n"), q = m.getTextHeight("国", x.textFont), B = this.getRect(x), w = x.x;
                        A = "top" == x.textBaseline ? B.y : "bottom" == x.textBaseline ? B.y + q : B.y + q / 2;
                        for (var y = 0, v = t.length; v > y; y++) {
                            if (x.maxWidth) {
                                switch (x.brushType) {
                                case "fill":
                                    z.fillText(t[y], w, A, x.maxWidth);
                                    break;
                                case "stroke":
                                    z.strokeText(t[y], w, A, x.maxWidth);
                                    break;
                                case "both":
                                    z.fillText(t[y], w, A, x.maxWidth),
                                    z.strokeText(t[y], w, A, x.maxWidth);
                                    break;
                                default:
                                    z.fillText(t[y], w, A, x.maxWidth)
                                }
                            } else {
                                switch (x.brushType) {
                                case "fill":
                                    z.fillText(t[y], w, A);
                                    break;
                                case "stroke":
                                    z.strokeText(t[y], w, A);
                                    break;
                                case "both":
                                    z.fillText(t[y], w, A),
                                    z.strokeText(t[y], w, A);
                                    break;
                                default:
                                    z.fillText(t[y], w, A)
                                }
                            }
                            A += q
                        }
                        z.restore()
                    }
                },
                getRect: function(s) {
                    if (s.__rect) {
                        return s.__rect
                    }
                    var u = m.getTextWidth(s.text, s.textFont)
                      , r = m.getTextHeight(s.text, s.textFont)
                      , q = s.x;
                    "end" == s.textAlign || "right" == s.textAlign ? q -= u : "center" == s.textAlign && (q -= u / 2);
                    var t;
                    return t = "top" == s.textBaseline ? s.y : "bottom" == s.textBaseline ? s.y - r : s.y - r / 2,
                    s.__rect = {
                        x: q,
                        y: t,
                        width: u,
                        height: r
                    },
                    s.__rect
                }
            },
            o("../tool/util").inherits(l, p),
            l
        }
        ),
        k("zrender/shape/Rectangle", ["require", "./Base", "../tool/util"], function(l) {
            var i = l("./Base")
              , m = function(n) {
                i.call(this, n)
            }
            ;
            return m.prototype = {
                type: "rectangle",
                _buildRadiusPath: function(A, C) {
                    var u, y, B, q, p = C.x, D = C.y, x = C.width, z = C.height, w = C.radius;
                    "number" == typeof w ? u = y = B = q = w : w instanceof Array ? 1 === w.length ? u = y = B = q = w[0] : 2 === w.length ? (u = B = w[0],
                    y = q = w[1]) : 3 === w.length ? (u = w[0],
                    y = q = w[1],
                    B = w[2]) : (u = w[0],
                    y = w[1],
                    B = w[2],
                    q = w[3]) : u = y = B = q = 0;
                    var v;
                    u + y > x && (v = u + y,
                    u *= x / v,
                    y *= x / v),
                    B + q > x && (v = B + q,
                    B *= x / v,
                    q *= x / v),
                    y + B > z && (v = y + B,
                    y *= z / v,
                    B *= z / v),
                    u + q > z && (v = u + q,
                    u *= z / v,
                    q *= z / v),
                    A.moveTo(p + u, D),
                    A.lineTo(p + x - y, D),
                    0 !== y && A.quadraticCurveTo(p + x, D, p + x, D + y),
                    A.lineTo(p + x, D + z - B),
                    0 !== B && A.quadraticCurveTo(p + x, D + z, p + x - B, D + z),
                    A.lineTo(p + q, D + z),
                    0 !== q && A.quadraticCurveTo(p, D + z, p, D + z - q),
                    A.lineTo(p, D + u),
                    0 !== u && A.quadraticCurveTo(p, D, p + u, D)
                },
                buildPath: function(o, n) {
                    n.radius ? this._buildRadiusPath(o, n) : (o.moveTo(n.x, n.y),
                    o.lineTo(n.x + n.width, n.y),
                    o.lineTo(n.x + n.width, n.y + n.height),
                    o.lineTo(n.x, n.y + n.height),
                    o.lineTo(n.x, n.y)),
                    o.closePath()
                },
                getRect: function(o) {
                    if (o.__rect) {
                        return o.__rect
                    }
                    var n;
                    return n = "stroke" == o.brushType || "fill" == o.brushType ? o.lineWidth || 1 : 0,
                    o.__rect = {
                        x: Math.round(o.x - n / 2),
                        y: Math.round(o.y - n / 2),
                        width: o.width + n,
                        height: o.height + n
                    },
                    o.__rect
                }
            },
            l("../tool/util").inherits(m, i),
            m
        }
        ),
        k("zrender/tool/area", ["require", "./util", "./curve"], function(am) {
            function Y(i) {
                return i %= aa,
                0 > i && (i += aa),
                i
            }
            function ae(v, m, x, w) {
                if (!m || !v) {
                    return !1
                }
                var u = v.type;
                F = F || z.getContext();
                var p = ai(v, m, x, w);
                if (p !== void 0) {
                    return p
                }
                if (v.buildPath && F.isPointInPath) {
                    return aq(v, F, m, x, w)
                }
                switch (u) {
                case "ellipse":
                    return !0;
                case "trochoid":
                    var i = "out" == m.location ? m.r1 + m.r2 + m.d : m.r1 - m.r2 + m.d;
                    return an(m, x, w, i);
                case "rose":
                    return an(m, x, w, m.maxr);
                default:
                    return !1
                }
            }
            function ai(v, r, x, p) {
                var l = v.type;
                switch (l) {
                case "bezier-curve":
                    return r.cpX2 === void 0 ? ag(r.xStart, r.yStart, r.cpX1, r.cpY1, r.xEnd, r.yEnd, r.lineWidth, x, p) : Z(r.xStart, r.yStart, r.cpX1, r.cpY1, r.cpX2, r.cpY2, r.xEnd, r.yEnd, r.lineWidth, x, p);
                case "line":
                    return ab(r.xStart, r.yStart, r.xEnd, r.yEnd, r.lineWidth, x, p);
                case "polyline":
                    return af(r.pointList, r.lineWidth, x, p);
                case "ring":
                    return A(r.x, r.y, r.r0, r.r, x, p);
                case "circle":
                    return an(r.x, r.y, r.r, x, p);
                case "sector":
                    var w = r.startAngle * Math.PI / 180
                      , s = r.endAngle * Math.PI / 180;
                    return r.clockWise || (w = -w,
                    s = -s),
                    ac(r.x, r.y, r.r0, r.r, w, s, !r.clockWise, x, p);
                case "path":
                    return r.pathArray && ah(r.pathArray, Math.max(r.lineWidth, 5), r.brushType, x, p);
                case "polygon":
                case "star":
                case "isogon":
                    return ao(r.pointList, x, p);
                case "text":
                    var m = r.__rect || v.getRect(r);
                    return B(m.x, m.y, m.width, m.height, x, p);
                case "rectangle":
                case "image":
                    return B(r.x, r.y, r.width, r.height, x, p)
                }
            }
            function aq(p, o, r, m, l) {
                return o.beginPath(),
                p.buildPath(o, r),
                o.closePath(),
                o.isPointInPath(m, l)
            }
            function ad(o, n, m, l) {
                return !ae(o, n, m, l)
            }
            function ab(I, K, v, C, J, u, p) {
                if (0 === J) {
                    return !1
                }
                var L = Math.max(J, 5)
                  , y = 0
                  , E = I;
                if (p > K + L && p > C + L || K - L > p && C - L > p || u > I + L && u > v + L || I - L > u && v - L > u) {
                    return !1
                }
                if (I === v) {
                    return L / 2 >= Math.abs(u - I)
                }
                y = (K - C) / (I - v),
                E = (I * C - v * K) / (I - v);
                var x = y * u - p + E
                  , w = x * x / (y * y + 1);
                return L / 2 * L / 2 >= w
            }
            function Z(J, L, v, E, K, u, p, S, C, I, x) {
                if (0 === C) {
                    return !1
                }
                var w = Math.max(C, 5);
                if (x > L + w && x > E + w && x > u + w && x > S + w || L - w > x && E - w > x && u - w > x && S - w > x || I > J + w && I > v + w && I > K + w && I > p + w || J - w > I && v - w > I && K - w > I && p - w > I) {
                    return !1
                }
                var y = q.cubicProjectPoint(J, L, v, E, K, u, p, S, I, x, null );
                return w / 2 >= y
            }
            function ag(E, J, v, y, I, u, p, K, x) {
                if (0 === p) {
                    return !1
                }
                var C = Math.max(p, 5);
                if (x > J + C && x > y + C && x > u + C || J - C > x && y - C > x && u - C > x || K > E + C && K > v + C && K > I + C || E - C > K && v - C > K && I - C > K) {
                    return !1
                }
                var w = q.quadraticProjectPoint(E, J, v, y, I, u, K, x, null );
                return C / 2 >= w
            }
            function aj(I, u, C, K, t, p, L, y, E) {
                if (0 === L) {
                    return !1
                }
                var w = Math.max(L, 5);
                y -= I,
                E -= u;
                var v = Math.sqrt(y * y + E * E);
                if (v - w > C || C > v + w) {
                    return !1
                }
                if (Math.abs(K - t) >= aa) {
                    return !0
                }
                if (p) {
                    var x = K;
                    K = Y(t),
                    t = Y(x)
                } else {
                    K = Y(K),
                    t = Y(t)
                }
                K > t && (t += aa);
                var J = Math.atan2(E, y);
                return 0 > J && (J += aa),
                J >= K && t >= J || J + aa >= K && t >= J + aa
            }
            function af(y, E, r, w) {
                for (var E = Math.max(E, 10), C = 0, p = y.length - 1; p > C; C++) {
                    var I = y[C][0]
                      , v = y[C][1]
                      , x = y[C + 1][0]
                      , u = y[C + 1][1];
                    if (ab(I, v, x, u, E, r, w)) {
                        return !0
                    }
                }
                return !1
            }
            function A(u, p, w, m, l, v) {
                var s = (l - u) * (l - u) + (v - p) * (v - p);
                return m * m > s && s > w * w
            }
            function B(r, p, u, m, l, s) {
                return l >= r && r + u >= l && s >= p && p + m >= s
            }
            function an(p, o, r, m, l) {
                return r * r > (m - p) * (m - p) + (l - o) * (l - o)
            }
            function ac(x, C, u, w, y, p, m, E, v) {
                return aj(x, C, (u + w) / 2, y, p, m, w - u, E, v)
            }
            function ao(E, J, v) {
                for (var y = E.length, I = 0, u = 0, p = y - 1; y > u; u++) {
                    var K = E[p][0]
                      , x = E[p][1]
                      , C = E[u][0]
                      , w = E[u][1];
                    I += R(K, x, C, w, J, v),
                    p = u
                }
                return 0 !== I
            }
            function R(x, C, u, w, y, p) {
                if (p > C && p > w || C > p && w > p) {
                    return 0
                }
                if (w == C) {
                    return 0
                }
                var m = C > w ? 1 : -1
                  , E = (p - C) / (w - C)
                  , v = E * (u - x) + x;
                return v > y ? m : 0
            }
            function M() {
                var i = T[0];
                T[0] = T[1],
                T[1] = i
            }
            function ak(au, y, K, W, ax, J, E, C, S, X) {
                if (X > y && X > W && X > J && X > C || y > X && W > X && J > X && C > X) {
                    return 0
                }
                var L = q.cubicRootAt(y, W, J, C, X, D);
                if (0 === L) {
                    return 0
                }
                for (var v, w, av = 0, I = -1, aw = 0; L > aw; aw++) {
                    var x = D[aw]
                      , at = q.cubicAt(au, K, ax, E, x);
                    S > at || (0 > I && (I = q.cubicExtrema(y, W, J, C, T),
                    T[1] < T[0] && I > 1 && M(),
                    v = q.cubicAt(y, W, J, C, T[0]),
                    I > 1 && (w = q.cubicAt(y, W, J, C, T[1]))),
                    av += 2 == I ? T[0] > x ? y > v ? 1 : -1 : T[1] > x ? v > w ? 1 : -1 : w > C ? 1 : -1 : T[0] > x ? y > v ? 1 : -1 : v > C ? 1 : -1)
                }
                return av
            }
            function ap(J, S, v, E, L, u, p, W) {
                if (W > S && W > E && W > u || S > W && E > W && u > W) {
                    return 0
                }
                var C = q.quadraticRootAt(S, E, u, W, D);
                if (0 === C) {
                    return 0
                }
                var I = q.quadraticExtremum(S, E, u);
                if (I >= 0 && 1 >= I) {
                    for (var x = 0, w = q.quadraticAt(S, E, u, I), y = 0; C > y; y++) {
                        var K = q.quadraticAt(J, v, L, D[y]);
                        K > p || (x += I > D[y] ? S > w ? 1 : -1 : w > u ? 1 : -1)
                    }
                    return x
                }
                var K = q.quadraticAt(J, v, L, D[0]);
                return K > p ? 0 : S > u ? 1 : -1
            }
            function al(K, w, I, S, v, t, W, E) {
                if (E -= w,
                E > I || -I > E) {
                    return 0
                }
                var J = Math.sqrt(I * I - E * E);
                if (D[0] = -J,
                D[1] = J,
                Math.abs(S - v) >= aa) {
                    S = 0,
                    v = aa;
                    var y = t ? 1 : -1;
                    return W >= D[0] + K && D[1] + K >= W ? y : 0
                }
                if (t) {
                    var J = S;
                    S = Y(v),
                    v = Y(J)
                } else {
                    S = Y(S),
                    v = Y(v)
                }
                S > v && (v += aa);
                for (var x = 0, C = 0; 2 > C; C++) {
                    var L = D[C];
                    if (L + K > W) {
                        var u = Math.atan2(E, L)
                          , y = t ? 1 : -1;
                        0 > u && (u = aa + u),
                        (u >= S && v >= u || u + aa >= S && v >= u + aa) && (u > Math.PI / 2 && 1.5 * Math.PI > u && (y = -y),
                        x += y)
                    }
                }
                return x
            }
            function ah(aJ, aB, aF, aI, aM) {
                var aE = 0
                  , aG = 0
                  , s = 0
                  , u = 0
                  , aK = 0
                  , aD = !0
                  , aL = !0;
                aF = aF || "fill";
                for (var aw = "stroke" === aF || "both" === aF, aH = "fill" === aF || "both" === aF, ay = 0; aJ.length > ay; ay++) {
                    var aN = aJ[ay]
                      , at = aN.points;
                    if (aD || "M" === aN.command) {
                        if (ay > 0 && (aH && (aE += R(aG, s, u, aK, aI, aM)),
                        0 !== aE)) {
                            return !0
                        }
                        u = at[at.length - 2],
                        aK = at[at.length - 1],
                        aD = !1,
                        aL && "A" !== aN.command && (aL = !1,
                        aG = u,
                        s = aK)
                    }
                    switch (aN.command) {
                    case "M":
                        aG = at[0],
                        s = at[1];
                        break;
                    case "L":
                        if (aw && ab(aG, s, at[0], at[1], aB, aI, aM)) {
                            return !0
                        }
                        aH && (aE += R(aG, s, at[0], at[1], aI, aM)),
                        aG = at[0],
                        s = at[1];
                        break;
                    case "C":
                        if (aw && Z(aG, s, at[0], at[1], at[2], at[3], at[4], at[5], aB, aI, aM)) {
                            return !0
                        }
                        aH && (aE += ak(aG, s, at[0], at[1], at[2], at[3], at[4], at[5], aI, aM)),
                        aG = at[4],
                        s = at[5];
                        break;
                    case "Q":
                        if (aw && ag(aG, s, at[0], at[1], at[2], at[3], aB, aI, aM)) {
                            return !0
                        }
                        aH && (aE += ap(aG, s, at[0], at[1], at[2], at[3], aI, aM)),
                        aG = at[2],
                        s = at[3];
                        break;
                    case "A":
                        var r = at[0]
                          , l = at[1]
                          , au = at[2]
                          , aA = at[3]
                          , az = at[4]
                          , ax = at[5]
                          , av = Math.cos(az) * au + r
                          , aC = Math.sin(az) * aA + l;
                        aL ? (aL = !1,
                        u = av,
                        aK = aC) : aE += R(aG, s, av, aC);
                        var E = (aI - r) * aA / au + r;
                        if (aw && aj(r, l, aA, az, az + ax, 1 - at[7], aB, E, aM)) {
                            return !0
                        }
                        aH && (aE += al(r, l, aA, az, az + ax, 1 - at[7], E, aM)),
                        aG = Math.cos(az + ax) * au + r,
                        s = Math.sin(az + ax) * aA + l;
                        break;
                    case "z":
                        if (aw && ab(aG, s, u, aK, aB, aI, aM)) {
                            return !0
                        }
                        aD = !0
                    }
                }
                return aH && (aE += R(aG, s, u, aK, aI, aM)),
                0 !== aE
            }
            function O(r, p) {
                var u = r + ":" + p;
                if (G[u]) {
                    return G[u]
                }
                F = F || z.getContext(),
                F.save(),
                p && (F.font = p),
                r = (r + "").split("\n");
                for (var m = 0, l = 0, s = r.length; s > l; l++) {
                    m = Math.max(F.measureText(r[l]).width, m)
                }
                return F.restore(),
                G[u] = m,
                ++P > H && (P = 0,
                G = {}),
                m
            }
            function ar(o, m) {
                var p = o + ":" + m;
                if (Q[p]) {
                    return Q[p]
                }
                F = F || z.getContext(),
                F.save(),
                m && (F.font = m),
                o = (o + "").split("\n");
                var l = (F.measureText("国").width + 2) * o.length;
                return F.restore(),
                Q[p] = l,
                ++N > H && (N = 0,
                Q = {}),
                l
            }
            var F, z = am("./util"), q = am("./curve"), G = {}, Q = {}, P = 0, N = 0, H = 5000, aa = 2 * Math.PI, D = [-1, -1, -1], T = [-1, -1];
            return {
                isInside: ae,
                isOutside: ad,
                getTextWidth: O,
                getTextHeight: ar,
                isInsidePath: ah,
                isInsidePolygon: ao,
                isInsideSector: ac,
                isInsideCircle: an,
                isInsideLine: ab,
                isInsideRect: B,
                isInsidePolyline: af,
                isInsideCubicStroke: Z,
                isInsideQuadraticStroke: ag
            }
        }
        ),
        k("zrender/shape/Base", ["require", "../tool/matrix", "../tool/guid", "../tool/util", "../tool/log", "../mixin/Transformable", "../mixin/Eventful", "../tool/area", "../tool/color"], function(B) {
            function D(M, J, L, n, e, N, I) {
                e && (M.font = e),
                M.textAlign = N,
                M.textBaseline = I;
                var K = u(J, L, n, e, N, I);
                J = (J + "").split("\n");
                var G = B("../tool/area").getTextHeight("国", e);
                switch (I) {
                case "top":
                    n = K.y;
                    break;
                case "bottom":
                    n = K.y + G;
                    break;
                default:
                    n = K.y + G / 2
                }
                for (var F = 0, H = J.length; H > F; F++) {
                    M.fillText(J[F], L, n),
                    n += G
                }
            }
            function u(K, F, H, J, m, e) {
                var L = B("../tool/area")
                  , G = L.getTextWidth(K, J)
                  , I = L.getTextHeight("国", J);
                switch (K = (K + "").split("\n"),
                m) {
                case "end":
                case "right":
                    F -= G;
                    break;
                case "center":
                    F -= G / 2
                }
                switch (e) {
                case "top":
                    break;
                case "bottom":
                    H -= I * K.length;
                    break;
                default:
                    H -= I * K.length / 2
                }
                return {
                    x: F,
                    y: H,
                    width: G,
                    height: I * K.length
                }
            }
            var z = window.G_vmlCanvasManager
              , C = B("../tool/matrix")
              , q = B("../tool/guid")
              , p = B("../tool/util")
              , E = B("../tool/log")
              , y = B("../mixin/Transformable")
              , A = B("../mixin/Eventful")
              , w = function(l) {
                l = l || {},
                this.id = l.id || q();
                for (var i in l) {
                    this[i] = l[i]
                }
                this.style = this.style || {},
                this.highlightStyle = this.highlightStyle || null ,
                this.parent = null ,
                this.__dirty = !0,
                this.__clipShapes = [],
                y.call(this),
                A.call(this)
            }
            ;
            w.prototype.invisible = !1,
            w.prototype.ignore = !1,
            w.prototype.zlevel = 0,
            w.prototype.draggable = !1,
            w.prototype.clickable = !1,
            w.prototype.hoverable = !0,
            w.prototype.z = 0,
            w.prototype.brush = function(l, i) {
                var m = this.beforeBrush(l, i);
                switch (l.beginPath(),
                this.buildPath(l, m),
                m.brushType) {
                case "both":
                    l.fill();
                case "stroke":
                    m.lineWidth > 0 && l.stroke();
                    break;
                default:
                    l.fill()
                }
                this.drawText(l, m, this.style),
                this.afterBrush(l)
            }
            ,
            w.prototype.beforeBrush = function(l, i) {
                var m = this.style;
                return this.brushTypeOnly && (m.brushType = this.brushTypeOnly),
                i && (m = this.getHighlightStyle(m, this.highlightStyle || {}, this.brushTypeOnly)),
                "stroke" == this.brushTypeOnly && (m.strokeColor = m.strokeColor || m.color),
                l.save(),
                this.doClip(l),
                this.setContext(l, m),
                this.setTransform(l),
                m
            }
            ,
            w.prototype.afterBrush = function(i) {
                i.restore()
            }
            ;
            var v = [["color", "fillStyle"], ["strokeColor", "strokeStyle"], ["opacity", "globalAlpha"], ["lineCap", "lineCap"], ["lineJoin", "lineJoin"], ["miterLimit", "miterLimit"], ["lineWidth", "lineWidth"], ["shadowBlur", "shadowBlur"], ["shadowColor", "shadowColor"], ["shadowOffsetX", "shadowOffsetX"], ["shadowOffsetY", "shadowOffsetY"]];
            w.prototype.setContext = function(G, s) {
                for (var I = 0, m = v.length; m > I; I++) {
                    var l = v[I][0]
                      , H = s[l]
                      , F = v[I][1];
                    H !== void 0 && (G[F] = H)
                }
            }
            ;
            var x = C.create();
            return w.prototype.doClip = function(l) {
                if (this.__clipShapes && !z) {
                    for (var i = 0; this.__clipShapes.length > i; i++) {
                        var r = this.__clipShapes[i];
                        if (r.needTransform) {
                            var m = r.transform;
                            C.invert(x, m),
                            l.transform(m[0], m[1], m[2], m[3], m[4], m[5])
                        }
                        if (l.beginPath(),
                        r.buildPath(l, r.style),
                        l.clip(),
                        r.needTransform) {
                            var m = x;
                            l.transform(m[0], m[1], m[2], m[3], m[4], m[5])
                        }
                    }
                }
            }
            ,
            w.prototype.getHighlightStyle = function(m, I, l) {
                var e = {};
                for (var H in m) {
                    e[H] = m[H]
                }
                var G = B("../tool/color")
                  , F = G.getHighlightColor();
                "stroke" != m.brushType ? (e.strokeColor = F,
                e.lineWidth = (m.lineWidth || 1) + this.getHighlightZoom(),
                e.brushType = "both") : "stroke" != l ? (e.strokeColor = F,
                e.lineWidth = (m.lineWidth || 1) + this.getHighlightZoom()) : e.strokeColor = I.strokeColor || G.mix(m.strokeColor, G.toRGB(F));
                for (var H in I) {
                    I[H] !== void 0 && (e[H] = I[H])
                }
                return e
            }
            ,
            w.prototype.getHighlightZoom = function() {
                return "text" != this.type ? 6 : 2
            }
            ,
            w.prototype.drift = function(l, i) {
                this.position[0] += l,
                this.position[1] += i
            }
            ,
            w.prototype.buildPath = function() {
                E("buildPath not implemented in " + this.type)
            }
            ,
            w.prototype.getRect = function() {
                E("getRect not implemented in " + this.type)
            }
            ,
            w.prototype.isCover = function(l, m) {
                var e = this.transformCoordToLocal(l, m);
                return l = e[0],
                m = e[1],
                this.isCoverRect(l, m) ? B("../tool/area").isInside(this, this.style, l, m) : !1
            }
            ,
            w.prototype.isCoverRect = function(l, i) {
                var m = this.style.__rect;
                return m || (m = this.style.__rect = this.getRect(this.style)),
                l >= m.x && m.x + m.width >= l && i >= m.y && m.y + m.height >= i
            }
            ,
            w.prototype.drawText = function(S, M, P) {
                if (void 0 !== M.text && M.text !== !1) {
                    var X = M.textColor || M.color || M.strokeColor;
                    S.fillStyle = X;
                    var L, J, I, O, Q = 10, N = M.textPosition || this.textPosition || "top";
                    switch (N) {
                    case "inside":
                    case "top":
                    case "bottom":
                    case "left":
                    case "right":
                        if (this.getRect) {
                            var t = (P || M).__rect || this.getRect(P || M);
                            switch (N) {
                            case "inside":
                                I = t.x + t.width / 2,
                                O = t.y + t.height / 2,
                                L = "center",
                                J = "middle",
                                "stroke" != M.brushType && X == M.color && (S.fillStyle = "#fff");
                                break;
                            case "left":
                                I = t.x - Q,
                                O = t.y + t.height / 2,
                                L = "end",
                                J = "middle";
                                break;
                            case "right":
                                I = t.x + t.width + Q,
                                O = t.y + t.height / 2,
                                L = "start",
                                J = "middle";
                                break;
                            case "top":
                                I = t.x + t.width / 2,
                                O = t.y - Q,
                                L = "center",
                                J = "bottom";
                                break;
                            case "bottom":
                                I = t.x + t.width / 2,
                                O = t.y + t.height + Q,
                                L = "center",
                                J = "top"
                            }
                        }
                        break;
                    case "start":
                    case "end":
                        var F = M.pointList || [[M.xStart || 0, M.yStart || 0], [M.xEnd || 0, M.yEnd || 0]]
                          , T = F.length;
                        if (2 > T) {
                            return
                        }
                        var K, W, H, G;
                        switch (N) {
                        case "start":
                            K = F[1][0],
                            W = F[0][0],
                            H = F[1][1],
                            G = F[0][1];
                            break;
                        case "end":
                            K = F[T - 2][0],
                            W = F[T - 1][0],
                            H = F[T - 2][1],
                            G = F[T - 1][1]
                        }
                        I = W,
                        O = G;
                        var R = 180 * (Math.atan((H - G) / (W - K)) / Math.PI);
                        0 > W - K ? R += 180 : 0 > H - G && (R += 360),
                        Q = 5,
                        R >= 30 && 150 >= R ? (L = "center",
                        J = "bottom",
                        O -= Q) : R > 150 && 210 > R ? (L = "right",
                        J = "middle",
                        I -= Q) : R >= 210 && 330 >= R ? (L = "center",
                        J = "top",
                        O += Q) : (L = "left",
                        J = "middle",
                        I += Q);
                        break;
                    case "specific":
                        I = M.textX || 0,
                        O = M.textY || 0,
                        L = "start",
                        J = "middle"
                    }
                    null  != I && null  != O && D(S, M.text, I, O, M.textFont, M.textAlign || L, M.textBaseline || J)
                }
            }
            ,
            w.prototype.modSelf = function() {
                this.__dirty = !0,
                this.style && (this.style.__rect = null ),
                this.highlightStyle && (this.highlightStyle.__rect = null )
            }
            ,
            w.prototype.isSilent = function() {
                return !(this.hoverable || this.draggable || this.clickable || this.onmousemove || this.onmouseover || this.onmouseout || this.onmousedown || this.onmouseup || this.onclick || this.ondragenter || this.ondragover || this.ondragleave || this.ondrop)
            }
            ,
            p.merge(w.prototype, y.prototype, !0),
            p.merge(w.prototype, A.prototype, !0),
            w
        }
        ),
        k("zrender/tool/curve", ["require", "./vector"], function(M) {
            function z(i) {
                return i > -x && x > i
            }
            function E(i) {
                return i > x || -x > i
            }
            function I(r, p, u, m, l) {
                var s = 1 - l;
                return s * s * (s * r + 3 * l * p) + l * l * (l * m + 3 * s * u)
            }
            function Q(r, p, u, m, l) {
                var s = 1 - l;
                return 3 * (((p - r) * s + 2 * (u - p) * l) * s + (m - u) * l * l)
            }
            function D(an, ag, ak, ar, af, ad) {
                var ac = ar + 3 * (ag - ak) - an
                  , ai = 3 * (ak - 2 * ag + an)
                  , al = 3 * (ag - an)
                  , ah = an - af
                  , R = ai * ai - 3 * ac * al
                  , S = ai * al - 9 * ac * ah
                  , ao = al * al - 3 * ai * ah
                  , ae = 0;
                if (z(R) && z(S)) {
                    if (z(ai)) {
                        ad[0] = 0
                    } else {
                        var ap = -al / ai;
                        ap >= 0 && 1 >= ap && (ad[ae++] = ap)
                    }
                } else {
                    var ab = S * S - 4 * R * ao;
                    if (z(ab)) {
                        var aq = S / R
                          , ap = -ai / ac + aq
                          , am = -aq / 2;
                        ap >= 0 && 1 >= ap && (ad[ae++] = ap),
                        am >= 0 && 1 >= am && (ad[ae++] = am)
                    } else {
                        if (ab > 0) {
                            var aj = Math.sqrt(ab)
                              , Z = R * ai + 1.5 * ac * (-S + aj)
                              , at = R * ai + 1.5 * ac * (-S - aj);
                            Z = 0 > Z ? -Math.pow(-Z, K) : Math.pow(Z, K),
                            at = 0 > at ? -Math.pow(-at, K) : Math.pow(at, K);
                            var ap = (-ai - (Z + at)) / (3 * ac);
                            ap >= 0 && 1 >= ap && (ad[ae++] = ap)
                        } else {
                            var T = (2 * R * ai - 3 * ac * S) / (2 * Math.sqrt(R * R * R))
                              , y = Math.acos(T) / 3
                              , t = Math.sqrt(R)
                              , Y = Math.cos(y)
                              , ap = (-ai - 2 * t * Y) / (3 * ac)
                              , am = (-ai + t * (Y + w * Math.sin(y))) / (3 * ac)
                              , aa = (-ai + t * (Y - w * Math.sin(y))) / (3 * ac);
                            ap >= 0 && 1 >= ap && (ad[ae++] = ap),
                            am >= 0 && 1 >= am && (ad[ae++] = am),
                            aa >= 0 && 1 >= aa && (ad[ae++] = aa)
                        }
                    }
                }
                return ae
            }
            function B(Y, W, aa, u, n) {
                var ab = 6 * aa - 12 * W + 6 * Y
                  , T = 9 * W + 3 * u - 3 * Y - 9 * aa
                  , X = 3 * W - 3 * Y
                  , R = 0;
                if (z(T)) {
                    if (E(ab)) {
                        var y = -X / ab;
                        y >= 0 && 1 >= y && (n[R++] = y)
                    }
                } else {
                    var S = ab * ab - 4 * T * X;
                    if (z(S)) {
                        n[0] = -ab / (2 * T)
                    } else {
                        if (S > 0) {
                            var Z = Math.sqrt(S)
                              , y = (-ab + Z) / (2 * T)
                              , t = (-ab - Z) / (2 * T);
                            y >= 0 && 1 >= y && (n[R++] = y),
                            t >= 0 && 1 >= t && (n[R++] = t)
                        }
                    }
                }
                return R
            }
            function A(X, Z, y, U, Y, u) {
                var p = (Z - X) * Y + X
                  , aa = (y - Z) * Y + Z
                  , T = (U - y) * Y + y
                  , W = (aa - p) * Y + p
                  , S = (T - aa) * Y + aa
                  , R = (S - W) * Y + W;
                u[0] = X,
                u[1] = p,
                u[2] = W,
                u[3] = R,
                u[4] = R,
                u[5] = S,
                u[6] = T,
                u[7] = U
            }
            function G(ai, Y, ad, ak, ac, aa, Z, af, ag, ae, u) {
                var R, aj = 0.005, ab = 1 / 0;
                P[0] = ag,
                P[1] = ae;
                for (var T = 0; 1 > T; T += 0.05) {
                    L[0] = I(ai, ad, ac, Z, T),
                    L[1] = I(Y, ak, aa, af, T);
                    var ah = O.distSquare(P, L);
                    ab > ah && (R = T,
                    ab = ah)
                }
                ab = 1 / 0;
                for (var X = 0; 32 > X && !(x > aj); X++) {
                    var al = R - aj
                      , S = R + aj;
                    L[0] = I(ai, ad, ac, Z, al),
                    L[1] = I(Y, ak, aa, af, al);
                    var ah = O.distSquare(L, P);
                    if (al >= 0 && ab > ah) {
                        R = al,
                        ab = ah
                    } else {
                        H[0] = I(ai, ad, ac, Z, S),
                        H[1] = I(Y, ak, aa, af, S);
                        var i = O.distSquare(H, P);
                        1 >= S && ab > i ? (R = S,
                        ab = i) : aj *= 0.5
                    }
                }
                return u && (u[0] = I(ai, ad, ac, Z, R),
                u[1] = I(Y, ak, aa, af, R)),
                Math.sqrt(ab)
            }
            function J(p, o, r, m) {
                var l = 1 - m;
                return l * (l * p + 2 * m * o) + m * m * r
            }
            function F(o, m, p, l) {
                return 2 * ((1 - l) * (m - o) + l * (p - m))
            }
            function q(Y, W, aa, u, n) {
                var ab = Y - 2 * W + aa
                  , T = 2 * (W - Y)
                  , X = Y - u
                  , R = 0;
                if (z(ab)) {
                    if (E(T)) {
                        var y = -X / T;
                        y >= 0 && 1 >= y && (n[R++] = y)
                    }
                } else {
                    var S = T * T - 4 * ab * X;
                    if (z(S)) {
                        var y = -T / (2 * ab);
                        y >= 0 && 1 >= y && (n[R++] = y)
                    } else {
                        if (S > 0) {
                            var Z = Math.sqrt(S)
                              , y = (-T + Z) / (2 * ab)
                              , t = (-T - Z) / (2 * ab);
                            y >= 0 && 1 >= y && (n[R++] = y),
                            t >= 0 && 1 >= t && (n[R++] = t)
                        }
                    }
                }
                return R
            }
            function v(o, m, p) {
                var l = o + p - 2 * m;
                return 0 === l ? 0.5 : (o - m) / l
            }
            function N(R, p, T, m, l) {
                var S = (p - R) * m + R
                  , y = (T - p) * m + p
                  , u = (y - S) * m + S;
                l[0] = R,
                l[1] = S,
                l[2] = u,
                l[3] = u,
                l[4] = y,
                l[5] = T
            }
            function C(ag, W, ab, ae, ai, aa, Y, X, ad) {
                var ac, u = 0.005, R = 1 / 0;
                P[0] = Y,
                P[1] = X;
                for (var ah = 0; 1 > ah; ah += 0.05) {
                    L[0] = J(ag, ab, ai, ah),
                    L[1] = J(W, ae, aa, ah);
                    var Z = O.distSquare(P, L);
                    R > Z && (ac = ah,
                    R = Z)
                }
                R = 1 / 0;
                for (var S = 0; 32 > S && !(x > u); S++) {
                    var af = ac - u
                      , T = ac + u;
                    L[0] = J(ag, ab, ai, af),
                    L[1] = J(W, ae, aa, af);
                    var Z = O.distSquare(L, P);
                    if (af >= 0 && R > Z) {
                        ac = af,
                        R = Z
                    } else {
                        H[0] = J(ag, ab, ai, T),
                        H[1] = J(W, ae, aa, T);
                        var aj = O.distSquare(H, P);
                        1 >= T && R > aj ? (ac = T,
                        R = aj) : u *= 0.5
                    }
                }
                return ad && (ad[0] = J(ag, ab, ai, ac),
                ad[1] = J(W, ae, aa, ac)),
                Math.sqrt(R)
            }
            var O = M("./vector")
              , x = 0.0001
              , w = Math.sqrt(3)
              , K = 1 / 3
              , P = O.create()
              , L = O.create()
              , H = O.create();
            return {
                cubicAt: I,
                cubicDerivativeAt: Q,
                cubicRootAt: D,
                cubicExtrema: B,
                cubicSubdivide: A,
                cubicProjectPoint: G,
                quadraticAt: J,
                quadraticDerivativeAt: F,
                quadraticRootAt: q,
                quadraticExtremum: v,
                quadraticSubdivide: N,
                quadraticProjectPoint: C
            }
        }
        ),
        k("zrender/mixin/Transformable", ["require", "../tool/matrix", "../tool/vector"], function(w) {
            function y(i) {
                return i > -z && z > i
            }
            function q(i) {
                return i > z || -z > i
            }
            var v = w("../tool/matrix")
              , x = w("../tool/vector")
              , p = [0, 0]
              , m = v.translate
              , z = 0.00005
              , u = function() {
                this.position || (this.position = [0, 0]),
                this.rotation === void 0 && (this.rotation = [0, 0, 0]),
                this.scale || (this.scale = [1, 1, 0, 0]),
                this.needLocalTransform = !1,
                this.needTransform = !1
            }
            ;
            return u.prototype = {
                constructor: u,
                updateNeedTransform: function() {
                    this.needLocalTransform = q(this.rotation[0]) || q(this.position[0]) || q(this.position[1]) || q(this.scale[0] - 1) || q(this.scale[1] - 1)
                },
                updateTransform: function() {
                    this.updateNeedTransform();
                    var o = this.parent && this.parent.needTransform;
                    if (this.needTransform = this.needLocalTransform || o,
                    this.needTransform) {
                        var l = this.transform || v.create();
                        if (v.identity(l),
                        this.needLocalTransform) {
                            var i = this.scale;
                            if (q(i[0]) || q(i[1])) {
                                p[0] = -i[2] || 0,
                                p[1] = -i[3] || 0;
                                var n = q(p[0]) || q(p[1]);
                                n && m(l, l, p),
                                v.scale(l, l, i),
                                n && (p[0] = -p[0],
                                p[1] = -p[1],
                                m(l, l, p))
                            }
                            if (this.rotation instanceof Array) {
                                if (0 !== this.rotation[0]) {
                                    p[0] = -this.rotation[1] || 0,
                                    p[1] = -this.rotation[2] || 0;
                                    var n = q(p[0]) || q(p[1]);
                                    n && m(l, l, p),
                                    v.rotate(l, l, this.rotation[0]),
                                    n && (p[0] = -p[0],
                                    p[1] = -p[1],
                                    m(l, l, p))
                                }
                            } else {
                                0 !== this.rotation && v.rotate(l, l, this.rotation)
                            }
                            (q(this.position[0]) || q(this.position[1])) && m(l, l, this.position)
                        }
                        o && (this.needLocalTransform ? v.mul(l, this.parent.transform, l) : v.copy(l, this.parent.transform)),
                        this.transform = l,
                        this.invTransform = this.invTransform || v.create(),
                        v.invert(this.invTransform, l)
                    }
                },
                setTransform: function(l) {
                    if (this.needTransform) {
                        var i = this.transform;
                        l.transform(i[0], i[1], i[2], i[3], i[4], i[5])
                    }
                },
                lookAt: function() {
                    var i = x.create();
                    return function(s) {
                        this.transform || (this.transform = v.create());
                        var l = this.transform;
                        if (x.sub(i, s, this.position),
                        !y(i[0]) || !y(i[1])) {
                            x.normalize(i, i);
                            var e = this.scale;
                            l[2] = i[0] * e[1],
                            l[3] = i[1] * e[1],
                            l[0] = i[1] * e[0],
                            l[1] = -i[0] * e[0],
                            l[4] = this.position[0],
                            l[5] = this.position[1],
                            this.decomposeTransform()
                        }
                    }
                }
                (),
                decomposeTransform: function() {
                    if (this.transform) {
                        var B = this.transform
                          , s = B[0] * B[0] + B[1] * B[1]
                          , n = this.position
                          , l = this.scale
                          , C = this.rotation;
                        q(s - 1) && (s = Math.sqrt(s));
                        var A = B[2] * B[2] + B[3] * B[3];
                        q(A - 1) && (A = Math.sqrt(A)),
                        n[0] = B[4],
                        n[1] = B[5],
                        l[0] = s,
                        l[1] = A,
                        l[2] = l[3] = 0,
                        C[0] = Math.atan2(-B[1] / A, B[0] / s),
                        C[1] = C[2] = 0
                    }
                },
                transformCoordToLocal: function(l, i) {
                    var o = [l, i];
                    return this.needTransform && this.invTransform && v.mulVector(o, this.invTransform, o),
                    o
                }
            },
            u
        }
        ),
        k("zrender/Group", ["require", "./tool/guid", "./tool/util", "./mixin/Transformable", "./mixin/Eventful"], function(q) {
            var p = q("./tool/guid")
              , s = q("./tool/util")
              , m = q("./mixin/Transformable")
              , l = q("./mixin/Eventful")
              , r = function(i) {
                i = i || {},
                this.id = i.id || p();
                for (var o in i) {
                    this[o] = i[o]
                }
                this.type = "group",
                this.clipShape = null ,
                this._children = [],
                this._storage = null ,
                this.__dirty = !0,
                m.call(this),
                l.call(this)
            }
            ;
            return r.prototype.ignore = !1,
            r.prototype.children = function() {
                return this._children.slice()
            }
            ,
            r.prototype.childAt = function(i) {
                return this._children[i]
            }
            ,
            r.prototype.addChild = function(i) {
                i != this && i.parent != this && (i.parent && i.parent.removeChild(i),
                this._children.push(i),
                i.parent = this,
                this._storage && this._storage !== i._storage && (this._storage.addToMap(i),
                i instanceof r && i.addChildrenToStorage(this._storage)))
            }
            ,
            r.prototype.removeChild = function(n) {
                var i = s.indexOf(this._children, n);
                i >= 0 && this._children.splice(i, 1),
                n.parent = null ,
                this._storage && (this._storage.delFromMap(n.id),
                n instanceof r && n.delChildrenFromStorage(this._storage))
            }
            ,
            r.prototype.clearChildren = function() {
                for (var n = 0; this._children.length > n; n++) {
                    var i = this._children[n];
                    this._storage && (this._storage.delFromMap(i.id),
                    i instanceof r && i.delChildrenFromStorage(this._storage))
                }
                this._children.length = 0
            }
            ,
            r.prototype.eachChild = function(w, v) {
                for (var x = !!v, u = 0; this._children.length > u; u++) {
                    var o = this._children[u];
                    x ? w.call(v, o) : w(o)
                }
            }
            ,
            r.prototype.traverse = function(w, v) {
                for (var x = !!v, u = 0; this._children.length > u; u++) {
                    var o = this._children[u];
                    x ? w.call(v, o) : w(o),
                    "group" === o.type && o.traverse(w, v)
                }
            }
            ,
            r.prototype.addChildrenToStorage = function(o) {
                for (var i = 0; this._children.length > i; i++) {
                    var u = this._children[i];
                    o.addToMap(u),
                    u instanceof r && u.addChildrenToStorage(o)
                }
            }
            ,
            r.prototype.delChildrenFromStorage = function(o) {
                for (var i = 0; this._children.length > i; i++) {
                    var u = this._children[i];
                    o.delFromMap(u.id),
                    u instanceof r && u.delChildrenFromStorage(o)
                }
            }
            ,
            r.prototype.modSelf = function() {
                this.__dirty = !0
            }
            ,
            s.merge(r.prototype, m.prototype, !0),
            s.merge(r.prototype, l.prototype, !0),
            r
        }
        ),
        k("zrender/animation/Clip", ["require", "./easing"], function(l) {
            function i(n) {
                this._targetPool = n.target || {},
                this._targetPool instanceof Array || (this._targetPool = [this._targetPool]),
                this._life = n.life || 1000,
                this._delay = n.delay || 0,
                this._startTime = (new Date).getTime() + this._delay,
                this._endTime = this._startTime + 1000 * this._life,
                this.loop = n.loop === void 0 ? !1 : n.loop,
                this.gap = n.gap || 0,
                this.easing = n.easing || "Linear",
                this.onframe = n.onframe,
                this.ondestroy = n.ondestroy,
                this.onrestart = n.onrestart
            }
            var m = l("./easing");
            return i.prototype = {
                step: function(q) {
                    var p = (q - this._startTime) / this._life;
                    if (!(0 > p)) {
                        p = Math.min(p, 1);
                        var o = "string" == typeof this.easing ? m[this.easing] : this.easing
                          , n = "function" == typeof o ? o(p) : p;
                        return this.fire("frame", n),
                        1 == p ? this.loop ? (this.restart(),
                        "restart") : (this._needsRemove = !0,
                        "destroy") : null 
                    }
                },
                restart: function() {
                    var o = (new Date).getTime()
                      , n = (o - this._startTime) % this._life;
                    this._startTime = (new Date).getTime() - n + this.gap,
                    this._needsRemove = !1
                },
                fire: function(q, p) {
                    for (var r = 0, o = this._targetPool.length; o > r; r++) {
                        this["on" + q] && this["on" + q](this._targetPool[r], p)
                    }
                },
                constructor: i
            },
            i
        }
        ),
        k("zrender/animation/easing", [], function() {
            var i = {
                Linear: function(l) {
                    return l
                },
                QuadraticIn: function(l) {
                    return l * l
                },
                QuadraticOut: function(l) {
                    return l * (2 - l)
                },
                QuadraticInOut: function(l) {
                    return 1 > (l *= 2) ? 0.5 * l * l : -0.5 * (--l * (l - 2) - 1)
                },
                CubicIn: function(l) {
                    return l * l * l
                },
                CubicOut: function(l) {
                    return --l * l * l + 1
                },
                CubicInOut: function(l) {
                    return 1 > (l *= 2) ? 0.5 * l * l * l : 0.5 * ((l -= 2) * l * l + 2)
                },
                QuarticIn: function(l) {
                    return l * l * l * l
                },
                QuarticOut: function(l) {
                    return 1 - --l * l * l * l
                },
                QuarticInOut: function(l) {
                    return 1 > (l *= 2) ? 0.5 * l * l * l * l : -0.5 * ((l -= 2) * l * l * l - 2)
                },
                QuinticIn: function(l) {
                    return l * l * l * l * l
                },
                QuinticOut: function(l) {
                    return --l * l * l * l * l + 1
                },
                QuinticInOut: function(l) {
                    return 1 > (l *= 2) ? 0.5 * l * l * l * l * l : 0.5 * ((l -= 2) * l * l * l * l + 2)
                },
                SinusoidalIn: function(l) {
                    return 1 - Math.cos(l * Math.PI / 2)
                },
                SinusoidalOut: function(l) {
                    return Math.sin(l * Math.PI / 2)
                },
                SinusoidalInOut: function(l) {
                    return 0.5 * (1 - Math.cos(Math.PI * l))
                },
                ExponentialIn: function(l) {
                    return 0 === l ? 0 : Math.pow(1024, l - 1)
                },
                ExponentialOut: function(l) {
                    return 1 === l ? 1 : 1 - Math.pow(2, -10 * l)
                },
                ExponentialInOut: function(l) {
                    return 0 === l ? 0 : 1 === l ? 1 : 1 > (l *= 2) ? 0.5 * Math.pow(1024, l - 1) : 0.5 * (-Math.pow(2, -10 * (l - 1)) + 2)
                },
                CircularIn: function(l) {
                    return 1 - Math.sqrt(1 - l * l)
                },
                CircularOut: function(l) {
                    return Math.sqrt(1 - --l * l)
                },
                CircularInOut: function(l) {
                    return 1 > (l *= 2) ? -0.5 * (Math.sqrt(1 - l * l) - 1) : 0.5 * (Math.sqrt(1 - (l -= 2) * l) + 1)
                },
                ElasticIn: function(o) {
                    var m, p = 0.1, l = 0.4;
                    return 0 === o ? 0 : 1 === o ? 1 : (!p || 1 > p ? (p = 1,
                    m = l / 4) : m = l * Math.asin(1 / p) / (2 * Math.PI),
                    -(p * Math.pow(2, 10 * (o -= 1)) * Math.sin((o - m) * 2 * Math.PI / l)))
                },
                ElasticOut: function(o) {
                    var m, p = 0.1, l = 0.4;
                    return 0 === o ? 0 : 1 === o ? 1 : (!p || 1 > p ? (p = 1,
                    m = l / 4) : m = l * Math.asin(1 / p) / (2 * Math.PI),
                    p * Math.pow(2, -10 * o) * Math.sin((o - m) * 2 * Math.PI / l) + 1)
                },
                ElasticInOut: function(o) {
                    var m, p = 0.1, l = 0.4;
                    return 0 === o ? 0 : 1 === o ? 1 : (!p || 1 > p ? (p = 1,
                    m = l / 4) : m = l * Math.asin(1 / p) / (2 * Math.PI),
                    1 > (o *= 2) ? -0.5 * p * Math.pow(2, 10 * (o -= 1)) * Math.sin((o - m) * 2 * Math.PI / l) : 0.5 * p * Math.pow(2, -10 * (o -= 1)) * Math.sin((o - m) * 2 * Math.PI / l) + 1)
                },
                BackIn: function(m) {
                    var l = 1.70158;
                    return m * m * ((l + 1) * m - l)
                },
                BackOut: function(m) {
                    var l = 1.70158;
                    return --m * m * ((l + 1) * m + l) + 1
                },
                BackInOut: function(m) {
                    var l = 2.5949095;
                    return 1 > (m *= 2) ? 0.5 * m * m * ((l + 1) * m - l) : 0.5 * ((m -= 2) * m * ((l + 1) * m + l) + 2)
                },
                BounceIn: function(e) {
                    return 1 - i.BounceOut(1 - e)
                },
                BounceOut: function(l) {
                    return 1 / 2.75 > l ? 7.5625 * l * l : 2 / 2.75 > l ? 7.5625 * (l -= 1.5 / 2.75) * l + 0.75 : 2.5 / 2.75 > l ? 7.5625 * (l -= 2.25 / 2.75) * l + 0.9375 : 7.5625 * (l -= 2.625 / 2.75) * l + 0.984375
                },
                BounceInOut: function(e) {
                    return 0.5 > e ? 0.5 * i.BounceIn(2 * e) : 0.5 * i.BounceOut(2 * e - 1) + 0.5
                }
            };
            return i
        }
        ),
        k("echarts/chart/base", ["require", "zrender/shape/Image", "../util/shape/Icon", "../util/shape/MarkLine", "../util/shape/Symbol", "zrender/shape/Polyline", "zrender/shape/ShapeBundle", "../config", "../util/ecData", "../util/ecAnimation", "../util/ecEffect", "../util/accMath", "../component/base", "../layout/EdgeBundling", "zrender/tool/util", "zrender/tool/area"], function(J) {
            function z(i) {
                return null  != i.x && null  != i.y
            }
            function E(r, p, u, m, l) {
                C.call(this, r, p, u, m, l);
                var s = this;
                this.selectedMap = {},
                this.lastShapeList = [],
                this.shapeHandler = {
                    onclick: function() {
                        s.isClick = !0
                    },
                    ondragover: function(P) {
                        var N = P.target;
                        N.highlightStyle = N.highlightStyle || {};
                        var Q = N.highlightStyle
                          , y = Q.brushTyep
                          , o = Q.strokeColor
                          , O = Q.lineWidth;
                        Q.brushType = "stroke",
                        Q.strokeColor = s.ecTheme.calculableColor || I.calculableColor,
                        Q.lineWidth = "icon" === N.type ? 30 : 10,
                        s.zr.addHoverShape(N),
                        setTimeout(function() {
                            Q && (Q.brushType = y,
                            Q.strokeColor = o,
                            Q.lineWidth = O)
                        }
                        , 20)
                    },
                    ondrop: function(i) {
                        null  != F.get(i.dragged, "data") && (s.isDrop = !0)
                    },
                    ondragend: function() {
                        s.isDragend = !0
                    }
                }
            }
            var H = J("zrender/shape/Image")
              , M = J("../util/shape/Icon")
              , D = J("../util/shape/MarkLine")
              , B = J("../util/shape/Symbol")
              , A = J("zrender/shape/Polyline")
              , G = J("zrender/shape/ShapeBundle")
              , I = J("../config")
              , F = J("../util/ecData")
              , q = J("../util/ecAnimation")
              , v = J("../util/ecEffect")
              , K = J("../util/accMath")
              , C = J("../component/base")
              , L = J("../layout/EdgeBundling")
              , x = J("zrender/tool/util")
              , w = J("zrender/tool/area");
            return E.prototype = {
                setCalculable: function(i) {
                    return i.dragEnableTime = this.ecTheme.DRAG_ENABLE_TIME || I.DRAG_ENABLE_TIME,
                    i.ondragover = this.shapeHandler.ondragover,
                    i.ondragend = this.shapeHandler.ondragend,
                    i.ondrop = this.shapeHandler.ondrop,
                    i
                },
                ondrop: function(T, Z) {
                    if (this.isDrop && T.target && !Z.dragIn) {
                        var O, S = T.target, X = T.dragged, N = F.get(S, "seriesIndex"), m = F.get(S, "dataIndex"), aa = this.series, R = this.component.legend;
                        if (-1 === m) {
                            if (F.get(X, "seriesIndex") == N) {
                                return Z.dragOut = Z.dragIn = Z.needRefresh = !0,
                                this.isDrop = !1,
                                void 0
                            }
                            O = {
                                value: F.get(X, "value"),
                                name: F.get(X, "name")
                            },
                            this.type === I.CHART_TYPE_PIE && 0 > O.value && (O.value = 0);
                            for (var P = !1, Q = aa[N].data, y = 0, W = Q.length; W > y; y++) {
                                Q[y].name === O.name && "-" === Q[y].value && (aa[N].data[y].value = O.value,
                                P = !0)
                            }
                            !P && aa[N].data.push(O),
                            R && R.add(O.name, X.style.color || X.style.strokeColor)
                        } else {
                            O = aa[N].data[m] || "-",
                            null  != O.value ? (aa[N].data[m].value = "-" != O.value ? K.accAdd(aa[N].data[m].value, F.get(X, "value")) : F.get(X, "value"),
                            (this.type === I.CHART_TYPE_FUNNEL || this.type === I.CHART_TYPE_PIE) && (R && 1 === R.getRelatedAmount(O.name) && this.component.legend.del(O.name),
                            O.name += this.option.nameConnector + F.get(X, "name"),
                            R && R.add(O.name, X.style.color || X.style.strokeColor))) : aa[N].data[m] = "-" != O ? K.accAdd(aa[N].data[m], F.get(X, "value")) : F.get(X, "value")
                        }
                        Z.dragIn = Z.dragIn || !0,
                        this.isDrop = !1;
                        var Y = this;
                        setTimeout(function() {
                            Y.zr.trigger("mousemove", T.event)
                        }
                        , 300)
                    }
                },
                ondragend: function(N, p) {
                    if (this.isDragend && N.target && !p.dragOut) {
                        var P = N.target
                          , m = F.get(P, "seriesIndex")
                          , l = F.get(P, "dataIndex")
                          , O = this.series;
                        if (null  != O[m].data[l].value) {
                            O[m].data[l].value = "-";
                            var y = O[m].data[l].name
                              , u = this.component.legend;
                            u && 0 === u.getRelatedAmount(y) && u.del(y)
                        } else {
                            O[m].data[l] = "-"
                        }
                        p.dragOut = !0,
                        p.needRefresh = !0,
                        this.isDragend = !1
                    }
                },
                onlegendSelected: function(o, m) {
                    var p = o.selected;
                    for (var l in this.selectedMap) {
                        this.selectedMap[l] != p[l] && (m.needRefresh = !0),
                        this.selectedMap[l] = p[l]
                    }
                },
                _buildPosition: function() {
                    this._symbol = this.option.symbolList,
                    this._sIndex2ShapeMap = {},
                    this._sIndex2ColorMap = {},
                    this.selectedMap = {},
                    this.xMarkMap = {};
                    for (var O, Q, u, N, P = this.series, p = {
                        top: [],
                        bottom: [],
                        left: [],
                        right: [],
                        other: []
                    }, m = 0, R = P.length; R > m; m++) {
                        P[m].type === this.type && (P[m] = this.reformOption(P[m]),
                        this.legendHoverLink = P[m].legendHoverLink || this.legendHoverLink,
                        O = P[m].xAxisIndex,
                        Q = P[m].yAxisIndex,
                        u = this.component.xAxis.getAxis(O),
                        N = this.component.yAxis.getAxis(Q),
                        u.type === I.COMPONENT_TYPE_AXIS_CATEGORY ? p[u.getPosition()].push(m) : N.type === I.COMPONENT_TYPE_AXIS_CATEGORY ? p[N.getPosition()].push(m) : p.other.push(m))
                    }
                    for (var y in p) {
                        p[y].length > 0 && this._buildSinglePosition(y, p[y])
                    }
                    this.addShapeList()
                },
                _buildSinglePosition: function(u, p) {
                    var N = this._mapData(p)
                      , m = N.locationMap
                      , l = N.maxDataLength;
                    if (0 !== l && 0 !== m.length) {
                        switch (u) {
                        case "bottom":
                        case "top":
                            this._buildHorizontal(p, l, m, this.xMarkMap);
                            break;
                        case "left":
                        case "right":
                            this._buildVertical(p, l, m, this.xMarkMap);
                            break;
                        case "other":
                            this._buildOther(p, l, m, this.xMarkMap)
                        }
                        for (var y = 0, s = p.length; s > y; y++) {
                            this.buildMark(p[y])
                        }
                    }
                },
                _mapData: function(X) {
                    for (var ac, P, W, aa, O = this.series, y = 0, ad = {}, T = "__kener__stack__", R = this.component.legend, Q = [], S = 0, Y = 0, N = X.length; N > Y; Y++) {
                        if (ac = O[X[Y]],
                        W = ac.name,
                        this._sIndex2ShapeMap[X[Y]] = this._sIndex2ShapeMap[X[Y]] || this.query(ac, "symbol") || this._symbol[Y % this._symbol.length],
                        R) {
                            if (this.selectedMap[W] = R.isSelected(W),
                            this._sIndex2ColorMap[X[Y]] = R.getColor(W),
                            aa = R.getItemShape(W)) {
                                var Z = aa.style;
                                if (this.type == I.CHART_TYPE_LINE) {
                                    Z.iconType = "legendLineIcon",
                                    Z.symbol = this._sIndex2ShapeMap[X[Y]]
                                } else {
                                    if (ac.itemStyle.normal.barBorderWidth > 0) {
                                        var ab = aa.highlightStyle;
                                        Z.brushType = "both",
                                        Z.x += 1,
                                        Z.y += 1,
                                        Z.width -= 2,
                                        Z.height -= 2,
                                        Z.strokeColor = ab.strokeColor = ac.itemStyle.normal.barBorderColor,
                                        ab.lineWidth = 3
                                    }
                                }
                                R.setItemShape(W, aa)
                            }
                        } else {
                            this.selectedMap[W] = !0,
                            this._sIndex2ColorMap[X[Y]] = this.zr.getColor(X[Y])
                        }
                        this.selectedMap[W] && (P = ac.stack || T + X[Y],
                        null  == ad[P] ? (ad[P] = y,
                        Q[y] = [X[Y]],
                        y++) : Q[ad[P]].push(X[Y])),
                        S = Math.max(S, ac.data.length)
                    }
                    return {
                        locationMap: Q,
                        maxDataLength: S
                    }
                },
                _calculMarkMapXY: function(T, Y, y) {
                    for (var R = this.series, X = 0, u = Y.length; u > X; X++) {
                        for (var p = 0, Z = Y[X].length; Z > p; p++) {
                            var Q = Y[X][p]
                              , S = "xy" == y ? 0 : ""
                              , O = this.component.grid
                              , N = T[Q];
                            if ("-1" != y.indexOf("x")) {
                                N["counter" + S] > 0 && (N["average" + S] = N["sum" + S] / N["counter" + S]);
                                var P = this.component.xAxis.getAxis(R[Q].xAxisIndex || 0).getCoord(N["average" + S]);
                                N["averageLine" + S] = [[P, O.getYend()], [P, O.getY()]],
                                N["minLine" + S] = [[N["minX" + S], O.getYend()], [N["minX" + S], O.getY()]],
                                N["maxLine" + S] = [[N["maxX" + S], O.getYend()], [N["maxX" + S], O.getY()]],
                                N.isHorizontal = !1
                            }
                            if (S = "xy" == y ? 1 : "",
                            "-1" != y.indexOf("y")) {
                                N["counter" + S] > 0 && (N["average" + S] = N["sum" + S] / N["counter" + S]);
                                var W = this.component.yAxis.getAxis(R[Q].yAxisIndex || 0).getCoord(N["average" + S]);
                                N["averageLine" + S] = [[O.getX(), W], [O.getXend(), W]],
                                N["minLine" + S] = [[O.getX(), N["minY" + S]], [O.getXend(), N["minY" + S]]],
                                N["maxLine" + S] = [[O.getX(), N["maxY" + S]], [O.getXend(), N["maxY" + S]]],
                                N.isHorizontal = !0
                            }
                        }
                    }
                },
                addLabel: function(S, U, y, Q, T) {
                    var u = [y, U]
                      , p = this.deepMerge(u, "itemStyle.normal.label")
                      , W = this.deepMerge(u, "itemStyle.emphasis.label")
                      , P = p.textStyle || {}
                      , R = W.textStyle || {};
                    if (p.show) {
                        var O = S.style;
                        O.text = this._getLabelText(U, y, Q, "normal"),
                        O.textPosition = null  == p.position ? "horizontal" === T ? "right" : "top" : p.position,
                        O.textColor = P.color,
                        O.textFont = this.getFont(P),
                        O.textAlign = P.align,
                        O.textBaseline = P.baseline
                    }
                    if (W.show) {
                        var N = S.highlightStyle;
                        N.text = this._getLabelText(U, y, Q, "emphasis"),
                        N.textPosition = p.show ? S.style.textPosition : null  == W.position ? "horizontal" === T ? "right" : "top" : W.position,
                        N.textColor = R.color,
                        N.textFont = this.getFont(R),
                        N.textAlign = R.align,
                        N.textBaseline = R.baseline
                    }
                    return S
                },
                _getLabelText: function(r, p, u, m) {
                    var l = this.deepQuery([p, r], "itemStyle." + m + ".label.formatter");
                    l || "emphasis" !== m || (l = this.deepQuery([p, r], "itemStyle.normal.label.formatter"));
                    var s = this.getDataFromOption(p, "-");
                    return l ? "function" == typeof l ? l.call(this.myChart, {
                        seriesName: r.name,
                        series: r,
                        name: u,
                        value: s,
                        data: p,
                        status: m
                    }) : "string" == typeof l ? l = l.replace("{a}", "{a0}").replace("{b}", "{b0}").replace("{c}", "{c0}").replace("{a0}", r.name).replace("{b0}", u).replace("{c0}", this.numAddCommas(s)) : void 0 : s instanceof Array ? null  != s[2] ? this.numAddCommas(s[2]) : s[0] + " , " + s[1] : this.numAddCommas(s)
                },
                buildMark: function(l) {
                    var i = this.series[l];
                    this.selectedMap[i.name] && (i.markLine && this._buildMarkLine(l),
                    i.markPoint && this._buildMarkPoint(l))
                },
                _buildMarkPoint: function(R) {
                    for (var T, y, Q = (this.markAttachStyle || {})[R], S = this.series[R], u = x.clone(S.markPoint), p = 0, U = u.data.length; U > p; p++) {
                        T = u.data[p],
                        y = this.getMarkCoord(R, T),
                        T.x = null  != T.x ? T.x : y[0],
                        T.y = null  != T.y ? T.y : y[1],
                        !T.type || "max" !== T.type && "min" !== T.type || (T.value = y[3],
                        T.name = T.name || T.type,
                        T.symbolSize = T.symbolSize || w.getTextWidth(y[3], this.getFont()) / 2 + 5)
                    }
                    for (var P = this._markPoint(R, u), p = 0, U = P.length; U > p; p++) {
                        var O = P[p];
                        O.zlevel = this.getZlevelBase(),
                        O.z = this.getZBase() + 1;
                        for (var N in Q) {
                            O[N] = x.clone(Q[N])
                        }
                        this.shapeList.push(O)
                    }
                    if (this.type === I.CHART_TYPE_FORCE || this.type === I.CHART_TYPE_CHORD) {
                        for (var p = 0, U = P.length; U > p; p++) {
                            this.zr.addShape(P[p])
                        }
                    }
                },
                _buildMarkLine: function(T) {
                    for (var aa, O = (this.markAttachStyle || {})[T], S = this.series[T], Z = x.clone(S.markLine), N = 0, l = Z.data.length; l > N; N++) {
                        var ab = Z.data[N];
                        !ab.type || "max" !== ab.type && "min" !== ab.type && "average" !== ab.type ? aa = [this.getMarkCoord(T, ab[0]), this.getMarkCoord(T, ab[1])] : (aa = this.getMarkCoord(T, ab),
                        Z.data[N] = [x.clone(ab), {}],
                        Z.data[N][0].name = ab.name || ab.type,
                        Z.data[N][0].value = "average" !== ab.type ? aa[3] : +aa[3].toFixed(null  != Z.precision ? Z.precision : this.deepQuery([this.ecTheme, I], "markLine.precision")),
                        aa = aa[2],
                        ab = [{}, {}]),
                        null  != aa && null  != aa[0] && null  != aa[1] && (Z.data[N][0].x = null  != ab[0].x ? ab[0].x : aa[0][0],
                        Z.data[N][0].y = null  != ab[0].y ? ab[0].y : aa[0][1],
                        Z.data[N][1].x = null  != ab[1].x ? ab[1].x : aa[1][0],
                        Z.data[N][1].y = null  != ab[1].y ? ab[1].y : aa[1][1])
                    }
                    var Q = this._markLine(T, Z)
                      , P = Z.large;
                    if (P) {
                        var R = new G({
                            style: {
                                shapeList: Q
                            }
                        })
                          , W = Q[0];
                        if (W) {
                            x.merge(R.style, W.style),
                            x.merge(R.highlightStyle = {}, W.highlightStyle),
                            R.style.brushType = "stroke",
                            R.zlevel = this.getZlevelBase(),
                            R.z = this.getZBase() + 1,
                            R.hoverable = !1;
                            for (var u in O) {
                                R[u] = x.clone(O[u])
                            }
                        }
                        this.shapeList.push(R),
                        this.zr.addShape(R),
                        R._mark = "largeLine";
                        var X = Z.effect;
                        X.show && (R.effect = X)
                    } else {
                        for (var N = 0, l = Q.length; l > N; N++) {
                            var Y = Q[N];
                            Y.zlevel = this.getZlevelBase(),
                            Y.z = this.getZBase() + 1;
                            for (var u in O) {
                                Y[u] = x.clone(O[u])
                            }
                            this.shapeList.push(Y)
                        }
                        if (this.type === I.CHART_TYPE_FORCE || this.type === I.CHART_TYPE_CHORD) {
                            for (var N = 0, l = Q.length; l > N; N++) {
                                this.zr.addShape(Q[N])
                            }
                        }
                    }
                },
                _markPoint: function(ab, O) {
                    var T = this.series[ab]
                      , Y = this.component;
                    x.merge(x.merge(O, x.clone(this.ecTheme.markPoint || {})), x.clone(I.markPoint)),
                    O.name = T.name;
                    var af, S, Q, P, W, m, u, ac = [], R = O.data, ad = Y.dataRange, N = Y.legend, Z = this.zr.getWidth(), ae = this.zr.getHeight();
                    if (O.large) {
                        af = this.getLargeMarkPointShape(ab, O),
                        af._mark = "largePoint",
                        af && ac.push(af)
                    } else {
                        for (var aa = 0, X = R.length; X > aa; aa++) {
                            null  != R[aa].x && null  != R[aa].y && (Q = null  != R[aa].value ? R[aa].value : "",
                            N && (S = N.getColor(T.name)),
                            ad && (S = isNaN(Q) ? S : ad.getColor(Q),
                            P = [R[aa], O],
                            W = this.deepQuery(P, "itemStyle.normal.color") || S,
                            m = this.deepQuery(P, "itemStyle.emphasis.color") || W,
                            null  == W && null  == m) || (S = null  == S ? this.zr.getColor(ab) : S,
                            R[aa].tooltip = R[aa].tooltip || O.tooltip || {
                                trigger: "item"
                            },
                            R[aa].name = null  != R[aa].name ? R[aa].name : "",
                            R[aa].value = Q,
                            af = this.getSymbolShape(O, ab, R[aa], aa, R[aa].name, this.parsePercent(R[aa].x, Z), this.parsePercent(R[aa].y, ae), "pin", S, "rgba(0,0,0,0)", "horizontal"),
                            af._mark = "point",
                            u = this.deepMerge([R[aa], O], "effect"),
                            u.show && (af.effect = u),
                            T.type === I.CHART_TYPE_MAP && (af._geo = this.getMarkGeo(R[aa])),
                            F.pack(af, T, ab, R[aa], aa, R[aa].name, Q),
                            ac.push(af)))
                        }
                    }
                    return ac
                },
                _markLine: function() {
                    function i(m, l) {
                        m[l] = m[l] instanceof Array ? m[l].length > 1 ? m[l] : [m[l][0], m[l][0]] : [m[l], m[l]]
                    }
                    return function(ae, ah) {
                        var am = this.series[ae]
                          , ad = this.component
                          , ab = ad.dataRange
                          , Z = ad.legend;
                        x.merge(x.merge(ah, x.clone(this.ecTheme.markLine || {})), x.clone(I.markLine));
                        var af = Z ? Z.getColor(am.name) : this.zr.getColor(ae);
                        i(ah, "symbol"),
                        i(ah, "symbolSize"),
                        i(ah, "symbolRotate");
                        for (var t = ah.data, u = [], ak = this.zr.getWidth(), ac = this.zr.getHeight(), Q = 0; t.length > Q; Q++) {
                            var ai = t[Q];
                            if (z(ai[0]) && z(ai[1])) {
                                var al = this.deepMerge(ai)
                                  , aj = [al, ah]
                                  , ag = af
                                  , S = null  != al.value ? al.value : "";
                                if (ab) {
                                    ag = isNaN(S) ? ag : ab.getColor(S);
                                    var an = this.deepQuery(aj, "itemStyle.normal.color") || ag
                                      , N = this.deepQuery(aj, "itemStyle.emphasis.color") || an;
                                    if (null  == an && null  == N) {
                                        continue
                                    }
                                }
                                ai[0].tooltip = al.tooltip || ah.tooltip || {
                                    trigger: "item"
                                },
                                ai[0].name = ai[0].name || "",
                                ai[1].name = ai[1].name || "",
                                ai[0].value = S,
                                u.push({
                                    points: [[this.parsePercent(ai[0].x, ak), this.parsePercent(ai[0].y, ac)], [this.parsePercent(ai[1].x, ak), this.parsePercent(ai[1].y, ac)]],
                                    rawData: ai,
                                    color: ag
                                })
                            }
                        }
                        var m = this.query(ah, "bundling.enable");
                        if (m) {
                            var e = new L;
                            e.maxTurningAngle = this.query(ah, "bundling.maxTurningAngle") / 180 * Math.PI,
                            u = e.run(u)
                        }
                        ah.name = am.name;
                        for (var O = [], Q = 0, Y = u.length; Y > Q; Q++) {
                            var T = u[Q]
                              , R = T.rawEdge || T
                              , ai = R.rawData
                              , S = null  != ai.value ? ai.value : ""
                              , P = this.getMarkLineShape(ah, ae, ai, Q, T.points, m, R.color);
                            P._mark = "line";
                            var aa = this.deepMerge([ai[0], ai[1], ah], "effect");
                            aa.show && (P.effect = aa,
                            P.effect.large = ah.large),
                            am.type === I.CHART_TYPE_MAP && (P._geo = [this.getMarkGeo(ai[0]), this.getMarkGeo(ai[1])]),
                            F.pack(P, am, ae, ai[0], Q, ai[0].name + ("" !== ai[1].name ? " > " + ai[1].name : ""), S),
                            O.push(P)
                        }
                        return O
                    }
                }
                (),
                getMarkCoord: function() {
                    return [0, 0]
                },
                getSymbolShape: function(ae, R, Y, X, T, S, Z, ab, i, m, af) {
                    var W = [Y, ae]
                      , ag = this.getDataFromOption(Y, "-");
                    ab = this.deepQuery(W, "symbol") || ab;
                    var Q = this.deepQuery(W, "symbolSize");
                    Q = "function" == typeof Q ? Q(ag) : Q;
                    var O = this.deepQuery(W, "symbolRotate")
                      , ac = this.deepMerge(W, "itemStyle.normal")
                      , ah = this.deepMerge(W, "itemStyle.emphasis")
                      , ad = null  != ac.borderWidth ? ac.borderWidth : ac.lineStyle && ac.lineStyle.width;
                    null  == ad && (ad = ab.match("empty") ? 2 : 0);
                    var aa = null  != ah.borderWidth ? ah.borderWidth : ah.lineStyle && ah.lineStyle.width;
                    null  == aa && (aa = ad + 2);
                    var P = this.getItemStyleColor(ac.color, R, X, Y)
                      , ai = this.getItemStyleColor(ah.color, R, X, Y)
                      , N = new M({
                        style: {
                            iconType: ab.replace("empty", "").toLowerCase(),
                            x: S - Q,
                            y: Z - Q,
                            width: 2 * Q,
                            height: 2 * Q,
                            brushType: "both",
                            color: ab.match("empty") ? m : P || i,
                            strokeColor: ac.borderColor || P || i,
                            lineWidth: ad
                        },
                        highlightStyle: {
                            color: ab.match("empty") ? m : ai || P || i,
                            strokeColor: ah.borderColor || ac.borderColor || ai || P || i,
                            lineWidth: aa
                        },
                        clickable: this.deepQuery(W, "clickable")
                    });
                    return ab.match("image") && (N.style.image = ab.replace(RegExp("^image:\\/\\/"), ""),
                    N = new H({
                        style: N.style,
                        highlightStyle: N.highlightStyle,
                        clickable: this.deepQuery(W, "clickable")
                    })),
                    null  != O && (N.rotation = [O * Math.PI / 180, S, Z]),
                    ab.match("star") && (N.style.iconType = "star",
                    N.style.n = ab.replace("empty", "").replace("star", "") - 0 || 5),
                    "none" === ab && (N.invisible = !0,
                    N.hoverable = !1),
                    N = this.addLabel(N, ae, Y, T, af),
                    ab.match("empty") && (null  == N.style.textColor && (N.style.textColor = N.style.strokeColor),
                    null  == N.highlightStyle.textColor && (N.highlightStyle.textColor = N.highlightStyle.strokeColor)),
                    F.pack(N, ae, R, Y, X, T),
                    N._x = S,
                    N._y = Z,
                    N._dataIndex = X,
                    N._seriesIndex = R,
                    N
                },
                getMarkLineShape: function(ae, R, W, aa, ai, S, Y) {
                    var ab = null  != W[0].value ? W[0].value : "-"
                      , X = null  != W[1].value ? W[1].value : "-"
                      , o = [W[0].symbol || ae.symbol[0], W[1].symbol || ae.symbol[1]]
                      , s = [W[0].symbolSize || ae.symbolSize[0], W[1].symbolSize || ae.symbolSize[1]];
                    s[0] = "function" == typeof s[0] ? s[0](ab) : s[0],
                    s[1] = "function" == typeof s[1] ? s[1](X) : s[1];
                    var af = [this.query(W[0], "symbolRotate") || ae.symbolRotate[0], this.query(W[1], "symbolRotate") || ae.symbolRotate[1]]
                      , T = [W[0], W[1], ae]
                      , ag = this.deepMerge(T, "itemStyle.normal");
                    ag.color = this.getItemStyleColor(ag.color, R, aa, W);
                    var Q = this.deepMerge(T, "itemStyle.emphasis");
                    Q.color = this.getItemStyleColor(Q.color, R, aa, W);
                    var O = ag.lineStyle
                      , ac = Q.lineStyle
                      , ah = O.width;
                    null  == ah && (ah = ag.borderWidth);
                    var ad = ac.width;
                    null  == ad && (ad = null  != Q.borderWidth ? Q.borderWidth : ah + 2);
                    var Z = this.deepQuery(T, "smoothness");
                    this.deepQuery(T, "smooth") || (Z = 0);
                    var P = S ? A : D
                      , aj = new P({
                        style: {
                            symbol: o,
                            symbolSize: s,
                            symbolRotate: af,
                            brushType: "both",
                            lineType: O.type,
                            shadowColor: O.shadowColor || O.color || ag.borderColor || ag.color || Y,
                            shadowBlur: O.shadowBlur,
                            shadowOffsetX: O.shadowOffsetX,
                            shadowOffsetY: O.shadowOffsetY,
                            color: ag.color || Y,
                            strokeColor: O.color || ag.borderColor || ag.color || Y,
                            lineWidth: ah,
                            symbolBorderColor: ag.borderColor || ag.color || Y,
                            symbolBorder: ag.borderWidth
                        },
                        highlightStyle: {
                            shadowColor: ac.shadowColor,
                            shadowBlur: ac.shadowBlur,
                            shadowOffsetX: ac.shadowOffsetX,
                            shadowOffsetY: ac.shadowOffsetY,
                            color: Q.color || ag.color || Y,
                            strokeColor: ac.color || O.color || Q.borderColor || ag.borderColor || Q.color || ag.color || Y,
                            lineWidth: ad,
                            symbolBorderColor: Q.borderColor || ag.borderColor || Q.color || ag.color || Y,
                            symbolBorder: null  == Q.borderWidth ? ag.borderWidth + 2 : Q.borderWidth
                        },
                        clickable: this.deepQuery(T, "clickable")
                    })
                      , N = aj.style;
                    return S ? (N.pointList = ai,
                    N.smooth = Z) : (N.xStart = ai[0][0],
                    N.yStart = ai[0][1],
                    N.xEnd = ai[1][0],
                    N.yEnd = ai[1][1],
                    N.curveness = Z,
                    aj.updatePoints(aj.style)),
                    aj = this.addLabel(aj, ae, W[0], W[0].name + " : " + W[1].name)
                },
                getLargeMarkPointShape: function(W, ab) {
                    var N, S, Z, y, ac, R, T = this.series[W], P = this.component, O = ab.data, Q = P.dataRange, X = P.legend, r = [O[0], ab];
                    if (X && (S = X.getColor(T.name)),
                    !Q || (Z = null  != O[0].value ? O[0].value : "",
                    S = isNaN(Z) ? S : Q.getColor(Z),
                    y = this.deepQuery(r, "itemStyle.normal.color") || S,
                    ac = this.deepQuery(r, "itemStyle.emphasis.color") || y,
                    null  != y || null  != ac)) {
                        S = this.deepMerge(r, "itemStyle.normal").color || S;
                        var Y = this.deepQuery(r, "symbol") || "circle";
                        Y = Y.replace("empty", "").replace(/\d/g, ""),
                        R = this.deepMerge([O[0], ab], "effect");
                        var aa = window.devicePixelRatio || 1;
                        return N = new B({
                            style: {
                                pointList: O,
                                color: S,
                                strokeColor: S,
                                shadowColor: R.shadowColor || S,
                                shadowBlur: (null  != R.shadowBlur ? R.shadowBlur : 8) * aa,
                                size: this.deepQuery(r, "symbolSize"),
                                iconType: Y,
                                brushType: "fill",
                                lineWidth: 1
                            },
                            draggable: !1,
                            hoverable: !1
                        }),
                        R.show && (N.effect = R),
                        N
                    }
                },
                backupShapeList: function() {
                    this.shapeList && this.shapeList.length > 0 ? (this.lastShapeList = this.shapeList,
                    this.shapeList = []) : this.lastShapeList = []
                },
                addShapeList: function() {
                    var S, W, y = this.option.animationThreshold / (this.canvasSupported ? 2 : 4), R = this.lastShapeList, T = this.shapeList, u = R.length > 0, p = u ? this.query(this.option, "animationDurationUpdate") : this.query(this.option, "animationDuration"), X = this.query(this.option, "animationEasing"), Q = {}, O = {};
                    if (this.option.animation && !this.option.renderAsImage && y > T.length && !this.motionlessOnce) {
                        for (var N = 0, P = R.length; P > N; N++) {
                            W = this._getAnimationKey(R[N]),
                            W.match("undefined") ? this.zr.delShape(R[N].id) : (W += R[N].type,
                            Q[W] ? this.zr.delShape(R[N].id) : Q[W] = R[N])
                        }
                        for (var N = 0, P = T.length; P > N; N++) {
                            W = this._getAnimationKey(T[N]),
                            W.match("undefined") ? this.zr.addShape(T[N]) : (W += T[N].type,
                            O[W] = T[N])
                        }
                        for (W in Q) {
                            O[W] || this.zr.delShape(Q[W].id)
                        }
                        for (W in O) {
                            Q[W] ? (this.zr.delShape(Q[W].id),
                            this._animateMod(Q[W], O[W], p, X, 0, u)) : (S = this.type != I.CHART_TYPE_LINE && this.type != I.CHART_TYPE_RADAR || 0 === W.indexOf("icon") ? 0 : p / 2,
                            this._animateMod(!1, O[W], p, X, S, u))
                        }
                        this.zr.refresh(),
                        this.animationEffect()
                    } else {
                        this.motionlessOnce = !1,
                        this.zr.delShape(R);
                        for (var N = 0, P = T.length; P > N; N++) {
                            this.zr.addShape(T[N])
                        }
                    }
                },
                _getAnimationKey: function(i) {
                    return this.type != I.CHART_TYPE_MAP ? F.get(i, "seriesIndex") + "_" + F.get(i, "dataIndex") + (i._mark ? i._mark : "") + (this.type === I.CHART_TYPE_RADAR ? F.get(i, "special") : "") : F.get(i, "seriesIndex") + "_" + F.get(i, "dataIndex") + (i._mark ? i._mark : "undefined")
                },
                _animateMod: function(r, p, u, m, l, s) {
                    switch (p.type) {
                    case "polyline":
                    case "half-smooth-polygon":
                        q.pointList(this.zr, r, p, u, m);
                        break;
                    case "rectangle":
                        q.rectangle(this.zr, r, p, u, m);
                        break;
                    case "image":
                    case "icon":
                        q.icon(this.zr, r, p, u, m, l);
                        break;
                    case "candle":
                        s ? this.zr.addShape(p) : q.candle(this.zr, r, p, u, m);
                        break;
                    case "ring":
                    case "sector":
                    case "circle":
                        s ? "sector" === p.type ? q.sector(this.zr, r, p, u, m) : this.zr.addShape(p) : q.ring(this.zr, r, p, u + 100 * ((F.get(p, "dataIndex") || 0) % 20), m);
                        break;
                    case "text":
                        q.text(this.zr, r, p, u, m);
                        break;
                    case "polygon":
                        s ? q.pointList(this.zr, r, p, u, m) : q.polygon(this.zr, r, p, u, m);
                        break;
                    case "ribbon":
                        q.ribbon(this.zr, r, p, u, m);
                        break;
                    case "gauge-pointer":
                        q.gaugePointer(this.zr, r, p, u, m);
                        break;
                    case "mark-line":
                        q.markline(this.zr, r, p, u, m);
                        break;
                    case "bezier-curve":
                    case "line":
                        q.line(this.zr, r, p, u, m);
                        break;
                    default:
                        this.zr.addShape(p)
                    }
                },
                animationMark: function(p, o, r) {
                    for (var r = r || this.shapeList, m = 0, l = r.length; l > m; m++) {
                        r[m]._mark && this._animateMod(!1, r[m], p, o, 0, !0)
                    }
                    this.animationEffect(r)
                },
                animationEffect: function(p) {
                    if (!p && this.clearEffectShape(),
                    p = p || this.shapeList,
                    null  != p) {
                        var o = I.EFFECT_ZLEVEL;
                        this.canvasSupported && this.zr.modLayer(o, {
                            motionBlur: !0,
                            lastFrameAlpha: 0.95
                        });
                        for (var r, m = 0, l = p.length; l > m; m++) {
                            r = p[m],
                            r._mark && r.effect && r.effect.show && v[r._mark] && (v[r._mark](this.zr, this.effectList, r, o),
                            this.effectList[this.effectList.length - 1]._mark = r._mark)
                        }
                    }
                },
                clearEffectShape: function(l) {
                    var i = this.effectList;
                    if (this.zr && i && i.length > 0) {
                        l && this.zr.modLayer(I.EFFECT_ZLEVEL, {
                            motionBlur: !1
                        }),
                        this.zr.delShape(i);
                        for (var m = 0; i.length > m; m++) {
                            i[m].effectAnimator && i[m].effectAnimator.stop()
                        }
                    }
                    this.effectList = []
                },
                addMark: function(P, R, u) {
                    var N = this.series[P];
                    if (this.selectedMap[N.name]) {
                        var Q = this.query(this.option, "animationDurationUpdate")
                          , p = this.query(this.option, "animationEasing")
                          , m = N[u].data
                          , S = this.shapeList.length;
                        if (N[u].data = R.data,
                        this["_build" + u.replace("m", "M")](P),
                        this.option.animation && !this.option.renderAsImage) {
                            this.animationMark(Q, p, this.shapeList.slice(S))
                        } else {
                            for (var y = S, O = this.shapeList.length; O > y; y++) {
                                this.zr.addShape(this.shapeList[y])
                            }
                            this.zr.refreshNextFrame()
                        }
                        N[u].data = m
                    }
                },
                delMark: function(O, Q, u) {
                    u = u.replace("mark", "").replace("large", "").toLowerCase();
                    var N = this.series[O];
                    if (this.selectedMap[N.name]) {
                        for (var P = !1, p = [this.shapeList, this.effectList], m = 2; m--; ) {
                            for (var R = 0, y = p[m].length; y > R; R++) {
                                if (p[m][R]._mark == u && F.get(p[m][R], "seriesIndex") == O && F.get(p[m][R], "name") == Q) {
                                    this.zr.delShape(p[m][R].id),
                                    p[m].splice(R, 1),
                                    P = !0;
                                    break
                                }
                            }
                        }
                        P && this.zr.refreshNextFrame()
                    }
                }
            },
            x.inherits(E, C),
            E
        }
        ),
        k("zrender/shape/Circle", ["require", "./Base", "../tool/util"], function(l) {
            var i = l("./Base")
              , m = function(n) {
                i.call(this, n)
            }
            ;
            return m.prototype = {
                type: "circle",
                buildPath: function(o, n) {
                    o.moveTo(n.x + n.r, n.y),
                    o.arc(n.x, n.y, n.r, 0, 2 * Math.PI, !0)
                },
                getRect: function(o) {
                    if (o.__rect) {
                        return o.__rect
                    }
                    var n;
                    return n = "stroke" == o.brushType || "fill" == o.brushType ? o.lineWidth || 1 : 0,
                    o.__rect = {
                        x: Math.round(o.x - o.r - n / 2),
                        y: Math.round(o.y - o.r - n / 2),
                        width: 2 * o.r + n,
                        height: 2 * o.r + n
                    },
                    o.__rect
                }
            },
            l("../tool/util").inherits(m, i),
            m
        }
        ),
        k("echarts/util/accMath", [], function() {
            function o(u, s) {
                var w = "" + u
                  , r = "" + s
                  , q = 0;
                try {
                    q = r.split(".")[1].length
                } catch (v) {}
                try {
                    q -= w.split(".")[1].length
                } catch (v) {}
                return (w.replace(".", "") - 0) / (r.replace(".", "") - 0) * Math.pow(10, q)
            }
            function m(u, s) {
                var w = "" + u
                  , r = "" + s
                  , q = 0;
                try {
                    q += w.split(".")[1].length
                } catch (v) {}
                try {
                    q += r.split(".")[1].length
                } catch (v) {}
                return (w.replace(".", "") - 0) * (r.replace(".", "") - 0) / Math.pow(10, q)
            }
            function p(u, s) {
                var w = 0
                  , r = 0;
                try {
                    w = ("" + u).split(".")[1].length
                } catch (q) {}
                try {
                    r = ("" + s).split(".")[1].length
                } catch (q) {}
                var v = Math.pow(10, Math.max(w, r));
                return (Math.round(u * v) + Math.round(s * v)) / v
            }
            function l(n, i) {
                return p(n, -i)
            }
            return {
                accDiv: o,
                accMul: m,
                accAdd: p,
                accSub: l
            }
        }
        ),
        k("echarts/util/shape/Icon", ["require", "zrender/tool/util", "zrender/shape/Star", "zrender/shape/Heart", "zrender/shape/Droplet", "zrender/shape/Image", "zrender/shape/Base"], function(ae) {
            function N(r, p) {
                var u = p.x
                  , m = p.y
                  , l = p.width / 16
                  , s = p.height / 16;
                r.moveTo(u, m + p.height),
                r.lineTo(u + 5 * l, m + 14 * s),
                r.lineTo(u + p.width, m + 3 * s),
                r.lineTo(u + 13 * l, m),
                r.lineTo(u + 2 * l, m + 11 * s),
                r.lineTo(u, m + p.height),
                r.moveTo(u + 6 * l, m + 10 * s),
                r.lineTo(u + 14 * l, m + 2 * s),
                r.moveTo(u + 10 * l, m + 13 * s),
                r.lineTo(u + p.width, m + 13 * s),
                r.moveTo(u + 13 * l, m + 10 * s),
                r.lineTo(u + 13 * l, m + p.height)
            }
            function S(r, p) {
                var u = p.x
                  , m = p.y
                  , l = p.width / 16
                  , s = p.height / 16;
                r.moveTo(u, m + p.height),
                r.lineTo(u + 5 * l, m + 14 * s),
                r.lineTo(u + p.width, m + 3 * s),
                r.lineTo(u + 13 * l, m),
                r.lineTo(u + 2 * l, m + 11 * s),
                r.lineTo(u, m + p.height),
                r.moveTo(u + 6 * l, m + 10 * s),
                r.lineTo(u + 14 * l, m + 2 * s),
                r.moveTo(u + 10 * l, m + 13 * s),
                r.lineTo(u + p.width, m + 13 * s)
            }
            function aa(r, p) {
                var u = p.x
                  , m = p.y
                  , l = p.width / 16
                  , s = p.height / 16;
                r.moveTo(u + 4 * l, m + 15 * s),
                r.lineTo(u + 9 * l, m + 13 * s),
                r.lineTo(u + 14 * l, m + 8 * s),
                r.lineTo(u + 11 * l, m + 5 * s),
                r.lineTo(u + 6 * l, m + 10 * s),
                r.lineTo(u + 4 * l, m + 15 * s),
                r.moveTo(u + 5 * l, m),
                r.lineTo(u + 11 * l, m),
                r.moveTo(u + 5 * l, m + s),
                r.lineTo(u + 11 * l, m + s),
                r.moveTo(u, m + 2 * s),
                r.lineTo(u + p.width, m + 2 * s),
                r.moveTo(u, m + 5 * s),
                r.lineTo(u + 3 * l, m + p.height),
                r.lineTo(u + 13 * l, m + p.height),
                r.lineTo(u + p.width, m + 5 * s)
            }
            function ai(r, p) {
                var u = p.x
                  , m = p.y
                  , l = p.width / 16
                  , s = p.height / 16;
                r.moveTo(u, m + 3 * s),
                r.lineTo(u + 6 * l, m + 3 * s),
                r.moveTo(u + 3 * l, m),
                r.lineTo(u + 3 * l, m + 6 * s),
                r.moveTo(u + 3 * l, m + 8 * s),
                r.lineTo(u + 3 * l, m + p.height),
                r.lineTo(u + p.width, m + p.height),
                r.lineTo(u + p.width, m + 3 * s),
                r.lineTo(u + 8 * l, m + 3 * s)
            }
            function R(r, p) {
                var u = p.x
                  , m = p.y
                  , l = p.width / 16
                  , s = p.height / 16;
                r.moveTo(u + 6 * l, m),
                r.lineTo(u + 2 * l, m + 3 * s),
                r.lineTo(u + 6 * l, m + 6 * s),
                r.moveTo(u + 2 * l, m + 3 * s),
                r.lineTo(u + 14 * l, m + 3 * s),
                r.lineTo(u + 14 * l, m + 11 * s),
                r.moveTo(u + 2 * l, m + 5 * s),
                r.lineTo(u + 2 * l, m + 13 * s),
                r.lineTo(u + 14 * l, m + 13 * s),
                r.moveTo(u + 10 * l, m + 10 * s),
                r.lineTo(u + 14 * l, m + 13 * s),
                r.lineTo(u + 10 * l, m + p.height)
            }
            function P(u, p) {
                var w = p.x
                  , m = p.y
                  , l = p.width / 16
                  , v = p.height / 16
                  , s = p.width / 2;
                u.lineWidth = 1.5,
                u.arc(w + s, m + s, s - l, 0, 2 * Math.PI / 3),
                u.moveTo(w + 3 * l, m + p.height),
                u.lineTo(w + 0 * l, m + 12 * v),
                u.lineTo(w + 5 * l, m + 11 * v),
                u.moveTo(w, m + 8 * v),
                u.arc(w + s, m + s, s - l, Math.PI, 5 * Math.PI / 3),
                u.moveTo(w + 13 * l, m),
                u.lineTo(w + p.width, m + 4 * v),
                u.lineTo(w + 11 * l, m + 5 * v)
            }
            function O(r, p) {
                var u = p.x
                  , m = p.y
                  , l = p.width / 16
                  , s = p.height / 16;
                r.moveTo(u, m),
                r.lineTo(u, m + p.height),
                r.lineTo(u + p.width, m + p.height),
                r.moveTo(u + 2 * l, m + 14 * s),
                r.lineTo(u + 7 * l, m + 6 * s),
                r.lineTo(u + 11 * l, m + 11 * s),
                r.lineTo(u + 15 * l, m + 2 * s)
            }
            function Y(r, p) {
                var u = p.x
                  , m = p.y
                  , l = p.width / 16
                  , s = p.height / 16;
                r.moveTo(u, m),
                r.lineTo(u, m + p.height),
                r.lineTo(u + p.width, m + p.height),
                r.moveTo(u + 3 * l, m + 14 * s),
                r.lineTo(u + 3 * l, m + 6 * s),
                r.lineTo(u + 4 * l, m + 6 * s),
                r.lineTo(u + 4 * l, m + 14 * s),
                r.moveTo(u + 7 * l, m + 14 * s),
                r.lineTo(u + 7 * l, m + 2 * s),
                r.lineTo(u + 8 * l, m + 2 * s),
                r.lineTo(u + 8 * l, m + 14 * s),
                r.moveTo(u + 11 * l, m + 14 * s),
                r.lineTo(u + 11 * l, m + 9 * s),
                r.lineTo(u + 12 * l, m + 9 * s),
                r.lineTo(u + 12 * l, m + 14 * s)
            }
            function ab(u, p) {
                var w = p.x
                  , m = p.y
                  , l = p.width - 2
                  , v = p.height - 2
                  , s = Math.min(l, v) / 2;
                m += 2,
                u.moveTo(w + s + 3, m + s - 3),
                u.arc(w + s + 3, m + s - 3, s - 1, 0, -Math.PI / 2, !0),
                u.lineTo(w + s + 3, m + s - 3),
                u.moveTo(w + s, m),
                u.lineTo(w + s, m + s),
                u.arc(w + s, m + s, s, -Math.PI / 2, 2 * Math.PI, !0),
                u.lineTo(w + s, m + s),
                u.lineWidth = 1.5
            }
            function T(r, p) {
                var u = p.x
                  , m = p.y
                  , l = p.width / 16
                  , s = p.height / 16;
                m -= s,
                r.moveTo(u + 1 * l, m + 2 * s),
                r.lineTo(u + 15 * l, m + 2 * s),
                r.lineTo(u + 14 * l, m + 3 * s),
                r.lineTo(u + 2 * l, m + 3 * s),
                r.moveTo(u + 3 * l, m + 6 * s),
                r.lineTo(u + 13 * l, m + 6 * s),
                r.lineTo(u + 12 * l, m + 7 * s),
                r.lineTo(u + 4 * l, m + 7 * s),
                r.moveTo(u + 5 * l, m + 10 * s),
                r.lineTo(u + 11 * l, m + 10 * s),
                r.lineTo(u + 10 * l, m + 11 * s),
                r.lineTo(u + 6 * l, m + 11 * s),
                r.moveTo(u + 7 * l, m + 14 * s),
                r.lineTo(u + 9 * l, m + 14 * s),
                r.lineTo(u + 8 * l, m + 15 * s),
                r.lineTo(u + 7 * l, m + 15 * s)
            }
            function A(x, I) {
                var u = I.x
                  , w = I.y
                  , y = I.width
                  , p = I.height
                  , m = y / 16
                  , K = p / 16
                  , v = 2 * Math.min(m, K);
                x.moveTo(u + m + v, w + K + v),
                x.arc(u + m, w + K, v, Math.PI / 4, 3 * Math.PI),
                x.lineTo(u + 7 * m - v, w + 6 * K - v),
                x.arc(u + 7 * m, w + 6 * K, v, 5 * (Math.PI / 4), 4 * Math.PI),
                x.arc(u + 7 * m, w + 6 * K, v / 2, 5 * (Math.PI / 4), 4 * Math.PI),
                x.moveTo(u + 7 * m - v / 2, w + 6 * K + v),
                x.lineTo(u + m + v, w + 14 * K - v),
                x.arc(u + m, w + 14 * K, v, -Math.PI / 4, 2 * Math.PI),
                x.moveTo(u + 7 * m + v / 2, w + 6 * K),
                x.lineTo(u + 14 * m - v, w + 10 * K - v / 2),
                x.moveTo(u + 16 * m, w + 10 * K),
                x.arc(u + 14 * m, w + 10 * K, v, 0, 3 * Math.PI),
                x.lineWidth = 1.5
            }
            function B(u, p) {
                var w = p.x
                  , m = p.y
                  , l = p.width
                  , v = p.height
                  , s = Math.min(l, v) / 2;
                u.moveTo(w + l, m + v / 2),
                u.arc(w + s, m + s, s, 0, 2 * Math.PI),
                u.arc(w + s, m, s, Math.PI / 4, 4 * (Math.PI / 5)),
                u.arc(w, m + s, s, -Math.PI / 3, Math.PI / 3),
                u.arc(w + l, m + v, s, Math.PI, 3 * (Math.PI / 2)),
                u.lineWidth = 1.5
            }
            function af(x, I) {
                for (var u = I.x, w = I.y, y = I.width, p = I.height, m = Math.round(p / 3), K = Math.round((m - 2) / 2), v = 3; v--; ) {
                    x.rect(u, w + m * v + K, y, 2)
                }
            }
            function Q(x, I) {
                for (var u = I.x, w = I.y, y = I.width, p = I.height, m = Math.round(y / 3), K = Math.round((m - 2) / 2), v = 3; v--; ) {
                    x.rect(u + m * v + K, w, 2, p)
                }
            }
            function ag(p, o) {
                var r = o.x
                  , m = o.y
                  , l = o.width / 16;
                p.moveTo(r + l, m),
                p.lineTo(r + l, m + o.height),
                p.lineTo(r + 15 * l, m + o.height),
                p.lineTo(r + 15 * l, m),
                p.lineTo(r + l, m),
                p.moveTo(r + 3 * l, m + 3 * l),
                p.lineTo(r + 13 * l, m + 3 * l),
                p.moveTo(r + 3 * l, m + 6 * l),
                p.lineTo(r + 13 * l, m + 6 * l),
                p.moveTo(r + 3 * l, m + 9 * l),
                p.lineTo(r + 13 * l, m + 9 * l),
                p.moveTo(r + 3 * l, m + 12 * l),
                p.lineTo(r + 9 * l, m + 12 * l)
            }
            function M(r, p) {
                var u = p.x
                  , m = p.y
                  , l = p.width / 16
                  , s = p.height / 16;
                r.moveTo(u, m),
                r.lineTo(u, m + p.height),
                r.lineTo(u + p.width, m + p.height),
                r.lineTo(u + p.width, m),
                r.lineTo(u, m),
                r.moveTo(u + 4 * l, m),
                r.lineTo(u + 4 * l, m + 8 * s),
                r.lineTo(u + 12 * l, m + 8 * s),
                r.lineTo(u + 12 * l, m),
                r.moveTo(u + 6 * l, m + 11 * s),
                r.lineTo(u + 6 * l, m + 13 * s),
                r.lineTo(u + 10 * l, m + 13 * s),
                r.lineTo(u + 10 * l, m + 11 * s),
                r.lineTo(u + 6 * l, m + 11 * s)
            }
            function E(r, p) {
                var u = p.x
                  , m = p.y
                  , l = p.width
                  , s = p.height;
                r.moveTo(u, m + s / 2),
                r.lineTo(u + l, m + s / 2),
                r.moveTo(u + l / 2, m),
                r.lineTo(u + l / 2, m + s)
            }
            function ac(p, o) {
                var r = o.width / 2
                  , m = o.height / 2
                  , l = Math.min(r, m);
                p.moveTo(o.x + r + l, o.y + m),
                p.arc(o.x + r, o.y + m, l, 0, 2 * Math.PI),
                p.closePath()
            }
            function ah(l, i) {
                l.rect(i.x, i.y, i.width, i.height),
                l.closePath()
            }
            function ad(u, p) {
                var w = p.width / 2
                  , m = p.height / 2
                  , l = p.x + w
                  , v = p.y + m
                  , s = Math.min(w, m);
                u.moveTo(l, v - s),
                u.lineTo(l + s, v + s),
                u.lineTo(l - s, v + s),
                u.lineTo(l, v - s),
                u.closePath()
            }
            function Z(u, p) {
                var w = p.width / 2
                  , m = p.height / 2
                  , l = p.x + w
                  , v = p.y + m
                  , s = Math.min(w, m);
                u.moveTo(l, v - s),
                u.lineTo(l + s, v),
                u.lineTo(l, v + s),
                u.lineTo(l - s, v),
                u.lineTo(l, v - s),
                u.closePath()
            }
            function G(p, o) {
                var r = o.x
                  , m = o.y
                  , l = o.width / 16;
                p.moveTo(r + 8 * l, m),
                p.lineTo(r + l, m + o.height),
                p.lineTo(r + 8 * l, m + 3 * (o.height / 4)),
                p.lineTo(r + 15 * l, m + o.height),
                p.lineTo(r + 8 * l, m),
                p.closePath()
            }
            function aj(m, r) {
                var l = ae("zrender/shape/Star")
                  , e = r.width / 2
                  , p = r.height / 2;
                l.prototype.buildPath(m, {
                    x: r.x + e,
                    y: r.y + p,
                    r: Math.min(e, p),
                    n: r.n || 5
                })
            }
            function C(l, m) {
                var e = ae("zrender/shape/Heart");
                e.prototype.buildPath(l, {
                    x: m.x + m.width / 2,
                    y: m.y + 0.2 * m.height,
                    a: m.width / 2,
                    b: 0.8 * m.height
                })
            }
            function z(l, m) {
                var e = ae("zrender/shape/Droplet");
                e.prototype.buildPath(l, {
                    x: m.x + 0.5 * m.width,
                    y: m.y + 0.5 * m.height,
                    a: 0.5 * m.width,
                    b: 0.8 * m.height
                })
            }
            function q(u, p) {
                var w = p.x
                  , m = p.y - 1.5 * (p.height / 2)
                  , l = p.width / 2
                  , v = p.height / 2
                  , s = Math.min(l, v);
                u.arc(w + l, m + v, s, 4 * (Math.PI / 5), Math.PI / 5),
                u.lineTo(w + l, m + v + 1.5 * s),
                u.closePath()
            }
            function D(m, r, l) {
                var e = ae("zrender/shape/Image");
                this._imageShape = this._imageShape || new e({
                    style: {}
                });
                for (var p in r) {
                    this._imageShape.style[p] = r[p]
                }
                this._imageShape.brush(m, !1, l)
            }
            function J(i) {
                F.call(this, i)
            }
            var H = ae("zrender/tool/util")
              , F = ae("zrender/shape/Base");
            return J.prototype = {
                type: "icon",
                iconLibrary: {
                    mark: N,
                    markUndo: S,
                    markClear: aa,
                    dataZoom: ai,
                    dataZoomReset: R,
                    restore: P,
                    lineChart: O,
                    barChart: Y,
                    pieChart: ab,
                    funnelChart: T,
                    forceChart: A,
                    chordChart: B,
                    stackChart: af,
                    tiledChart: Q,
                    dataView: ag,
                    saveAsImage: M,
                    cross: E,
                    circle: ac,
                    rectangle: ah,
                    triangle: ad,
                    diamond: Z,
                    arrow: G,
                    star: aj,
                    heart: C,
                    droplet: z,
                    pin: q,
                    image: D
                },
                brush: function(m, u, l) {
                    var e = u ? this.highlightStyle : this.style;
                    e = e || {};
                    var s = e.iconType || this.style.iconType;
                    if ("image" === s) {
                        var p = ae("zrender/shape/Image");
                        p.prototype.brush.call(this, m, u, l)
                    } else {
                        var e = this.beforeBrush(m, u);
                        switch (m.beginPath(),
                        this.buildPath(m, e, l),
                        e.brushType) {
                        case "both":
                            m.fill();
                        case "stroke":
                            e.lineWidth > 0 && m.stroke();
                            break;
                        default:
                            m.fill()
                        }
                        this.drawText(m, e, this.style),
                        this.afterBrush(m)
                    }
                },
                buildPath: function(l, i, m) {
                    this.iconLibrary[i.iconType] ? this.iconLibrary[i.iconType].call(this, l, i, m) : (l.moveTo(i.x, i.y),
                    l.lineTo(i.x + i.width, i.y),
                    l.lineTo(i.x + i.width, i.y + i.height),
                    l.lineTo(i.x, i.y + i.height),
                    l.lineTo(i.x, i.y),
                    l.closePath())
                },
                getRect: function(i) {
                    return i.__rect ? i.__rect : (i.__rect = {
                        x: Math.round(i.x),
                        y: Math.round(i.y - ("pin" == i.iconType ? 1.5 * (i.height / 2) : 0)),
                        width: i.width,
                        height: i.height * ("pin" === i.iconType ? 1.25 : 1)
                    },
                    i.__rect)
                },
                isCover: function(p, o) {
                    var r = this.transformCoordToLocal(p, o);
                    p = r[0],
                    o = r[1];
                    var m = this.style.__rect;
                    m || (m = this.style.__rect = this.getRect(this.style));
                    var l = 8 > m.height || 8 > m.width ? 4 : 0;
                    return p >= m.x - l && m.x + m.width + l >= p && o >= m.y - l && m.y + m.height + l >= o
                }
            },
            H.inherits(J, F),
            J
        }
        ),
        k("echarts/util/shape/MarkLine", ["require", "zrender/shape/Base", "./Icon", "zrender/shape/Line", "zrender/shape/BezierCurve", "zrender/tool/area", "zrender/shape/util/dashedLineTo", "zrender/tool/util", "zrender/tool/curve"], function(A) {
            function C(i) {
                u.call(this, i),
                this.style.curveness > 0 && this.updatePoints(this.style),
                this.highlightStyle.curveness > 0 && this.updatePoints(this.highlightStyle)
            }
            var u = A("zrender/shape/Base")
              , y = A("./Icon")
              , B = A("zrender/shape/Line")
              , q = new B({})
              , p = A("zrender/shape/BezierCurve")
              , D = new p({})
              , x = A("zrender/tool/area")
              , z = A("zrender/shape/util/dashedLineTo")
              , w = A("zrender/tool/util")
              , v = A("zrender/tool/curve");
            return C.prototype = {
                type: "mark-line",
                brush: function(l, i) {
                    var m = this.style;
                    i && (m = this.getHighlightStyle(m, this.highlightStyle || {})),
                    l.save(),
                    this.setContext(l, m),
                    this.setTransform(l),
                    l.save(),
                    l.beginPath(),
                    this.buildPath(l, m),
                    l.stroke(),
                    l.restore(),
                    this.brushSymbol(l, m, 0),
                    this.brushSymbol(l, m, 1),
                    this.drawText(l, m, this.style),
                    l.restore()
                },
                buildPath: function(r, o) {
                    var s = o.lineType || "solid";
                    if (r.moveTo(o.xStart, o.yStart),
                    o.curveness > 0) {
                        var m = null ;
                        switch (s) {
                        case "dashed":
                            m = [5, 5];
                            break;
                        case "dotted":
                            m = [1, 1]
                        }
                        m && r.setLineDash && r.setLineDash(m),
                        r.quadraticCurveTo(o.cpX1, o.cpY1, o.xEnd, o.yEnd)
                    } else {
                        if ("solid" == s) {
                            r.lineTo(o.xEnd, o.yEnd)
                        } else {
                            var l = (o.lineWidth || 1) * ("dashed" == o.lineType ? 5 : 1);
                            z(r, o.xStart, o.yStart, o.xEnd, o.yEnd, l)
                        }
                    }
                },
                updatePoints: function(I) {
                    var K = I.curveness || 0
                      , F = 1
                      , H = I.xStart
                      , J = I.yStart
                      , E = I.xEnd
                      , m = I.yEnd
                      , L = (H + E) / 2 - F * (J - m) * K
                      , G = (J + m) / 2 - F * (E - H) * K;
                    I.cpX1 = L,
                    I.cpY1 = G
                },
                brushSymbol: function(R, G, L) {
                    if ("none" != G.symbol[L]) {
                        R.save(),
                        R.beginPath(),
                        R.lineWidth = G.symbolBorder,
                        R.strokeStyle = G.symbolBorderColor;
                        var W = G.symbol[L].replace("empty", "").toLowerCase();
                        G.symbol[L].match("empty") && (R.fillStyle = "#fff");
                        var K = G.xStart
                          , I = G.yStart
                          , H = G.xEnd
                          , N = G.yEnd
                          , O = 0 === L ? K : H
                          , M = 0 === L ? I : N
                          , i = G.curveness || 0
                          , S = null  != G.symbolRotate[L] ? G.symbolRotate[L] - 0 : 0;
                        if (S = S / 180 * Math.PI,
                        "arrow" == W && 0 === S) {
                            if (0 === i) {
                                var J = 0 === L ? -1 : 1;
                                S = Math.PI / 2 + Math.atan2(J * (N - I), J * (H - K))
                            } else {
                                var T = G.cpX1
                                  , F = G.cpY1
                                  , E = v.quadraticDerivativeAt
                                  , P = E(K, T, H, L)
                                  , V = E(I, F, N, L);
                                S = Math.PI / 2 + Math.atan2(V, P)
                            }
                        }
                        R.translate(O, M),
                        0 !== S && R.rotate(S);
                        var Q = G.symbolSize[L];
                        y.prototype.buildPath(R, {
                            x: -Q,
                            y: -Q,
                            width: 2 * Q,
                            height: 2 * Q,
                            iconType: W
                        }),
                        R.closePath(),
                        R.fill(),
                        R.stroke(),
                        R.restore()
                    }
                },
                getRect: function(i) {
                    return i.curveness > 0 ? D.getRect(i) : q.getRect(i),
                    i.__rect
                },
                isCover: function(l, i) {
                    var m = this.transformCoordToLocal(l, i);
                    return l = m[0],
                    i = m[1],
                    this.isCoverRect(l, i) ? this.style.curveness > 0 ? x.isInside(D, this.style, l, i) : x.isInside(q, this.style, l, i) : !1
                }
            },
            w.inherits(C, u),
            C
        }
        ),
        k("echarts/util/shape/Symbol", ["require", "zrender/shape/Base", "zrender/shape/Polygon", "zrender/tool/util", "./normalIsCover"], function(q) {
            function p(i) {
                s.call(this, i)
            }
            var s = q("zrender/shape/Base")
              , m = q("zrender/shape/Polygon")
              , l = new m({})
              , r = q("zrender/tool/util");
            return p.prototype = {
                type: "symbol",
                buildPath: function(K, A) {
                    var F = A.pointList
                      , I = F.length;
                    if (0 !== I) {
                        for (var N, E, C, B, H, J = 10000, G = Math.ceil(I / J), v = F[0] instanceof Array, w = A.size ? A.size : 2, L = w, D = w / 2, M = 2 * Math.PI, z = 0; G > z; z++) {
                            K.beginPath(),
                            N = z * J,
                            E = N + J,
                            E = E > I ? I : E;
                            for (var x = N; E > x; x++) {
                                if (A.random && (C = A["randomMap" + x % 20] / 100,
                                L = w * C * C,
                                D = L / 2),
                                v ? (B = F[x][0],
                                H = F[x][1]) : (B = F[x].x,
                                H = F[x].y),
                                3 > L) {
                                    K.rect(B - D, H - D, L, L)
                                } else {
                                    switch (A.iconType) {
                                    case "circle":
                                        K.moveTo(B, H),
                                        K.arc(B, H, D, 0, M, !0);
                                        break;
                                    case "diamond":
                                        K.moveTo(B, H - D),
                                        K.lineTo(B + D / 3, H - D / 3),
                                        K.lineTo(B + D, H),
                                        K.lineTo(B + D / 3, H + D / 3),
                                        K.lineTo(B, H + D),
                                        K.lineTo(B - D / 3, H + D / 3),
                                        K.lineTo(B - D, H),
                                        K.lineTo(B - D / 3, H - D / 3),
                                        K.lineTo(B, H - D);
                                        break;
                                    default:
                                        K.rect(B - D, H - D, L, L)
                                    }
                                }
                            }
                            if (K.closePath(),
                            G - 1 > z) {
                                switch (A.brushType) {
                                case "both":
                                    K.fill(),
                                    A.lineWidth > 0 && K.stroke();
                                    break;
                                case "stroke":
                                    A.lineWidth > 0 && K.stroke();
                                    break;
                                default:
                                    K.fill()
                                }
                            }
                        }
                    }
                },
                getRect: function(i) {
                    return i.__rect || l.getRect(i)
                },
                isCover: q("./normalIsCover")
            },
            r.inherits(p, s),
            p
        }
        ),
        k("zrender/shape/Polyline", ["require", "./Base", "./util/smoothSpline", "./util/smoothBezier", "./util/dashedLineTo", "./Polygon", "../tool/util"], function(q) {
            var p = q("./Base")
              , s = q("./util/smoothSpline")
              , m = q("./util/smoothBezier")
              , l = q("./util/dashedLineTo")
              , r = function(i) {
                this.brushTypeOnly = "stroke",
                this.textPosition = "end",
                p.call(this, i)
            }
            ;
            return r.prototype = {
                type: "polyline",
                buildPath: function(A, B) {
                    var y = B.pointList;
                    if (!(2 > y.length)) {
                        var u = Math.min(B.pointList.length, Math.round(B.pointListLength || B.pointList.length));
                        if (B.smooth && "spline" !== B.smooth) {
                            B.controlPointList || this.updateControlPoints(B);
                            var n = B.controlPointList;
                            A.moveTo(y[0][0], y[0][1]);
                            for (var C, x, z, w = 0; u - 1 > w; w++) {
                                C = n[2 * w],
                                x = n[2 * w + 1],
                                z = y[w + 1],
                                A.bezierCurveTo(C[0], C[1], x[0], x[1], z[0], z[1])
                            }
                        } else {
                            if ("spline" === B.smooth && (y = s(y),
                            u = y.length),
                            B.lineType && "solid" != B.lineType) {
                                if ("dashed" == B.lineType || "dotted" == B.lineType) {
                                    var v = (B.lineWidth || 1) * ("dashed" == B.lineType ? 5 : 1);
                                    A.moveTo(y[0][0], y[0][1]);
                                    for (var w = 1; u > w; w++) {
                                        l(A, y[w - 1][0], y[w - 1][1], y[w][0], y[w][1], v)
                                    }
                                }
                            } else {
                                A.moveTo(y[0][0], y[0][1]);
                                for (var w = 1; u > w; w++) {
                                    A.lineTo(y[w][0], y[w][1])
                                }
                            }
                        }
                    }
                },
                updateControlPoints: function(i) {
                    i.controlPointList = m(i.pointList, i.smooth, !1, i.smoothConstraint)
                },
                getRect: function(e) {
                    return q("./Polygon").prototype.getRect(e)
                }
            },
            q("../tool/util").inherits(r, p),
            r
        }
        ),
        k("zrender/shape/ShapeBundle", ["require", "./Base", "../tool/util"], function(l) {
            var i = l("./Base")
              , m = function(n) {
                i.call(this, n)
            }
            ;
            return m.prototype = {
                constructor: m,
                type: "shape-bundle",
                brush: function(s, r) {
                    var v = this.beforeBrush(s, r);
                    s.beginPath();
                    for (var q = 0; v.shapeList.length > q; q++) {
                        var p = v.shapeList[q]
                          , u = p.style;
                        r && (u = p.getHighlightStyle(u, p.highlightStyle || {}, p.brushTypeOnly)),
                        p.buildPath(s, u)
                    }
                    switch (v.brushType) {
                    case "both":
                        s.fill();
                    case "stroke":
                        v.lineWidth > 0 && s.stroke();
                        break;
                    default:
                        s.fill()
                    }
                    this.drawText(s, v, this.style),
                    this.afterBrush(s)
                },
                getRect: function(x) {
                    if (x.__rect) {
                        return x.__rect
                    }
                    for (var u = 1 / 0, z = -1 / 0, q = 1 / 0, p = -1 / 0, y = 0; x.shapeList.length > y; y++) {
                        var w = x.shapeList[y]
                          , v = w.getRect(w.style)
                          , u = Math.min(v.x, u)
                          , q = Math.min(v.y, q)
                          , z = Math.max(v.x + v.width, z)
                          , p = Math.max(v.y + v.height, p)
                    }
                    return x.__rect = {
                        x: u,
                        y: q,
                        width: z - u,
                        height: p - q
                    },
                    x.__rect
                },
                isCover: function(r, q) {
                    var s = this.transformCoordToLocal(r, q);
                    if (r = s[0],
                    q = s[1],
                    this.isCoverRect(r, q)) {
                        for (var p = 0; this.style.shapeList.length > p; p++) {
                            var o = this.style.shapeList[p];
                            if (o.isCover(r, q)) {
                                return !0
                            }
                        }
                    }
                    return !1
                }
            },
            l("../tool/util").inherits(m, i),
            m
        }
        ),
        k("echarts/util/ecAnimation", ["require", "zrender/tool/util", "zrender/tool/curve", "zrender/shape/Polygon"], function(D) {
            function H(Q, S, K, O, R) {
                var J, p = K.style.pointList, T = p.length;
                if (!S) {
                    if (J = [],
                    "vertical" != K._orient) {
                        for (var N = p[0][1], P = 0; T > P; P++) {
                            J[P] = [p[P][0], N]
                        }
                    } else {
                        for (var M = p[0][0], P = 0; T > P; P++) {
                            J[P] = [M, p[P][1]]
                        }
                    }
                    "half-smooth-polygon" == K.type && (J[T - 1] = u.clone(p[T - 1]),
                    J[T - 2] = u.clone(p[T - 2])),
                    S = {
                        style: {
                            pointList: J
                        }
                    }
                }
                J = S.style.pointList;
                var L = J.length;
                K.style.pointList = L == T ? J : T > L ? J.concat(p.slice(L)) : J.slice(0, T),
                Q.addShape(K),
                K.__animating = !0,
                Q.animate(K.id, "style").when(O, {
                    pointList: p
                }).during(function() {
                    K.updateControlPoints && K.updateControlPoints(K.style)
                }
                ).done(function() {
                    K.__animating = !1
                }
                ).start(R)
            }
            function w(p, o) {
                for (var r = arguments.length, m = 2; r > m; m++) {
                    var l = arguments[m];
                    p.style[l] = o.style[l]
                }
            }
            function B(O, Q, M, P, p) {
                var n = M.style;
                Q || (Q = {
                    position: M.position,
                    style: {
                        x: n.x,
                        y: "vertical" == M._orient ? n.y + n.height : n.y,
                        width: "vertical" == M._orient ? n.width : 0,
                        height: "vertical" != M._orient ? n.height : 0
                    }
                });
                var R = n.x
                  , L = n.y
                  , N = n.width
                  , K = n.height
                  , J = [M.position[0], M.position[1]];
                w(M, Q, "x", "y", "width", "height"),
                M.position = Q.position,
                O.addShape(M),
                (J[0] != Q.position[0] || J[1] != Q.position[1]) && O.animate(M.id, "").when(P, {
                    position: J
                }).start(p),
                M.__animating = !0,
                O.animate(M.id, "style").when(P, {
                    x: R,
                    y: L,
                    width: N,
                    height: K
                }).done(function() {
                    M.__animating = !1
                }
                ).start(p)
            }
            function G(J, p, L, m, l) {
                if (!p) {
                    var K = L.style.y;
                    p = {
                        style: {
                            y: [K[0], K[0], K[0], K[0]]
                        }
                    }
                }
                var s = L.style.y;
                L.style.y = p.style.y,
                J.addShape(L),
                L.__animating = !0,
                J.animate(L.id, "style").when(m, {
                    y: s
                }).done(function() {
                    L.__animating = !1
                }
                ).start(l)
            }
            function v(M, O, J, L, N) {
                var p = J.style.x
                  , m = J.style.y
                  , P = J.style.r0
                  , K = J.style.r;
                J.__animating = !0,
                "r" != J._animationAdd ? (J.style.r0 = 0,
                J.style.r = 0,
                J.rotation = [2 * Math.PI, p, m],
                M.addShape(J),
                M.animate(J.id, "style").when(L, {
                    r0: P,
                    r: K
                }).done(function() {
                    J.__animating = !1
                }
                ).start(N),
                M.animate(J.id, "").when(Math.round(2 * (L / 3)), {
                    rotation: [0, p, m]
                }).start(N)) : (J.style.r0 = J.style.r,
                M.addShape(J),
                M.animate(J.id, "style").when(L, {
                    r0: P
                }).done(function() {
                    J.__animating = !1
                }
                ).start(N))
            }
            function q(K, n, m, l, L) {
                n || (n = "r" != m._animationAdd ? {
                    style: {
                        startAngle: m.style.startAngle,
                        endAngle: m.style.startAngle
                    }
                } : {
                    style: {
                        r0: m.style.r
                    }
                });
                var J = m.style.startAngle
                  , p = m.style.endAngle;
                w(m, n, "startAngle", "endAngle"),
                K.addShape(m),
                m.__animating = !0,
                K.animate(m.id, "style").when(l, {
                    startAngle: J,
                    endAngle: p
                }).done(function() {
                    m.__animating = !1
                }
                ).start(L)
            }
            function I(K, n, m, l, L) {
                n || (n = {
                    style: {
                        x: "left" == m.style.textAlign ? m.style.x + 100 : m.style.x - 100,
                        y: m.style.y
                    }
                });
                var J = m.style.x
                  , p = m.style.y;
                w(m, n, "x", "y"),
                K.addShape(m),
                m.__animating = !0,
                K.animate(m.id, "style").when(l, {
                    x: J,
                    y: p
                }).done(function() {
                    m.__animating = !1
                }
                ).start(L)
            }
            function A(J, N, p, m, M) {
                var L = D("zrender/shape/Polygon").prototype.getRect(p.style)
                  , K = L.x + L.width / 2
                  , e = L.y + L.height / 2;
                p.scale = [0.1, 0.1, K, e],
                J.addShape(p),
                p.__animating = !0,
                J.animate(p.id, "").when(m, {
                    scale: [1, 1, K, e]
                }).done(function() {
                    p.__animating = !1
                }
                ).start(M)
            }
            function C(L, N, J, M, n) {
                N || (N = {
                    style: {
                        source0: 0,
                        source1: J.style.source1 > 0 ? 360 : -360,
                        target0: 0,
                        target1: J.style.target1 > 0 ? 360 : -360
                    }
                });
                var m = J.style.source0
                  , O = J.style.source1
                  , p = J.style.target0
                  , K = J.style.target1;
                N.style && w(J, N, "source0", "source1", "target0", "target1"),
                L.addShape(J),
                J.__animating = !0,
                L.animate(J.id, "style").when(M, {
                    source0: m,
                    source1: O,
                    target0: p,
                    target1: K
                }).done(function() {
                    J.__animating = !1
                }
                ).start(n)
            }
            function y(r, p, J, m, l) {
                p || (p = {
                    style: {
                        angle: J.style.startAngle
                    }
                });
                var s = J.style.angle;
                J.style.angle = p.style.angle,
                r.addShape(J),
                J.__animating = !0,
                r.animate(J.id, "style").when(m, {
                    angle: s
                }).done(function() {
                    J.__animating = !1
                }
                ).start(l)
            }
            function x(L, p, N, m, M, K) {
                if (N.style._x = N.style.x,
                N.style._y = N.style.y,
                N.style._width = N.style.width,
                N.style._height = N.style.height,
                p) {
                    B(L, p, N, m, M)
                } else {
                    var J = N._x || 0
                      , i = N._y || 0;
                    N.scale = [0.01, 0.01, J, i],
                    L.addShape(N),
                    N.__animating = !0,
                    L.animate(N.id, "").delay(K).when(m, {
                        scale: [1, 1, J, i]
                    }).done(function() {
                        N.__animating = !1
                    }
                    ).start(M || "QuinticOut")
                }
            }
            function z(L, N, J, M, n) {
                N || (N = {
                    style: {
                        xStart: J.style.xStart,
                        yStart: J.style.yStart,
                        xEnd: J.style.xStart,
                        yEnd: J.style.yStart
                    }
                });
                var m = J.style.xStart
                  , O = J.style.xEnd
                  , p = J.style.yStart
                  , K = J.style.yEnd;
                w(J, N, "xStart", "xEnd", "yStart", "yEnd"),
                L.addShape(J),
                J.__animating = !0,
                L.animate(J.id, "style").when(M, {
                    xStart: m,
                    xEnd: O,
                    yStart: p,
                    yEnd: K
                }).done(function() {
                    J.__animating = !1
                }
                ).start(n)
            }
            function E(T, aa, M, R, Y) {
                Y = Y || "QuinticOut",
                M.__animating = !0,
                T.addShape(M);
                var L = M.style
                  , J = function() {
                    M.__animating = !1
                }
                  , ab = L.xStart
                  , Q = L.yStart
                  , S = L.xEnd
                  , O = L.yEnd;
                if (L.curveness > 0) {
                    M.updatePoints(L);
                    var N = {
                        p: 0
                    }
                      , P = L.cpX1
                      , W = L.cpY1
                      , K = []
                      , Z = []
                      , X = F.quadraticSubdivide;
                    T.animation.animate(N).when(R, {
                        p: 1
                    }).during(function() {
                        X(ab, P, S, N.p, K),
                        X(Q, W, O, N.p, Z),
                        L.cpX1 = K[1],
                        L.cpY1 = Z[1],
                        L.xEnd = K[2],
                        L.yEnd = Z[2],
                        T.modShape(M)
                    }
                    ).done(J).start(Y)
                } else {
                    T.animate(M.id, "style").when(0, {
                        xEnd: ab,
                        yEnd: Q
                    }).when(R, {
                        xEnd: S,
                        yEnd: O
                    }).done(J).start(Y)
                }
            }
            var u = D("zrender/tool/util")
              , F = D("zrender/tool/curve");
            return {
                pointList: H,
                rectangle: B,
                candle: G,
                ring: v,
                sector: q,
                text: I,
                polygon: A,
                ribbon: C,
                gaugePointer: y,
                icon: x,
                line: z,
                markline: E
            }
        }
        ),
        k("echarts/util/ecEffect", ["require", "../util/ecData", "zrender/shape/Circle", "zrender/shape/Image", "zrender/tool/curve", "../util/shape/Icon", "../util/shape/Symbol", "zrender/shape/ShapeBundle", "zrender/shape/Polyline", "zrender/tool/vector", "zrender/tool/env"], function(D) {
            function G(N, W, p, L) {
                var S, o = p.effect, K = o.color || p.style.strokeColor || p.style.color, I = o.shadowColor || K, s = o.scaleSize, J = o.bounceDistance, O = o.shadowBlur !== void 0 ? o.shadowBlur : s;
                "image" !== p.type ? (S = new C({
                    zlevel: L,
                    style: {
                        brushType: "stroke",
                        iconType: "droplet" != p.style.iconType ? p.style.iconType : "circle",
                        x: O + 1,
                        y: O + 1,
                        n: p.style.n,
                        width: p.style._width * s,
                        height: p.style._height * s,
                        lineWidth: 1,
                        strokeColor: K,
                        shadowColor: I,
                        shadowBlur: O
                    },
                    draggable: !1,
                    hoverable: !1
                }),
                "pin" == p.style.iconType && (S.style.y += 1.5 * (S.style.height / 2)),
                u && (S.style.image = N.shapeToImage(S, S.style.width + 2 * O + 2, S.style.height + 2 * O + 2).style.image,
                S = new H({
                    zlevel: S.zlevel,
                    style: S.style,
                    draggable: !1,
                    hoverable: !1
                }))) : S = new H({
                    zlevel: L,
                    style: p.style,
                    draggable: !1,
                    hoverable: !1
                }),
                v.clone(p, S),
                S.position = p.position,
                W.push(S),
                N.addShape(S);
                var P = "image" !== p.type ? window.devicePixelRatio || 1 : 1
                  , T = (S.style.width / P - p.style._width) / 2;
                S.style.x = p.style._x - T,
                S.style.y = p.style._y - T,
                "pin" == p.style.iconType && (S.style.y -= 1.5 * (p.style.height / 2));
                var R = 100 * (o.period + 10 * Math.random());
                N.modShape(p.id, {
                    invisible: !0
                });
                var M = S.style.x + S.style.width / 2 / P
                  , Q = S.style.y + S.style.height / 2 / P;
                "scale" === o.type ? (N.modShape(S.id, {
                    scale: [0.1, 0.1, M, Q]
                }),
                N.animate(S.id, "", o.loop).when(R, {
                    scale: [1, 1, M, Q]
                }).done(function() {
                    p.effect.show = !1,
                    N.delShape(S.id)
                }
                ).start()) : N.animate(S.id, "style", o.loop).when(R, {
                    y: S.style.y - J
                }).when(2 * R, {
                    y: S.style.y
                }).done(function() {
                    p.effect.show = !1,
                    N.delShape(S.id)
                }
                ).start()
            }
            function w(Q, W, K, O) {
                var T = K.effect
                  , J = T.color || K.style.strokeColor || K.style.color
                  , m = T.scaleSize
                  , X = T.shadowColor || J
                  , N = T.shadowBlur !== void 0 ? T.shadowBlur : 2 * m
                  , P = window.devicePixelRatio || 1
                  , L = new y({
                    zlevel: O,
                    position: K.position,
                    scale: K.scale,
                    style: {
                        pointList: K.style.pointList,
                        iconType: K.style.iconType,
                        color: J,
                        strokeColor: J,
                        shadowColor: X,
                        shadowBlur: N * P,
                        random: !0,
                        brushType: "fill",
                        lineWidth: 1,
                        size: K.style.size
                    },
                    draggable: !1,
                    hoverable: !1
                });
                W.push(L),
                Q.addShape(L),
                Q.modShape(K.id, {
                    invisible: !0
                });
                for (var M = Math.round(100 * T.period), R = {}, I = {}, S = 0; 20 > S; S++) {
                    L.style["randomMap" + S] = 0,
                    R = {},
                    R["randomMap" + S] = 100,
                    I = {},
                    I["randomMap" + S] = 0,
                    L.style["randomMap" + S] = 100 * Math.random(),
                    Q.animate(L.id, "style", !0).when(M, R).when(2 * M, I).when(3 * M, R).when(4 * M, R).delay(Math.random() * M * S).start()
                }
            }
            function B(an, ad, ag, aj, aq) {
                var ae = ag.effect
                  , ak = ag.style
                  , ah = ae.color || ak.strokeColor || ak.color
                  , p = ae.shadowColor || ak.strokeColor || ah
                  , ao = ak.lineWidth * ae.scaleSize
                  , ab = ae.shadowBlur !== void 0 ? ae.shadowBlur : ao
                  , Q = new q({
                    zlevel: aj,
                    style: {
                        x: ab,
                        y: ab,
                        r: ao,
                        color: ah,
                        shadowColor: p,
                        shadowBlur: ab
                    },
                    hoverable: !1
                })
                  , al = 0;
                if (u && !aq) {
                    var aj = Q.zlevel;
                    Q = an.shapeToImage(Q, 2 * (ao + ab), 2 * (ao + ab)),
                    Q.zlevel = aj,
                    Q.hoverable = !1,
                    al = ab
                }
                aq || (v.clone(ag, Q),
                Q.position = ag.position,
                ad.push(Q),
                an.addShape(Q));
                var ap = function() {
                    aq || (ag.effect.show = !1,
                    an.delShape(Q.id)),
                    Q.effectAnimator = null 
                }
                ;
                if (ag instanceof z) {
                    for (var am = [0], ai = 0, U = ak.pointList, ar = ak.controlPointList, N = 1; U.length > N; N++) {
                        if (ar) {
                            var o = ar[2 * (N - 1)]
                              , l = ar[2 * (N - 1) + 1];
                            ai += E.dist(U[N - 1], o) + E.dist(o, l) + E.dist(l, U[N])
                        } else {
                            ai += E.dist(U[N - 1], U[N])
                        }
                        am.push(ai)
                    }
                    for (var O = {
                        p: 0
                    }, Z = an.animation.animate(O, {
                        loop: ae.loop
                    }), N = 0; am.length > N; N++) {
                        Z.when(am[N] * ae.period, {
                            p: N
                        })
                    }
                    Z.during(function() {
                        var J, V, I = Math.floor(O.p);
                        if (I == U.length - 1) {
                            J = U[I][0],
                            V = U[I][1]
                        } else {
                            var T = O.p - I
                              , S = U[I]
                              , L = U[I + 1];
                            if (ar) {
                                var K = ar[2 * I]
                                  , e = ar[2 * I + 1];
                                J = A.cubicAt(S[0], K[0], e[0], L[0], T),
                                V = A.cubicAt(S[1], K[1], e[1], L[1], T)
                            } else {
                                J = (L[0] - S[0]) * T + S[0],
                                V = (L[1] - S[1]) * T + S[1]
                            }
                        }
                        Q.style.x = J,
                        Q.style.y = V,
                        aq || an.modShape(Q)
                    }
                    ).done(ap).start(),
                    Z.duration = ai * ae.period,
                    Q.effectAnimator = Z
                } else {
                    var Y = ak.xStart - al
                      , R = ak.yStart - al
                      , P = ak.xEnd - al
                      , af = ak.yEnd - al;
                    Q.style.x = Y,
                    Q.style.y = R;
                    var M = (P - Y) * (P - Y) + (af - R) * (af - R)
                      , ac = Math.round(Math.sqrt(Math.round(M * ae.period * ae.period)));
                    if (ag.style.curveness > 0) {
                        var aa = ak.cpX1 - al
                          , r = ak.cpY1 - al;
                        Q.effectAnimator = an.animation.animate(Q, {
                            loop: ae.loop
                        }).when(ac, {
                            p: 1
                        }).during(function(e, i) {
                            Q.style.x = A.quadraticAt(Y, aa, P, i),
                            Q.style.y = A.quadraticAt(R, r, af, i),
                            aq || an.modShape(Q)
                        }
                        ).done(ap).start()
                    } else {
                        Q.effectAnimator = an.animation.animate(Q.style, {
                            loop: ae.loop
                        }).when(ac, {
                            x: P,
                            y: af
                        }).during(function() {
                            aq || an.modShape(Q)
                        }
                        ).done(ap).start()
                    }
                    Q.effectAnimator.duration = ac
                }
                return Q
            }
            function F(P, V, K, S) {
                var J = new x({
                    style: {
                        shapeList: []
                    },
                    zlevel: S,
                    hoverable: !1
                })
                  , i = K.style.shapeList
                  , W = K.effect;
                J.position = K.position;
                for (var N = 0, O = [], L = 0; i.length > L; L++) {
                    i[L].effect = W;
                    var M = B(P, null , i[L], S, !0)
                      , Q = M.effectAnimator;
                    J.style.shapeList.push(M),
                    Q.duration > N && (N = Q.duration),
                    0 === L && (J.style.color = M.style.color,
                    J.style.shadowBlur = M.style.shadowBlur,
                    J.style.shadowColor = M.style.shadowColor),
                    O.push(Q)
                }
                V.push(J),
                P.addShape(J);
                var I = function() {
                    for (var l = 0; O.length > l; l++) {
                        O[l].stop()
                    }
                }
                ;
                if (N) {
                    J.__dummy = 0;
                    var R = P.animate(J.id, "", W.loop).when(N, {
                        __dummy: 1
                    }).during(function() {
                        P.modShape(J)
                    }
                    ).done(function() {
                        K.effect.show = !1,
                        P.delShape(J.id)
                    }
                    ).start()
                      , T = R.stop;
                    R.stop = function() {
                        I(),
                        T.call(this)
                    }
                }
            }
            var v = D("../util/ecData")
              , q = D("zrender/shape/Circle")
              , H = D("zrender/shape/Image")
              , A = D("zrender/tool/curve")
              , C = D("../util/shape/Icon")
              , y = D("../util/shape/Symbol")
              , x = D("zrender/shape/ShapeBundle")
              , z = D("zrender/shape/Polyline")
              , E = D("zrender/tool/vector")
              , u = D("zrender/tool/env").canvasSupported;
            return {
                point: G,
                largePoint: w,
                line: B,
                largeLine: F
            }
        }
        ),
        k("echarts/component/base", ["require", "../config", "../util/ecData", "../util/ecQuery", "../util/number", "zrender/tool/util", "zrender/tool/env"], function(s) {
            function p(y, n, i, z, x) {
                this.ecTheme = y,
                this.messageCenter = n,
                this.zr = i,
                this.option = z,
                this.series = z.series,
                this.myChart = x,
                this.component = x.component,
                this.shapeList = [],
                this.effectList = [];
                var w = this;
                w._onlegendhoverlink = function(B) {
                    if (w.legendHoverLink) {
                        for (var A, r = B.target, C = w.shapeList.length - 1; C >= 0; C--) {
                            A = w.type == v.CHART_TYPE_PIE || w.type == v.CHART_TYPE_FUNNEL ? m.get(w.shapeList[C], "name") : (m.get(w.shapeList[C], "series") || {}).name,
                            A != r || w.shapeList[C].invisible || w.shapeList[C].__animating || w.zr.addHoverShape(w.shapeList[C])
                        }
                    }
                }
                ,
                n && n.bind(v.EVENT.LEGEND_HOVERLINK, this._onlegendhoverlink)
            }
            var v = s("../config")
              , m = s("../util/ecData")
              , l = s("../util/ecQuery")
              , u = s("../util/number")
              , q = s("zrender/tool/util");
            return p.prototype = {
                canvasSupported: s("zrender/tool/env").canvasSupported,
                _getZ: function(n) {
                    var i = this.ecTheme[this.type];
                    return i && null  != i[n] ? i[n] : (i = v[this.type],
                    i && null  != i[n] ? i[n] : 0)
                },
                getZlevelBase: function() {
                    return this._getZ("zlevel")
                },
                getZBase: function() {
                    return this._getZ("z")
                },
                reformOption: function(i) {
                    return q.merge(q.merge(i || {}, q.clone(this.ecTheme[this.type] || {})), q.clone(v[this.type] || {}))
                },
                reformCssArray: function(i) {
                    if (!(i instanceof Array)) {
                        return [i, i, i, i]
                    }
                    switch (i.length + "") {
                    case "4":
                        return i;
                    case "3":
                        return [i[0], i[1], i[2], i[1]];
                    case "2":
                        return [i[0], i[1], i[0], i[1]];
                    case "1":
                        return [i[0], i[0], i[0], i[0]];
                    case "0":
                        return [0, 0, 0, 0]
                    }
                },
                getShapeById: function(o) {
                    for (var i = 0, r = this.shapeList.length; r > i; i++) {
                        if (this.shapeList[i].id === o) {
                            return this.shapeList[i]
                        }
                    }
                    return null 
                },
                getFont: function(n) {
                    var i = this.getTextStyle(q.clone(n));
                    return i.fontStyle + " " + i.fontWeight + " " + i.fontSize + "px " + i.fontFamily
                },
                getTextStyle: function(i) {
                    return q.merge(q.merge(i || {}, this.ecTheme.textStyle), v.textStyle)
                },
                getItemStyleColor: function(w, r, x, o) {
                    return "function" == typeof w ? w.call(this.myChart, {
                        seriesIndex: r,
                        series: this.series[r],
                        dataIndex: x,
                        data: o
                    }) : w
                },
                getDataFromOption: function(n, i) {
                    return null  != n ? null  != n.value ? n.value : n : i
                },
                subPixelOptimize: function(n, i) {
                    return n = 1 === i % 2 ? Math.floor(n) + 0.5 : Math.round(n)
                },
                resize: function() {
                    this.refresh && this.refresh(),
                    this.clearEffectShape && this.clearEffectShape(!0);
                    var i = this;
                    setTimeout(function() {
                        i.animationEffect && i.animationEffect()
                    }
                    , 200)
                },
                clear: function() {
                    this.clearEffectShape && this.clearEffectShape(),
                    this.zr && this.zr.delShape(this.shapeList),
                    this.shapeList = []
                },
                dispose: function() {
                    this.onbeforDispose && this.onbeforDispose(),
                    this.clear(),
                    this.shapeList = null ,
                    this.effectList = null ,
                    this.messageCenter && this.messageCenter.unbind(v.EVENT.LEGEND_HOVERLINK, this._onlegendhoverlink),
                    this.onafterDispose && this.onafterDispose()
                },
                query: l.query,
                deepQuery: l.deepQuery,
                deepMerge: l.deepMerge,
                parsePercent: u.parsePercent,
                parseCenter: u.parseCenter,
                parseRadius: u.parseRadius,
                numAddCommas: u.addCommas
            },
            p
        }
        ),
        k("echarts/layout/EdgeBundling", ["require", "../data/KDTree", "zrender/tool/vector"], function(B) {
            function D(s, r) {
                s = s.array,
                r = r.array;
                var G = r[0] - s[0]
                  , m = r[1] - s[1]
                  , l = r[2] - s[2]
                  , F = r[3] - s[3];
                return G * G + m * m + l * l + F * F
            }
            function u(i) {
                this.points = [i.mp0, i.mp1],
                this.group = i
            }
            function z(l) {
                var i = l.points;
                i[0][1] < i[1][1] || l instanceof u ? (this.array = [i[0][0], i[0][1], i[1][0], i[1][1]],
                this._startPoint = i[0],
                this._endPoint = i[1]) : (this.array = [i[1][0], i[1][1], i[0][0], i[0][1]],
                this._startPoint = i[1],
                this._endPoint = i[0]),
                this.ink = w(i[0], i[1]),
                this.edge = l,
                this.group = null 
            }
            function C() {
                this.edgeList = [],
                this.mp0 = y(),
                this.mp1 = y(),
                this.ink = 0
            }
            function q() {
                this.maxNearestEdge = 6,
                this.maxTurningAngle = Math.PI / 4,
                this.maxIteration = 20
            }
            var p = B("../data/KDTree")
              , E = B("zrender/tool/vector")
              , y = E.create
              , A = E.distSquare
              , w = E.dist
              , v = E.copy
              , x = E.clone;
            return z.prototype.getStartPoint = function() {
                return this._startPoint
            }
            ,
            z.prototype.getEndPoint = function() {
                return this._endPoint
            }
            ,
            C.prototype.addEdge = function(i) {
                i.group = this,
                this.edgeList.push(i)
            }
            ,
            C.prototype.removeEdge = function(i) {
                i.group = null ,
                this.edgeList.splice(this.edgeList.indexOf(i), 1)
            }
            ,
            q.prototype = {
                constructor: q,
                run: function(K) {
                    function M(l, i) {
                        return 1e-10 > A(l, i)
                    }
                    function J(r, t) {
                        for (var m = [], l = 0, s = 0; r.length > s; s++) {
                            l > 0 && M(r[s], m[l - 1]) || (m[l++] = x(r[s]))
                        }
                        return t[0] && !M(m[0], t[0]) && (m = m.reverse()),
                        m
                    }
                    for (var L = this._iterate(K), F = 0; F++ < this.maxIteration; ) {
                        for (var n = [], N = 0; L.groups.length > N; N++) {
                            n.push(new u(L.groups[N]))
                        }
                        var I = this._iterate(n);
                        if (0 >= I.savedInk) {
                            break
                        }
                        L = I
                    }
                    var H = []
                      , G = function(S, O) {
                        for (var m, T = 0; S.length > T; T++) {
                            var R = S[T];
                            if (R.edgeList[0] && R.edgeList[0].edge instanceof u) {
                                for (var Q = [], i = 0; R.edgeList.length > i; i++) {
                                    Q.push(R.edgeList[i].edge.group)
                                }
                                m = O ? O.slice() : [],
                                m.unshift(R.mp0),
                                m.push(R.mp1),
                                G(Q, m)
                            } else {
                                for (var i = 0; R.edgeList.length > i; i++) {
                                    var P = R.edgeList[i];
                                    m = O ? O.slice() : [],
                                    m.unshift(R.mp0),
                                    m.push(R.mp1),
                                    m.unshift(P.getStartPoint()),
                                    m.push(P.getEndPoint()),
                                    H.push({
                                        points: J(m, P.edge.points),
                                        rawEdge: P.edge
                                    })
                                }
                            }
                        }
                    }
                    ;
                    return G(L.groups),
                    H
                },
                _iterate: function(S) {
                    for (var M = [], K = [], I = 0, P = 0; S.length > P; P++) {
                        var N = new z(S[P]);
                        M.push(N)
                    }
                    for (var r = new p(M,4), T = [], J = y(), V = y(), H = 0, F = y(), Q = y(), Y = 0, P = 0; M.length > P; P++) {
                        var N = M[P];
                        if (!N.group) {
                            r.nearestN(N, this.maxNearestEdge, D, T);
                            for (var R = 0, O = null , G = null , Z = 0; T.length > Z; Z++) {
                                var t = T[Z]
                                  , l = 0;
                                t.group ? t.group !== G && (G = t.group,
                                H = this._calculateGroupEdgeInk(t.group, N, J, V),
                                l = t.group.ink + N.ink - H) : (H = this._calculateEdgeEdgeInk(N, t, J, V),
                                l = t.ink + N.ink - H),
                                l > R && (R = l,
                                O = t,
                                v(Q, V),
                                v(F, J),
                                Y = H)
                            }
                            if (O) {
                                I += R;
                                var i;
                                O.group || (i = new C,
                                K.push(i),
                                i.addEdge(O)),
                                i = O.group,
                                v(i.mp0, F),
                                v(i.mp1, Q),
                                i.ink = Y,
                                O.group.addEdge(N)
                            } else {
                                var i = new C;
                                K.push(i),
                                v(i.mp0, N.getStartPoint()),
                                v(i.mp1, N.getEndPoint()),
                                i.ink = N.ink,
                                i.addEdge(N)
                            }
                        }
                    }
                    return {
                        groups: K,
                        edges: M,
                        savedInk: I
                    }
                },
                _calculateEdgeEdgeInk: function() {
                    var l = []
                      , i = [];
                    return function(F, m, e, t) {
                        l[0] = F.getStartPoint(),
                        l[1] = m.getStartPoint(),
                        i[0] = F.getEndPoint(),
                        i[1] = m.getEndPoint(),
                        this._calculateMeetPoints(l, i, e, t);
                        var s = w(l[0], e) + w(e, t) + w(t, i[0]) + w(l[1], e) + w(t, i[1]);
                        return s
                    }
                }
                (),
                _calculateGroupEdgeInk: function(J, L, G, I) {
                    for (var K = [], F = [], m = 0; J.edgeList.length > m; m++) {
                        var M = J.edgeList[m];
                        K.push(M.getStartPoint()),
                        F.push(M.getEndPoint())
                    }
                    K.push(L.getStartPoint()),
                    F.push(L.getEndPoint()),
                    this._calculateMeetPoints(K, F, G, I);
                    for (var H = w(G, I), m = 0; K.length > m; m++) {
                        H += w(K[m], G) + w(F[m], I)
                    }
                    return H
                },
                _calculateMeetPoints: function() {
                    var l = y()
                      , i = y();
                    return function(G, s, m, F) {
                        E.set(l, 0, 0),
                        E.set(i, 0, 0);
                        for (var t = G.length, e = 0; t > e; e++) {
                            E.add(l, l, G[e])
                        }
                        E.scale(l, l, 1 / t),
                        t = s.length;
                        for (var e = 0; t > e; e++) {
                            E.add(i, i, s[e])
                        }
                        E.scale(i, i, 1 / t),
                        this._limitTurningAngle(G, l, i, m),
                        this._limitTurningAngle(s, i, l, F)
                    }
                }
                (),
                _limitTurningAngle: function() {
                    var o = y()
                      , m = y()
                      , r = y()
                      , l = y();
                    return function(M, n, e, F) {
                        var s = Math.cos(this.maxTurningAngle)
                          , t = Math.tan(this.maxTurningAngle);
                        E.sub(o, n, e),
                        E.normalize(o, o),
                        E.copy(F, n);
                        for (var I = 0, i = 0; M.length > i; i++) {
                            var J = M[i];
                            E.sub(m, J, n);
                            var N = E.len(m);
                            E.scale(m, m, 1 / N);
                            var L = E.dot(m, o);
                            if (s > L) {
                                E.scaleAndAdd(r, n, o, N * L);
                                var G = w(r, J)
                                  , K = G / t;
                                E.scaleAndAdd(l, r, o, -K);
                                var H = A(l, n);
                                H > I && (I = H,
                                E.copy(F, l))
                            }
                        }
                    }
                }
                ()
            },
            q
        }
        ),
        k("zrender/shape/Star", ["require", "../tool/math", "./Base", "../tool/util"], function(s) {
            var p = s("../tool/math")
              , v = p.sin
              , m = p.cos
              , l = Math.PI
              , u = s("./Base")
              , q = function(i) {
                u.call(this, i)
            }
            ;
            return q.prototype = {
                type: "star",
                buildPath: function(D, I) {
                    var w = I.n;
                    if (w && !(2 > w)) {
                        var i = I.x
                          , J = I.y
                          , B = I.r
                          , C = I.r0;
                        null  == C && (C = w > 4 ? B * m(2 * l / w) / m(l / w) : B / 3);
                        var z = l / w
                          , x = -l / 2
                          , A = i + B * m(x)
                          , E = J + B * v(x);
                        x += z;
                        var n = I.pointList = [];
                        n.push([A, E]);
                        for (var F, H = 0, G = 2 * w - 1; G > H; H++) {
                            F = 0 === H % 2 ? C : B,
                            n.push([i + F * m(x), J + F * v(x)]),
                            x += z
                        }
                        n.push([A, E]),
                        D.moveTo(n[0][0], n[0][1]);
                        for (var H = 0; n.length > H; H++) {
                            D.lineTo(n[H][0], n[H][1])
                        }
                        D.closePath()
                    }
                },
                getRect: function(n) {
                    if (n.__rect) {
                        return n.__rect
                    }
                    var i;
                    return i = "stroke" == n.brushType || "fill" == n.brushType ? n.lineWidth || 1 : 0,
                    n.__rect = {
                        x: Math.round(n.x - n.r - i / 2),
                        y: Math.round(n.y - n.r - i / 2),
                        width: 2 * n.r + i,
                        height: 2 * n.r + i
                    },
                    n.__rect
                }
            },
            s("../tool/util").inherits(q, u),
            q
        }
        ),
        k("zrender/shape/Heart", ["require", "./Base", "./util/PathProxy", "../tool/area", "../tool/util"], function(p) {
            var o = p("./Base")
              , q = p("./util/PathProxy")
              , m = p("../tool/area")
              , l = function(i) {
                o.call(this, i),
                this._pathProxy = new q
            }
            ;
            return l.prototype = {
                type: "heart",
                buildPath: function(s, r) {
                    var n = this._pathProxy || new q;
                    n.begin(s),
                    n.moveTo(r.x, r.y),
                    n.bezierCurveTo(r.x + r.a / 2, r.y - 2 * r.b / 3, r.x + 2 * r.a, r.y + r.b / 3, r.x, r.y + r.b),
                    n.bezierCurveTo(r.x - 2 * r.a, r.y + r.b / 3, r.x - r.a / 2, r.y - 2 * r.b / 3, r.x, r.y),
                    n.closePath()
                },
                getRect: function(i) {
                    return i.__rect ? i.__rect : (this._pathProxy.isEmpty() || this.buildPath(null , i),
                    this._pathProxy.fastBoundingRect())
                },
                isCover: function(r, i) {
                    var s = this.transformCoordToLocal(r, i);
                    return r = s[0],
                    i = s[1],
                    this.isCoverRect(r, i) ? m.isInsidePath(this._pathProxy.pathCommands, this.style.lineWidth, this.style.brushType, r, i) : void 0
                }
            },
            p("../tool/util").inherits(l, o),
            l
        }
        ),
        k("zrender/shape/Droplet", ["require", "./Base", "./util/PathProxy", "../tool/area", "../tool/util"], function(p) {
            var o = p("./Base")
              , q = p("./util/PathProxy")
              , m = p("../tool/area")
              , l = function(i) {
                o.call(this, i),
                this._pathProxy = new q
            }
            ;
            return l.prototype = {
                type: "droplet",
                buildPath: function(s, r) {
                    var n = this._pathProxy || new q;
                    n.begin(s),
                    n.moveTo(r.x, r.y + r.a),
                    n.bezierCurveTo(r.x + r.a, r.y + r.a, r.x + 3 * r.a / 2, r.y - r.a / 3, r.x, r.y - r.b),
                    n.bezierCurveTo(r.x - 3 * r.a / 2, r.y - r.a / 3, r.x - r.a, r.y + r.a, r.x, r.y + r.a),
                    n.closePath()
                },
                getRect: function(i) {
                    return i.__rect ? i.__rect : (this._pathProxy.isEmpty() || this.buildPath(null , i),
                    this._pathProxy.fastBoundingRect())
                },
                isCover: function(r, i) {
                    var s = this.transformCoordToLocal(r, i);
                    return r = s[0],
                    i = s[1],
                    this.isCoverRect(r, i) ? m.isInsidePath(this._pathProxy.pathCommands, this.style.lineWidth, this.style.brushType, r, i) : void 0
                }
            },
            p("../tool/util").inherits(l, o),
            l
        }
        ),
        k("zrender/tool/math", [], function() {
            function p(n, i) {
                return Math.sin(i ? n * l : n)
            }
            function o(n, i) {
                return Math.cos(i ? n * l : n)
            }
            function q(i) {
                return i * l
            }
            function m(i) {
                return i / l
            }
            var l = Math.PI / 180;
            return {
                sin: p,
                cos: o,
                degreeToRadian: q,
                radianToDegree: m
            }
        }
        ),
        k("zrender/shape/util/PathProxy", ["require", "../../tool/vector"], function(o) {
            var m = o("../../tool/vector")
              , p = function(n, i) {
                this.command = n,
                this.points = i || null 
            }
              , l = function() {
                this.pathCommands = [],
                this._ctx = null ,
                this._min = [],
                this._max = []
            }
            ;
            return l.prototype.fastBoundingRect = function() {
                var z = this._min
                  , u = this._max;
                z[0] = z[1] = 1 / 0,
                u[0] = u[1] = -1 / 0;
                for (var x = 0; this.pathCommands.length > x; x++) {
                    var A = this.pathCommands[x]
                      , t = A.points;
                    switch (A.command) {
                    case "M":
                        m.min(z, z, t),
                        m.max(u, u, t);
                        break;
                    case "L":
                        m.min(z, z, t),
                        m.max(u, u, t);
                        break;
                    case "C":
                        for (var q = 0; 6 > q; q += 2) {
                            z[0] = Math.min(z[0], z[0], t[q]),
                            z[1] = Math.min(z[1], z[1], t[q + 1]),
                            u[0] = Math.max(u[0], u[0], t[q]),
                            u[1] = Math.max(u[1], u[1], t[q + 1])
                        }
                        break;
                    case "Q":
                        for (var q = 0; 4 > q; q += 2) {
                            z[0] = Math.min(z[0], z[0], t[q]),
                            z[1] = Math.min(z[1], z[1], t[q + 1]),
                            u[0] = Math.max(u[0], u[0], t[q]),
                            u[1] = Math.max(u[1], u[1], t[q + 1])
                        }
                        break;
                    case "A":
                        var B = t[0]
                          , w = t[1]
                          , y = t[2]
                          , v = t[3];
                        z[0] = Math.min(z[0], z[0], B - y),
                        z[1] = Math.min(z[1], z[1], w - v),
                        u[0] = Math.max(u[0], u[0], B + y),
                        u[1] = Math.max(u[1], u[1], w + v)
                    }
                }
                return {
                    x: z[0],
                    y: z[1],
                    width: u[0] - z[0],
                    height: u[1] - z[1]
                }
            }
            ,
            l.prototype.begin = function(i) {
                return this._ctx = i || null ,
                this.pathCommands.length = 0,
                this
            }
            ,
            l.prototype.moveTo = function(n, i) {
                return this.pathCommands.push(new p("M",[n, i])),
                this._ctx && this._ctx.moveTo(n, i),
                this
            }
            ,
            l.prototype.lineTo = function(n, i) {
                return this.pathCommands.push(new p("L",[n, i])),
                this._ctx && this._ctx.lineTo(n, i),
                this
            }
            ,
            l.prototype.bezierCurveTo = function(v, s, q, n, w, u) {
                return this.pathCommands.push(new p("C",[v, s, q, n, w, u])),
                this._ctx && this._ctx.bezierCurveTo(v, s, q, n, w, u),
                this
            }
            ,
            l.prototype.quadraticCurveTo = function(s, r, q, n) {
                return this.pathCommands.push(new p("Q",[s, r, q, n])),
                this._ctx && this._ctx.quadraticCurveTo(s, r, q, n),
                this
            }
            ,
            l.prototype.arc = function(v, s, q, n, w, u) {
                return this.pathCommands.push(new p("A",[v, s, q, q, n, w - n, 0, u ? 0 : 1])),
                this._ctx && this._ctx.arc(v, s, q, n, w, u),
                this
            }
            ,
            l.prototype.arcTo = function(u, s, v, r, q) {
                return this._ctx && this._ctx.arcTo(u, s, v, r, q),
                this
            }
            ,
            l.prototype.rect = function(s, r, u, q) {
                return this._ctx && this._ctx.rect(s, r, u, q),
                this
            }
            ,
            l.prototype.closePath = function() {
                return this.pathCommands.push(new p("z")),
                this._ctx && this._ctx.closePath(),
                this
            }
            ,
            l.prototype.isEmpty = function() {
                return 0 === this.pathCommands.length
            }
            ,
            l.PathSegment = p,
            l
        }
        ),
        k("zrender/shape/Line", ["require", "./Base", "./util/dashedLineTo", "../tool/util"], function(o) {
            var m = o("./Base")
              , p = o("./util/dashedLineTo")
              , l = function(i) {
                this.brushTypeOnly = "stroke",
                this.textPosition = "end",
                m.call(this, i)
            }
            ;
            return l.prototype = {
                type: "line",
                buildPath: function(r, q) {
                    if (q.lineType && "solid" != q.lineType) {
                        if ("dashed" == q.lineType || "dotted" == q.lineType) {
                            var n = (q.lineWidth || 1) * ("dashed" == q.lineType ? 5 : 1);
                            p(r, q.xStart, q.yStart, q.xEnd, q.yEnd, n)
                        }
                    } else {
                        r.moveTo(q.xStart, q.yStart),
                        r.lineTo(q.xEnd, q.yEnd)
                    }
                },
                getRect: function(n) {
                    if (n.__rect) {
                        return n.__rect
                    }
                    var i = n.lineWidth || 1;
                    return n.__rect = {
                        x: Math.min(n.xStart, n.xEnd) - i,
                        y: Math.min(n.yStart, n.yEnd) - i,
                        width: Math.abs(n.xStart - n.xEnd) + i,
                        height: Math.abs(n.yStart - n.yEnd) + i
                    },
                    n.__rect
                }
            },
            o("../tool/util").inherits(l, m),
            l
        }
        ),
        k("zrender/shape/BezierCurve", ["require", "./Base", "../tool/util"], function(l) {
            var i = l("./Base")
              , m = function(n) {
                this.brushTypeOnly = "stroke",
                this.textPosition = "end",
                i.call(this, n)
            }
            ;
            return m.prototype = {
                type: "bezier-curve",
                buildPath: function(o, n) {
                    o.moveTo(n.xStart, n.yStart),
                    n.cpX2 !== void 0 && n.cpY2 !== void 0 ? o.bezierCurveTo(n.cpX1, n.cpY1, n.cpX2, n.cpY2, n.xEnd, n.yEnd) : o.quadraticCurveTo(n.cpX1, n.cpY1, n.xEnd, n.yEnd)
                },
                getRect: function(x) {
                    if (x.__rect) {
                        return x.__rect
                    }
                    var u = Math.min(x.xStart, x.xEnd, x.cpX1)
                      , z = Math.min(x.yStart, x.yEnd, x.cpY1)
                      , q = Math.max(x.xStart, x.xEnd, x.cpX1)
                      , p = Math.max(x.yStart, x.yEnd, x.cpY1)
                      , y = x.cpX2
                      , w = x.cpY2;
                    y !== void 0 && w !== void 0 && (u = Math.min(u, y),
                    z = Math.min(z, w),
                    q = Math.max(q, y),
                    p = Math.max(p, w));
                    var v = x.lineWidth || 1;
                    return x.__rect = {
                        x: u - v,
                        y: z - v,
                        width: q - u + v,
                        height: p - z + v
                    },
                    x.__rect
                }
            },
            l("../tool/util").inherits(m, i),
            m
        }
        ),
        k("zrender/shape/util/dashedLineTo", [], function() {
            var i = [5, 5];
            return function(A, q, x, z, p, e) {
                if (A.setLineDash) {
                    return i[0] = i[1] = e,
                    A.setLineDash(i),
                    A.moveTo(q, x),
                    A.lineTo(z, p),
                    void 0
                }
                e = "number" != typeof e ? 5 : e;
                var B = z - q
                  , w = p - x
                  , y = Math.floor(Math.sqrt(B * B + w * w) / e);
                B /= y,
                w /= y;
                for (var v = !0, u = 0; y > u; ++u) {
                    v ? A.moveTo(q, x) : A.lineTo(q, x),
                    v = !v,
                    q += B,
                    x += w
                }
                A.lineTo(z, p)
            }
        }
        ),
        k("zrender/shape/Polygon", ["require", "./Base", "./util/smoothSpline", "./util/smoothBezier", "./util/dashedLineTo", "../tool/util"], function(q) {
            var p = q("./Base")
              , s = q("./util/smoothSpline")
              , m = q("./util/smoothBezier")
              , l = q("./util/dashedLineTo")
              , r = function(i) {
                p.call(this, i)
            }
            ;
            return r.prototype = {
                type: "polygon",
                buildPath: function(z, B) {
                    var n = B.pointList;
                    if (!(2 > n.length)) {
                        if (B.smooth && "spline" !== B.smooth) {
                            var i = m(n, B.smooth, !0, B.smoothConstraint);
                            z.moveTo(n[0][0], n[0][1]);
                            for (var C, x, y, v = n.length, u = 0; v > u; u++) {
                                C = i[2 * u],
                                x = i[2 * u + 1],
                                y = n[(u + 1) % v],
                                z.bezierCurveTo(C[0], C[1], x[0], x[1], y[0], y[1])
                            }
                        } else {
                            if ("spline" === B.smooth && (n = s(n, !0)),
                            B.lineType && "solid" != B.lineType) {
                                if ("dashed" == B.lineType || "dotted" == B.lineType) {
                                    var w = B._dashLength || (B.lineWidth || 1) * ("dashed" == B.lineType ? 5 : 1);
                                    B._dashLength = w,
                                    z.moveTo(n[0][0], n[0][1]);
                                    for (var u = 1, A = n.length; A > u; u++) {
                                        l(z, n[u - 1][0], n[u - 1][1], n[u][0], n[u][1], w)
                                    }
                                    l(z, n[n.length - 1][0], n[n.length - 1][1], n[0][0], n[0][1], w)
                                }
                            } else {
                                z.moveTo(n[0][0], n[0][1]);
                                for (var u = 1, A = n.length; A > u; u++) {
                                    z.lineTo(n[u][0], n[u][1])
                                }
                                z.lineTo(n[0][0], n[0][1])
                            }
                        }
                        z.closePath()
                    }
                },
                getRect: function(z) {
                    if (z.__rect) {
                        return z.__rect
                    }
                    for (var B = Number.MAX_VALUE, w = Number.MIN_VALUE, y = Number.MAX_VALUE, A = Number.MIN_VALUE, v = z.pointList, u = 0, C = v.length; C > u; u++) {
                        B > v[u][0] && (B = v[u][0]),
                        v[u][0] > w && (w = v[u][0]),
                        y > v[u][1] && (y = v[u][1]),
                        v[u][1] > A && (A = v[u][1])
                    }
                    var x;
                    return x = "stroke" == z.brushType || "fill" == z.brushType ? z.lineWidth || 1 : 0,
                    z.__rect = {
                        x: Math.round(B - x / 2),
                        y: Math.round(y - x / 2),
                        width: w - B + x,
                        height: A - y + x
                    },
                    z.__rect
                }
            },
            q("../tool/util").inherits(r, p),
            r
        }
        ),
        k("echarts/util/shape/normalIsCover", [], function() {
            return function(l, i) {
                var m = this.transformCoordToLocal(l, i);
                return l = m[0],
                i = m[1],
                this.isCoverRect(l, i)
            }
        }
        ),
        k("zrender/shape/util/smoothSpline", ["require", "../../tool/vector"], function(l) {
            function i(x, z, u, w, y, q, p) {
                var A = 0.5 * (u - x)
                  , v = 0.5 * (w - z);
                return (2 * (z - u) + A + v) * p + (-3 * (z - u) - 2 * A - v) * q + A * y + z
            }
            var m = l("../../tool/vector");
            return function(C, A) {
                for (var G = C.length, t = [], n = 0, I = 1; G > I; I++) {
                    n += m.distance(C[I - 1], C[I])
                }
                var z = n / 5;
                z = G > z ? G : z;
                for (var I = 0; z > I; I++) {
                    var B, w, v, x = I / (z - 1) * (A ? G : G - 1), D = Math.floor(x), q = x - D, E = C[D % G];
                    A ? (B = C[(D - 1 + G) % G],
                    w = C[(D + 1) % G],
                    v = C[(D + 2) % G]) : (B = C[0 === D ? D : D - 1],
                    w = C[D > G - 2 ? G - 1 : D + 1],
                    v = C[D > G - 3 ? G - 1 : D + 2]);
                    var H = q * q
                      , F = q * H;
                    t.push([i(B[0], E[0], w[0], v[0], q, H, F), i(B[1], E[1], w[1], v[1], q, H, F)])
                }
                return t
            }
        }
        ),
        k("zrender/shape/util/smoothBezier", ["require", "../../tool/vector"], function(l) {
            var i = l("../../tool/vector");
            return function(K, C, G, O) {
                var B, z, x, E, H = [], D = [], q = [], t = [], L = !!O;
                if (L) {
                    x = [1 / 0, 1 / 0],
                    E = [-1 / 0, -1 / 0];
                    for (var A = 0, M = K.length; M > A; A++) {
                        i.min(x, x, K[A]),
                        i.max(E, E, K[A])
                    }
                    i.min(x, x, O[0]),
                    i.max(E, E, O[1])
                }
                for (var A = 0, M = K.length; M > A; A++) {
                    var B, z, w = K[A];
                    if (G) {
                        B = K[A ? A - 1 : M - 1],
                        z = K[(A + 1) % M]
                    } else {
                        if (0 === A || A === M - 1) {
                            H.push(i.clone(K[A]));
                            continue
                        }
                        B = K[A - 1],
                        z = K[A + 1]
                    }
                    i.sub(D, z, B),
                    i.scale(D, D, C);
                    var v = i.distance(w, B)
                      , I = i.distance(w, z)
                      , N = v + I;
                    0 !== N && (v /= N,
                    I /= N),
                    i.scale(q, D, -v),
                    i.scale(t, D, I);
                    var J = i.add([], w, q)
                      , F = i.add([], w, t);
                    L && (i.max(J, J, x),
                    i.min(J, J, E),
                    i.max(F, F, x),
                    i.min(F, F, E)),
                    H.push(J),
                    H.push(F)
                }
                return G && H.push(i.clone(H.shift())),
                H
            }
        }
        ),
        k("echarts/util/ecQuery", ["require", "zrender/tool/util"], function(p) {
            function o(u, s) {
                if (void 0 !== u) {
                    if (!s) {
                        return u
                    }
                    s = s.split(".");
                    for (var v = s.length, r = 0; v > r; ) {
                        if (u = u[s[r]],
                        u === void 0) {
                            return
                        }
                        r++
                    }
                    return u
                }
            }
            function q(t, v) {
                for (var s, r = 0, u = t.length; u > r; r++) {
                    if (s = o(t[r], v),
                    s !== void 0) {
                        return s
                    }
                }
            }
            function m(u, w) {
                for (var s, v = u.length; v--; ) {
                    var t = o(u[v], w);
                    t !== void 0 && (s === void 0 ? s = l.clone(t) : l.merge(s, t, !0))
                }
                return s
            }
            var l = p("zrender/tool/util");
            return {
                query: o,
                deepQuery: q,
                deepMerge: m
            }
        }
        ),
        k("echarts/util/number", [], function() {
            function p(i) {
                return i.replace(/^\s+/, "").replace(/\s+$/, "")
            }
            function o(e, i) {
                return "string" == typeof e ? p(e).match(/%$/) ? parseFloat(e) / 100 * i : parseFloat(e) : e
            }
            function q(i, r) {
                return [o(r[0], i.getWidth()), o(r[1], i.getHeight())]
            }
            function m(s, t) {
                t instanceof Array || (t = [0, t]);
                var r = Math.min(s.getWidth(), s.getHeight()) / 2;
                return [o(t[0], r), o(t[1], r)]
            }
            function l(i) {
                return isNaN(i) ? "-" : (i = (i + "").split("."),
                i[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, "$1,") + (i.length > 1 ? "." + i[1] : ""))
            }
            return {
                parsePercent: o,
                parseCenter: q,
                parseRadius: m,
                addCommas: l
            }
        }
        ),
        k("echarts/data/KDTree", ["require", "./quickSelect"], function(o) {
            function m(n, i) {
                this.left = null ,
                this.right = null ,
                this.axis = n,
                this.data = i
            }
            var p = o("./quickSelect")
              , l = function(n, i) {
                n.length && (i || (i = n[0].array.length),
                this.dimension = i,
                this.root = this._buildTree(n, 0, n.length - 1, 0),
                this._stack = [],
                this._nearstNList = [])
            }
            ;
            return l.prototype._buildTree = function(w, t, q, x) {
                if (t > q) {
                    return null 
                }
                var v = Math.floor((t + q) / 2);
                v = p(w, t, q, v, function(r, i) {
                    return r.array[x] - i.array[x]
                }
                );
                var u = w[v]
                  , n = new m(x,u);
                return x = (x + 1) % this.dimension,
                q > t && (n.left = this._buildTree(w, t, v - 1, x),
                n.right = this._buildTree(w, v + 1, q, x)),
                n
            }
            ,
            l.prototype.nearest = function(z, B) {
                var v = this.root
                  , x = this._stack
                  , A = 0
                  , u = 1 / 0
                  , q = null ;
                for (v.data !== z && (u = B(v.data, z),
                q = v),
                z.array[v.axis] < v.data.array[v.axis] ? (v.right && (x[A++] = v.right),
                v.left && (x[A++] = v.left)) : (v.left && (x[A++] = v.left),
                v.right && (x[A++] = v.right)); A--; ) {
                    v = x[A];
                    var C = z.array[v.axis] - v.data.array[v.axis]
                      , w = 0 > C
                      , y = !1;
                    C *= C,
                    u > C && (C = B(v.data, z),
                    u > C && v.data !== z && (u = C,
                    q = v),
                    y = !0),
                    w ? (y && v.right && (x[A++] = v.right),
                    v.left && (x[A++] = v.left)) : (y && v.left && (x[A++] = v.left),
                    v.right && (x[A++] = v.right))
                }
                return q.data
            }
            ,
            l.prototype._addNearest = function(u, s, v) {
                for (var r = this._nearstNList, q = u - 1; q > 0 && !(s >= r[q - 1].dist); q--) {
                    r[q].dist = r[q - 1].dist,
                    r[q].node = r[q - 1].node
                }
                r[q].dist = s,
                r[q].node = v
            }
            ,
            l.prototype.nearestN = function(C, E, v, A) {
                if (0 >= E) {
                    return A.length = 0,
                    A
                }
                for (var D = this.root, u = this._stack, q = 0, F = this._nearstNList, z = 0; E > z; z++) {
                    F[z] || (F[z] = {}),
                    F[z].dist = 0,
                    F[z].node = null 
                }
                var B = v(D.data, C)
                  , x = 0;
                for (D.data !== C && (x++,
                this._addNearest(x, B, D)),
                C.array[D.axis] < D.data.array[D.axis] ? (D.right && (u[q++] = D.right),
                D.left && (u[q++] = D.left)) : (D.left && (u[q++] = D.left),
                D.right && (u[q++] = D.right)); q--; ) {
                    D = u[q];
                    var B = C.array[D.axis] - D.data.array[D.axis]
                      , w = 0 > B
                      , y = !1;
                    B *= B,
                    (E > x || F[x - 1].dist > B) && (B = v(D.data, C),
                    (E > x || F[x - 1].dist > B) && D.data !== C && (E > x && x++,
                    this._addNearest(x, B, D)),
                    y = !0),
                    w ? (y && D.right && (u[q++] = D.right),
                    D.left && (u[q++] = D.left)) : (y && D.left && (u[q++] = D.left),
                    D.right && (u[q++] = D.right))
                }
                for (var z = 0; x > z; z++) {
                    A[z] = F[z].node.data
                }
                return A.length = x,
                A
            }
            ,
            l
        }
        ),
        k("echarts/data/quickSelect", ["require"], function() {
            function o(n, i) {
                return n - i
            }
            function m(s, r, u) {
                var q = s[r];
                s[r] = s[u],
                s[u] = q
            }
            function p(x, z, u, t, y) {
                for (var w = z; u > z; ) {
                    var w = Math.round((u + z) / 2)
                      , v = x[w];
                    m(x, w, u),
                    w = z;
                    for (var q = z; u - 1 >= q; q++) {
                        y(v, x[q]) >= 0 && (m(x, q, w),
                        w++)
                    }
                    if (m(x, u, w),
                    w === t) {
                        return w
                    }
                    t > w ? z = w + 1 : u = w - 1
                }
                return z
            }
            function l(q, n, e, u, s) {
                return 3 >= arguments.length && (u = n,
                s = 2 == arguments.length ? o : e,
                n = 0,
                e = q.length - 1),
                p(q, n, e, u, s)
            }
            return l
        }
        ),
        k("echarts/component/dataView", ["require", "./base", "../config", "zrender/tool/util", "../component"], function(p) {
            function o(u, s, r, n, v) {
                q.call(this, u, s, r, n, v),
                this.dom = v.dom,
                this._tDom = document.createElement("div"),
                this._textArea = document.createElement("textArea"),
                this._buttonRefresh = document.createElement("button"),
                this._buttonClose = document.createElement("button"),
                this._hasShow = !1,
                this._zrHeight = r.getHeight(),
                this._zrWidth = r.getWidth(),
                this._tDom.className = "echarts-dataview",
                this.hide(),
                this.dom.firstChild.appendChild(this._tDom),
                window.addEventListener ? (this._tDom.addEventListener("click", this._stop),
                this._tDom.addEventListener("mousewheel", this._stop),
                this._tDom.addEventListener("mousemove", this._stop),
                this._tDom.addEventListener("mousedown", this._stop),
                this._tDom.addEventListener("mouseup", this._stop),
                this._tDom.addEventListener("touchstart", this._stop),
                this._tDom.addEventListener("touchmove", this._stop),
                this._tDom.addEventListener("touchend", this._stop)) : (this._tDom.attachEvent("onclick", this._stop),
                this._tDom.attachEvent("onmousewheel", this._stop),
                this._tDom.attachEvent("onmousemove", this._stop),
                this._tDom.attachEvent("onmousedown", this._stop),
                this._tDom.attachEvent("onmouseup", this._stop))
            }
            var q = p("./base")
              , m = p("../config")
              , l = p("zrender/tool/util");
            return o.prototype = {
                type: m.COMPONENT_TYPE_DATAVIEW,
                _lang: ["Data View", "close", "refresh"],
                _gCssText: "position:absolute;display:block;overflow:hidden;transition:height 0.8s,background-color 1s;-moz-transition:height 0.8s,background-color 1s;-webkit-transition:height 0.8s,background-color 1s;-o-transition:height 0.8s,background-color 1s;z-index:1;left:0;top:0;",
                hide: function() {
                    this._sizeCssText = "width:" + this._zrWidth + "px;height:" + 0 + "px;background-color:#f0ffff;",
                    this._tDom.style.cssText = this._gCssText + this._sizeCssText
                },
                show: function(u) {
                    this._hasShow = !0;
                    var s = this.query(this.option, "toolbox.feature.dataView.lang") || this._lang;
                    this.option = u,
                    this._tDom.innerHTML = '<p style="padding:8px 0;margin:0 0 10px 0;border-bottom:1px solid #eee">' + (s[0] || this._lang[0]) + "</p>";
                    var v = this.query(this.option, "toolbox.feature.dataView.optionToContent");
                    "function" != typeof v ? this._textArea.value = this._optionToContent() : (this._textArea = document.createElement("div"),
                    this._textArea.innerHTML = v(this.option)),
                    this._textArea.style.cssText = "display:block;margin:0 0 8px 0;padding:4px 6px;overflow:auto;width:100%;height:" + (this._zrHeight - 100) + "px;",
                    this._tDom.appendChild(this._textArea),
                    this._buttonClose.style.cssText = "float:right;padding:1px 6px;",
                    this._buttonClose.innerHTML = s[1] || this._lang[1];
                    var r = this;
                    this._buttonClose.onclick = function() {
                        r.hide()
                    }
                    ,
                    this._tDom.appendChild(this._buttonClose),
                    this.query(this.option, "toolbox.feature.dataView.readOnly") === !1 ? (this._buttonRefresh.style.cssText = "float:right;margin-right:10px;padding:1px 6px;",
                    this._buttonRefresh.innerHTML = s[2] || this._lang[2],
                    this._buttonRefresh.onclick = function() {
                        r._save()
                    }
                    ,
                    this._textArea.readOnly = !1,
                    this._textArea.style.cursor = "default") : (this._buttonRefresh.style.cssText = "display:none",
                    this._textArea.readOnly = !0,
                    this._textArea.style.cursor = "text"),
                    this._tDom.appendChild(this._buttonRefresh),
                    this._sizeCssText = "width:" + this._zrWidth + "px;height:" + this._zrHeight + "px;background-color:#fff;",
                    this._tDom.style.cssText = this._gCssText + this._sizeCssText
                },
                _optionToContent: function() {
                    var z, B, v, A, u, i, C = [], x = "";
                    if (this.option.xAxis) {
                        for (C = this.option.xAxis instanceof Array ? this.option.xAxis : [this.option.xAxis],
                        z = 0,
                        A = C.length; A > z; z++) {
                            if ("category" == (C[z].type || "category")) {
                                for (i = [],
                                B = 0,
                                v = C[z].data.length; v > B; B++) {
                                    i.push(this.getDataFromOption(C[z].data[B]))
                                }
                                x += i.join(", ") + "\n\n"
                            }
                        }
                    }
                    if (this.option.yAxis) {
                        for (C = this.option.yAxis instanceof Array ? this.option.yAxis : [this.option.yAxis],
                        z = 0,
                        A = C.length; A > z; z++) {
                            if ("category" == C[z].type) {
                                for (i = [],
                                B = 0,
                                v = C[z].data.length; v > B; B++) {
                                    i.push(this.getDataFromOption(C[z].data[B]))
                                }
                                x += i.join(", ") + "\n\n"
                            }
                        }
                    }
                    var y, w = this.option.series;
                    for (z = 0,
                    A = w.length; A > z; z++) {
                        for (i = [],
                        B = 0,
                        v = w[z].data.length; v > B; B++) {
                            u = w[z].data[B],
                            y = w[z].type == m.CHART_TYPE_PIE || w[z].type == m.CHART_TYPE_MAP ? (u.name || "-") + ":" : "",
                            w[z].type == m.CHART_TYPE_SCATTER && (u = this.getDataFromOption(u).join(", ")),
                            i.push(y + this.getDataFromOption(u))
                        }
                        x += (w[z].name || "-") + " : \n",
                        x += i.join(w[z].type == m.CHART_TYPE_SCATTER ? "\n" : ", "),
                        x += "\n\n"
                    }
                    return x
                },
                _save: function() {
                    var v = this.query(this.option, "toolbox.feature.dataView.contentToOption");
                    if ("function" != typeof v) {
                        for (var s = this._textArea.value.split("\n"), x = [], i = 0, w = s.length; w > i; i++) {
                            s[i] = this._trim(s[i]),
                            "" !== s[i] && x.push(s[i])
                        }
                        this._contentToOption(x)
                    } else {
                        v(this._textArea, this.option)
                    }
                    this.hide();
                    var u = this;
                    setTimeout(function() {
                        u.messageCenter && u.messageCenter.dispatch(m.EVENT.DATA_VIEW_CHANGED, null , {
                            option: u.option
                        }, u.myChart)
                    }
                    , u.canvasSupported ? 800 : 100)
                },
                _contentToOption: function(A) {
                    var C, v, B, u, i, D, y, z = [], x = 0;
                    if (this.option.xAxis) {
                        for (z = this.option.xAxis instanceof Array ? this.option.xAxis : [this.option.xAxis],
                        C = 0,
                        u = z.length; u > C; C++) {
                            if ("category" == (z[C].type || "category")) {
                                for (D = A[x].split(","),
                                v = 0,
                                B = z[C].data.length; B > v; v++) {
                                    y = this._trim(D[v] || ""),
                                    i = z[C].data[v],
                                    z[C].data[v].value !== void 0 ? z[C].data[v].value = y : z[C].data[v] = y
                                }
                                x++
                            }
                        }
                    }
                    if (this.option.yAxis) {
                        for (z = this.option.yAxis instanceof Array ? this.option.yAxis : [this.option.yAxis],
                        C = 0,
                        u = z.length; u > C; C++) {
                            if ("category" == z[C].type) {
                                for (D = A[x].split(","),
                                v = 0,
                                B = z[C].data.length; B > v; v++) {
                                    y = this._trim(D[v] || ""),
                                    i = z[C].data[v],
                                    z[C].data[v].value !== void 0 ? z[C].data[v].value = y : z[C].data[v] = y
                                }
                                x++
                            }
                        }
                    }
                    var w = this.option.series;
                    for (C = 0,
                    u = w.length; u > C; C++) {
                        if (x++,
                        w[C].type == m.CHART_TYPE_SCATTER) {
                            for (var v = 0, B = w[C].data.length; B > v; v++) {
                                D = A[x],
                                y = D.replace(" ", "").split(","),
                                w[C].data[v].value !== void 0 ? w[C].data[v].value = y : w[C].data[v] = y,
                                x++
                            }
                        } else {
                            D = A[x].split(",");
                            for (var v = 0, B = w[C].data.length; B > v; v++) {
                                y = (D[v] || "").replace(/.*:/, ""),
                                y = this._trim(y),
                                y = "-" != y && "" !== y ? y - 0 : "-",
                                w[C].data[v].value !== void 0 ? w[C].data[v].value = y : w[C].data[v] = y
                            }
                            x++
                        }
                    }
                },
                _trim: function(n) {
                    var i = RegExp("(^[\\s\\t\\xa0\\u3000]+)|([\\u3000\\xa0\\s\\t]+$)", "g");
                    return n.replace(i, "")
                },
                _stop: function(i) {
                    i = i || window.event,
                    i.stopPropagation ? i.stopPropagation() : i.cancelBubble = !0
                },
                resize: function() {
                    this._zrHeight = this.zr.getHeight(),
                    this._zrWidth = this.zr.getWidth(),
                    this._tDom.offsetHeight > 10 && (this._sizeCssText = "width:" + this._zrWidth + "px;height:" + this._zrHeight + "px;background-color:#fff;",
                    this._tDom.style.cssText = this._gCssText + this._sizeCssText,
                    this._textArea.style.cssText = "display:block;margin:0 0 8px 0;padding:4px 6px;overflow:auto;width:100%;height:" + (this._zrHeight - 100) + "px;")
                },
                dispose: function() {
                    window.removeEventListener ? (this._tDom.removeEventListener("click", this._stop),
                    this._tDom.removeEventListener("mousewheel", this._stop),
                    this._tDom.removeEventListener("mousemove", this._stop),
                    this._tDom.removeEventListener("mousedown", this._stop),
                    this._tDom.removeEventListener("mouseup", this._stop),
                    this._tDom.removeEventListener("touchstart", this._stop),
                    this._tDom.removeEventListener("touchmove", this._stop),
                    this._tDom.removeEventListener("touchend", this._stop)) : (this._tDom.detachEvent("onclick", this._stop),
                    this._tDom.detachEvent("onmousewheel", this._stop),
                    this._tDom.detachEvent("onmousemove", this._stop),
                    this._tDom.detachEvent("onmousedown", this._stop),
                    this._tDom.detachEvent("onmouseup", this._stop)),
                    this._buttonRefresh.onclick = null ,
                    this._buttonClose.onclick = null ,
                    this._hasShow && (this._tDom.removeChild(this._textArea),
                    this._tDom.removeChild(this._buttonRefresh),
                    this._tDom.removeChild(this._buttonClose)),
                    this._textArea = null ,
                    this._buttonRefresh = null ,
                    this._buttonClose = null ,
                    this.dom.firstChild.removeChild(this._tDom),
                    this._tDom = null 
                }
            },
            l.inherits(o, q),
            p("../component").define("dataView", o),
            o
        }
        ),
        k("echarts/util/shape/Cross", ["require", "zrender/shape/Base", "zrender/shape/Line", "zrender/tool/util", "./normalIsCover"], function(p) {
            function o(i) {
                q.call(this, i)
            }
            var q = p("zrender/shape/Base")
              , m = p("zrender/shape/Line")
              , l = p("zrender/tool/util");
            return o.prototype = {
                type: "cross",
                buildPath: function(r, i) {
                    var s = i.rect;
                    i.xStart = s.x,
                    i.xEnd = s.x + s.width,
                    i.yStart = i.yEnd = i.y,
                    m.prototype.buildPath(r, i),
                    i.xStart = i.xEnd = i.x,
                    i.yStart = s.y,
                    i.yEnd = s.y + s.height,
                    m.prototype.buildPath(r, i)
                },
                getRect: function(i) {
                    return i.rect
                },
                isCover: p("./normalIsCover")
            },
            l.inherits(o, q),
            o
        }
        ),
        k("zrender/shape/Sector", ["require", "../tool/math", "../tool/computeBoundingBox", "../tool/vector", "./Base", "../tool/util"], function(x) {
            var z = x("../tool/math")
              , q = x("../tool/computeBoundingBox")
              , v = x("../tool/vector")
              , y = x("./Base")
              , p = v.create()
              , m = v.create()
              , A = v.create()
              , u = v.create()
              , w = function(i) {
                y.call(this, i)
            }
            ;
            return w.prototype = {
                type: "sector",
                buildPath: function(I, C) {
                    var G = C.x
                      , J = C.y
                      , B = C.r0 || 0
                      , t = C.r
                      , K = C.startAngle
                      , F = C.endAngle
                      , H = C.clockWise || !1;
                    K = z.degreeToRadian(K),
                    F = z.degreeToRadian(F),
                    H || (K = -K,
                    F = -F);
                    var E = z.cos(K)
                      , D = z.sin(K);
                    I.moveTo(E * B + G, D * B + J),
                    I.lineTo(E * t + G, D * t + J),
                    I.arc(G, J, t, K, F, !H),
                    I.lineTo(z.cos(F) * B + G, z.sin(F) * B + J),
                    0 !== B && I.arc(G, J, B, F, K, H),
                    I.closePath()
                },
                getRect: function(t) {
                    if (t.__rect) {
                        return t.__rect
                    }
                    var n = t.x
                      , r = t.y
                      , i = t.r0 || 0
                      , l = t.r
                      , o = z.degreeToRadian(t.startAngle)
                      , B = z.degreeToRadian(t.endAngle)
                      , s = t.clockWise;
                    return s || (o = -o,
                    B = -B),
                    i > 1 ? q.arc(n, r, i, o, B, !s, p, A) : (p[0] = A[0] = n,
                    p[1] = A[1] = r),
                    q.arc(n, r, l, o, B, !s, m, u),
                    v.min(p, p, m),
                    v.max(A, A, u),
                    t.__rect = {
                        x: p[0],
                        y: p[1],
                        width: A[0] - p[0],
                        height: A[1] - p[1]
                    },
                    t.__rect
                }
            },
            x("../tool/util").inherits(w, y),
            w
        }
        ),
        k("echarts/util/shape/Candle", ["require", "zrender/shape/Base", "zrender/tool/util", "./normalIsCover"], function(o) {
            function m(i) {
                p.call(this, i)
            }
            var p = o("zrender/shape/Base")
              , l = o("zrender/tool/util");
            return m.prototype = {
                type: "candle",
                _numberOrder: function(n, i) {
                    return i - n
                },
                buildPath: function(q, i) {
                    var r = l.clone(i.y).sort(this._numberOrder);
                    q.moveTo(i.x, r[3]),
                    q.lineTo(i.x, r[2]),
                    q.moveTo(i.x - i.width / 2, r[2]),
                    q.rect(i.x - i.width / 2, r[2], i.width, r[1] - r[2]),
                    q.moveTo(i.x, r[1]),
                    q.lineTo(i.x, r[0])
                },
                getRect: function(q) {
                    if (!q.__rect) {
                        var i = 0;
                        ("stroke" == q.brushType || "fill" == q.brushType) && (i = q.lineWidth || 1);
                        var r = l.clone(q.y).sort(this._numberOrder);
                        q.__rect = {
                            x: Math.round(q.x - q.width / 2 - i / 2),
                            y: Math.round(r[3] - i / 2),
                            width: q.width + i,
                            height: r[0] - r[3] + i
                        }
                    }
                    return q.__rect
                },
                isCover: o("./normalIsCover")
            },
            l.inherits(m, p),
            m
        }
        ),
        k("zrender/tool/computeBoundingBox", ["require", "./vector", "./curve"], function(x) {
            function z(G, I, D) {
                if (0 !== G.length) {
                    for (var F = G[0][0], H = G[0][0], C = G[0][1], B = G[0][1], J = 1; G.length > J; J++) {
                        var E = G[J];
                        F > E[0] && (F = E[0]),
                        E[0] > H && (H = E[0]),
                        C > E[1] && (C = E[1]),
                        E[1] > B && (B = E[1])
                    }
                    I[0] = F,
                    I[1] = C,
                    D[0] = H,
                    D[1] = B
                }
            }
            function q(I, L, B, G, K, o) {
                var M = [];
                p.cubicExtrema(I[0], L[0], B[0], G[0], M);
                for (var F = 0; M.length > F; F++) {
                    M[F] = p.cubicAt(I[0], L[0], B[0], G[0], M[F])
                }
                var H = [];
                p.cubicExtrema(I[1], L[1], B[1], G[1], H);
                for (var F = 0; H.length > F; F++) {
                    H[F] = p.cubicAt(I[1], L[1], B[1], G[1], H[F])
                }
                M.push(I[0], G[0]),
                H.push(I[1], G[1]);
                var D = Math.min.apply(null , M)
                  , C = Math.max.apply(null , M)
                  , E = Math.min.apply(null , H)
                  , J = Math.max.apply(null , H);
                K[0] = D,
                K[1] = E,
                o[0] = C,
                o[1] = J
            }
            function v(I, L, B, G, K) {
                var o = p.quadraticExtremum(I[0], L[0], B[0])
                  , M = p.quadraticExtremum(I[1], L[1], B[1]);
                o = Math.max(Math.min(o, 1), 0),
                M = Math.max(Math.min(M, 1), 0);
                var F = 1 - o
                  , H = 1 - M
                  , D = F * F * I[0] + 2 * F * o * L[0] + o * o * B[0]
                  , C = F * F * I[1] + 2 * F * o * L[1] + o * o * B[1]
                  , E = H * H * I[0] + 2 * H * M * L[0] + M * M * B[0]
                  , J = H * H * I[1] + 2 * H * M * L[1] + M * M * B[1];
                G[0] = Math.min(I[0], B[0], D, E),
                G[1] = Math.min(I[1], B[1], C, J),
                K[0] = Math.max(I[0], B[0], D, E),
                K[1] = Math.max(I[1], B[1], C, J)
            }
            var y = x("./vector")
              , p = x("./curve")
              , m = y.create()
              , A = y.create()
              , u = y.create()
              , w = function(F, H, r, D, l, E, B, s) {
                if (Math.abs(D - l) >= 2 * Math.PI) {
                    return B[0] = F - r,
                    B[1] = H - r,
                    s[0] = F + r,
                    s[1] = H + r,
                    void 0
                }
                if (m[0] = Math.cos(D) * r + F,
                m[1] = Math.sin(D) * r + H,
                A[0] = Math.cos(l) * r + F,
                A[1] = Math.sin(l) * r + H,
                y.min(B, m, A),
                y.max(s, m, A),
                D %= 2 * Math.PI,
                0 > D && (D += 2 * Math.PI),
                l %= 2 * Math.PI,
                0 > l && (l += 2 * Math.PI),
                D > l && !E ? l += 2 * Math.PI : l > D && E && (D += 2 * Math.PI),
                E) {
                    var C = l;
                    l = D,
                    D = C
                }
                for (var G = 0; l > G; G += Math.PI / 2) {
                    G > D && (u[0] = Math.cos(G) * r + F,
                    u[1] = Math.sin(G) * r + H,
                    y.min(B, u, B),
                    y.max(s, u, s))
                }
            }
            ;
            return z.cubeBezier = q,
            z.quadraticBezier = v,
            z.arc = w,
            z
        }
        ),
        k("echarts/util/shape/Chain", ["require", "zrender/shape/Base", "./Icon", "zrender/shape/util/dashedLineTo", "zrender/tool/util", "zrender/tool/matrix"], function(s) {
            function p(i) {
                v.call(this, i)
            }
            var v = s("zrender/shape/Base")
              , m = s("./Icon")
              , l = s("zrender/shape/util/dashedLineTo")
              , u = s("zrender/tool/util")
              , q = s("zrender/tool/matrix");
            return p.prototype = {
                type: "chain",
                brush: function(o, i) {
                    var r = this.style;
                    i && (r = this.getHighlightStyle(r, this.highlightStyle || {})),
                    o.save(),
                    this.setContext(o, r),
                    this.setTransform(o),
                    o.save(),
                    o.beginPath(),
                    this.buildLinePath(o, r),
                    o.stroke(),
                    o.restore(),
                    this.brushSymbol(o, r),
                    o.restore()
                },
                buildLinePath: function(A, x) {
                    var C = x.x
                      , w = x.y + 5
                      , B = x.width
                      , z = x.height / 2 - 10;
                    if (A.moveTo(C, w),
                    A.lineTo(C, w + z),
                    A.moveTo(C + B, w),
                    A.lineTo(C + B, w + z),
                    A.moveTo(C, w + z / 2),
                    x.lineType && "solid" != x.lineType) {
                        if ("dashed" == x.lineType || "dotted" == x.lineType) {
                            var y = (x.lineWidth || 1) * ("dashed" == x.lineType ? 5 : 1);
                            l(A, C, w + z / 2, C + B, w + z / 2, y)
                        }
                    } else {
                        A.lineTo(C + B, w + z / 2)
                    }
                },
                brushSymbol: function(A, x) {
                    var C = x.y + x.height / 4;
                    A.save();
                    for (var w, B = x.chainPoint, z = 0, y = B.length; y > z; z++) {
                        if (w = B[z],
                        "none" != w.symbol) {
                            A.beginPath();
                            var i = w.symbolSize;
                            m.prototype.buildPath(A, {
                                iconType: w.symbol,
                                x: w.x - i,
                                y: C - i,
                                width: 2 * i,
                                height: 2 * i,
                                n: w.n
                            }),
                            A.fillStyle = w.isEmpty ? "#fff" : x.strokeColor,
                            A.closePath(),
                            A.fill(),
                            A.stroke()
                        }
                        w.showLabel && (A.font = w.textFont,
                        A.fillStyle = w.textColor,
                        A.textAlign = w.textAlign,
                        A.textBaseline = w.textBaseline,
                        w.rotation ? (A.save(),
                        this._updateTextTransform(A, w.rotation),
                        A.fillText(w.name, w.textX, w.textY),
                        A.restore()) : A.fillText(w.name, w.textX, w.textY))
                    }
                    A.restore()
                },
                _updateTextTransform: function(x, w) {
                    var y = q.create();
                    if (q.identity(y),
                    0 !== w[0]) {
                        var r = w[1] || 0
                          , o = w[2] || 0;
                        (r || o) && q.translate(y, y, [-r, -o]),
                        q.rotate(y, y, w[0]),
                        (r || o) && q.translate(y, y, [r, o])
                    }
                    x.transform.apply(x, y)
                },
                isCover: function(o, i) {
                    var r = this.style;
                    return o >= r.x && r.x + r.width >= o && i >= r.y && r.y + r.height >= i ? !0 : !1
                }
            },
            u.inherits(p, v),
            p
        }
        ),
        k("zrender/shape/Ring", ["require", "./Base", "../tool/util"], function(l) {
            var i = l("./Base")
              , m = function(n) {
                i.call(this, n)
            }
            ;
            return m.prototype = {
                type: "ring",
                buildPath: function(o, n) {
                    o.arc(n.x, n.y, n.r, 0, 2 * Math.PI, !1),
                    o.moveTo(n.x + n.r0, n.y),
                    o.arc(n.x, n.y, n.r0, 0, 2 * Math.PI, !0)
                },
                getRect: function(o) {
                    if (o.__rect) {
                        return o.__rect
                    }
                    var n;
                    return n = "stroke" == o.brushType || "fill" == o.brushType ? o.lineWidth || 1 : 0,
                    o.__rect = {
                        x: Math.round(o.x - o.r - n / 2),
                        y: Math.round(o.y - o.r - n / 2),
                        width: 2 * o.r + n,
                        height: 2 * o.r + n
                    },
                    o.__rect
                }
            },
            l("../tool/util").inherits(m, i),
            m
        }
        ),
        k("echarts/component/axis", ["require", "./base", "zrender/shape/Line", "../config", "../util/ecData", "zrender/tool/util", "zrender/tool/color", "./categoryAxis", "./valueAxis", "../component"], function(v) {
            function p(A, y, s, n, B, z) {
                x.call(this, A, y, s, n, B),
                this.axisType = z,
                this._axisList = [],
                this.refresh(n)
            }
            var x = v("./base")
              , m = v("zrender/shape/Line")
              , l = v("../config")
              , w = v("../util/ecData")
              , u = v("zrender/tool/util")
              , q = v("zrender/tool/color");
            return p.prototype = {
                type: l.COMPONENT_TYPE_AXIS,
                axisBase: {
                    _buildAxisLine: function() {
                        var s = this.option.axisLine.lineStyle.width
                          , r = s / 2
                          , z = {
                            _axisShape: "axisLine",
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase() + 3,
                            hoverable: !1
                        }
                          , i = this.grid;
                        switch (this.option.position) {
                        case "left":
                            z.style = {
                                xStart: i.getX() - r,
                                yStart: i.getYend(),
                                xEnd: i.getX() - r,
                                yEnd: i.getY(),
                                lineCap: "round"
                            };
                            break;
                        case "right":
                            z.style = {
                                xStart: i.getXend() + r,
                                yStart: i.getYend(),
                                xEnd: i.getXend() + r,
                                yEnd: i.getY(),
                                lineCap: "round"
                            };
                            break;
                        case "bottom":
                            z.style = {
                                xStart: i.getX(),
                                yStart: i.getYend() + r,
                                xEnd: i.getXend(),
                                yEnd: i.getYend() + r,
                                lineCap: "round"
                            };
                            break;
                        case "top":
                            z.style = {
                                xStart: i.getX(),
                                yStart: i.getY() - r,
                                xEnd: i.getXend(),
                                yEnd: i.getY() - r,
                                lineCap: "round"
                            }
                        }
                        var y = z.style;
                        "" !== this.option.name && (y.text = this.option.name,
                        y.textPosition = this.option.nameLocation,
                        y.textFont = this.getFont(this.option.nameTextStyle),
                        this.option.nameTextStyle.align && (y.textAlign = this.option.nameTextStyle.align),
                        this.option.nameTextStyle.baseline && (y.textBaseline = this.option.nameTextStyle.baseline),
                        this.option.nameTextStyle.color && (y.textColor = this.option.nameTextStyle.color)),
                        y.strokeColor = this.option.axisLine.lineStyle.color,
                        y.lineWidth = s,
                        this.isHorizontal() ? y.yStart = y.yEnd = this.subPixelOptimize(y.yEnd, s) : y.xStart = y.xEnd = this.subPixelOptimize(y.xEnd, s),
                        y.lineType = this.option.axisLine.lineStyle.type,
                        z = new m(z),
                        this.shapeList.push(z)
                    },
                    _axisLabelClickable: function(n, i) {
                        return n ? (w.pack(i, void 0, -1, void 0, -1, i.style.text),
                        i.hoverable = !0,
                        i.clickable = !0,
                        i.highlightStyle = {
                            color: q.lift(i.style.color, 1),
                            brushType: "fill"
                        },
                        i) : i
                    },
                    refixAxisShape: function(y, s) {
                        if (this.option.axisLine.onZero) {
                            var z;
                            if (this.isHorizontal() && null  != s) {
                                for (var r = 0, o = this.shapeList.length; o > r; r++) {
                                    "axisLine" === this.shapeList[r]._axisShape ? (this.shapeList[r].style.yStart = this.shapeList[r].style.yEnd = this.subPixelOptimize(s, this.shapeList[r].stylelineWidth),
                                    this.zr.modShape(this.shapeList[r].id)) : "axisTick" === this.shapeList[r]._axisShape && (z = this.shapeList[r].style.yEnd - this.shapeList[r].style.yStart,
                                    this.shapeList[r].style.yStart = s - z,
                                    this.shapeList[r].style.yEnd = s,
                                    this.zr.modShape(this.shapeList[r].id))
                                }
                            }
                            if (!this.isHorizontal() && null  != y) {
                                for (var r = 0, o = this.shapeList.length; o > r; r++) {
                                    "axisLine" === this.shapeList[r]._axisShape ? (this.shapeList[r].style.xStart = this.shapeList[r].style.xEnd = this.subPixelOptimize(y, this.shapeList[r].stylelineWidth),
                                    this.zr.modShape(this.shapeList[r].id)) : "axisTick" === this.shapeList[r]._axisShape && (z = this.shapeList[r].style.xEnd - this.shapeList[r].style.xStart,
                                    this.shapeList[r].style.xStart = y,
                                    this.shapeList[r].style.xEnd = y + z,
                                    this.zr.modShape(this.shapeList[r].id))
                                }
                            }
                        }
                    },
                    getPosition: function() {
                        return this.option.position
                    },
                    isHorizontal: function() {
                        return "bottom" === this.option.position || "top" === this.option.position
                    }
                },
                reformOption: function(o) {
                    if (!o || o instanceof Array && 0 === o.length ? o = [{
                        type: l.COMPONENT_TYPE_AXIS_VALUE
                    }] : o instanceof Array || (o = [o]),
                    o.length > 2 && (o = [o[0], o[1]]),
                    "xAxis" === this.axisType) {
                        (!o[0].position || "bottom" != o[0].position && "top" != o[0].position) && (o[0].position = "bottom"),
                        o.length > 1 && (o[1].position = "bottom" === o[0].position ? "top" : "bottom");
                        for (var i = 0, r = o.length; r > i; i++) {
                            o[i].type = o[i].type || "category",
                            o[i].xAxisIndex = i,
                            o[i].yAxisIndex = -1
                        }
                    } else {
                        (!o[0].position || "left" != o[0].position && "right" != o[0].position) && (o[0].position = "left"),
                        o.length > 1 && (o[1].position = "left" === o[0].position ? "right" : "left");
                        for (var i = 0, r = o.length; r > i; i++) {
                            o[i].type = o[i].type || "value",
                            o[i].xAxisIndex = -1,
                            o[i].yAxisIndex = i
                        }
                    }
                    return o
                },
                refresh: function(y) {
                    var B;
                    y && (this.option = y,
                    "xAxis" === this.axisType ? (this.option.xAxis = this.reformOption(y.xAxis),
                    B = this.option.xAxis) : (this.option.yAxis = this.reformOption(y.yAxis),
                    B = this.option.yAxis),
                    this.series = y.series);
                    for (var s = v("./categoryAxis"), e = v("./valueAxis"), A = Math.max(B && B.length || 0, this._axisList.length), z = 0; A > z; z++) {
                        !this._axisList[z] || !y || B[z] && this._axisList[z].type == B[z].type || (this._axisList[z].dispose && this._axisList[z].dispose(),
                        this._axisList[z] = !1),
                        this._axisList[z] ? this._axisList[z].refresh && this._axisList[z].refresh(B ? B[z] : !1, this.series) : B && B[z] && (this._axisList[z] = "category" === B[z].type ? new s(this.ecTheme,this.messageCenter,this.zr,B[z],this.myChart,this.axisBase) : new e(this.ecTheme,this.messageCenter,this.zr,B[z],this.myChart,this.axisBase,this.series))
                    }
                },
                getAxis: function(i) {
                    return this._axisList[i]
                },
                clear: function() {
                    for (var n = 0, i = this._axisList.length; i > n; n++) {
                        this._axisList[n].dispose && this._axisList[n].dispose()
                    }
                    this._axisList = []
                }
            },
            u.inherits(p, x),
            v("../component").define("axis", p),
            p
        }
        ),
        k("echarts/component/grid", ["require", "./base", "zrender/shape/Rectangle", "../config", "zrender/tool/util", "../component"], function(q) {
            function p(w, v, u, n, x) {
                s.call(this, w, v, u, n, x),
                this.refresh(n)
            }
            var s = q("./base")
              , m = q("zrender/shape/Rectangle")
              , l = q("../config");
            l.grid = {
                zlevel: 0,
                z: 0,
                x: 80,
                y: 60,
                x2: 80,
                y2: 60,
                backgroundColor: "rgba(0,0,0,0)",
                borderWidth: 1,
                borderColor: "#ccc"
            };
            var r = q("zrender/tool/util");
            return p.prototype = {
                type: l.COMPONENT_TYPE_GRID,
                getX: function() {
                    return this._x
                },
                getY: function() {
                    return this._y
                },
                getWidth: function() {
                    return this._width
                },
                getHeight: function() {
                    return this._height
                },
                getXend: function() {
                    return this._x + this._width
                },
                getYend: function() {
                    return this._y + this._height
                },
                getArea: function() {
                    return {
                        x: this._x,
                        y: this._y,
                        width: this._width,
                        height: this._height
                    }
                },
                getBbox: function() {
                    return [[this._x, this._y], [this.getXend(), this.getYend()]]
                },
                refixAxisShape: function(x) {
                    for (var v, z, u, y = x.xAxis._axisList.concat(x.yAxis ? x.yAxis._axisList : []), w = y.length; w--; ) {
                        u = y[w],
                        u.type == l.COMPONENT_TYPE_AXIS_VALUE && 0 > u._min && u._max >= 0 && (u.isHorizontal() ? v = u.getCoord(0) : z = u.getCoord(0))
                    }
                    if (v !== void 0 || z !== void 0) {
                        for (w = y.length; w--; ) {
                            y[w].refixAxisShape(v, z)
                        }
                    }
                },
                refresh: function(u) {
                    if (u || this._zrWidth != this.zr.getWidth() || this._zrHeight != this.zr.getHeight()) {
                        this.clear(),
                        this.option = u || this.option,
                        this.option.grid = this.reformOption(this.option.grid);
                        var o = this.option.grid;
                        this._zrWidth = this.zr.getWidth(),
                        this._zrHeight = this.zr.getHeight(),
                        this._x = this.parsePercent(o.x, this._zrWidth),
                        this._y = this.parsePercent(o.y, this._zrHeight);
                        var v = this.parsePercent(o.x2, this._zrWidth)
                          , i = this.parsePercent(o.y2, this._zrHeight);
                        this._width = o.width === void 0 ? this._zrWidth - this._x - v : this.parsePercent(o.width, this._zrWidth),
                        this._width = 0 >= this._width ? 10 : this._width,
                        this._height = o.height === void 0 ? this._zrHeight - this._y - i : this.parsePercent(o.height, this._zrHeight),
                        this._height = 0 >= this._height ? 10 : this._height,
                        this._x = this.subPixelOptimize(this._x, o.borderWidth),
                        this._y = this.subPixelOptimize(this._y, o.borderWidth),
                        this.shapeList.push(new m({
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase(),
                            hoverable: !1,
                            style: {
                                x: this._x,
                                y: this._y,
                                width: this._width,
                                height: this._height,
                                brushType: o.borderWidth > 0 ? "both" : "fill",
                                color: o.backgroundColor,
                                strokeColor: o.borderColor,
                                lineWidth: o.borderWidth
                            }
                        })),
                        this.zr.addShape(this.shapeList[0])
                    }
                }
            },
            r.inherits(p, s),
            q("../component").define("grid", p),
            p
        }
        ),
        k("echarts/component/dataZoom", ["require", "./base", "zrender/shape/Rectangle", "zrender/shape/Polygon", "../util/shape/Icon", "../config", "../util/date", "zrender/tool/util", "../component"], function(w) {
            function y(B, s, n, l, C) {
                q.call(this, B, s, n, l, C);
                var A = this;
                A._ondrift = function(o, i) {
                    return A.__ondrift(this, o, i)
                }
                ,
                A._ondragend = function() {
                    return A.__ondragend()
                }
                ,
                this._fillerSize = 30,
                this._isSilence = !1,
                this._zoom = {},
                this.option.dataZoom = this.reformOption(this.option.dataZoom),
                this.zoomOption = this.option.dataZoom,
                this._handleSize = this.zoomOption.handleSize,
                this.myChart.canvasSupported || (this.zoomOption.realtime = !1),
                this._location = this._getLocation(),
                this._zoom = this._getZoom(),
                this._backupData(),
                this.option.dataZoom.show && this._buildShape(),
                this._syncData()
            }
            var q = w("./base")
              , v = w("zrender/shape/Rectangle")
              , x = w("zrender/shape/Polygon")
              , p = w("../util/shape/Icon")
              , m = w("../config");
            m.dataZoom = {
                zlevel: 0,
                z: 4,
                show: !1,
                orient: "horizontal",
                backgroundColor: "rgba(0,0,0,0)",
                dataBackgroundColor: "#eee",
                fillerColor: "rgba(144,197,237,0.2)",
                handleColor: "rgba(70,130,180,0.8)",
                handleSize: 8,
                showDetail: !0,
                realtime: !0
            };
            var z = w("../util/date")
              , u = w("zrender/tool/util");
            return y.prototype = {
                type: m.COMPONENT_TYPE_DATAZOOM,
                _buildShape: function() {
                    this._buildBackground(),
                    this._buildFiller(),
                    this._buildHandle(),
                    this._buildFrame();
                    for (var l = 0, i = this.shapeList.length; i > l; l++) {
                        this.zr.addShape(this.shapeList[l])
                    }
                    this._syncFrameShape()
                },
                _getLocation: function() {
                    var s, r, A, o, l = this.component.grid;
                    return "horizontal" == this.zoomOption.orient ? (A = this.zoomOption.width || l.getWidth(),
                    o = this.zoomOption.height || this._fillerSize,
                    s = null  != this.zoomOption.x ? this.zoomOption.x : l.getX(),
                    r = null  != this.zoomOption.y ? this.zoomOption.y : this.zr.getHeight() - o - 2) : (A = this.zoomOption.width || this._fillerSize,
                    o = this.zoomOption.height || l.getHeight(),
                    s = null  != this.zoomOption.x ? this.zoomOption.x : 2,
                    r = null  != this.zoomOption.y ? this.zoomOption.y : l.getY()),
                    {
                        x: s,
                        y: r,
                        width: A,
                        height: o
                    }
                },
                _getZoom: function() {
                    var I = this.option.series
                      , M = this.option.xAxis;
                    !M || M instanceof Array || (M = [M],
                    this.option.xAxis = M);
                    var B = this.option.yAxis;
                    !B || B instanceof Array || (B = [B],
                    this.option.yAxis = B);
                    var G, L, A = [], N = this.zoomOption.xAxisIndex;
                    if (M && null  == N) {
                        G = [];
                        for (var F = 0, H = M.length; H > F; F++) {
                            ("category" == M[F].type || null  == M[F].type) && G.push(F)
                        }
                    } else {
                        G = N instanceof Array ? N : null  != N ? [N] : []
                    }
                    if (N = this.zoomOption.yAxisIndex,
                    B && null  == N) {
                        L = [];
                        for (var F = 0, H = B.length; H > F; F++) {
                            "category" == B[F].type && L.push(F)
                        }
                    } else {
                        L = N instanceof Array ? N : null  != N ? [N] : []
                    }
                    for (var D, F = 0, H = I.length; H > F; F++) {
                        if (D = I[F],
                        D.type == m.CHART_TYPE_LINE || D.type == m.CHART_TYPE_BAR || D.type == m.CHART_TYPE_SCATTER || D.type == m.CHART_TYPE_K) {
                            for (var C = 0, E = G.length; E > C; C++) {
                                if (G[C] == (D.xAxisIndex || 0)) {
                                    A.push(F);
                                    break
                                }
                            }
                            for (var C = 0, E = L.length; E > C; C++) {
                                if (L[C] == (D.yAxisIndex || 0)) {
                                    A.push(F);
                                    break
                                }
                            }
                            null  == this.zoomOption.xAxisIndex && null  == this.zoomOption.yAxisIndex && D.data && this.getDataFromOption(D.data[0]) instanceof Array && (D.type == m.CHART_TYPE_SCATTER || D.type == m.CHART_TYPE_LINE || D.type == m.CHART_TYPE_BAR) && A.push(F)
                        }
                    }
                    var J = null  != this._zoom.start ? this._zoom.start : null  != this.zoomOption.start ? this.zoomOption.start : 0
                      , r = null  != this._zoom.end ? this._zoom.end : null  != this.zoomOption.end ? this.zoomOption.end : 100;
                    J > r && (J += r,
                    r = J - r,
                    J -= r);
                    var K = Math.round((r - J) / 100 * ("horizontal" == this.zoomOption.orient ? this._location.width : this._location.height));
                    return {
                        start: J,
                        end: r,
                        start2: 0,
                        end2: 100,
                        size: K,
                        xAxisIndex: G,
                        yAxisIndex: L,
                        seriesIndex: A,
                        scatterMap: this._zoom.scatterMap || {}
                    }
                },
                _backupData: function() {
                    this._originalData = {
                        xAxis: {},
                        yAxis: {},
                        series: {}
                    };
                    for (var E = this.option.xAxis, G = this._zoom.xAxisIndex, A = 0, C = G.length; C > A; A++) {
                        this._originalData.xAxis[G[A]] = E[G[A]].data
                    }
                    for (var F = this.option.yAxis, r = this._zoom.yAxisIndex, A = 0, C = r.length; C > A; A++) {
                        this._originalData.yAxis[r[A]] = F[r[A]].data
                    }
                    for (var H, B = this.option.series, D = this._zoom.seriesIndex, A = 0, C = D.length; C > A; A++) {
                        H = B[D[A]],
                        this._originalData.series[D[A]] = H.data,
                        H.data && this.getDataFromOption(H.data[0]) instanceof Array && (H.type == m.CHART_TYPE_SCATTER || H.type == m.CHART_TYPE_LINE || H.type == m.CHART_TYPE_BAR) && (this._backupScale(),
                        this._calculScatterMap(D[A]))
                    }
                },
                _calculScatterMap: function(s) {
                    this._zoom.scatterMap = this._zoom.scatterMap || {},
                    this._zoom.scatterMap[s] = this._zoom.scatterMap[s] || {};
                    var C = w("../component")
                      , l = C.get("axis")
                      , e = u.clone(this.option.xAxis);
                    "category" == e[0].type && (e[0].type = "value"),
                    e[1] && "category" == e[1].type && (e[1].type = "value");
                    var B = new l(this.ecTheme,null ,!1,{
                        xAxis: e,
                        series: this.option.series
                    },this,"xAxis")
                      , A = this.option.series[s].xAxisIndex || 0;
                    this._zoom.scatterMap[s].x = B.getAxis(A).getExtremum(),
                    B.dispose(),
                    e = u.clone(this.option.yAxis),
                    "category" == e[0].type && (e[0].type = "value"),
                    e[1] && "category" == e[1].type && (e[1].type = "value"),
                    B = new l(this.ecTheme,null ,!1,{
                        yAxis: e,
                        series: this.option.series
                    },this,"yAxis"),
                    A = this.option.series[s].yAxisIndex || 0,
                    this._zoom.scatterMap[s].y = B.getAxis(A).getExtremum(),
                    B.dispose()
                },
                _buildBackground: function() {
                    var N = this._location.width
                      , C = this._location.height;
                    this.shapeList.push(new v({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        hoverable: !1,
                        style: {
                            x: this._location.x,
                            y: this._location.y,
                            width: N,
                            height: C,
                            color: this.zoomOption.backgroundColor
                        }
                    }));
                    for (var G = 0, F = this._originalData.xAxis, D = this._zoom.xAxisIndex, I = 0, K = D.length; K > I; I++) {
                        G = Math.max(G, F[D[I]].length)
                    }
                    for (var H = this._originalData.yAxis, i = this._zoom.yAxisIndex, I = 0, K = i.length; K > I; I++) {
                        G = Math.max(G, H[i[I]].length)
                    }
                    for (var r, O = this._zoom.seriesIndex[0], E = this._originalData.series[O], P = Number.MIN_VALUE, B = Number.MAX_VALUE, I = 0, K = E.length; K > I; I++) {
                        r = this.getDataFromOption(E[I], 0),
                        this.option.series[O].type == m.CHART_TYPE_K && (r = r[1]),
                        isNaN(r) && (r = 0),
                        P = Math.max(P, r),
                        B = Math.min(B, r)
                    }
                    var A = P - B
                      , L = []
                      , Q = N / (G - (G > 1 ? 1 : 0))
                      , M = C / (G - (G > 1 ? 1 : 0))
                      , J = 1;
                    "horizontal" == this.zoomOption.orient && 1 > Q ? J = Math.floor(3 * G / N) : "vertical" == this.zoomOption.orient && 1 > M && (J = Math.floor(3 * G / C));
                    for (var I = 0, K = G; K > I; I += J) {
                        r = this.getDataFromOption(E[I], 0),
                        this.option.series[O].type == m.CHART_TYPE_K && (r = r[1]),
                        isNaN(r) && (r = 0),
                        "horizontal" == this.zoomOption.orient ? L.push([this._location.x + Q * I, this._location.y + C - 1 - Math.round((r - B) / A * (C - 10))]) : L.push([this._location.x + 1 + Math.round((r - B) / A * (N - 10)), this._location.y + M * (K - I - 1)])
                    }
                    "horizontal" == this.zoomOption.orient ? (L.push([this._location.x + N, this._location.y + C]),
                    L.push([this._location.x, this._location.y + C])) : (L.push([this._location.x, this._location.y]),
                    L.push([this._location.x, this._location.y + C])),
                    this.shapeList.push(new x({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            pointList: L,
                            color: this.zoomOption.dataBackgroundColor
                        },
                        hoverable: !1
                    }))
                },
                _buildFiller: function() {
                    this._fillerShae = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        draggable: !0,
                        ondrift: this._ondrift,
                        ondragend: this._ondragend,
                        _type: "filler"
                    },
                    this._fillerShae.style = "horizontal" == this.zoomOption.orient ? {
                        x: this._location.x + Math.round(this._zoom.start / 100 * this._location.width) + this._handleSize,
                        y: this._location.y,
                        width: this._zoom.size - 2 * this._handleSize,
                        height: this._location.height,
                        color: this.zoomOption.fillerColor,
                        text: ":::",
                        textPosition: "inside"
                    } : {
                        x: this._location.x,
                        y: this._location.y + Math.round(this._zoom.start / 100 * this._location.height) + this._handleSize,
                        width: this._location.width,
                        height: this._zoom.size - 2 * this._handleSize,
                        color: this.zoomOption.fillerColor,
                        text: "::",
                        textPosition: "inside"
                    },
                    this._fillerShae.highlightStyle = {
                        brushType: "fill",
                        color: "rgba(0,0,0,0)"
                    },
                    this._fillerShae = new v(this._fillerShae),
                    this.shapeList.push(this._fillerShae)
                },
                _buildHandle: function() {
                    var i = this.zoomOption.showDetail ? this._getDetail() : {
                        start: "",
                        end: ""
                    };
                    this._startShape = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        draggable: !0,
                        style: {
                            iconType: "rectangle",
                            x: this._location.x,
                            y: this._location.y,
                            width: this._handleSize,
                            height: this._handleSize,
                            color: this.zoomOption.handleColor,
                            text: "=",
                            textPosition: "inside"
                        },
                        highlightStyle: {
                            text: i.start,
                            brushType: "fill",
                            textPosition: "left"
                        },
                        ondrift: this._ondrift,
                        ondragend: this._ondragend
                    },
                    "horizontal" == this.zoomOption.orient ? (this._startShape.style.height = this._location.height,
                    this._endShape = u.clone(this._startShape),
                    this._startShape.style.x = this._fillerShae.style.x - this._handleSize,
                    this._endShape.style.x = this._fillerShae.style.x + this._fillerShae.style.width,
                    this._endShape.highlightStyle.text = i.end,
                    this._endShape.highlightStyle.textPosition = "right") : (this._startShape.style.width = this._location.width,
                    this._endShape = u.clone(this._startShape),
                    this._startShape.style.y = this._fillerShae.style.y + this._fillerShae.style.height,
                    this._startShape.highlightStyle.textPosition = "bottom",
                    this._endShape.style.y = this._fillerShae.style.y - this._handleSize,
                    this._endShape.highlightStyle.text = i.end,
                    this._endShape.highlightStyle.textPosition = "top"),
                    this._startShape = new p(this._startShape),
                    this._endShape = new p(this._endShape),
                    this.shapeList.push(this._startShape),
                    this.shapeList.push(this._endShape)
                },
                _buildFrame: function() {
                    var l = this.subPixelOptimize(this._location.x, 1)
                      , i = this.subPixelOptimize(this._location.y, 1);
                    this._startFrameShape = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        hoverable: !1,
                        style: {
                            x: l,
                            y: i,
                            width: this._location.width - (l > this._location.x ? 1 : 0),
                            height: this._location.height - (i > this._location.y ? 1 : 0),
                            lineWidth: 1,
                            brushType: "stroke",
                            strokeColor: this.zoomOption.handleColor
                        }
                    },
                    this._endFrameShape = u.clone(this._startFrameShape),
                    this._startFrameShape = new v(this._startFrameShape),
                    this._endFrameShape = new v(this._endFrameShape),
                    this.shapeList.push(this._startFrameShape),
                    this.shapeList.push(this._endFrameShape)
                },
                _syncHandleShape: function() {
                    "horizontal" == this.zoomOption.orient ? (this._startShape.style.x = this._fillerShae.style.x - this._handleSize,
                    this._endShape.style.x = this._fillerShae.style.x + this._fillerShae.style.width,
                    this._zoom.start = 100 * ((this._startShape.style.x - this._location.x) / this._location.width),
                    this._zoom.end = 100 * ((this._endShape.style.x + this._handleSize - this._location.x) / this._location.width)) : (this._startShape.style.y = this._fillerShae.style.y + this._fillerShae.style.height,
                    this._endShape.style.y = this._fillerShae.style.y - this._handleSize,
                    this._zoom.start = 100 * ((this._location.y + this._location.height - this._startShape.style.y) / this._location.height),
                    this._zoom.end = 100 * ((this._location.y + this._location.height - this._endShape.style.y - this._handleSize) / this._location.height)),
                    this.zr.modShape(this._startShape.id),
                    this.zr.modShape(this._endShape.id),
                    this._syncFrameShape(),
                    this.zr.refreshNextFrame()
                },
                _syncFillerShape: function() {
                    var l, i;
                    "horizontal" == this.zoomOption.orient ? (l = this._startShape.style.x,
                    i = this._endShape.style.x,
                    this._fillerShae.style.x = Math.min(l, i) + this._handleSize,
                    this._fillerShae.style.width = Math.abs(l - i) - this._handleSize,
                    this._zoom.start = 100 * ((Math.min(l, i) - this._location.x) / this._location.width),
                    this._zoom.end = 100 * ((Math.max(l, i) + this._handleSize - this._location.x) / this._location.width)) : (l = this._startShape.style.y,
                    i = this._endShape.style.y,
                    this._fillerShae.style.y = Math.min(l, i) + this._handleSize,
                    this._fillerShae.style.height = Math.abs(l - i) - this._handleSize,
                    this._zoom.start = 100 * ((this._location.y + this._location.height - Math.max(l, i)) / this._location.height),
                    this._zoom.end = 100 * ((this._location.y + this._location.height - Math.min(l, i) - this._handleSize) / this._location.height)),
                    this.zr.modShape(this._fillerShae.id),
                    this._syncFrameShape(),
                    this.zr.refreshNextFrame()
                },
                _syncFrameShape: function() {
                    "horizontal" == this.zoomOption.orient ? (this._startFrameShape.style.width = this._fillerShae.style.x - this._location.x,
                    this._endFrameShape.style.x = this._fillerShae.style.x + this._fillerShae.style.width,
                    this._endFrameShape.style.width = this._location.x + this._location.width - this._endFrameShape.style.x) : (this._startFrameShape.style.y = this._fillerShae.style.y + this._fillerShae.style.height,
                    this._startFrameShape.style.height = this._location.y + this._location.height - this._startFrameShape.style.y,
                    this._endFrameShape.style.height = this._fillerShae.style.y - this._location.y),
                    this.zr.modShape(this._startFrameShape.id),
                    this.zr.modShape(this._endFrameShape.id)
                },
                _syncShape: function() {
                    this.zoomOption.show && ("horizontal" == this.zoomOption.orient ? (this._startShape.style.x = this._location.x + this._zoom.start / 100 * this._location.width,
                    this._endShape.style.x = this._location.x + this._zoom.end / 100 * this._location.width - this._handleSize,
                    this._fillerShae.style.x = this._startShape.style.x + this._handleSize,
                    this._fillerShae.style.width = this._endShape.style.x - this._startShape.style.x - this._handleSize) : (this._startShape.style.y = this._location.y + this._location.height - this._zoom.start / 100 * this._location.height,
                    this._endShape.style.y = this._location.y + this._location.height - this._zoom.end / 100 * this._location.height - this._handleSize,
                    this._fillerShae.style.y = this._endShape.style.y + this._handleSize,
                    this._fillerShae.style.height = this._startShape.style.y - this._endShape.style.y - this._handleSize),
                    this.zr.modShape(this._startShape.id),
                    this.zr.modShape(this._endShape.id),
                    this.zr.modShape(this._fillerShae.id),
                    this._syncFrameShape(),
                    this.zr.refresh())
                },
                _syncData: function(E) {
                    var C, G, B, A, F;
                    for (var D in this._originalData) {
                        C = this._originalData[D];
                        for (var r in C) {
                            F = C[r],
                            null  != F && (A = F.length,
                            G = Math.floor(this._zoom.start / 100 * A),
                            B = Math.ceil(this._zoom.end / 100 * A),
                            this.getDataFromOption(F[0]) instanceof Array && this.option[D][r].type != m.CHART_TYPE_K ? (this._setScale(),
                            this.option[D][r].data = this._synScatterData(r, F)) : this.option[D][r].data = F.slice(G, B))
                        }
                    }
                    this._isSilence || !this.zoomOption.realtime && !E || this.messageCenter.dispatch(m.EVENT.DATA_ZOOM, null , {
                        zoom: this._zoom
                    }, this.myChart)
                },
                _synScatterData: function(I, K) {
                    if (0 === this._zoom.start && 100 == this._zoom.end && 0 === this._zoom.start2 && 100 == this._zoom.end2) {
                        return K
                    }
                    var C, G, J, B, A, L = [], F = this._zoom.scatterMap[I];
                    "horizontal" == this.zoomOption.orient ? (C = F.x.max - F.x.min,
                    G = this._zoom.start / 100 * C + F.x.min,
                    J = this._zoom.end / 100 * C + F.x.min,
                    C = F.y.max - F.y.min,
                    B = this._zoom.start2 / 100 * C + F.y.min,
                    A = this._zoom.end2 / 100 * C + F.y.min) : (C = F.x.max - F.x.min,
                    G = this._zoom.start2 / 100 * C + F.x.min,
                    J = this._zoom.end2 / 100 * C + F.x.min,
                    C = F.y.max - F.y.min,
                    B = this._zoom.start / 100 * C + F.y.min,
                    A = this._zoom.end / 100 * C + F.y.min);
                    for (var H, E = 0, D = K.length; D > E; E++) {
                        H = K[E].value || K[E],
                        H[0] >= G && J >= H[0] && H[1] >= B && A >= H[1] && L.push(K[E])
                    }
                    return L
                },
                _setScale: function() {
                    var s = 0 !== this._zoom.start || 100 !== this._zoom.end || 0 !== this._zoom.start2 || 100 !== this._zoom.end2
                      , r = {
                        xAxis: this.option.xAxis,
                        yAxis: this.option.yAxis
                    };
                    for (var A in r) {
                        for (var o = 0, l = r[A].length; l > o; o++) {
                            r[A][o].scale = s || r[A][o]._scale
                        }
                    }
                },
                _backupScale: function() {
                    var r = {
                        xAxis: this.option.xAxis,
                        yAxis: this.option.yAxis
                    };
                    for (var o in r) {
                        for (var s = 0, l = r[o].length; l > s; s++) {
                            r[o][s]._scale = r[o][s].scale
                        }
                    }
                },
                _getDetail: function() {
                    for (var J = ["xAxis", "yAxis"], O = 0, C = J.length; C > O; O++) {
                        var H = this._originalData[J[O]];
                        for (var M in H) {
                            var B = H[M];
                            if (null  != B) {
                                var s = B.length
                                  , G = Math.floor(this._zoom.start / 100 * s)
                                  , I = Math.ceil(this._zoom.end / 100 * s);
                                return I -= I > 0 ? 1 : 0,
                                {
                                    start: this.getDataFromOption(B[G]),
                                    end: this.getDataFromOption(B[I])
                                }
                            }
                        }
                    }
                    J = "horizontal" == this.zoomOption.orient ? "xAxis" : "yAxis";
                    var E = this._zoom.seriesIndex[0]
                      , D = this.option.series[E][J + "Index"] || 0
                      , F = this.option[J][D].type
                      , K = this._zoom.scatterMap[E][J.charAt(0)].min
                      , A = this._zoom.scatterMap[E][J.charAt(0)].max
                      , L = A - K;
                    if ("value" == F) {
                        return {
                            start: K + L * this._zoom.start / 100,
                            end: K + L * this._zoom.end / 100
                        }
                    }
                    if ("time" == F) {
                        A = K + L * this._zoom.end / 100,
                        K += L * this._zoom.start / 100;
                        var N = z.getAutoFormatter(K, A).formatter;
                        return {
                            start: z.format(N, K),
                            end: z.format(N, A)
                        }
                    }
                    return {
                        start: "",
                        end: ""
                    }
                },
                __ondrift: function(s, r, A) {
                    this.zoomOption.zoomLock && (s = this._fillerShae);
                    var o = "filler" == s._type ? this._handleSize : 0;
                    if ("horizontal" == this.zoomOption.orient ? s.style.x + r - o <= this._location.x ? s.style.x = this._location.x + o : s.style.x + r + s.style.width + o >= this._location.x + this._location.width ? s.style.x = this._location.x + this._location.width - s.style.width - o : s.style.x += r : s.style.y + A - o <= this._location.y ? s.style.y = this._location.y + o : s.style.y + A + s.style.height + o >= this._location.y + this._location.height ? s.style.y = this._location.y + this._location.height - s.style.height - o : s.style.y += A,
                    "filler" == s._type ? this._syncHandleShape() : this._syncFillerShape(),
                    this.zoomOption.realtime && this._syncData(),
                    this.zoomOption.showDetail) {
                        var l = this._getDetail();
                        this._startShape.style.text = this._startShape.highlightStyle.text = l.start,
                        this._endShape.style.text = this._endShape.highlightStyle.text = l.end,
                        this._startShape.style.textPosition = this._startShape.highlightStyle.textPosition,
                        this._endShape.style.textPosition = this._endShape.highlightStyle.textPosition
                    }
                    return !0
                },
                __ondragend: function() {
                    this.zoomOption.showDetail && (this._startShape.style.text = this._endShape.style.text = "=",
                    this._startShape.style.textPosition = this._endShape.style.textPosition = "inside",
                    this.zr.modShape(this._startShape.id),
                    this.zr.modShape(this._endShape.id),
                    this.zr.refreshNextFrame()),
                    this.isDragend = !0
                },
                ondragend: function(l, i) {
                    this.isDragend && l.target && (!this.zoomOption.realtime && this._syncData(),
                    i.dragOut = !0,
                    i.dragIn = !0,
                    this._isSilence || this.zoomOption.realtime || this.messageCenter.dispatch(m.EVENT.DATA_ZOOM, null , {
                        zoom: this._zoom
                    }, this.myChart),
                    i.needRefresh = !1,
                    this.isDragend = !1)
                },
                ondataZoom: function(l, i) {
                    i.needRefresh = !0
                },
                absoluteZoom: function(i) {
                    this._zoom.start = i.start,
                    this._zoom.end = i.end,
                    this._zoom.start2 = i.start2,
                    this._zoom.end2 = i.end2,
                    this._syncShape(),
                    this._syncData(!0)
                },
                rectZoom: function(E) {
                    if (!E) {
                        return this._zoom.start = this._zoom.start2 = 0,
                        this._zoom.end = this._zoom.end2 = 100,
                        this._syncShape(),
                        this._syncData(!0),
                        this._zoom
                    }
                    var B = this.component.grid.getArea()
                      , G = {
                        x: E.x,
                        y: E.y,
                        width: E.width,
                        height: E.height
                    };
                    if (0 > G.width && (G.x += G.width,
                    G.width = -G.width),
                    0 > G.height && (G.y += G.height,
                    G.height = -G.height),
                    G.x > B.x + B.width || G.y > B.y + B.height) {
                        return !1
                    }
                    G.x < B.x && (G.x = B.x),
                    G.x + G.width > B.x + B.width && (G.width = B.x + B.width - G.x),
                    G.y + G.height > B.y + B.height && (G.height = B.y + B.height - G.y);
                    var A, l = (G.x - B.x) / B.width, F = 1 - (G.x + G.width - B.x) / B.width, D = 1 - (G.y + G.height - B.y) / B.height, C = (G.y - B.y) / B.height;
                    return "horizontal" == this.zoomOption.orient ? (A = this._zoom.end - this._zoom.start,
                    this._zoom.start += A * l,
                    this._zoom.end -= A * F,
                    A = this._zoom.end2 - this._zoom.start2,
                    this._zoom.start2 += A * D,
                    this._zoom.end2 -= A * C) : (A = this._zoom.end - this._zoom.start,
                    this._zoom.start += A * D,
                    this._zoom.end -= A * C,
                    A = this._zoom.end2 - this._zoom.start2,
                    this._zoom.start2 += A * l,
                    this._zoom.end2 -= A * F),
                    this._syncShape(),
                    this._syncData(!0),
                    this._zoom
                },
                syncBackupData: function(F) {
                    for (var H, C, E = this._originalData.series, G = F.series, B = 0, A = G.length; A > B; B++) {
                        C = G[B].data || G[B].eventList,
                        H = E[B] ? Math.floor(this._zoom.start / 100 * E[B].length) : 0;
                        for (var I = 0, D = C.length; D > I; I++) {
                            E[B] && (E[B][I + H] = C[I])
                        }
                    }
                },
                syncOption: function(i) {
                    this.silence(!0),
                    this.option = i,
                    this.option.dataZoom = this.reformOption(this.option.dataZoom),
                    this.zoomOption = this.option.dataZoom,
                    this.myChart.canvasSupported || (this.zoomOption.realtime = !1),
                    this.clear(),
                    this._location = this._getLocation(),
                    this._zoom = this._getZoom(),
                    this._backupData(),
                    this.option.dataZoom && this.option.dataZoom.show && this._buildShape(),
                    this._syncData(),
                    this.silence(!1)
                },
                silence: function(i) {
                    this._isSilence = i
                },
                getRealDataIndex: function(l, i) {
                    if (!this._originalData || 0 === this._zoom.start && 100 == this._zoom.end) {
                        return i
                    }
                    var o = this._originalData.series;
                    return o[l] ? Math.floor(this._zoom.start / 100 * o[l].length) + i : -1
                },
                resize: function() {
                    this.clear(),
                    this._location = this._getLocation(),
                    this._zoom = this._getZoom(),
                    this.option.dataZoom.show && this._buildShape()
                }
            },
            u.inherits(y, q),
            w("../component").define("dataZoom", y),
            y
        }
        ),
        k("echarts/component/categoryAxis", ["require", "./base", "zrender/shape/Text", "zrender/shape/Line", "zrender/shape/Rectangle", "../config", "zrender/tool/util", "zrender/tool/area", "../component"], function(w) {
            function y(D, A, n, l, E, C) {
                if (1 > l.data.length) {
                    return console.error("option.data.length < 1."),
                    void 0
                }
                q.call(this, D, A, n, l, E),
                this.grid = this.component.grid;
                for (var B in C) {
                    this[B] = C[B]
                }
                this.refresh(l)
            }
            var q = w("./base")
              , v = w("zrender/shape/Text")
              , x = w("zrender/shape/Line")
              , p = w("zrender/shape/Rectangle")
              , m = w("../config");
            m.categoryAxis = {
                zlevel: 0,
                z: 0,
                show: !0,
                position: "bottom",
                name: "",
                nameLocation: "end",
                nameTextStyle: {},
                boundaryGap: !0,
                axisLine: {
                    show: !0,
                    onZero: !0,
                    lineStyle: {
                        color: "#48b",
                        width: 2,
                        type: "solid"
                    }
                },
                axisTick: {
                    show: !0,
                    interval: "auto",
                    inside: !1,
                    length: 5,
                    lineStyle: {
                        color: "#333",
                        width: 1
                    }
                },
                axisLabel: {
                    show: !0,
                    interval: "auto",
                    rotate: 0,
                    margin: 8,
                    textStyle: {
                        color: "#333"
                    }
                },
                splitLine: {
                    show: !0,
                    lineStyle: {
                        color: ["#ccc"],
                        width: 1,
                        type: "solid"
                    }
                },
                splitArea: {
                    show: !1,
                    areaStyle: {
                        color: ["rgba(250,250,250,0.3)", "rgba(200,200,200,0.3)"]
                    }
                }
            };
            var z = w("zrender/tool/util")
              , u = w("zrender/tool/area");
            return y.prototype = {
                type: m.COMPONENT_TYPE_AXIS_CATEGORY,
                _getReformedLabel: function(l) {
                    var i = this.getDataFromOption(this.option.data[l])
                      , o = this.option.data[l].formatter || this.option.axisLabel.formatter;
                    return o && ("function" == typeof o ? i = o.call(this.myChart, i) : "string" == typeof o && (i = o.replace("{value}", i))),
                    i
                },
                _getInterval: function() {
                    var H = this.option.axisLabel.interval;
                    if ("auto" == H) {
                        var K = this.option.axisLabel.textStyle.fontSize
                          , B = this.option.data
                          , F = this.option.data.length;
                        if (this.isHorizontal()) {
                            if (F > 3) {
                                var J, A, l = this.getGap(), G = !1, D = Math.floor(0.5 / l);
                                for (D = 1 > D ? 1 : D,
                                H = Math.floor(15 / l); !G && F > H; ) {
                                    H += D,
                                    G = !0,
                                    J = Math.floor(l * H);
                                    for (var C = Math.floor((F - 1) / H) * H; C >= 0; C -= H) {
                                        if (0 !== this.option.axisLabel.rotate) {
                                            A = K
                                        } else {
                                            if (B[C].textStyle) {
                                                A = u.getTextWidth(this._getReformedLabel(C), this.getFont(z.merge(B[C].textStyle, this.option.axisLabel.textStyle)))
                                            } else {
                                                var E = this._getReformedLabel(C) + ""
                                                  , I = (E.match(/\w/g) || "").length
                                                  , s = E.length - I;
                                                A = 2 * I * K / 3 + s * K
                                            }
                                        }
                                        if (A > J) {
                                            G = !1;
                                            break
                                        }
                                    }
                                }
                            } else {
                                H = 1
                            }
                        } else {
                            if (F > 3) {
                                var l = this.getGap();
                                for (H = Math.floor(11 / l); K > l * H - 6 && F > H; ) {
                                    H++
                                }
                            } else {
                                H = 1
                            }
                        }
                    } else {
                        H = "function" == typeof H ? 1 : H - 0 + 1
                    }
                    return H
                },
                _buildShape: function() {
                    if (this._interval = this._getInterval(),
                    this.option.show) {
                        this.option.splitArea.show && this._buildSplitArea(),
                        this.option.splitLine.show && this._buildSplitLine(),
                        this.option.axisLine.show && this._buildAxisLine(),
                        this.option.axisTick.show && this._buildAxisTick(),
                        this.option.axisLabel.show && this._buildAxisLabel();
                        for (var l = 0, i = this.shapeList.length; i > l; l++) {
                            this.zr.addShape(this.shapeList[l])
                        }
                    }
                },
                _buildAxisTick: function() {
                    var K, P = this.option.data, D = this.option.data.length, I = this.option.axisTick, C = I.length, A = I.lineStyle.color, Q = I.lineStyle.width, H = "function" == typeof I.interval ? I.interval : "auto" == I.interval ? "function" == typeof this.option.axisLabel.interval ? this.option.axisLabel.interval : !1 : !1, J = H ? 1 : "auto" == I.interval ? this._interval : I.interval - 0 + 1, F = I.onGap, E = F ? this.getGap() / 2 : F === void 0 ? this.option.boundaryGap ? this.getGap() / 2 : 0 : 0, G = E > 0 ? -J : 0;
                    if (this.isHorizontal()) {
                        for (var L, B = "bottom" == this.option.position ? I.inside ? this.grid.getYend() - C - 1 : this.grid.getYend() + 1 : I.inside ? this.grid.getY() + 1 : this.grid.getY() - C - 1, M = G; D > M; M += J) {
                            (!H || H(M, P[M])) && (L = this.subPixelOptimize(this.getCoordByIndex(M) + (M >= 0 ? E : 0), Q),
                            K = {
                                _axisShape: "axisTick",
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase(),
                                hoverable: !1,
                                style: {
                                    xStart: L,
                                    yStart: B,
                                    xEnd: L,
                                    yEnd: B + C,
                                    strokeColor: A,
                                    lineWidth: Q
                                }
                            },
                            this.shapeList.push(new x(K)))
                        }
                    } else {
                        for (var O, N = "left" == this.option.position ? I.inside ? this.grid.getX() + 1 : this.grid.getX() - C - 1 : I.inside ? this.grid.getXend() - C - 1 : this.grid.getXend() + 1, M = G; D > M; M += J) {
                            (!H || H(M, P[M])) && (O = this.subPixelOptimize(this.getCoordByIndex(M) - (M >= 0 ? E : 0), Q),
                            K = {
                                _axisShape: "axisTick",
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase(),
                                hoverable: !1,
                                style: {
                                    xStart: N,
                                    yStart: O,
                                    xEnd: N + C,
                                    yEnd: O,
                                    strokeColor: A,
                                    lineWidth: Q
                                }
                            },
                            this.shapeList.push(new x(K)))
                        }
                    }
                },
                _buildAxisLabel: function() {
                    var H, M, B = this.option.data, K = this.option.data.length, A = this.option.axisLabel, i = A.rotate, F = A.margin, G = A.clickable, D = A.textStyle, C = "function" == typeof A.interval ? A.interval : !1;
                    if (this.isHorizontal()) {
                        var E, I;
                        "bottom" == this.option.position ? (E = this.grid.getYend() + F,
                        I = "top") : (E = this.grid.getY() - F,
                        I = "bottom");
                        for (var s = 0; K > s; s += this._interval) {
                            C && !C(s, B[s]) || "" === this._getReformedLabel(s) || (M = z.merge(B[s].textStyle || {}, D),
                            H = {
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase() + 3,
                                hoverable: !1,
                                style: {
                                    x: this.getCoordByIndex(s),
                                    y: E,
                                    color: M.color,
                                    text: this._getReformedLabel(s),
                                    textFont: this.getFont(M),
                                    textAlign: M.align || "center",
                                    textBaseline: M.baseline || I
                                }
                            },
                            i && (H.style.textAlign = i > 0 ? "bottom" == this.option.position ? "right" : "left" : "bottom" == this.option.position ? "left" : "right",
                            H.rotation = [i * Math.PI / 180, H.style.x, H.style.y]),
                            this.shapeList.push(new v(this._axisLabelClickable(G, H))))
                        }
                    } else {
                        var J, L;
                        "left" == this.option.position ? (J = this.grid.getX() - F,
                        L = "right") : (J = this.grid.getXend() + F,
                        L = "left");
                        for (var s = 0; K > s; s += this._interval) {
                            C && !C(s, B[s]) || "" === this._getReformedLabel(s) || (M = z.merge(B[s].textStyle || {}, D),
                            H = {
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase() + 3,
                                hoverable: !1,
                                style: {
                                    x: J,
                                    y: this.getCoordByIndex(s),
                                    color: M.color,
                                    text: this._getReformedLabel(s),
                                    textFont: this.getFont(M),
                                    textAlign: M.align || L,
                                    textBaseline: M.baseline || 0 === s && "" !== this.option.name ? "bottom" : s == K - 1 && "" !== this.option.name ? "top" : "middle"
                                }
                            },
                            i && (H.rotation = [i * Math.PI / 180, H.style.x, H.style.y]),
                            this.shapeList.push(new v(this._axisLabelClickable(G, H))))
                        }
                    }
                },
                _buildSplitLine: function() {
                    var P, E = this.option.data, J = this.option.data.length, M = this.option.splitLine, I = M.lineStyle.type, G = M.lineStyle.width, F = M.lineStyle.color;
                    F = F instanceof Array ? F : [F];
                    var L = F.length
                      , N = "function" == typeof this.option.axisLabel.interval ? this.option.axisLabel.interval : !1
                      , K = M.onGap
                      , A = K ? this.getGap() / 2 : K === void 0 ? this.option.boundaryGap ? this.getGap() / 2 : 0 : 0;
                    if (J -= K || K === void 0 && this.option.boundaryGap ? 1 : 0,
                    this.isHorizontal()) {
                        for (var B, Q = this.grid.getY(), H = this.grid.getYend(), R = 0; J > R; R += this._interval) {
                            (!N || N(R, E[R])) && (B = this.subPixelOptimize(this.getCoordByIndex(R) + A, G),
                            P = {
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase(),
                                hoverable: !1,
                                style: {
                                    xStart: B,
                                    yStart: Q,
                                    xEnd: B,
                                    yEnd: H,
                                    strokeColor: F[R / this._interval % L],
                                    lineType: I,
                                    lineWidth: G
                                }
                            },
                            this.shapeList.push(new x(P)))
                        }
                    } else {
                        for (var D, C = this.grid.getX(), O = this.grid.getXend(), R = 0; J > R; R += this._interval) {
                            (!N || N(R, E[R])) && (D = this.subPixelOptimize(this.getCoordByIndex(R) - A, G),
                            P = {
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase(),
                                hoverable: !1,
                                style: {
                                    xStart: C,
                                    yStart: D,
                                    xEnd: O,
                                    yEnd: D,
                                    strokeColor: F[R / this._interval % L],
                                    lineType: I,
                                    lineWidth: G
                                }
                            },
                            this.shapeList.push(new x(P)))
                        }
                    }
                },
                _buildSplitArea: function() {
                    var N, D = this.option.data, H = this.option.splitArea, K = H.areaStyle.color;
                    if (K instanceof Array) {
                        var Q = K.length
                          , F = this.option.data.length
                          , E = "function" == typeof this.option.axisLabel.interval ? this.option.axisLabel.interval : !1
                          , J = H.onGap
                          , L = J ? this.getGap() / 2 : J === void 0 ? this.option.boundaryGap ? this.getGap() / 2 : 0 : 0;
                        if (this.isHorizontal()) {
                            for (var I, o = this.grid.getY(), A = this.grid.getHeight(), O = this.grid.getX(), G = 0; F >= G; G += this._interval) {
                                E && !E(G, D[G]) && F > G || (I = F > G ? this.getCoordByIndex(G) + L : this.grid.getXend(),
                                N = {
                                    zlevel: this.getZlevelBase(),
                                    z: this.getZBase(),
                                    hoverable: !1,
                                    style: {
                                        x: O,
                                        y: o,
                                        width: I - O,
                                        height: A,
                                        color: K[G / this._interval % Q]
                                    }
                                },
                                this.shapeList.push(new p(N)),
                                O = I)
                            }
                        } else {
                            for (var P, C = this.grid.getX(), B = this.grid.getWidth(), M = this.grid.getYend(), G = 0; F >= G; G += this._interval) {
                                E && !E(G, D[G]) && F > G || (P = F > G ? this.getCoordByIndex(G) - L : this.grid.getY(),
                                N = {
                                    zlevel: this.getZlevelBase(),
                                    z: this.getZBase(),
                                    hoverable: !1,
                                    style: {
                                        x: C,
                                        y: P,
                                        width: B,
                                        height: M - P,
                                        color: K[G / this._interval % Q]
                                    }
                                },
                                this.shapeList.push(new p(N)),
                                M = P)
                            }
                        }
                    } else {
                        N = {
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase(),
                            hoverable: !1,
                            style: {
                                x: this.grid.getX(),
                                y: this.grid.getY(),
                                width: this.grid.getWidth(),
                                height: this.grid.getHeight(),
                                color: K
                            }
                        },
                        this.shapeList.push(new p(N))
                    }
                },
                refresh: function(i) {
                    i && (this.option = this.reformOption(i),
                    this.option.axisLabel.textStyle = this.getTextStyle(this.option.axisLabel.textStyle)),
                    this.clear(),
                    this._buildShape()
                },
                getGap: function() {
                    var l = this.option.data.length
                      , i = this.isHorizontal() ? this.grid.getWidth() : this.grid.getHeight();
                    return this.option.boundaryGap ? i / l : i / (l > 1 ? l - 1 : 1)
                },
                getCoord: function(A) {
                    for (var s = this.option.data, C = s.length, r = this.getGap(), l = this.option.boundaryGap ? r / 2 : 0, B = 0; C > B; B++) {
                        if (this.getDataFromOption(s[B]) == A) {
                            return l = this.isHorizontal() ? this.grid.getX() + l : this.grid.getYend() - l
                        }
                        l += r
                    }
                },
                getCoordByIndex: function(l) {
                    if (0 > l) {
                        return this.isHorizontal() ? this.grid.getX() : this.grid.getYend()
                    }
                    if (l > this.option.data.length - 1) {
                        return this.isHorizontal() ? this.grid.getXend() : this.grid.getY()
                    }
                    var i = this.getGap()
                      , o = this.option.boundaryGap ? i / 2 : 0;
                    return o += l * i,
                    o = this.isHorizontal() ? this.grid.getX() + o : this.grid.getYend() - o
                },
                getNameByIndex: function(i) {
                    return this.getDataFromOption(this.option.data[i])
                },
                getIndexByName: function(r) {
                    for (var o = this.option.data, s = o.length, l = 0; s > l; l++) {
                        if (this.getDataFromOption(o[l]) == r) {
                            return l
                        }
                    }
                    return -1
                },
                getValueFromCoord: function() {
                    return ""
                },
                isMainAxis: function(i) {
                    return 0 === i % this._interval
                }
            },
            z.inherits(y, q),
            w("../component").define("categoryAxis", y),
            y
        }
        ),
        k("echarts/component/valueAxis", ["require", "./base", "zrender/shape/Text", "zrender/shape/Line", "zrender/shape/Rectangle", "../config", "../util/date", "zrender/tool/util", "../util/smartSteps", "../util/accMath", "../component"], function(w) {
            function y(F, C, B, A, G, E, D) {
                if (!D || 0 === D.length) {
                    return console.err("option.series.length == 0."),
                    void 0
                }
                q.call(this, F, C, B, A, G),
                this.series = D,
                this.grid = this.component.grid;
                for (var n in E) {
                    this[n] = E[n]
                }
                this.refresh(A, D)
            }
            var q = w("./base")
              , v = w("zrender/shape/Text")
              , x = w("zrender/shape/Line")
              , p = w("zrender/shape/Rectangle")
              , m = w("../config");
            m.valueAxis = {
                zlevel: 0,
                z: 0,
                show: !0,
                position: "left",
                name: "",
                nameLocation: "end",
                nameTextStyle: {},
                boundaryGap: [0, 0],
                axisLine: {
                    show: !0,
                    onZero: !0,
                    lineStyle: {
                        color: "#48b",
                        width: 2,
                        type: "solid"
                    }
                },
                axisTick: {
                    show: !1,
                    inside: !1,
                    length: 5,
                    lineStyle: {
                        color: "#333",
                        width: 1
                    }
                },
                axisLabel: {
                    show: !0,
                    rotate: 0,
                    margin: 8,
                    textStyle: {
                        color: "#333"
                    }
                },
                splitLine: {
                    show: !0,
                    lineStyle: {
                        color: ["#ccc"],
                        width: 1,
                        type: "solid"
                    }
                },
                splitArea: {
                    show: !1,
                    areaStyle: {
                        color: ["rgba(250,250,250,0.3)", "rgba(200,200,200,0.3)"]
                    }
                }
            };
            var z = w("../util/date")
              , u = w("zrender/tool/util");
            return y.prototype = {
                type: m.COMPONENT_TYPE_AXIS_VALUE,
                _buildShape: function() {
                    if (this._hasData = !1,
                    this._calculateValue(),
                    this._hasData && this.option.show) {
                        this.option.splitArea.show && this._buildSplitArea(),
                        this.option.splitLine.show && this._buildSplitLine(),
                        this.option.axisLine.show && this._buildAxisLine(),
                        this.option.axisTick.show && this._buildAxisTick(),
                        this.option.axisLabel.show && this._buildAxisLabel();
                        for (var l = 0, i = this.shapeList.length; i > l; l++) {
                            this.zr.addShape(this.shapeList[l])
                        }
                    }
                },
                _buildAxisTick: function() {
                    var J, K = this._valueList, C = this._valueList.length, H = this.option.axisTick, B = H.length, A = H.lineStyle.color, L = H.lineStyle.width;
                    if (this.isHorizontal()) {
                        for (var G, I = "bottom" === this.option.position ? H.inside ? this.grid.getYend() - B - 1 : this.grid.getYend() + 1 : H.inside ? this.grid.getY() + 1 : this.grid.getY() - B - 1, E = 0; C > E; E++) {
                            G = this.subPixelOptimize(this.getCoord(K[E]), L),
                            J = {
                                _axisShape: "axisTick",
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase(),
                                hoverable: !1,
                                style: {
                                    xStart: G,
                                    yStart: I,
                                    xEnd: G,
                                    yEnd: I + B,
                                    strokeColor: A,
                                    lineWidth: L
                                }
                            },
                            this.shapeList.push(new x(J))
                        }
                    } else {
                        for (var D, F = "left" === this.option.position ? H.inside ? this.grid.getX() + 1 : this.grid.getX() - B - 1 : H.inside ? this.grid.getXend() - B - 1 : this.grid.getXend() + 1, E = 0; C > E; E++) {
                            D = this.subPixelOptimize(this.getCoord(K[E]), L),
                            J = {
                                _axisShape: "axisTick",
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase(),
                                hoverable: !1,
                                style: {
                                    xStart: F,
                                    yStart: D,
                                    xEnd: F + B,
                                    yEnd: D,
                                    strokeColor: A,
                                    lineWidth: L
                                }
                            },
                            this.shapeList.push(new x(J))
                        }
                    }
                },
                _buildAxisLabel: function() {
                    var H, J = this._valueList, B = this._valueList.length, I = this.option.axisLabel.rotate, A = this.option.axisLabel.margin, i = this.option.axisLabel.clickable, K = this.option.axisLabel.textStyle;
                    if (this.isHorizontal()) {
                        var F, G;
                        "bottom" === this.option.position ? (F = this.grid.getYend() + A,
                        G = "top") : (F = this.grid.getY() - A,
                        G = "bottom");
                        for (var D = 0; B > D; D++) {
                            H = {
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase() + 3,
                                hoverable: !1,
                                style: {
                                    x: this.getCoord(J[D]),
                                    y: F,
                                    color: "function" == typeof K.color ? K.color(J[D]) : K.color,
                                    text: this._valueLabel[D],
                                    textFont: this.getFont(K),
                                    textAlign: K.align || "center",
                                    textBaseline: K.baseline || G
                                }
                            },
                            I && (H.style.textAlign = I > 0 ? "bottom" === this.option.position ? "right" : "left" : "bottom" === this.option.position ? "left" : "right",
                            H.rotation = [I * Math.PI / 180, H.style.x, H.style.y]),
                            this.shapeList.push(new v(this._axisLabelClickable(i, H)))
                        }
                    } else {
                        var C, E;
                        "left" === this.option.position ? (C = this.grid.getX() - A,
                        E = "right") : (C = this.grid.getXend() + A,
                        E = "left");
                        for (var D = 0; B > D; D++) {
                            H = {
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase() + 3,
                                hoverable: !1,
                                style: {
                                    x: C,
                                    y: this.getCoord(J[D]),
                                    color: "function" == typeof K.color ? K.color(J[D]) : K.color,
                                    text: this._valueLabel[D],
                                    textFont: this.getFont(K),
                                    textAlign: K.align || E,
                                    textBaseline: K.baseline || (0 === D && "" !== this.option.name ? "bottom" : D === B - 1 && "" !== this.option.name ? "top" : "middle")
                                }
                            },
                            I && (H.rotation = [I * Math.PI / 180, H.style.x, H.style.y]),
                            this.shapeList.push(new v(this._axisLabelClickable(i, H)))
                        }
                    }
                },
                _buildSplitLine: function() {
                    var K, N = this._valueList, D = this._valueList.length, I = this.option.splitLine, C = I.lineStyle.type, A = I.lineStyle.width, O = I.lineStyle.color;
                    O = O instanceof Array ? O : [O];
                    var H = O.length;
                    if (this.isHorizontal()) {
                        for (var J, F = this.grid.getY(), E = this.grid.getYend(), G = 0; D > G; G++) {
                            J = this.subPixelOptimize(this.getCoord(N[G]), A),
                            K = {
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase(),
                                hoverable: !1,
                                style: {
                                    xStart: J,
                                    yStart: F,
                                    xEnd: J,
                                    yEnd: E,
                                    strokeColor: O[G % H],
                                    lineType: C,
                                    lineWidth: A
                                }
                            },
                            this.shapeList.push(new x(K))
                        }
                    } else {
                        for (var L, B = this.grid.getX(), M = this.grid.getXend(), G = 0; D > G; G++) {
                            L = this.subPixelOptimize(this.getCoord(N[G]), A),
                            K = {
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase(),
                                hoverable: !1,
                                style: {
                                    xStart: B,
                                    yStart: L,
                                    xEnd: M,
                                    yEnd: L,
                                    strokeColor: O[G % H],
                                    lineType: C,
                                    lineWidth: A
                                }
                            },
                            this.shapeList.push(new x(K))
                        }
                    }
                },
                _buildSplitArea: function() {
                    var I, L = this.option.splitArea.areaStyle.color;
                    if (L instanceof Array) {
                        var B = L.length
                          , G = this._valueList
                          , K = this._valueList.length;
                        if (this.isHorizontal()) {
                            for (var o, M = this.grid.getY(), F = this.grid.getHeight(), H = this.grid.getX(), D = 0; K >= D; D++) {
                                o = K > D ? this.getCoord(G[D]) : this.grid.getXend(),
                                I = {
                                    zlevel: this.getZlevelBase(),
                                    z: this.getZBase(),
                                    hoverable: !1,
                                    style: {
                                        x: H,
                                        y: M,
                                        width: o - H,
                                        height: F,
                                        color: L[D % B]
                                    }
                                },
                                this.shapeList.push(new p(I)),
                                H = o
                            }
                        } else {
                            for (var C, E = this.grid.getX(), J = this.grid.getWidth(), A = this.grid.getYend(), D = 0; K >= D; D++) {
                                C = K > D ? this.getCoord(G[D]) : this.grid.getY(),
                                I = {
                                    zlevel: this.getZlevelBase(),
                                    z: this.getZBase(),
                                    hoverable: !1,
                                    style: {
                                        x: E,
                                        y: C,
                                        width: J,
                                        height: A - C,
                                        color: L[D % B]
                                    }
                                },
                                this.shapeList.push(new p(I)),
                                A = C
                            }
                        }
                    } else {
                        I = {
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase(),
                            hoverable: !1,
                            style: {
                                x: this.grid.getX(),
                                y: this.grid.getY(),
                                width: this.grid.getWidth(),
                                height: this.grid.getHeight(),
                                color: L
                            }
                        },
                        this.shapeList.push(new p(I))
                    }
                },
                _calculateValue: function() {
                    if (isNaN(this.option.min - 0) || isNaN(this.option.max - 0)) {
                        for (var F, H, A = {}, D = this.component.legend, G = 0, r = this.series.length; r > G; G++) {
                            !(this.series[G].type != m.CHART_TYPE_LINE && this.series[G].type != m.CHART_TYPE_BAR && this.series[G].type != m.CHART_TYPE_SCATTER && this.series[G].type != m.CHART_TYPE_K && this.series[G].type != m.CHART_TYPE_EVENTRIVER || D && !D.isSelected(this.series[G].name) || (F = this.series[G].xAxisIndex || 0,
                            H = this.series[G].yAxisIndex || 0,
                            this.option.xAxisIndex != F && this.option.yAxisIndex != H || !this._calculSum(A, G)))
                        }
                        var I;
                        for (var G in A) {
                            I = A[G];
                            for (var C = 0, E = I.length; E > C; C++) {
                                if (!isNaN(I[C])) {
                                    this._hasData = !0,
                                    this._min = I[C],
                                    this._max = I[C];
                                    break
                                }
                            }
                            if (this._hasData) {
                                break
                            }
                        }
                        for (var G in A) {
                            I = A[G];
                            for (var C = 0, E = I.length; E > C; C++) {
                                isNaN(I[C]) || (this._min = Math.min(this._min, I[C]),
                                this._max = Math.max(this._max, I[C]))
                            }
                        }
                        var B = Math.abs(this._max - this._min);
                        this._min = isNaN(this.option.min - 0) ? this._min - Math.abs(B * this.option.boundaryGap[0]) : this.option.min - 0,
                        this._max = isNaN(this.option.max - 0) ? this._max + Math.abs(B * this.option.boundaryGap[1]) : this.option.max - 0,
                        this._min === this._max && (0 === this._max ? this._max = 1 : this._max > 0 ? this._min = null  != this._max / this.option.splitNumber ? this.option.splitNumber : 5 : this._max = null  != this._max / this.option.splitNumber ? this.option.splitNumber : 5),
                        "time" != this.option.type ? this._reformValue(this.option.scale) : this._reformTimeValue()
                    } else {
                        this._hasData = !0,
                        this._min = this.option.min - 0,
                        this._max = this.option.max - 0,
                        "time" != this.option.type ? this._customerValue() : this._reformTimeValue()
                    }
                },
                _calculSum: function(G, J) {
                    var s, E, I = this.series[J].name || "kener";
                    if (this.series[J].stack) {
                        var r = "__Magic_Key_Positive__" + this.series[J].stack
                          , D = "__Magic_Key_Negative__" + this.series[J].stack;
                        G[r] = G[r] || [],
                        G[D] = G[D] || [],
                        G[I] = G[I] || [],
                        E = this.series[J].data;
                        for (var F = 0, B = E.length; B > F; F++) {
                            s = this.getDataFromOption(E[F]),
                            "-" !== s && (s -= 0,
                            s >= 0 ? null  != G[r][F] ? G[r][F] += s : G[r][F] = s : null  != G[D][F] ? G[D][F] += s : G[D][F] = s,
                            this.option.scale && G[I].push(s))
                        }
                    } else {
                        if (G[I] = G[I] || [],
                        this.series[J].type != m.CHART_TYPE_EVENTRIVER) {
                            E = this.series[J].data;
                            for (var F = 0, B = E.length; B > F; F++) {
                                s = this.getDataFromOption(E[F]),
                                this.series[J].type === m.CHART_TYPE_K ? (G[I].push(s[0]),
                                G[I].push(s[1]),
                                G[I].push(s[2]),
                                G[I].push(s[3])) : s instanceof Array ? (-1 != this.option.xAxisIndex && G[I].push("time" != this.option.type ? s[0] : z.getNewDate(s[0])),
                                -1 != this.option.yAxisIndex && G[I].push("time" != this.option.type ? s[1] : z.getNewDate(s[1]))) : G[I].push(s)
                            }
                        } else {
                            E = this.series[J].data;
                            for (var F = 0, B = E.length; B > F; F++) {
                                for (var A = E[F].evolution, C = 0, H = A.length; H > C; C++) {
                                    G[I].push(z.getNewDate(A[C].time))
                                }
                            }
                        }
                    }
                },
                _reformValue: function(o) {
                    var r = w("../util/smartSteps")
                      , l = this.option.splitNumber;
                    !o && this._min >= 0 && this._max >= 0 && (this._min = 0),
                    !o && 0 >= this._min && 0 >= this._max && (this._max = 0);
                    var e = r(this._min, this._max, l);
                    l = null  != l ? l : e.secs,
                    this._min = e.min,
                    this._max = e.max,
                    this._valueList = e.pnts,
                    this._reformLabelData()
                },
                _reformTimeValue: function() {
                    var s = null  != this.option.splitNumber ? this.option.splitNumber : 5
                      , r = z.getAutoFormatter(this._min, this._max, s)
                      , A = r.formatter
                      , o = r.gapValue;
                    this._valueList = [z.getNewDate(this._min)];
                    var l;
                    switch (A) {
                    case "week":
                        l = z.nextMonday(this._min);
                        break;
                    case "month":
                        l = z.nextNthOnMonth(this._min, 1);
                        break;
                    case "quarter":
                        l = z.nextNthOnQuarterYear(this._min, 1);
                        break;
                    case "half-year":
                        l = z.nextNthOnHalfYear(this._min, 1);
                        break;
                    case "year":
                        l = z.nextNthOnYear(this._min, 1);
                        break;
                    default:
                        7200000 >= o ? l = (Math.floor(this._min / o) + 1) * o : (l = z.getNewDate(this._min - -o),
                        l.setHours(6 * Math.round(l.getHours() / 6)),
                        l.setMinutes(0),
                        l.setSeconds(0))
                    }
                    for (o / 2 > l - this._min && (l -= -o),
                    r = z.getNewDate(l),
                    s *= 1.5; s-- >= 0 && (("month" == A || "quarter" == A || "half-year" == A || "year" == A) && r.setDate(1),
                    !(o / 2 > this._max - r)); ) {
                        this._valueList.push(r),
                        r = z.getNewDate(r - -o)
                    }
                    this._valueList.push(z.getNewDate(this._max)),
                    this._reformLabelData(A)
                },
                _customerValue: function() {
                    var o = w("../util/accMath")
                      , r = null  != this.option.splitNumber ? this.option.splitNumber : 5
                      , l = (this._max - this._min) / r;
                    this._valueList = [];
                    for (var e = 0; r >= e; e++) {
                        this._valueList.push(o.accAdd(this._min, o.accMul(l, e)))
                    }
                    this._reformLabelData()
                },
                _reformLabelData: function(r) {
                    this._valueLabel = [];
                    var o = this.option.axisLabel.formatter;
                    if (o) {
                        for (var s = 0, l = this._valueList.length; l > s; s++) {
                            "function" == typeof o ? this._valueLabel.push(r ? o.call(this.myChart, this._valueList[s], r) : o.call(this.myChart, this._valueList[s])) : "string" == typeof o && this._valueLabel.push(r ? z.format(o, this._valueList[s]) : o.replace("{value}", this._valueList[s]))
                        }
                    } else {
                        if (r) {
                            for (var s = 0, l = this._valueList.length; l > s; s++) {
                                this._valueLabel.push(z.format(r, this._valueList[s]))
                            }
                        } else {
                            for (var s = 0, l = this._valueList.length; l > s; s++) {
                                this._valueLabel.push(this.numAddCommas(this._valueList[s]))
                            }
                        }
                    }
                },
                getExtremum: function() {
                    return this._calculateValue(),
                    {
                        min: this._min,
                        max: this._max
                    }
                },
                refresh: function(l, i) {
                    l && (this.option = this.reformOption(l),
                    this.option.axisLabel.textStyle = u.merge(this.option.axisLabel.textStyle || {}, this.ecTheme.textStyle),
                    this.series = i),
                    this.zr && (this.clear(),
                    this._buildShape())
                },
                getCoord: function(l) {
                    l = this._min > l ? this._min : l,
                    l = l > this._max ? this._max : l;
                    var i;
                    return i = this.isHorizontal() ? this.grid.getX() + (l - this._min) / (this._max - this._min) * this.grid.getWidth() : this.grid.getYend() - (l - this._min) / (this._max - this._min) * this.grid.getHeight()
                },
                getCoordSize: function(i) {
                    return this.isHorizontal() ? Math.abs(i / (this._max - this._min) * this.grid.getWidth()) : Math.abs(i / (this._max - this._min) * this.grid.getHeight())
                },
                getValueFromCoord: function(l) {
                    var i;
                    return this.isHorizontal() ? (l = this.grid.getX() > l ? this.grid.getX() : l,
                    l = l > this.grid.getXend() ? this.grid.getXend() : l,
                    i = this._min + (l - this.grid.getX()) / this.grid.getWidth() * (this._max - this._min)) : (l = this.grid.getY() > l ? this.grid.getY() : l,
                    l = l > this.grid.getYend() ? this.grid.getYend() : l,
                    i = this._max - (l - this.grid.getY()) / this.grid.getHeight() * (this._max - this._min)),
                    i.toFixed(2) - 0
                },
                isMaindAxis: function(l) {
                    for (var i = 0, o = this._valueList.length; o > i; i++) {
                        if (this._valueList[i] === l) {
                            return !0
                        }
                    }
                    return !1
                }
            },
            u.inherits(y, q),
            w("../component").define("valueAxis", y),
            y
        }
        ),
        k("echarts/util/date", [], function() {
            function z(H, J, E) {
                E = E > 1 ? E : 2;
                for (var G, I, D, m, K = 0, F = v.length; F > K; K++) {
                    if (G = v[K].value,
                    I = Math.ceil(J / G) * G - Math.floor(H / G) * G,
                    1.2 * E >= Math.round(I / G)) {
                        D = v[K].formatter,
                        m = v[K].value;
                        break
                    }
                }
                return null  == D && (D = "year",
                G = 31708800000,
                I = Math.ceil(J / G) * G - Math.floor(H / G) * G,
                m = Math.round(I / (E - 1) / G) * G),
                {
                    formatter: D,
                    gapValue: m
                }
            }
            function B(i) {
                return 10 > i ? "0" + i : i
            }
            function u(I, E) {
                ("week" == I || "month" == I || "quarter" == I || "half-year" == I || "year" == I) && (I = "MM - dd\nyyyy");
                var H = y(E)
                  , J = H.getFullYear()
                  , D = H.getMonth() + 1
                  , t = H.getDate()
                  , K = H.getHours()
                  , G = H.getMinutes()
                  , F = H.getSeconds();
                return I = I.replace("MM", B(D)),
                I = I.toLowerCase(),
                I = I.replace("yyyy", J),
                I = I.replace("yy", J % 100),
                I = I.replace("dd", B(t)),
                I = I.replace("d", t),
                I = I.replace("hh", B(K)),
                I = I.replace("h", K),
                I = I.replace("mm", B(G)),
                I = I.replace("m", G),
                I = I.replace("ss", B(F)),
                I = I.replace("s", F)
            }
            function x(i) {
                return i = y(i),
                i.setDate(i.getDate() + 8 - i.getDay()),
                i
            }
            function A(l, i, m) {
                return l = y(l),
                l.setMonth(Math.ceil((l.getMonth() + 1) / m) * m),
                l.setDate(i),
                l
            }
            function q(l, i) {
                return A(l, i, 1)
            }
            function p(l, i) {
                return A(l, i, 3)
            }
            function C(l, i) {
                return A(l, i, 6)
            }
            function w(l, i) {
                return A(l, i, 12)
            }
            function y(i) {
                return i instanceof Date ? i : new Date("string" == typeof i ? i.replace(/-/g, "/") : i)
            }
            var v = [{
                formatter: "hh : mm : ss",
                value: 1000
            }, {
                formatter: "hh : mm : ss",
                value: 5000
            }, {
                formatter: "hh : mm : ss",
                value: 10000
            }, {
                formatter: "hh : mm : ss",
                value: 15000
            }, {
                formatter: "hh : mm : ss",
                value: 30000
            }, {
                formatter: "hh : mm\nMM - dd",
                value: 60000
            }, {
                formatter: "hh : mm\nMM - dd",
                value: 300000
            }, {
                formatter: "hh : mm\nMM - dd",
                value: 600000
            }, {
                formatter: "hh : mm\nMM - dd",
                value: 900000
            }, {
                formatter: "hh : mm\nMM - dd",
                value: 1800000
            }, {
                formatter: "hh : mm\nMM - dd",
                value: 3600000
            }, {
                formatter: "hh : mm\nMM - dd",
                value: 7200000
            }, {
                formatter: "hh : mm\nMM - dd",
                value: 21600000
            }, {
                formatter: "hh : mm\nMM - dd",
                value: 43200000
            }, {
                formatter: "MM - dd\nyyyy",
                value: 86400000
            }, {
                formatter: "week",
                value: 604800000
            }, {
                formatter: "month",
                value: 2678400000
            }, {
                formatter: "quarter",
                value: 8208000000
            }, {
                formatter: "half-year",
                value: 16416000000
            }, {
                formatter: "year",
                value: 32832000000
            }];
            return {
                getAutoFormatter: z,
                getNewDate: y,
                format: u,
                nextMonday: x,
                nextNthPerNmonth: A,
                nextNthOnMonth: q,
                nextNthOnQuarterYear: p,
                nextNthOnHalfYear: C,
                nextNthOnYear: w
            }
        }
        ),
        k("echarts/util/smartSteps", [], function() {
            function ae(i) {
                return q.log(F(i)) / q.LN10
            }
            function N(i) {
                return q.pow(10, i)
            }
            function S(i) {
                return i === J(i)
            }
            function aa(p, n, m, l) {
                ah = l || {},
                ad = ah.steps || C,
                Z = ah.secs || z,
                m = D(+m || 0) % 99,
                p = +p || 0,
                n = +n || 0,
                G = aj = 0,
                "min" in ah && (p = +ah.min || 0,
                G = 1),
                "max" in ah && (n = +ah.max || 0,
                aj = 1),
                p > n && (n = [p, p = n][0]);
                var r = n - p;
                if (G && aj) {
                    return ac(p, n, m)
                }
                if ((m || 5) > r) {
                    if (S(p) && S(n)) {
                        return af(p, n, m)
                    }
                    if (0 === r) {
                        return Q(p, n, m)
                    }
                }
                return ab(p, n, m)
            }
            function ai(I, r, x, W) {
                W = W || 0;
                var X = R((r - I) / x, -1)
                  , w = R(I, -1, 1)
                  , y = R(r, -1)
                  , u = q.min(X.e, w.e, y.e);
                0 === w.c ? u = q.min(X.e, y.e) : 0 === y.c && (u = q.min(X.e, w.e)),
                P(X, {
                    c: 0,
                    e: u
                }),
                P(w, X, 1),
                P(y, X),
                W += u,
                I = w.c,
                r = y.c;
                for (var t = (r - I) / x, v = N(W), K = 0, o = [], L = x + 1; L--; ) {
                    o[L] = (I + t * L) * v
                }
                if (0 > W) {
                    K = M(v),
                    t = +(t * v).toFixed(K),
                    I = +(I * v).toFixed(K),
                    r = +(r * v).toFixed(K);
                    for (var L = o.length; L--; ) {
                        o[L] = o[L].toFixed(K),
                        0 === +o[L] && (o[L] = "0")
                    }
                } else {
                    I *= v,
                    r *= v,
                    t *= v
                }
                return Z = 0,
                ad = 0,
                ah = 0,
                {
                    min: I,
                    max: r,
                    secs: x,
                    step: t,
                    fix: K,
                    exp: W,
                    pnts: o
                }
            }
            function R(l, e, p) {
                e = D(e % 10) || 2,
                0 > e && (S(l) ? e = ("" + F(l)).replace(/0+$/, "").length || 1 : (l = l.toFixed(15).replace(/0+$/, ""),
                e = l.replace(".", "").replace(/^[-0]+/, "").length,
                l = +l));
                var n = J(ae(l)) - e + 1
                  , m = +(l * N(-n)).toFixed(15) || 0;
                return m = p ? J(m) : H(m),
                !m && (n = 0),
                ("" + F(m)).length > e && (n += 1,
                m /= 10),
                {
                    c: m,
                    e: n
                }
            }
            function P(o, p, m) {
                var l = p.e - o.e;
                l && (o.e += l,
                o.c *= N(-l),
                o.c = m ? J(o.c) : H(o.c))
            }
            function O(l, i, m) {
                l.e < i.e ? P(i, l, m) : P(l, i, m)
            }
            function Y(o, m) {
                m = m || C,
                o = R(o);
                for (var p = o.c, l = 0; p > m[l]; ) {
                    l++
                }
                if (!m[l]) {
                    for (p /= 10,
                    o.e += 1,
                    l = 0; p > m[l]; ) {
                        l++
                    }
                }
                return o.c = m[l],
                o
            }
            function ab(r, y, m) {
                var I, n = m || +Z.slice(-1), l = Y((y - r) / n, ad), x = R(y - r), o = R(r, -1, 1), w = R(y, -1);
                if (P(x, l),
                P(o, l, 1),
                P(w, l),
                m ? I = A(o, w, n) : n = T(o, w),
                S(r) && S(y) && r * y >= 0) {
                    if (n > y - r) {
                        return af(r, y, n)
                    }
                    n = B(r, y, m, o, w, n)
                }
                var v = ag(r, y, o.c, w.c);
                return o.c = v[0],
                w.c = v[1],
                (G || aj) && E(r, y, o, w),
                ai(o.c, w.c, n, w.e)
            }
            function T(v, x) {
                for (var m, l, w, u, t = [], p = Z.length; p--; ) {
                    m = Z[p],
                    l = Y((x.c - v.c) / m, ad),
                    l = l.c * N(l.e),
                    w = J(v.c / l) * l,
                    u = H(x.c / l) * l,
                    t[p] = {
                        min: w,
                        max: u,
                        step: l,
                        span: u - w
                    }
                }
                return t.sort(function(o, i) {
                    var r = o.span - i.span;
                    return 0 === r && (r = o.step - i.step),
                    r
                }
                ),
                t = t[0],
                m = t.span / t.step,
                v.c = t.min,
                x.c = t.max,
                3 > m ? 2 * m : m
            }
            function A(y, t, w) {
                for (var I, p, l = t.c, K = (t.c - y.c) / w - 1; l > y.c; ) {
                    K = Y(K + 1, ad),
                    K = K.c * N(K.e),
                    I = K * w,
                    p = H(t.c / K) * K,
                    l = p - I
                }
                var x = y.c - l
                  , v = p - t.c
                  , u = x - v;
                return u > 1.1 * K && (u = D(u / K / 2) * K,
                l += u,
                p += u),
                y.c = l,
                t.c = p,
                K
            }
            function B(x, v, y, p, n, I) {
                var u = n.c - p.c
                  , w = u / I * N(n.e);
                if (!S(w) && (w = J(w),
                u = w * I,
                v - x > u && (w += 1,
                u = w * I,
                !y && w * (I - 1) >= v - x && (I -= 1,
                u = w * I)),
                u >= v - x)) {
                    var t = u - (v - x);
                    p.c = D(x - t / 2),
                    n.c = D(v + t / 2),
                    p.e = 0,
                    n.e = 0
                }
                return I
            }
            function af(v, m, x) {
                if (x = x || 5,
                G) {
                    m = v + x
                } else {
                    if (aj) {
                        v = m - x
                    } else {
                        var l = x - (m - v)
                          , w = D(v - l / 2)
                          , u = D(m + l / 2)
                          , p = ag(v, m, w, u);
                        v = p[0],
                        m = p[1]
                    }
                }
                return ai(v, m, x)
            }
            function Q(o, m, p) {
                p = p || 5;
                var l = q.min(F(m / p), p) / 2.1;
                return G ? m = o + l : aj ? o = m - l : (o -= l,
                m += l),
                ab(o, m, p)
            }
            function ag(o, m, p, l) {
                return o >= 0 && 0 > p ? (l -= p,
                p = 0) : 0 >= m && l > 0 && (p -= l,
                l = 0),
                [p, l]
            }
            function M(i) {
                return i = (+i).toFixed(15).split("."),
                i.pop().replace(/0+$/, "").length
            }
            function E(s, o, u, m) {
                if (G) {
                    var l = R(s, 4, 1);
                    u.e - l.e > 6 && (l = {
                        c: 0,
                        e: u.e
                    }),
                    O(u, l),
                    O(m, l),
                    m.c += l.c - u.c,
                    u.c = l.c
                } else {
                    if (aj) {
                        var p = R(o, 4);
                        m.e - p.e > 6 && (p = {
                            c: 0,
                            e: m.e
                        }),
                        O(u, p),
                        O(m, p),
                        u.c += p.c - m.c,
                        m.c = p.c
                    }
                }
            }
            function ac(X, ao, r) {
                var K = r ? [r] : Z
                  , ap = ao - X;
                if (0 === ap) {
                    return ao = R(ao, 3),
                    r = K[0],
                    ao.c = D(ao.c + r / 2),
                    ai(ao.c - r, ao.c, r, ao.e)
                }
                0.000001 > F(ao / ap) && (ao = 0),
                0.000001 > F(X / ap) && (X = 0);
                var I, L, w, v = [[5, 10], [10, 2], [50, 10], [100, 2]], x = [], ak = [], o = R(ao - X, 3), al = R(X, -1, 1), an = R(ao, -1);
                P(al, o, 1),
                P(an, o),
                ap = an.c - al.c,
                o.c = ap;
                for (var am = K.length; am--; ) {
                    r = K[am],
                    I = H(ap / r),
                    L = I * r - ap,
                    w = 3 * (L + 3),
                    w += 2 * (r - K[0] + 2),
                    0 === r % 5 && (w -= 10);
                    for (var W = v.length; W--; ) {
                        0 === I % v[W][0] && (w /= v[W][1])
                    }
                    ak[am] = [r, I, L, w].join(),
                    x[am] = {
                        secs: r,
                        step: I,
                        delta: L,
                        score: w
                    }
                }
                return x.sort(function(l, i) {
                    return l.score - i.score
                }
                ),
                x = x[0],
                al.c = D(al.c - x.delta / 2),
                an.c = D(an.c + x.delta / 2),
                ai(al.c, an.c, x.secs, o.e)
            }
            var ah, ad, Z, G, aj, C = [10, 20, 25, 50], z = [4, 5, 6], q = Math, D = q.round, J = q.floor, H = q.ceil, F = q.abs;
            return aa
        }
        ),
        k("echarts/chart/line", ["require", "./base", "zrender/shape/Polyline", "../util/shape/Icon", "../util/shape/HalfSmoothPolygon", "../component/axis", "../component/grid", "../component/dataZoom", "../config", "../util/ecData", "zrender/tool/util", "zrender/tool/color", "../chart"], function(z) {
            function B(m, l, s, i, r) {
                x.call(this, m, l, s, i, r),
                this.refresh(i)
            }
            function u(K, N, D) {
                var I = N.x
                  , M = N.y
                  , o = N.width
                  , O = N.height
                  , H = O / 2;
                N.symbol.match("empty") && (K.fillStyle = "#fff"),
                N.brushType = "both";
                var J = N.symbol.replace("empty", "").toLowerCase();
                J.match("star") ? (H = J.replace("star", "") - 0 || 5,
                M -= 1,
                J = "star") : ("rectangle" === J || "arrow" === J) && (I += (o - O) / 2,
                o = O);
                var F = "";
                if (J.match("image") && (F = J.replace(RegExp("^image:\\/\\/"), ""),
                J = "image",
                I += Math.round((o - O) / 2) - 1,
                o = O += 2),
                J = q.prototype.iconLibrary[J]) {
                    var E = N.x
                      , G = N.y;
                    K.moveTo(E, G + H),
                    K.lineTo(E + 5, G + H),
                    K.moveTo(E + N.width - 5, G + H),
                    K.lineTo(E + N.width, G + H);
                    var L = this;
                    J(K, {
                        x: I + 4,
                        y: M + 4,
                        width: o - 8,
                        height: O - 8,
                        n: H,
                        image: F
                    }, function() {
                        L.modSelf(),
                        D()
                    }
                    )
                } else {
                    K.moveTo(I, M + H),
                    K.lineTo(I + o, M + H)
                }
            }
            var x = z("./base")
              , A = z("zrender/shape/Polyline")
              , q = z("../util/shape/Icon")
              , p = z("../util/shape/HalfSmoothPolygon");
            z("../component/axis"),
            z("../component/grid"),
            z("../component/dataZoom");
            var C = z("../config");
            C.line = {
                zlevel: 0,
                z: 2,
                clickable: !0,
                legendHoverLink: !0,
                xAxisIndex: 0,
                yAxisIndex: 0,
                itemStyle: {
                    normal: {
                        label: {
                            show: !1
                        },
                        lineStyle: {
                            width: 2,
                            type: "solid",
                            shadowColor: "rgba(0,0,0,0)",
                            shadowBlur: 0,
                            shadowOffsetX: 0,
                            shadowOffsetY: 0
                        }
                    },
                    emphasis: {
                        label: {
                            show: !1
                        }
                    }
                },
                symbolSize: 2,
                showAllSymbol: !1
            };
            var w = z("../util/ecData")
              , y = z("zrender/tool/util")
              , v = z("zrender/tool/color");
            return B.prototype = {
                type: C.CHART_TYPE_LINE,
                _buildShape: function() {
                    this.finalPLMap = {},
                    this._buildPosition()
                },
                _buildHorizontal: function(ab, K, Q, X) {
                    for (var af, P, N, M, S, Y, R, E, F, ac = this.series, O = Q[0][0], ad = ac[O], J = this.component.xAxis.getAxis(ad.xAxisIndex || 0), H = {}, Z = 0, ae = K; ae > Z && null  != J.getNameByIndex(Z); Z++) {
                        P = J.getCoordByIndex(Z);
                        for (var aa = 0, T = Q.length; T > aa; aa++) {
                            af = this.component.yAxis.getAxis(ac[Q[aa][0]].yAxisIndex || 0),
                            S = M = R = Y = af.getCoord(0);
                            for (var I = 0, ag = Q[aa].length; ag > I; I++) {
                                O = Q[aa][I],
                                ad = ac[O],
                                E = ad.data[Z],
                                F = this.getDataFromOption(E, "-"),
                                H[O] = H[O] || [],
                                X[O] = X[O] || {
                                    min: Number.POSITIVE_INFINITY,
                                    max: Number.NEGATIVE_INFINITY,
                                    sum: 0,
                                    counter: 0,
                                    average: 0
                                },
                                "-" !== F ? (F >= 0 ? (M -= I > 0 ? af.getCoordSize(F) : S - af.getCoord(F),
                                N = M) : 0 > F && (Y += I > 0 ? af.getCoordSize(F) : af.getCoord(F) - R,
                                N = Y),
                                H[O].push([P, N, Z, J.getNameByIndex(Z), P, S]),
                                X[O].min > F && (X[O].min = F,
                                X[O].minY = N,
                                X[O].minX = P),
                                F > X[O].max && (X[O].max = F,
                                X[O].maxY = N,
                                X[O].maxX = P),
                                X[O].sum += F,
                                X[O].counter++) : H[O].length > 0 && (this.finalPLMap[O] = this.finalPLMap[O] || [],
                                this.finalPLMap[O].push(H[O]),
                                H[O] = [])
                            }
                        }
                        M = this.component.grid.getY();
                        for (var G, aa = 0, T = Q.length; T > aa; aa++) {
                            for (var I = 0, ag = Q[aa].length; ag > I; I++) {
                                O = Q[aa][I],
                                ad = ac[O],
                                E = ad.data[Z],
                                F = this.getDataFromOption(E, "-"),
                                "-" == F && this.deepQuery([E, ad, this.option], "calculable") && (G = this.deepQuery([E, ad], "symbolSize"),
                                M += 2 * G + 5,
                                N = M,
                                this.shapeList.push(this._getCalculableItem(O, Z, J.getNameByIndex(Z), P, N, "horizontal")))
                            }
                        }
                    }
                    for (var D in H) {
                        H[D].length > 0 && (this.finalPLMap[D] = this.finalPLMap[D] || [],
                        this.finalPLMap[D].push(H[D]),
                        H[D] = [])
                    }
                    this._calculMarkMapXY(X, Q, "y"),
                    this._buildBorkenLine(ab, this.finalPLMap, J, "horizontal")
                },
                _buildVertical: function(ab, K, Q, X) {
                    for (var af, P, N, M, S, Y, R, E, F, ac = this.series, O = Q[0][0], ad = ac[O], J = this.component.yAxis.getAxis(ad.yAxisIndex || 0), H = {}, Z = 0, ae = K; ae > Z && null  != J.getNameByIndex(Z); Z++) {
                        N = J.getCoordByIndex(Z);
                        for (var aa = 0, T = Q.length; T > aa; aa++) {
                            af = this.component.xAxis.getAxis(ac[Q[aa][0]].xAxisIndex || 0),
                            S = M = R = Y = af.getCoord(0);
                            for (var I = 0, ag = Q[aa].length; ag > I; I++) {
                                O = Q[aa][I],
                                ad = ac[O],
                                E = ad.data[Z],
                                F = this.getDataFromOption(E, "-"),
                                H[O] = H[O] || [],
                                X[O] = X[O] || {
                                    min: Number.POSITIVE_INFINITY,
                                    max: Number.NEGATIVE_INFINITY,
                                    sum: 0,
                                    counter: 0,
                                    average: 0
                                },
                                "-" !== F ? (F >= 0 ? (M += I > 0 ? af.getCoordSize(F) : af.getCoord(F) - S,
                                P = M) : 0 > F && (Y -= I > 0 ? af.getCoordSize(F) : R - af.getCoord(F),
                                P = Y),
                                H[O].push([P, N, Z, J.getNameByIndex(Z), S, N]),
                                X[O].min > F && (X[O].min = F,
                                X[O].minX = P,
                                X[O].minY = N),
                                F > X[O].max && (X[O].max = F,
                                X[O].maxX = P,
                                X[O].maxY = N),
                                X[O].sum += F,
                                X[O].counter++) : H[O].length > 0 && (this.finalPLMap[O] = this.finalPLMap[O] || [],
                                this.finalPLMap[O].push(H[O]),
                                H[O] = [])
                            }
                        }
                        M = this.component.grid.getXend();
                        for (var G, aa = 0, T = Q.length; T > aa; aa++) {
                            for (var I = 0, ag = Q[aa].length; ag > I; I++) {
                                O = Q[aa][I],
                                ad = ac[O],
                                E = ad.data[Z],
                                F = this.getDataFromOption(E, "-"),
                                "-" == F && this.deepQuery([E, ad, this.option], "calculable") && (G = this.deepQuery([E, ad], "symbolSize"),
                                M -= 2 * G + 5,
                                P = M,
                                this.shapeList.push(this._getCalculableItem(O, Z, J.getNameByIndex(Z), P, N, "vertical")))
                            }
                        }
                    }
                    for (var D in H) {
                        H[D].length > 0 && (this.finalPLMap[D] = this.finalPLMap[D] || [],
                        this.finalPLMap[D].push(H[D]),
                        H[D] = [])
                    }
                    this._calculMarkMapXY(X, Q, "x"),
                    this._buildBorkenLine(ab, this.finalPLMap, J, "vertical")
                },
                _buildOther: function(W, H, M, Q) {
                    for (var aa, L = this.series, J = {}, I = 0, O = M.length; O > I; I++) {
                        for (var R = 0, N = M[I].length; N > R; R++) {
                            var D = M[I][R]
                              , E = L[D];
                            aa = this.component.xAxis.getAxis(E.xAxisIndex || 0);
                            var X = this.component.yAxis.getAxis(E.yAxisIndex || 0)
                              , K = X.getCoord(0);
                            J[D] = J[D] || [],
                            Q[D] = Q[D] || {
                                min0: Number.POSITIVE_INFINITY,
                                min1: Number.POSITIVE_INFINITY,
                                max0: Number.NEGATIVE_INFINITY,
                                max1: Number.NEGATIVE_INFINITY,
                                sum0: 0,
                                sum1: 0,
                                counter0: 0,
                                counter1: 0,
                                average0: 0,
                                average1: 0
                            };
                            for (var Y = 0, G = E.data.length; G > Y; Y++) {
                                var F = E.data[Y]
                                  , S = this.getDataFromOption(F, "-");
                                if (S instanceof Array) {
                                    var Z = aa.getCoord(S[0])
                                      , T = X.getCoord(S[1]);
                                    J[D].push([Z, T, Y, S[0], Z, K]),
                                    Q[D].min0 > S[0] && (Q[D].min0 = S[0],
                                    Q[D].minY0 = T,
                                    Q[D].minX0 = Z),
                                    Q[D].max0 < S[0] && (Q[D].max0 = S[0],
                                    Q[D].maxY0 = T,
                                    Q[D].maxX0 = Z),
                                    Q[D].sum0 += S[0],
                                    Q[D].counter0++,
                                    Q[D].min1 > S[1] && (Q[D].min1 = S[1],
                                    Q[D].minY1 = T,
                                    Q[D].minX1 = Z),
                                    Q[D].max1 < S[1] && (Q[D].max1 = S[1],
                                    Q[D].maxY1 = T,
                                    Q[D].maxX1 = Z),
                                    Q[D].sum1 += S[1],
                                    Q[D].counter1++
                                }
                            }
                        }
                    }
                    for (var P in J) {
                        J[P].length > 0 && (this.finalPLMap[P] = this.finalPLMap[P] || [],
                        this.finalPLMap[P].push(J[P]),
                        J[P] = [])
                    }
                    this._calculMarkMapXY(Q, M, "xy"),
                    this._buildBorkenLine(W, this.finalPLMap, aa, "other")
                },
                _buildBorkenLine: function(ae, R, Z, ab) {
                    for (var Y, S = "other" == ab ? "horizontal" : ab, r = this.series, D = ae.length - 1; D >= 0; D--) {
                        var af = ae[D]
                          , T = r[af]
                          , ag = R[af];
                        if (T.type === this.type && null  != ag) {
                            for (var Q = this._getBbox(af, S), H = this._sIndex2ColorMap[af], ac = this.query(T, "itemStyle.normal.lineStyle.width"), ah = this.query(T, "itemStyle.normal.lineStyle.type"), ad = this.query(T, "itemStyle.normal.lineStyle.color"), aa = this.getItemStyleColor(this.query(T, "itemStyle.normal.color"), af, -1), N = null  != this.query(T, "itemStyle.normal.areaStyle"), ai = this.query(T, "itemStyle.normal.areaStyle.color"), E = 0, m = ag.length; m > E; E++) {
                                var l = ag[E]
                                  , F = "other" != ab && this._isLarge(S, l);
                                if (F) {
                                    l = this._getLargePointList(S, l)
                                } else {
                                    for (var P = 0, O = l.length; O > P; P++) {
                                        Y = T.data[l[P][2]],
                                        (this.deepQuery([Y, T, this.option], "calculable") || this.deepQuery([Y, T], "showAllSymbol") || "categoryAxis" === Z.type && Z.isMainAxis(l[P][2]) && "none" != this.deepQuery([Y, T], "symbol")) && this.shapeList.push(this._getSymbol(af, l[P][2], l[P][3], l[P][0], l[P][1], S))
                                    }
                                }
                                var M = new A({
                                    zlevel: this.getZlevelBase(),
                                    z: this.getZBase(),
                                    style: {
                                        miterLimit: ac,
                                        pointList: l,
                                        strokeColor: ad || aa || H,
                                        lineWidth: ac,
                                        lineType: ah,
                                        smooth: this._getSmooth(T.smooth),
                                        smoothConstraint: Q,
                                        shadowColor: this.query(T, "itemStyle.normal.lineStyle.shadowColor"),
                                        shadowBlur: this.query(T, "itemStyle.normal.lineStyle.shadowBlur"),
                                        shadowOffsetX: this.query(T, "itemStyle.normal.lineStyle.shadowOffsetX"),
                                        shadowOffsetY: this.query(T, "itemStyle.normal.lineStyle.shadowOffsetY")
                                    },
                                    hoverable: !1,
                                    _main: !0,
                                    _seriesIndex: af,
                                    _orient: S
                                });
                                if (w.pack(M, r[af], af, 0, E, r[af].name),
                                this.shapeList.push(M),
                                N) {
                                    var G = new p({
                                        zlevel: this.getZlevelBase(),
                                        z: this.getZBase(),
                                        style: {
                                            miterLimit: ac,
                                            pointList: y.clone(l).concat([[l[l.length - 1][4], l[l.length - 1][5]], [l[0][4], l[0][5]]]),
                                            brushType: "fill",
                                            smooth: this._getSmooth(T.smooth),
                                            smoothConstraint: Q,
                                            color: ai ? ai : v.alpha(H, 0.5)
                                        },
                                        highlightStyle: {
                                            brushType: "fill"
                                        },
                                        hoverable: !1,
                                        _main: !0,
                                        _seriesIndex: af,
                                        _orient: S
                                    });
                                    w.pack(G, r[af], af, 0, E, r[af].name),
                                    this.shapeList.push(G)
                                }
                            }
                        }
                    }
                },
                _getBbox: function(o, m) {
                    var r = this.component.grid.getBbox()
                      , l = this.xMarkMap[o];
                    return null  != l.minX0 ? [[Math.min(l.minX0, l.maxX0, l.minX1, l.maxX1), Math.min(l.minY0, l.maxY0, l.minY1, l.maxY1)], [Math.max(l.minX0, l.maxX0, l.minX1, l.maxX1), Math.max(l.minY0, l.maxY0, l.minY1, l.maxY1)]] : ("horizontal" === m ? (r[0][1] = Math.min(l.minY, l.maxY),
                    r[1][1] = Math.max(l.minY, l.maxY)) : (r[0][0] = Math.min(l.minX, l.maxX),
                    r[1][0] = Math.max(l.minX, l.maxX)),
                    r)
                },
                _isLarge: function(l, i) {
                    return 2 > i.length ? !1 : "horizontal" === l ? 0.5 > Math.abs(i[0][0] - i[1][0]) : 0.5 > Math.abs(i[0][1] - i[1][1])
                },
                _getLargePointList: function(s, r) {
                    var E;
                    E = "horizontal" === s ? this.component.grid.getWidth() : this.component.grid.getHeight();
                    for (var m = r.length, l = [], D = 0; E > D; D++) {
                        l[D] = r[Math.floor(m / E * D)]
                    }
                    return l
                },
                _getSmooth: function(i) {
                    return i ? 0.3 : 0
                },
                _getCalculableItem: function(H, J, D, F, I, s) {
                    var m = this.series
                      , E = m[H].calculableHolderColor || this.ecTheme.calculableHolderColor || C.calculableHolderColor
                      , G = this._getSymbol(H, J, D, F, I, s);
                    return G.style.color = E,
                    G.style.strokeColor = E,
                    G.rotation = [0, 0],
                    G.hoverable = !1,
                    G.draggable = !1,
                    G.style.text = void 0,
                    G
                },
                _getSymbol: function(I, K, E, G, J, D) {
                    var m = this.series
                      , L = m[I]
                      , F = L.data[K]
                      , H = this.getSymbolShape(L, I, F, K, E, G, J, this._sIndex2ShapeMap[I], this._sIndex2ColorMap[I], "#fff", "vertical" === D ? "horizontal" : "vertical");
                    return H.zlevel = this.getZlevelBase(),
                    H.z = this.getZBase() + 1,
                    this.deepQuery([F, L, this.option], "calculable") && (this.setCalculable(H),
                    H.draggable = !0),
                    H
                },
                getMarkCoord: function(E, s) {
                    var G = this.series[E]
                      , m = this.xMarkMap[E]
                      , l = this.component.xAxis.getAxis(G.xAxisIndex)
                      , F = this.component.yAxis.getAxis(G.yAxisIndex);
                    if (s.type && ("max" === s.type || "min" === s.type || "average" === s.type)) {
                        var D = null  != s.valueIndex ? s.valueIndex : null  != m.maxX0 ? "1" : "";
                        return [m[s.type + "X" + D], m[s.type + "Y" + D], m[s.type + "Line" + D], m[s.type + D]]
                    }
                    return ["string" != typeof s.xAxis && l.getCoordByIndex ? l.getCoordByIndex(s.xAxis || 0) : l.getCoord(s.xAxis || 0), "string" != typeof s.yAxis && F.getCoordByIndex ? F.getCoordByIndex(s.yAxis || 0) : F.getCoord(s.yAxis || 0)]
                },
                refresh: function(i) {
                    i && (this.option = i,
                    this.series = i.series),
                    this.backupShapeList(),
                    this._buildShape()
                },
                ontooltipHover: function(K, M) {
                    for (var F, I, L = K.seriesIndex, E = K.dataIndex, D = L.length; D--; ) {
                        if (F = this.finalPLMap[L[D]]) {
                            for (var N = 0, H = F.length; H > N; N++) {
                                I = F[N];
                                for (var J = 0, G = I.length; G > J; J++) {
                                    E === I[J][2] && M.push(this._getSymbol(L[D], I[J][2], I[J][3], I[J][0], I[J][1], "horizontal"))
                                }
                            }
                        }
                    }
                },
                addDataAnimation: function(R, H) {
                    function M() {
                        T--,
                        0 === T && H && H()
                    }
                    function P(i) {
                        i.style.controlPointList = null 
                    }
                    for (var W = this.series, L = {}, J = 0, I = R.length; I > J; J++) {
                        L[R[J][0]] = R[J]
                    }
                    for (var O, Q, N, D, E, S, K, T = 0, J = this.shapeList.length - 1; J >= 0; J--) {
                        if (E = this.shapeList[J]._seriesIndex,
                        L[E] && !L[E][3]) {
                            if (this.shapeList[J]._main && this.shapeList[J].style.pointList.length > 1) {
                                if (S = this.shapeList[J].style.pointList,
                                Q = Math.abs(S[0][0] - S[1][0]),
                                D = Math.abs(S[0][1] - S[1][1]),
                                K = "horizontal" === this.shapeList[J]._orient,
                                L[E][2]) {
                                    if ("half-smooth-polygon" === this.shapeList[J].type) {
                                        var G = S.length;
                                        this.shapeList[J].style.pointList[G - 3] = S[G - 2],
                                        this.shapeList[J].style.pointList[G - 3][K ? 0 : 1] = S[G - 4][K ? 0 : 1],
                                        this.shapeList[J].style.pointList[G - 2] = S[G - 1]
                                    }
                                    this.shapeList[J].style.pointList.pop(),
                                    K ? (O = Q,
                                    N = 0) : (O = 0,
                                    N = -D)
                                } else {
                                    if (this.shapeList[J].style.pointList.shift(),
                                    "half-smooth-polygon" === this.shapeList[J].type) {
                                        var F = this.shapeList[J].style.pointList.pop();
                                        K ? F[0] = S[0][0] : F[1] = S[0][1],
                                        this.shapeList[J].style.pointList.push(F)
                                    }
                                    K ? (O = -Q,
                                    N = 0) : (O = 0,
                                    N = D)
                                }
                                this.shapeList[J].style.controlPointList = null ,
                                this.zr.modShape(this.shapeList[J])
                            } else {
                                if (L[E][2] && this.shapeList[J]._dataIndex === W[E].data.length - 1) {
                                    this.zr.delShape(this.shapeList[J].id);
                                    continue
                                }
                                if (!L[E][2] && 0 === this.shapeList[J]._dataIndex) {
                                    this.zr.delShape(this.shapeList[J].id);
                                    continue
                                }
                            }
                            this.shapeList[J].position = [0, 0],
                            T++,
                            this.zr.animate(this.shapeList[J].id, "").when(this.query(this.option, "animationDurationUpdate"), {
                                position: [O, N]
                            }).during(P).done(M).start()
                        }
                    }
                    T || M()
                }
            },
            q.prototype.iconLibrary.legendLineIcon = u,
            y.inherits(B, x),
            z("../chart").define("line", B),
            B
        }
        ),
        k("echarts/util/shape/HalfSmoothPolygon", ["require", "zrender/shape/Base", "zrender/shape/util/smoothBezier", "zrender/tool/util", "zrender/shape/Polygon"], function(p) {
            function o(i) {
                q.call(this, i)
            }
            var q = p("zrender/shape/Base")
              , m = p("zrender/shape/util/smoothBezier")
              , l = p("zrender/tool/util");
            return o.prototype = {
                type: "half-smooth-polygon",
                buildPath: function(z, u) {
                    var y = u.pointList;
                    if (!(2 > y.length)) {
                        if (u.smooth) {
                            var i = m(y.slice(0, -2), u.smooth, !1, u.smoothConstraint);
                            z.moveTo(y[0][0], y[0][1]);
                            for (var e, A, w, x = y.length, v = 0; x - 3 > v; v++) {
                                e = i[2 * v],
                                A = i[2 * v + 1],
                                w = y[v + 1],
                                z.bezierCurveTo(e[0], e[1], A[0], A[1], w[0], w[1])
                            }
                            z.lineTo(y[x - 2][0], y[x - 2][1]),
                            z.lineTo(y[x - 1][0], y[x - 1][1]),
                            z.lineTo(y[0][0], y[0][1])
                        } else {
                            p("zrender/shape/Polygon").prototype.buildPath(z, u)
                        }
                    }
                }
            },
            l.inherits(o, q),
            o
        }
        ),
        k("echarts/chart/bar", ["require", "./base", "zrender/shape/Rectangle", "../component/axis", "../component/grid", "../component/dataZoom", "../config", "../util/ecData", "zrender/tool/util", "zrender/tool/color", "../chart"], function(v) {
            function p(y, s, r, n, z) {
                x.call(this, y, s, r, n, z),
                this.refresh(n)
            }
            var x = v("./base")
              , m = v("zrender/shape/Rectangle");
            v("../component/axis"),
            v("../component/grid"),
            v("../component/dataZoom");
            var l = v("../config");
            l.bar = {
                zlevel: 0,
                z: 2,
                clickable: !0,
                legendHoverLink: !0,
                xAxisIndex: 0,
                yAxisIndex: 0,
                barMinHeight: 0,
                barGap: "30%",
                barCategoryGap: "20%",
                itemStyle: {
                    normal: {
                        barBorderColor: "#fff",
                        barBorderRadius: 0,
                        barBorderWidth: 0,
                        label: {
                            show: !1
                        }
                    },
                    emphasis: {
                        barBorderColor: "#fff",
                        barBorderRadius: 0,
                        barBorderWidth: 0,
                        label: {
                            show: !1
                        }
                    }
                }
            };
            var w = v("../util/ecData")
              , u = v("zrender/tool/util")
              , q = v("zrender/tool/color");
            return p.prototype = {
                type: l.CHART_TYPE_BAR,
                _buildShape: function() {
                    this._buildPosition()
                },
                _buildNormal: function(aC, ap, av, au, ar) {
                    for (var aq, ax, az, aw, G, H, aD, at, aE, ao, ak, aA, aF = this.series, aB = av[0][0], ay = aF[aB], al = "horizontal" == ar, aG = this.component.xAxis, aa = this.component.yAxis, B = al ? aG.getAxis(ay.xAxisIndex) : aa.getAxis(ay.yAxisIndex), i = this._mapSize(B, av), ab = i.gap, an = i.barGap, am = i.barWidthMap, ad = i.barMaxWidthMap, ac = i.barWidth, ah = i.barMinHeightMap, Q = i.interval, af = this.deepQuery([this.ecTheme, l], "island.r"), ae = 0, N = ap; N > ae && null  != B.getNameByIndex(ae); ae++) {
                        al ? aw = B.getCoordByIndex(ae) - ab / 2 : G = B.getCoordByIndex(ae) + ab / 2;
                        for (var ai = 0, Z = av.length; Z > ai; ai++) {
                            var aj = aF[av[ai][0]].yAxisIndex || 0
                              , Y = aF[av[ai][0]].xAxisIndex || 0;
                            aq = al ? aa.getAxis(aj) : aG.getAxis(Y),
                            aD = H = aE = at = aq.getCoord(0);
                            for (var R = 0, ag = av[ai].length; ag > R; R++) {
                                aB = av[ai][R],
                                ay = aF[aB],
                                ak = ay.data[ae],
                                aA = this.getDataFromOption(ak, "-"),
                                au[aB] = au[aB] || {
                                    min: Number.POSITIVE_INFINITY,
                                    max: Number.NEGATIVE_INFINITY,
                                    sum: 0,
                                    counter: 0,
                                    average: 0
                                },
                                az = Math.min(ad[aB] || Number.MAX_VALUE, am[aB] || ac),
                                "-" !== aA && (aA > 0 ? (ax = R > 0 ? aq.getCoordSize(aA) : al ? aD - aq.getCoord(aA) : aq.getCoord(aA) - aD,
                                1 === ag && ah[aB] > ax && (ax = ah[aB]),
                                al ? (H -= ax,
                                G = H) : (aw = H,
                                H += ax)) : 0 > aA ? (ax = R > 0 ? aq.getCoordSize(aA) : al ? aq.getCoord(aA) - aE : aE - aq.getCoord(aA),
                                1 === ag && ah[aB] > ax && (ax = ah[aB]),
                                al ? (G = at,
                                at += ax) : (at -= ax,
                                aw = at)) : (ax = 0,
                                al ? (H -= ax,
                                G = H) : (aw = H,
                                H += ax)),
                                au[aB][ae] = al ? aw + az / 2 : G - az / 2,
                                au[aB].min > aA && (au[aB].min = aA,
                                al ? (au[aB].minY = G,
                                au[aB].minX = au[aB][ae]) : (au[aB].minX = aw + ax,
                                au[aB].minY = au[aB][ae])),
                                aA > au[aB].max && (au[aB].max = aA,
                                al ? (au[aB].maxY = G,
                                au[aB].maxX = au[aB][ae]) : (au[aB].maxX = aw + ax,
                                au[aB].maxY = au[aB][ae])),
                                au[aB].sum += aA,
                                au[aB].counter++,
                                0 === ae % Q && (ao = this._getBarItem(aB, ae, B.getNameByIndex(ae), aw, G - (al ? 0 : az), al ? az : ax, al ? ax : az, al ? "vertical" : "horizontal"),
                                this.shapeList.push(new m(ao))))
                            }
                            for (var R = 0, ag = av[ai].length; ag > R; R++) {
                                aB = av[ai][R],
                                ay = aF[aB],
                                ak = ay.data[ae],
                                aA = this.getDataFromOption(ak, "-"),
                                az = Math.min(ad[aB] || Number.MAX_VALUE, am[aB] || ac),
                                "-" == aA && this.deepQuery([ak, ay, this.option], "calculable") && (al ? (H -= af,
                                G = H) : (aw = H,
                                H += af),
                                ao = this._getBarItem(aB, ae, B.getNameByIndex(ae), aw, G - (al ? 0 : az), al ? az : af, al ? af : az, al ? "vertical" : "horizontal"),
                                ao.hoverable = !1,
                                ao.draggable = !1,
                                ao.style.lineWidth = 1,
                                ao.style.brushType = "stroke",
                                ao.style.strokeColor = ay.calculableHolderColor || this.ecTheme.calculableHolderColor || l.calculableHolderColor,
                                this.shapeList.push(new m(ao)))
                            }
                            al ? aw += az + an : G -= az + an
                        }
                    }
                    this._calculMarkMapXY(au, av, al ? "y" : "x")
                },
                _buildHorizontal: function(s, r, y, o) {
                    return this._buildNormal(s, r, y, o, "horizontal")
                },
                _buildVertical: function(s, r, y, o) {
                    return this._buildNormal(s, r, y, o, "vertical")
                },
                _buildOther: function(aa, I, P, ae) {
                    for (var O = this.series, M = 0, J = P.length; J > M; M++) {
                        for (var R = 0, T = P[M].length; T > R; R++) {
                            var Q = P[M][R]
                              , A = O[Q]
                              , B = A.xAxisIndex || 0
                              , ab = this.component.xAxis.getAxis(B)
                              , N = ab.getCoord(0)
                              , ac = A.yAxisIndex || 0
                              , H = this.component.yAxis.getAxis(ac)
                              , E = H.getCoord(0);
                            ae[Q] = ae[Q] || {
                                min0: Number.POSITIVE_INFINITY,
                                min1: Number.POSITIVE_INFINITY,
                                max0: Number.NEGATIVE_INFINITY,
                                max1: Number.NEGATIVE_INFINITY,
                                sum0: 0,
                                sum1: 0,
                                counter0: 0,
                                counter1: 0,
                                average0: 0,
                                average1: 0
                            };
                            for (var Y = 0, ad = A.data.length; ad > Y; Y++) {
                                var Z = A.data[Y]
                                  , S = this.getDataFromOption(Z, "-");
                                if (S instanceof Array) {
                                    var F, af, C = ab.getCoord(S[0]), z = H.getCoord(S[1]), i = [Z, A], D = this.deepQuery(i, "barWidth") || 10, G = this.deepQuery(i, "barHeight");
                                    null  != G ? (F = "horizontal",
                                    S[0] > 0 ? (D = C - N,
                                    C -= D) : D = 0 > S[0] ? N - C : 0,
                                    af = this._getBarItem(Q, Y, S[0], C, z - G / 2, D, G, F)) : (F = "vertical",
                                    S[1] > 0 ? G = E - z : 0 > S[1] ? (G = z - E,
                                    z -= G) : G = 0,
                                    af = this._getBarItem(Q, Y, S[0], C - D / 2, z, D, G, F)),
                                    this.shapeList.push(new m(af)),
                                    C = ab.getCoord(S[0]),
                                    z = H.getCoord(S[1]),
                                    ae[Q].min0 > S[0] && (ae[Q].min0 = S[0],
                                    ae[Q].minY0 = z,
                                    ae[Q].minX0 = C),
                                    ae[Q].max0 < S[0] && (ae[Q].max0 = S[0],
                                    ae[Q].maxY0 = z,
                                    ae[Q].maxX0 = C),
                                    ae[Q].sum0 += S[0],
                                    ae[Q].counter0++,
                                    ae[Q].min1 > S[1] && (ae[Q].min1 = S[1],
                                    ae[Q].minY1 = z,
                                    ae[Q].minX1 = C),
                                    ae[Q].max1 < S[1] && (ae[Q].max1 = S[1],
                                    ae[Q].maxY1 = z,
                                    ae[Q].maxX1 = C),
                                    ae[Q].sum1 += S[1],
                                    ae[Q].counter1++
                                }
                            }
                        }
                    }
                    this._calculMarkMapXY(ae, P, "xy")
                },
                _mapSize: function(H, K, A) {
                    var F, J, z = this._findSpecialBarSzie(K, A), y = z.barWidthMap, L = z.barMaxWidthMap, E = z.barMinHeightMap, G = z.sBarWidthCounter, C = z.sBarWidthTotal, B = z.barGap, D = z.barCategoryGap, I = 1;
                    if (K.length != G) {
                        if (A) {
                            F = H.getGap(),
                            B = 0,
                            J = +(F / K.length).toFixed(2),
                            0 >= J && (I = Math.floor(K.length / F),
                            J = 1)
                        } else {
                            if (F = "string" == typeof D && D.match(/%$/) ? (H.getGap() * (100 - parseFloat(D)) / 100).toFixed(2) - 0 : H.getGap() - D,
                            "string" == typeof B && B.match(/%$/) ? (B = parseFloat(B) / 100,
                            J = +((F - C) / ((K.length - 1) * B + K.length - G)).toFixed(2),
                            B = J * B) : (B = parseFloat(B),
                            J = +((F - C - B * (K.length - 1)) / (K.length - G)).toFixed(2)),
                            0 >= J) {
                                return this._mapSize(H, K, !0)
                            }
                        }
                    } else {
                        if (F = G > 1 ? "string" == typeof D && D.match(/%$/) ? +(H.getGap() * (100 - parseFloat(D)) / 100).toFixed(2) : H.getGap() - D : C,
                        J = 0,
                        B = G > 1 ? +((F - C) / (G - 1)).toFixed(2) : 0,
                        0 > B) {
                            return this._mapSize(H, K, !0)
                        }
                    }
                    return this._recheckBarMaxWidth(K, y, L, E, F, J, B, I)
                },
                _findSpecialBarSzie: function(Q, D) {
                    for (var I, M, W, H, F = this.series, E = {}, K = {}, N = {}, J = 0, z = 0, A = 0, R = Q.length; R > A; A++) {
                        for (var G = {
                            barWidth: !1,
                            barMaxWidth: !1
                        }, S = 0, C = Q[A].length; C > S; S++) {
                            var B = Q[A][S]
                              , O = F[B];
                            if (!D) {
                                if (G.barWidth) {
                                    E[B] = I
                                } else {
                                    if (I = this.query(O, "barWidth"),
                                    null  != I) {
                                        E[B] = I,
                                        z += I,
                                        J++,
                                        G.barWidth = !0;
                                        for (var T = 0, P = S; P > T; T++) {
                                            var L = Q[A][T];
                                            E[L] = I
                                        }
                                    }
                                }
                                if (G.barMaxWidth) {
                                    K[B] = M
                                } else {
                                    if (M = this.query(O, "barMaxWidth"),
                                    null  != M) {
                                        K[B] = M,
                                        G.barMaxWidth = !0;
                                        for (var T = 0, P = S; P > T; T++) {
                                            var L = Q[A][T];
                                            K[L] = M
                                        }
                                    }
                                }
                            }
                            N[B] = this.query(O, "barMinHeight"),
                            W = null  != W ? W : this.query(O, "barGap"),
                            H = null  != H ? H : this.query(O, "barCategoryGap")
                        }
                    }
                    return {
                        barWidthMap: E,
                        barMaxWidthMap: K,
                        barMinHeightMap: N,
                        sBarWidth: I,
                        sBarMaxWidth: M,
                        sBarWidthCounter: J,
                        sBarWidthTotal: z,
                        barGap: W,
                        barCategoryGap: H
                    }
                },
                _recheckBarMaxWidth: function(F, H, A, D, G, z, y, I) {
                    for (var C = 0, E = F.length; E > C; C++) {
                        var B = F[C][0];
                        A[B] && z > A[B] && (G -= z - A[B])
                    }
                    return {
                        barWidthMap: H,
                        barMaxWidthMap: A,
                        barMinHeightMap: D,
                        gap: G,
                        barWidth: z,
                        barGap: y,
                        interval: I
                    }
                },
                _getBarItem: function(P, D, G, K, T, E, I, M) {
                    var H, o = this.series, s = o[P], Q = s.data[D], F = this._sIndex2ColorMap[P], R = [Q, s], C = this.deepMerge(R, "itemStyle.normal"), A = this.deepMerge(R, "itemStyle.emphasis"), N = C.barBorderWidth;
                    H = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        clickable: this.deepQuery(R, "clickable"),
                        style: {
                            x: K,
                            y: T,
                            width: E,
                            height: I,
                            brushType: "both",
                            color: this.getItemStyleColor(this.deepQuery(R, "itemStyle.normal.color") || F, P, D, Q),
                            radius: C.barBorderRadius,
                            lineWidth: N,
                            strokeColor: C.barBorderColor
                        },
                        highlightStyle: {
                            color: this.getItemStyleColor(this.deepQuery(R, "itemStyle.emphasis.color"), P, D, Q),
                            radius: A.barBorderRadius,
                            lineWidth: A.barBorderWidth,
                            strokeColor: A.barBorderColor
                        },
                        _orient: M
                    };
                    var S = H.style;
                    H.highlightStyle.color = H.highlightStyle.color || ("string" == typeof S.color ? q.lift(S.color, -0.3) : S.color),
                    S.x = Math.floor(S.x),
                    S.y = Math.floor(S.y),
                    S.height = Math.ceil(S.height),
                    S.width = Math.ceil(S.width),
                    N > 0 && S.height > N && S.width > N ? (S.y += N / 2,
                    S.height -= N,
                    S.x += N / 2,
                    S.width -= N) : S.brushType = "fill",
                    H.highlightStyle.textColor = H.highlightStyle.color,
                    H = this.addLabel(H, s, Q, G, M);
                    for (var O = [S, H.highlightStyle], J = 0, B = O.length; B > J; J++) {
                        var W = O[J].textPosition;
                        if ("insideLeft" === W || "insideRight" === W || "insideTop" === W || "insideBottom" === W) {
                            var z = 5;
                            switch (W) {
                            case "insideLeft":
                                O[J].textX = S.x + z,
                                O[J].textY = S.y + S.height / 2,
                                O[J].textAlign = "left",
                                O[J].textBaseline = "middle";
                                break;
                            case "insideRight":
                                O[J].textX = S.x + S.width - z,
                                O[J].textY = S.y + S.height / 2,
                                O[J].textAlign = "right",
                                O[J].textBaseline = "middle";
                                break;
                            case "insideTop":
                                O[J].textX = S.x + S.width / 2,
                                O[J].textY = S.y + z / 2,
                                O[J].textAlign = "center",
                                O[J].textBaseline = "top";
                                break;
                            case "insideBottom":
                                O[J].textX = S.x + S.width / 2,
                                O[J].textY = S.y + S.height - z / 2,
                                O[J].textAlign = "center",
                                O[J].textBaseline = "bottom"
                            }
                            O[J].textPosition = "specific",
                            O[J].textColor = O[J].textColor || "#fff"
                        }
                    }
                    return this.deepQuery([Q, s, this.option], "calculable") && (this.setCalculable(H),
                    H.draggable = !0),
                    w.pack(H, o[P], P, o[P].data[D], D, G),
                    H
                },
                getMarkCoord: function(F, H) {
                    var A, D, G = this.series[F], z = this.xMarkMap[F], y = this.component.xAxis.getAxis(G.xAxisIndex), I = this.component.yAxis.getAxis(G.yAxisIndex);
                    if (!H.type || "max" !== H.type && "min" !== H.type && "average" !== H.type) {
                        if (z.isHorizontal) {
                            A = "string" == typeof H.xAxis && y.getIndexByName ? y.getIndexByName(H.xAxis) : H.xAxis || 0;
                            var C = z[A];
                            C = null  != C ? C : "string" != typeof H.xAxis && y.getCoordByIndex ? y.getCoordByIndex(H.xAxis || 0) : y.getCoord(H.xAxis || 0),
                            D = [C, I.getCoord(H.yAxis || 0)]
                        } else {
                            A = "string" == typeof H.yAxis && I.getIndexByName ? I.getIndexByName(H.yAxis) : H.yAxis || 0;
                            var E = z[A];
                            E = null  != E ? E : "string" != typeof H.yAxis && I.getCoordByIndex ? I.getCoordByIndex(H.yAxis || 0) : I.getCoord(H.yAxis || 0),
                            D = [y.getCoord(H.xAxis || 0), E]
                        }
                    } else {
                        var B = null  != H.valueIndex ? H.valueIndex : null  != z.maxX0 ? "1" : "";
                        D = [z[H.type + "X" + B], z[H.type + "Y" + B], z[H.type + "Line" + B], z[H.type + B]]
                    }
                    return D
                },
                refresh: function(i) {
                    i && (this.option = i,
                    this.series = i.series),
                    this.backupShapeList(),
                    this._buildShape()
                },
                addDataAnimation: function(G, K) {
                    function z() {
                        I--,
                        0 === I && K && K()
                    }
                    for (var E = this.series, J = {}, o = 0, L = G.length; L > o; o++) {
                        J[G[o][0]] = G[o]
                    }
                    for (var D, F, B, A, C, H, y, I = 0, o = this.shapeList.length - 1; o >= 0; o--) {
                        if (H = w.get(this.shapeList[o], "seriesIndex"),
                        J[H] && !J[H][3] && "rectangle" === this.shapeList[o].type) {
                            if (y = w.get(this.shapeList[o], "dataIndex"),
                            C = E[H],
                            J[H][2] && y === C.data.length - 1) {
                                this.zr.delShape(this.shapeList[o].id);
                                continue
                            }
                            if (!J[H][2] && 0 === y) {
                                this.zr.delShape(this.shapeList[o].id);
                                continue
                            }
                            "horizontal" === this.shapeList[o]._orient ? (A = this.component.yAxis.getAxis(C.yAxisIndex || 0).getGap(),
                            B = J[H][2] ? -A : A,
                            D = 0) : (F = this.component.xAxis.getAxis(C.xAxisIndex || 0).getGap(),
                            D = J[H][2] ? F : -F,
                            B = 0),
                            this.shapeList[o].position = [0, 0],
                            I++,
                            this.zr.animate(this.shapeList[o].id, "").when(this.query(this.option, "animationDurationUpdate"), {
                                position: [D, B]
                            }).done(z).start()
                        }
                    }
                    I || z()
                }
            },
            u.inherits(p, x),
            v("../chart").define("bar", p),
            p
        }
        ),
        k("echarts/chart/scatter", ["require", "./base", "../util/shape/Symbol", "../component/axis", "../component/grid", "../component/dataZoom", "../component/dataRange", "../config", "zrender/tool/util", "zrender/tool/color", "../chart"], function(s) {
            function p(x, w, r, n, y) {
                v.call(this, x, w, r, n, y),
                this.refresh(n)
            }
            var v = s("./base")
              , m = s("../util/shape/Symbol");
            s("../component/axis"),
            s("../component/grid"),
            s("../component/dataZoom"),
            s("../component/dataRange");
            var l = s("../config");
            l.scatter = {
                zlevel: 0,
                z: 2,
                clickable: !0,
                legendHoverLink: !0,
                xAxisIndex: 0,
                yAxisIndex: 0,
                symbolSize: 4,
                large: !1,
                largeThreshold: 2000,
                itemStyle: {
                    normal: {
                        label: {
                            show: !1
                        }
                    },
                    emphasis: {
                        label: {
                            show: !1
                        }
                    }
                }
            };
            var u = s("zrender/tool/util")
              , q = s("zrender/tool/color");
            return p.prototype = {
                type: l.CHART_TYPE_SCATTER,
                _buildShape: function() {
                    var B = this.series;
                    this._sIndex2ColorMap = {},
                    this._symbol = this.option.symbolList,
                    this._sIndex2ShapeMap = {},
                    this.selectedMap = {},
                    this.xMarkMap = {};
                    for (var C, w, z, r, D = this.component.legend, y = [], A = 0, x = B.length; x > A; A++) {
                        if (C = B[A],
                        w = C.name,
                        C.type === l.CHART_TYPE_SCATTER) {
                            if (B[A] = this.reformOption(B[A]),
                            this.legendHoverLink = B[A].legendHoverLink || this.legendHoverLink,
                            this._sIndex2ShapeMap[A] = this.query(C, "symbol") || this._symbol[A % this._symbol.length],
                            D) {
                                if (this.selectedMap[w] = D.isSelected(w),
                                this._sIndex2ColorMap[A] = q.alpha(D.getColor(w), 0.5),
                                z = D.getItemShape(w)) {
                                    var r = this._sIndex2ShapeMap[A];
                                    z.style.brushType = r.match("empty") ? "stroke" : "both",
                                    r = r.replace("empty", "").toLowerCase(),
                                    r.match("rectangle") && (z.style.x += Math.round((z.style.width - z.style.height) / 2),
                                    z.style.width = z.style.height),
                                    r.match("star") && (z.style.n = r.replace("star", "") - 0 || 5,
                                    r = "star"),
                                    r.match("image") && (z.style.image = r.replace(RegExp("^image:\\/\\/"), ""),
                                    z.style.x += Math.round((z.style.width - z.style.height) / 2),
                                    z.style.width = z.style.height,
                                    r = "image"),
                                    z.style.iconType = r,
                                    D.setItemShape(w, z)
                                }
                            } else {
                                this.selectedMap[w] = !0,
                                this._sIndex2ColorMap[A] = q.alpha(this.zr.getColor(A), 0.5)
                            }
                            this.selectedMap[w] && y.push(A)
                        }
                    }
                    this._buildSeries(y),
                    this.addShapeList()
                },
                _buildSeries: function(G) {
                    if (0 !== G.length) {
                        for (var J, z, E, I, y, w, K, D, F = this.series, B = {}, A = 0, C = G.length; C > A; A++) {
                            if (J = G[A],
                            z = F[J],
                            0 !== z.data.length) {
                                y = this.component.xAxis.getAxis(z.xAxisIndex || 0),
                                w = this.component.yAxis.getAxis(z.yAxisIndex || 0),
                                B[J] = [];
                                for (var H = 0, x = z.data.length; x > H; H++) {
                                    E = z.data[H],
                                    I = this.getDataFromOption(E, "-"),
                                    "-" === I || 2 > I.length || (K = y.getCoord(I[0]),
                                    D = w.getCoord(I[1]),
                                    B[J].push([K, D, H, E.name || ""]))
                                }
                                this.xMarkMap[J] = this._markMap(y, w, z.data, B[J]),
                                this.buildMark(J)
                            }
                        }
                        this._buildPointList(B)
                    }
                },
                _markMap: function(F, I, y, D) {
                    for (var H, x = {
                        min0: Number.POSITIVE_INFINITY,
                        max0: Number.NEGATIVE_INFINITY,
                        sum0: 0,
                        counter0: 0,
                        average0: 0,
                        min1: Number.POSITIVE_INFINITY,
                        max1: Number.NEGATIVE_INFINITY,
                        sum1: 0,
                        counter1: 0,
                        average1: 0
                    }, w = 0, J = D.length; J > w; w++) {
                        H = y[D[w][2]].value || y[D[w][2]],
                        x.min0 > H[0] && (x.min0 = H[0],
                        x.minY0 = D[w][1],
                        x.minX0 = D[w][0]),
                        x.max0 < H[0] && (x.max0 = H[0],
                        x.maxY0 = D[w][1],
                        x.maxX0 = D[w][0]),
                        x.sum0 += H[0],
                        x.counter0++,
                        x.min1 > H[1] && (x.min1 = H[1],
                        x.minY1 = D[w][1],
                        x.minX1 = D[w][0]),
                        x.max1 < H[1] && (x.max1 = H[1],
                        x.maxY1 = D[w][1],
                        x.maxX1 = D[w][0]),
                        x.sum1 += H[1],
                        x.counter1++
                    }
                    var C = this.component.grid.getX()
                      , E = this.component.grid.getXend()
                      , A = this.component.grid.getY()
                      , z = this.component.grid.getYend();
                    x.average0 = x.sum0 / x.counter0;
                    var B = F.getCoord(x.average0);
                    x.averageLine0 = [[B, z], [B, A]],
                    x.minLine0 = [[x.minX0, z], [x.minX0, A]],
                    x.maxLine0 = [[x.maxX0, z], [x.maxX0, A]],
                    x.average1 = x.sum1 / x.counter1;
                    var G = I.getCoord(x.average1);
                    return x.averageLine1 = [[C, G], [E, G]],
                    x.minLine1 = [[C, x.minY1], [E, x.minY1]],
                    x.maxLine1 = [[C, x.maxY1], [E, x.maxY1]],
                    x
                },
                _buildPointList: function(B) {
                    var D, y, A, C, x = this.series;
                    for (var w in B) {
                        if (D = x[w],
                        y = B[w],
                        D.large && D.data.length > D.largeThreshold) {
                            this.shapeList.push(this._getLargeSymbol(y, this.getItemStyleColor(this.query(D, "itemStyle.normal.color"), w, -1) || this._sIndex2ColorMap[w]))
                        } else {
                            for (var E = 0, z = y.length; z > E; E++) {
                                A = y[E],
                                C = this._getSymbol(w, A[2], A[3], A[0], A[1]),
                                C && this.shapeList.push(C)
                            }
                        }
                    }
                },
                _getSymbol: function(D, F, y, B, E) {
                    var x, w = this.series, G = w[D], A = G.data[F], C = this.component.dataRange;
                    if (C) {
                        if (x = isNaN(A[2]) ? this._sIndex2ColorMap[D] : C.getColor(A[2]),
                        !x) {
                            return null 
                        }
                    } else {
                        x = this._sIndex2ColorMap[D]
                    }
                    var z = this.getSymbolShape(G, D, A, F, y, B, E, this._sIndex2ShapeMap[D], x, "rgba(0,0,0,0)", "vertical");
                    return z.zlevel = this.getZlevelBase(),
                    z.z = this.getZBase(),
                    z._main = !0,
                    z
                },
                _getLargeSymbol: function(n, i) {
                    return new m({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        _main: !0,
                        hoverable: !1,
                        style: {
                            pointList: n,
                            color: i,
                            strokeColor: i
                        },
                        highlightStyle: {
                            pointList: []
                        }
                    })
                },
                getMarkCoord: function(B, y) {
                    var D, x = this.series[B], w = this.xMarkMap[B], C = this.component.xAxis.getAxis(x.xAxisIndex), A = this.component.yAxis.getAxis(x.yAxisIndex);
                    if (!y.type || "max" !== y.type && "min" !== y.type && "average" !== y.type) {
                        D = ["string" != typeof y.xAxis && C.getCoordByIndex ? C.getCoordByIndex(y.xAxis || 0) : C.getCoord(y.xAxis || 0), "string" != typeof y.yAxis && A.getCoordByIndex ? A.getCoordByIndex(y.yAxis || 0) : A.getCoord(y.yAxis || 0)]
                    } else {
                        var z = null  != y.valueIndex ? y.valueIndex : 1;
                        D = [w[y.type + "X" + z], w[y.type + "Y" + z], w[y.type + "Line" + z], w[y.type + z]]
                    }
                    return D
                },
                refresh: function(i) {
                    i && (this.option = i,
                    this.series = i.series),
                    this.backupShapeList(),
                    this._buildShape()
                },
                ondataRange: function(n, i) {
                    this.component.dataRange && (this.refresh(),
                    i.needRefresh = !0)
                }
            },
            u.inherits(p, v),
            s("../chart").define("scatter", p),
            p
        }
        ),
        k("echarts/component/dataRange", ["require", "./base", "zrender/shape/Text", "zrender/shape/Rectangle", "../util/shape/HandlePolygon", "../config", "zrender/tool/util", "zrender/tool/event", "zrender/tool/area", "zrender/tool/color", "../component"], function(z) {
            function B(D, n, m, l, E) {
                if (this.query(l, "dataRange.min") === void 0 || this.query(l, "dataRange.max") === void 0) {
                    return console.error("option.dataRange.min or option.dataRange.max has not been defined."),
                    void 0
                }
                u.call(this, D, n, m, l, E);
                var r = this;
                r._ondrift = function(o, i) {
                    return r.__ondrift(this, o, i)
                }
                ,
                r._ondragend = function() {
                    return r.__ondragend()
                }
                ,
                r._dataRangeSelected = function(i) {
                    return r.__dataRangeSelected(i)
                }
                ,
                r._dispatchHoverLink = function(i) {
                    return r.__dispatchHoverLink(i)
                }
                ,
                r._onhoverlink = function(i) {
                    return r.__onhoverlink(i)
                }
                ,
                this._selectedMap = {},
                this._range = {},
                this.refresh(l),
                n.bind(p.EVENT.HOVER, this._onhoverlink)
            }
            var u = z("./base")
              , x = z("zrender/shape/Text")
              , A = z("zrender/shape/Rectangle")
              , q = z("../util/shape/HandlePolygon")
              , p = z("../config");
            p.dataRange = {
                zlevel: 0,
                z: 4,
                show: !0,
                orient: "vertical",
                x: "left",
                y: "bottom",
                backgroundColor: "rgba(0,0,0,0)",
                borderColor: "#ccc",
                borderWidth: 0,
                padding: 5,
                itemGap: 10,
                itemWidth: 20,
                itemHeight: 14,
                precision: 0,
                splitNumber: 5,
                calculable: !1,
                selectedMode: !0,
                hoverLink: !0,
                realtime: !0,
                color: ["#006edd", "#e0ffff"],
                textStyle: {
                    color: "#333"
                }
            };
            var C = z("zrender/tool/util")
              , w = z("zrender/tool/event")
              , y = z("zrender/tool/area")
              , v = z("zrender/tool/color");
            return B.prototype = {
                type: p.COMPONENT_TYPE_DATARANGE,
                _textGap: 10,
                _buildShape: function() {
                    if (this._itemGroupLocation = this._getItemGroupLocation(),
                    this._buildBackground(),
                    0 >= this.dataRangeOption.splitNumber || this.dataRangeOption.calculable ? this._buildGradient() : this._buildItem(),
                    this.dataRangeOption.show) {
                        for (var l = 0, i = this.shapeList.length; i > l; l++) {
                            this.zr.addShape(this.shapeList[l])
                        }
                    }
                    this._syncShapeFromRange()
                },
                _buildItem: function() {
                    var K, P, F, E, i = this._valueTextList, Q = i.length, J = this.getFont(this.dataRangeOption.textStyle), H = this._itemGroupLocation.x, G = this._itemGroupLocation.y, I = this.dataRangeOption.itemWidth, L = this.dataRangeOption.itemHeight, D = this.dataRangeOption.itemGap, M = y.getTextHeight("国", J);
                    "vertical" == this.dataRangeOption.orient && "right" == this.dataRangeOption.x && (H = this._itemGroupLocation.x + this._itemGroupLocation.width - I);
                    var O = !0;
                    this.dataRangeOption.text && (O = !1,
                    this.dataRangeOption.text[0] && (F = this._getTextShape(H, G, this.dataRangeOption.text[0]),
                    "horizontal" == this.dataRangeOption.orient ? H += y.getTextWidth(this.dataRangeOption.text[0], J) + this._textGap : (G += M + this._textGap,
                    F.style.y += M / 2 + this._textGap,
                    F.style.textBaseline = "bottom"),
                    this.shapeList.push(new x(F))));
                    for (var N = 0; Q > N; N++) {
                        K = i[N],
                        E = this.getColorByIndex(N),
                        P = this._getItemShape(H, G, I, L, this._selectedMap[N] ? E : "#ccc"),
                        P._idx = N,
                        P.onmousemove = this._dispatchHoverLink,
                        this.dataRangeOption.selectedMode && (P.clickable = !0,
                        P.onclick = this._dataRangeSelected),
                        this.shapeList.push(new A(P)),
                        O && (F = {
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase(),
                            style: {
                                x: H + I + 5,
                                y: G,
                                color: this._selectedMap[N] ? this.dataRangeOption.textStyle.color : "#ccc",
                                text: i[N],
                                textFont: J,
                                textBaseline: "top"
                            },
                            highlightStyle: {
                                brushType: "fill"
                            }
                        },
                        "vertical" == this.dataRangeOption.orient && "right" == this.dataRangeOption.x && (F.style.x -= I + 10,
                        F.style.textAlign = "right"),
                        F._idx = N,
                        F.onmousemove = this._dispatchHoverLink,
                        this.dataRangeOption.selectedMode && (F.clickable = !0,
                        F.onclick = this._dataRangeSelected),
                        this.shapeList.push(new x(F))),
                        "horizontal" == this.dataRangeOption.orient ? H += I + (O ? 5 : 0) + (O ? y.getTextWidth(K, J) : 0) + D : G += L + D
                    }
                    !O && this.dataRangeOption.text[1] && ("horizontal" == this.dataRangeOption.orient ? H = H - D + this._textGap : G = G - D + this._textGap,
                    F = this._getTextShape(H, G, this.dataRangeOption.text[1]),
                    "horizontal" != this.dataRangeOption.orient && (F.style.y -= 5,
                    F.style.textBaseline = "top"),
                    this.shapeList.push(new x(F)))
                },
                _buildGradient: function() {
                    var O, E, D = this.getFont(this.dataRangeOption.textStyle), e = this._itemGroupLocation.x, P = this._itemGroupLocation.y, I = this.dataRangeOption.itemWidth, G = this.dataRangeOption.itemHeight, F = y.getTextHeight("国", D), H = 10, K = !0;
                    this.dataRangeOption.text && (K = !1,
                    this.dataRangeOption.text[0] && (E = this._getTextShape(e, P, this.dataRangeOption.text[0]),
                    "horizontal" == this.dataRangeOption.orient ? e += y.getTextWidth(this.dataRangeOption.text[0], D) + this._textGap : (P += F + this._textGap,
                    E.style.y += F / 2 + this._textGap,
                    E.style.textBaseline = "bottom"),
                    this.shapeList.push(new x(E))));
                    for (var i = z("zrender/tool/color"), L = 1 / (this.dataRangeOption.color.length - 1), N = [], M = 0, J = this.dataRangeOption.color.length; J > M; M++) {
                        N.push([M * L, this.dataRangeOption.color[M]])
                    }
                    "horizontal" == this.dataRangeOption.orient ? (O = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            x: e,
                            y: P,
                            width: I * H,
                            height: G,
                            color: i.getLinearGradient(e, P, e + I * H, P, N)
                        },
                        hoverable: !1
                    },
                    e += I * H + this._textGap) : (O = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            x: e,
                            y: P,
                            width: I,
                            height: G * H,
                            color: i.getLinearGradient(e, P, e, P + G * H, N)
                        },
                        hoverable: !1
                    },
                    P += G * H + this._textGap),
                    this.shapeList.push(new A(O)),
                    this._calculableLocation = O.style,
                    this.dataRangeOption.calculable && (this._buildFiller(),
                    this._bulidMask(),
                    this._bulidHandle()),
                    this._buildIndicator(),
                    !K && this.dataRangeOption.text[1] && (E = this._getTextShape(e, P, this.dataRangeOption.text[1]),
                    this.shapeList.push(new x(E)))
                },
                _buildIndicator: function() {
                    var F, o, G = this._calculableLocation.x, m = this._calculableLocation.y, l = this._calculableLocation.width, E = this._calculableLocation.height, D = 5;
                    "horizontal" == this.dataRangeOption.orient ? "bottom" != this.dataRangeOption.y ? (F = [[G, m + E], [G - D, m + E + D], [G + D, m + E + D]],
                    o = "bottom") : (F = [[G, m], [G - D, m - D], [G + D, m - D]],
                    o = "top") : "right" != this.dataRangeOption.x ? (F = [[G + l, m], [G + l + D, m - D], [G + l + D, m + D]],
                    o = "right") : (F = [[G, m], [G - D, m - D], [G - D, m + D]],
                    o = "left"),
                    this._indicatorShape = {
                        style: {
                            pointList: F,
                            color: "#fff",
                            __rect: {
                                x: Math.min(F[0][0], F[1][0]),
                                y: Math.min(F[0][1], F[1][1]),
                                width: D * ("horizontal" == this.dataRangeOption.orient ? 2 : 1),
                                height: D * ("horizontal" == this.dataRangeOption.orient ? 1 : 2)
                            }
                        },
                        highlightStyle: {
                            brushType: "fill",
                            textPosition: o,
                            textColor: this.dataRangeOption.textStyle.color
                        },
                        hoverable: !1
                    },
                    this._indicatorShape = new q(this._indicatorShape)
                },
                _buildFiller: function() {
                    this._fillerShape = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase() + 1,
                        style: {
                            x: this._calculableLocation.x,
                            y: this._calculableLocation.y,
                            width: this._calculableLocation.width,
                            height: this._calculableLocation.height,
                            color: "rgba(255,255,255,0)"
                        },
                        highlightStyle: {
                            strokeColor: "rgba(255,255,255,0.5)",
                            lineWidth: 1
                        },
                        draggable: !0,
                        ondrift: this._ondrift,
                        ondragend: this._ondragend,
                        onmousemove: this._dispatchHoverLink,
                        _type: "filler"
                    },
                    this._fillerShape = new A(this._fillerShape),
                    this.shapeList.push(this._fillerShape)
                },
                _bulidHandle: function() {
                    var K, P, E, J, N, o, Q, I, G = this._calculableLocation.x, F = this._calculableLocation.y, H = this._calculableLocation.width, L = this._calculableLocation.height, D = this.getFont(this.dataRangeOption.textStyle), M = y.getTextHeight("国", D), O = Math.max(y.getTextWidth(this._textFormat(this.dataRangeOption.max), D), y.getTextWidth(this._textFormat(this.dataRangeOption.min), D)) + 2;
                    "horizontal" == this.dataRangeOption.orient ? "bottom" != this.dataRangeOption.y ? (K = [[G, F], [G, F + L + M], [G - M, F + L + M], [G - 1, F + L], [G - 1, F]],
                    P = G - O / 2 - M,
                    E = F + L + M / 2 + 2,
                    J = {
                        x: G - O - M,
                        y: F + L,
                        width: O + M,
                        height: M
                    },
                    N = [[G + H, F], [G + H, F + L + M], [G + H + M, F + L + M], [G + H + 1, F + L], [G + H + 1, F]],
                    o = G + H + O / 2 + M,
                    Q = E,
                    I = {
                        x: G + H,
                        y: F + L,
                        width: O + M,
                        height: M
                    }) : (K = [[G, F + L], [G, F - M], [G - M, F - M], [G - 1, F], [G - 1, F + L]],
                    P = G - O / 2 - M,
                    E = F - M / 2 - 2,
                    J = {
                        x: G - O - M,
                        y: F - M,
                        width: O + M,
                        height: M
                    },
                    N = [[G + H, F + L], [G + H, F - M], [G + H + M, F - M], [G + H + 1, F], [G + H + 1, F + L]],
                    o = G + H + O / 2 + M,
                    Q = E,
                    I = {
                        x: G + H,
                        y: F - M,
                        width: O + M,
                        height: M
                    }) : (O += M,
                    "right" != this.dataRangeOption.x ? (K = [[G, F], [G + H + M, F], [G + H + M, F - M], [G + H, F - 1], [G, F - 1]],
                    P = G + H + O / 2 + M / 2,
                    E = F - M / 2,
                    J = {
                        x: G + H,
                        y: F - M,
                        width: O + M,
                        height: M
                    },
                    N = [[G, F + L], [G + H + M, F + L], [G + H + M, F + M + L], [G + H, F + 1 + L], [G, F + L + 1]],
                    o = P,
                    Q = F + L + M / 2,
                    I = {
                        x: G + H,
                        y: F + L,
                        width: O + M,
                        height: M
                    }) : (K = [[G + H, F], [G - M, F], [G - M, F - M], [G, F - 1], [G + H, F - 1]],
                    P = G - O / 2 - M / 2,
                    E = F - M / 2,
                    J = {
                        x: G - O - M,
                        y: F - M,
                        width: O + M,
                        height: M
                    },
                    N = [[G + H, F + L], [G - M, F + L], [G - M, F + M + L], [G, F + 1 + L], [G + H, F + L + 1]],
                    o = P,
                    Q = F + L + M / 2,
                    I = {
                        x: G - O - M,
                        y: F + L,
                        width: O + M,
                        height: M
                    })),
                    this._startShape = {
                        style: {
                            pointList: K,
                            text: this._textFormat(this.dataRangeOption.max),
                            textX: P,
                            textY: E,
                            textFont: D,
                            color: this.getColor(this.dataRangeOption.max),
                            rect: J,
                            x: K[0][0],
                            y: K[0][1],
                            _x: K[0][0],
                            _y: K[0][1]
                        }
                    },
                    this._startShape.highlightStyle = {
                        strokeColor: this._startShape.style.color,
                        lineWidth: 1
                    },
                    this._endShape = {
                        style: {
                            pointList: N,
                            text: this._textFormat(this.dataRangeOption.min),
                            textX: o,
                            textY: Q,
                            textFont: D,
                            color: this.getColor(this.dataRangeOption.min),
                            rect: I,
                            x: N[0][0],
                            y: N[0][1],
                            _x: N[0][0],
                            _y: N[0][1]
                        }
                    },
                    this._endShape.highlightStyle = {
                        strokeColor: this._endShape.style.color,
                        lineWidth: 1
                    },
                    this._startShape.zlevel = this._endShape.zlevel = this.getZlevelBase(),
                    this._startShape.z = this._endShape.z = this.getZBase() + 1,
                    this._startShape.draggable = this._endShape.draggable = !0,
                    this._startShape.ondrift = this._endShape.ondrift = this._ondrift,
                    this._startShape.ondragend = this._endShape.ondragend = this._ondragend,
                    this._startShape.style.textColor = this._endShape.style.textColor = this.dataRangeOption.textStyle.color,
                    this._startShape.style.textAlign = this._endShape.style.textAlign = "center",
                    this._startShape.style.textPosition = this._endShape.style.textPosition = "specific",
                    this._startShape.style.textBaseline = this._endShape.style.textBaseline = "middle",
                    this._startShape.style.width = this._endShape.style.width = 0,
                    this._startShape.style.height = this._endShape.style.height = 0,
                    this._startShape.style.textPosition = this._endShape.style.textPosition = "specific",
                    this._startShape = new q(this._startShape),
                    this._endShape = new q(this._endShape),
                    this.shapeList.push(this._startShape),
                    this.shapeList.push(this._endShape)
                },
                _bulidMask: function() {
                    var o = this._calculableLocation.x
                      , m = this._calculableLocation.y
                      , r = this._calculableLocation.width
                      , l = this._calculableLocation.height;
                    this._startMask = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase() + 1,
                        style: {
                            x: o,
                            y: m,
                            width: "horizontal" == this.dataRangeOption.orient ? 0 : r,
                            height: "horizontal" == this.dataRangeOption.orient ? l : 0,
                            color: "#ccc"
                        },
                        hoverable: !1
                    },
                    this._endMask = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase() + 1,
                        style: {
                            x: "horizontal" == this.dataRangeOption.orient ? o + r : o,
                            y: "horizontal" == this.dataRangeOption.orient ? m : m + l,
                            width: "horizontal" == this.dataRangeOption.orient ? 0 : r,
                            height: "horizontal" == this.dataRangeOption.orient ? l : 0,
                            color: "#ccc"
                        },
                        hoverable: !1
                    },
                    this._startMask = new A(this._startMask),
                    this._endMask = new A(this._endMask),
                    this.shapeList.push(this._startMask),
                    this.shapeList.push(this._endMask)
                },
                _buildBackground: function() {
                    var i = this.reformCssArray(this.dataRangeOption.padding);
                    this.shapeList.push(new A({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        hoverable: !1,
                        style: {
                            x: this._itemGroupLocation.x - i[3],
                            y: this._itemGroupLocation.y - i[0],
                            width: this._itemGroupLocation.width + i[3] + i[1],
                            height: this._itemGroupLocation.height + i[0] + i[2],
                            brushType: 0 === this.dataRangeOption.borderWidth ? "fill" : "both",
                            color: this.dataRangeOption.backgroundColor,
                            strokeColor: this.dataRangeOption.borderColor,
                            lineWidth: this.dataRangeOption.borderWidth
                        }
                    }))
                },
                _getItemGroupLocation: function() {
                    var R = this._valueTextList
                      , H = R.length
                      , M = this.dataRangeOption.itemGap
                      , P = this.dataRangeOption.itemWidth
                      , W = this.dataRangeOption.itemHeight
                      , L = 0
                      , J = 0
                      , I = this.getFont(this.dataRangeOption.textStyle)
                      , O = y.getTextHeight("国", I)
                      , N = 10;
                    if ("horizontal" == this.dataRangeOption.orient) {
                        if (this.dataRangeOption.text || 0 >= this.dataRangeOption.splitNumber || this.dataRangeOption.calculable) {
                            L = (0 >= this.dataRangeOption.splitNumber || this.dataRangeOption.calculable ? P * N + M : H * (P + M)) + (this.dataRangeOption.text && this.dataRangeOption.text[0] !== void 0 ? y.getTextWidth(this.dataRangeOption.text[0], I) + this._textGap : 0) + (this.dataRangeOption.text && this.dataRangeOption.text[1] !== void 0 ? y.getTextWidth(this.dataRangeOption.text[1], I) + this._textGap : 0)
                        } else {
                            P += 5;
                            for (var D = 0; H > D; D++) {
                                L += P + y.getTextWidth(R[D], I) + M
                            }
                        }
                        L -= M,
                        J = Math.max(O, W)
                    } else {
                        var E;
                        if (this.dataRangeOption.text || 0 >= this.dataRangeOption.splitNumber || this.dataRangeOption.calculable) {
                            J = (0 >= this.dataRangeOption.splitNumber || this.dataRangeOption.calculable ? W * N + M : H * (W + M)) + (this.dataRangeOption.text && this.dataRangeOption.text[0] !== void 0 ? this._textGap + O : 0) + (this.dataRangeOption.text && this.dataRangeOption.text[1] !== void 0 ? this._textGap + O : 0),
                            E = Math.max(y.getTextWidth(this.dataRangeOption.text && this.dataRangeOption.text[0] || "", I), y.getTextWidth(this.dataRangeOption.text && this.dataRangeOption.text[1] || "", I)),
                            L = Math.max(P, E)
                        } else {
                            J = (W + M) * H,
                            P += 5,
                            E = 0;
                            for (var D = 0; H > D; D++) {
                                E = Math.max(E, y.getTextWidth(R[D], I))
                            }
                            L = P + E
                        }
                        J -= M
                    }
                    var S, K = this.reformCssArray(this.dataRangeOption.padding), T = this.zr.getWidth();
                    switch (this.dataRangeOption.x) {
                    case "center":
                        S = Math.floor((T - L) / 2);
                        break;
                    case "left":
                        S = K[3] + this.dataRangeOption.borderWidth;
                        break;
                    case "right":
                        S = T - L - K[1] - this.dataRangeOption.borderWidth;
                        break;
                    default:
                        S = this.parsePercent(this.dataRangeOption.x, T),
                        S = isNaN(S) ? 0 : S
                    }
                    var G, F = this.zr.getHeight();
                    switch (this.dataRangeOption.y) {
                    case "top":
                        G = K[0] + this.dataRangeOption.borderWidth;
                        break;
                    case "bottom":
                        G = F - J - K[2] - this.dataRangeOption.borderWidth;
                        break;
                    case "center":
                        G = Math.floor((F - J) / 2);
                        break;
                    default:
                        G = this.parsePercent(this.dataRangeOption.y, F),
                        G = isNaN(G) ? 0 : G
                    }
                    if (this.dataRangeOption.calculable) {
                        var Q = Math.max(y.getTextWidth(this.dataRangeOption.max, I), y.getTextWidth(this.dataRangeOption.min, I)) + O;
                        "horizontal" == this.dataRangeOption.orient ? (Q > S && (S = Q),
                        S + L + Q > T && (S -= Q)) : (O > G && (G = O),
                        G + J + O > F && (G -= O))
                    }
                    return {
                        x: S,
                        y: G,
                        width: L,
                        height: J
                    }
                },
                _getTextShape: function(l, i, m) {
                    return {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            x: "horizontal" == this.dataRangeOption.orient ? l : this._itemGroupLocation.x + this._itemGroupLocation.width / 2,
                            y: "horizontal" == this.dataRangeOption.orient ? this._itemGroupLocation.y + this._itemGroupLocation.height / 2 : i,
                            color: this.dataRangeOption.textStyle.color,
                            text: m,
                            textFont: this.getFont(this.dataRangeOption.textStyle),
                            textBaseline: "horizontal" == this.dataRangeOption.orient ? "middle" : "top",
                            textAlign: "horizontal" == this.dataRangeOption.orient ? "left" : "center"
                        },
                        hoverable: !1
                    }
                },
                _getItemShape: function(r, o, s, m, l) {
                    return {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            x: r,
                            y: o + 1,
                            width: s,
                            height: m - 2,
                            color: l
                        },
                        highlightStyle: {
                            strokeColor: l,
                            lineWidth: 1
                        }
                    }
                },
                __ondrift: function(E, s, G) {
                    var m = this._calculableLocation.x
                      , l = this._calculableLocation.y
                      , F = this._calculableLocation.width
                      , D = this._calculableLocation.height;
                    return "horizontal" == this.dataRangeOption.orient ? m >= E.style.x + s ? E.style.x = m : E.style.x + s + E.style.width >= m + F ? E.style.x = m + F - E.style.width : E.style.x += s : l >= E.style.y + G ? E.style.y = l : E.style.y + G + E.style.height >= l + D ? E.style.y = l + D - E.style.height : E.style.y += G,
                    "filler" == E._type ? this._syncHandleShape() : this._syncFillerShape(E),
                    this.dataRangeOption.realtime && this._dispatchDataRange(),
                    !0
                },
                __ondragend: function() {
                    this.isDragend = !0
                },
                ondragend: function(l, i) {
                    this.isDragend && l.target && (i.dragOut = !0,
                    i.dragIn = !0,
                    this.dataRangeOption.realtime || this._dispatchDataRange(),
                    i.needRefresh = !1,
                    this.isDragend = !1)
                },
                _syncShapeFromRange: function() {
                    var l = this.dataRangeOption.range || {};
                    if (this._range.end = this._range.end !== void 0 ? this._range.end : l.start !== void 0 ? l.start : 0,
                    this._range.start = this._range.start !== void 0 ? this._range.start : l.end !== void 0 ? l.end : 100,
                    100 != this._range.start || 0 !== this._range.end) {
                        if ("horizontal" == this.dataRangeOption.orient) {
                            var i = this._fillerShape.style.width;
                            this._fillerShape.style.x += i * (100 - this._range.start) / 100,
                            this._fillerShape.style.width = i * (this._range.start - this._range.end) / 100
                        } else {
                            var m = this._fillerShape.style.height;
                            this._fillerShape.style.y += m * (100 - this._range.start) / 100,
                            this._fillerShape.style.height = m * (this._range.start - this._range.end) / 100
                        }
                        this.zr.modShape(this._fillerShape.id),
                        this._syncHandleShape()
                    }
                },
                _syncHandleShape: function() {
                    var o = this._calculableLocation.x
                      , m = this._calculableLocation.y
                      , r = this._calculableLocation.width
                      , l = this._calculableLocation.height;
                    "horizontal" == this.dataRangeOption.orient ? (this._startShape.style.x = this._fillerShape.style.x,
                    this._startMask.style.width = this._startShape.style.x - o,
                    this._endShape.style.x = this._fillerShape.style.x + this._fillerShape.style.width,
                    this._endMask.style.x = this._endShape.style.x,
                    this._endMask.style.width = o + r - this._endShape.style.x,
                    this._range.start = Math.ceil(100 - 100 * ((this._startShape.style.x - o) / r)),
                    this._range.end = Math.floor(100 - 100 * ((this._endShape.style.x - o) / r))) : (this._startShape.style.y = this._fillerShape.style.y,
                    this._startMask.style.height = this._startShape.style.y - m,
                    this._endShape.style.y = this._fillerShape.style.y + this._fillerShape.style.height,
                    this._endMask.style.y = this._endShape.style.y,
                    this._endMask.style.height = m + l - this._endShape.style.y,
                    this._range.start = Math.ceil(100 - 100 * ((this._startShape.style.y - m) / l)),
                    this._range.end = Math.floor(100 - 100 * ((this._endShape.style.y - m) / l))),
                    this._syncShape()
                },
                _syncFillerShape: function(E) {
                    var s, G, m = this._calculableLocation.x, l = this._calculableLocation.y, F = this._calculableLocation.width, D = this._calculableLocation.height;
                    "horizontal" == this.dataRangeOption.orient ? (s = this._startShape.style.x,
                    G = this._endShape.style.x,
                    E.id == this._startShape.id && s >= G ? (G = s,
                    this._endShape.style.x = s) : E.id == this._endShape.id && s >= G && (s = G,
                    this._startShape.style.x = s),
                    this._fillerShape.style.x = s,
                    this._fillerShape.style.width = G - s,
                    this._startMask.style.width = s - m,
                    this._endMask.style.x = G,
                    this._endMask.style.width = m + F - G,
                    this._range.start = Math.ceil(100 - 100 * ((s - m) / F)),
                    this._range.end = Math.floor(100 - 100 * ((G - m) / F))) : (s = this._startShape.style.y,
                    G = this._endShape.style.y,
                    E.id == this._startShape.id && s >= G ? (G = s,
                    this._endShape.style.y = s) : E.id == this._endShape.id && s >= G && (s = G,
                    this._startShape.style.y = s),
                    this._fillerShape.style.y = s,
                    this._fillerShape.style.height = G - s,
                    this._startMask.style.height = s - l,
                    this._endMask.style.y = G,
                    this._endMask.style.height = l + D - G,
                    this._range.start = Math.ceil(100 - 100 * ((s - l) / D)),
                    this._range.end = Math.floor(100 - 100 * ((G - l) / D))),
                    this._syncShape()
                },
                _syncShape: function() {
                    this._startShape.position = [this._startShape.style.x - this._startShape.style._x, this._startShape.style.y - this._startShape.style._y],
                    this._startShape.style.text = this._textFormat(this._gap * this._range.start + this.dataRangeOption.min),
                    this._startShape.style.color = this._startShape.highlightStyle.strokeColor = this.getColor(this._gap * this._range.start + this.dataRangeOption.min),
                    this._endShape.position = [this._endShape.style.x - this._endShape.style._x, this._endShape.style.y - this._endShape.style._y],
                    this._endShape.style.text = this._textFormat(this._gap * this._range.end + this.dataRangeOption.min),
                    this._endShape.style.color = this._endShape.highlightStyle.strokeColor = this.getColor(this._gap * this._range.end + this.dataRangeOption.min),
                    this.zr.modShape(this._startShape.id),
                    this.zr.modShape(this._endShape.id),
                    this.zr.modShape(this._startMask.id),
                    this.zr.modShape(this._endMask.id),
                    this.zr.modShape(this._fillerShape.id),
                    this.zr.refreshNextFrame()
                },
                _dispatchDataRange: function() {
                    this.messageCenter.dispatch(p.EVENT.DATA_RANGE, null , {
                        range: {
                            start: this._range.end,
                            end: this._range.start
                        }
                    }, this.myChart)
                },
                __dataRangeSelected: function(o) {
                    if ("single" === this.dataRangeOption.selectedMode) {
                        for (var m in this._selectedMap) {
                            this._selectedMap[m] = !1
                        }
                    }
                    var r = o.target._idx;
                    this._selectedMap[r] = !this._selectedMap[r];
                    var l = (this._colorList.length - r) * this._gap + this.dataRangeOption.min;
                    this.messageCenter.dispatch(p.EVENT.DATA_RANGE_SELECTED, o.event, {
                        selected: this._selectedMap,
                        target: r,
                        valueMax: l,
                        valueMin: l - this._gap
                    }, this.myChart),
                    this.messageCenter.dispatch(p.EVENT.REFRESH, null , null , this.myChart)
                },
                __dispatchHoverLink: function(s) {
                    var r, E;
                    if (this.dataRangeOption.calculable) {
                        var m, l = this.dataRangeOption.max - this.dataRangeOption.min;
                        m = "horizontal" == this.dataRangeOption.orient ? (1 - (w.getX(s.event) - this._calculableLocation.x) / this._calculableLocation.width) * l : (1 - (w.getY(s.event) - this._calculableLocation.y) / this._calculableLocation.height) * l,
                        r = m - 0.05 * l,
                        E = m + 0.05 * l
                    } else {
                        var D = s.target._idx;
                        E = (this._colorList.length - D) * this._gap + this.dataRangeOption.min,
                        r = E - this._gap
                    }
                    this.messageCenter.dispatch(p.EVENT.DATA_RANGE_HOVERLINK, s.event, {
                        valueMin: r,
                        valueMax: E
                    }, this.myChart)
                },
                __onhoverlink: function(l) {
                    if (this.dataRangeOption.show && this.dataRangeOption.hoverLink && this._indicatorShape && l && null  != l.seriesIndex && null  != l.dataIndex) {
                        var i = l.value;
                        if ("" === i || isNaN(i)) {
                            return
                        }
                        this.dataRangeOption.min > i ? i = this.dataRangeOption.min : i > this.dataRangeOption.max && (i = this.dataRangeOption.max),
                        this._indicatorShape.position = "horizontal" == this.dataRangeOption.orient ? [(this.dataRangeOption.max - i) / (this.dataRangeOption.max - this.dataRangeOption.min) * this._calculableLocation.width, 0] : [0, (this.dataRangeOption.max - i) / (this.dataRangeOption.max - this.dataRangeOption.min) * this._calculableLocation.height],
                        this._indicatorShape.style.text = this._textFormat(l.value),
                        this._indicatorShape.style.color = this.getColor(i),
                        this.zr.addHoverShape(this._indicatorShape)
                    }
                },
                _textFormat: function(l, i) {
                    if (l = (+l).toFixed(this.dataRangeOption.precision),
                    i = null  != i ? (+i).toFixed(this.dataRangeOption.precision) : "",
                    this.dataRangeOption.formatter) {
                        if ("string" == typeof this.dataRangeOption.formatter) {
                            return this.dataRangeOption.formatter.replace("{value}", l).replace("{value2}", i)
                        }
                        if ("function" == typeof this.dataRangeOption.formatter) {
                            return this.dataRangeOption.formatter.call(this.myChart, l, i)
                        }
                    }
                    return "" !== i ? l + " - " + i : l
                },
                refresh: function(E) {
                    if (E) {
                        this.option = E,
                        this.option.dataRange = this.reformOption(this.option.dataRange),
                        this.dataRangeOption = this.option.dataRange,
                        this.myChart.canvasSupported || (this.dataRangeOption.realtime = !1);
                        var s = 0 >= this.dataRangeOption.splitNumber || this.dataRangeOption.calculable ? 100 : this.dataRangeOption.splitNumber;
                        if (this._colorList = v.getGradientColors(this.dataRangeOption.color, Math.max((s - this.dataRangeOption.color.length) / (this.dataRangeOption.color.length - 1), 0) + 1),
                        this._colorList.length > s) {
                            for (var G = this._colorList.length, m = [this._colorList[0]], l = G / (s - 1), F = 1; s - 1 > F; F++) {
                                m.push(this._colorList[Math.floor(F * l)])
                            }
                            m.push(this._colorList[G - 1]),
                            this._colorList = m
                        }
                        var D = this.dataRangeOption.precision;
                        for (this._gap = (this.dataRangeOption.max - this.dataRangeOption.min) / s; this._gap.toFixed(D) - 0 != this._gap && 5 > D; ) {
                            D++
                        }
                        this.dataRangeOption.precision = D,
                        this._gap = ((this.dataRangeOption.max - this.dataRangeOption.min) / s).toFixed(D) - 0,
                        this._valueTextList = [];
                        for (var F = 0; s > F; F++) {
                            this._selectedMap[F] = !0,
                            this._valueTextList.unshift(this._textFormat(F * this._gap + this.dataRangeOption.min, (F + 1) * this._gap + this.dataRangeOption.min))
                        }
                    }
                    this.clear(),
                    this._buildShape()
                },
                getColor: function(l) {
                    if (isNaN(l)) {
                        return null 
                    }
                    if (this.dataRangeOption.min == this.dataRangeOption.max) {
                        return this._colorList[0]
                    }
                    if (this.dataRangeOption.min > l ? l = this.dataRangeOption.min : l > this.dataRangeOption.max && (l = this.dataRangeOption.max),
                    this.dataRangeOption.calculable && (l - (this._gap * this._range.start + this.dataRangeOption.min) > 0.00005 || -0.00005 > l - (this._gap * this._range.end + this.dataRangeOption.min))) {
                        return null 
                    }
                    var i = this._colorList.length - Math.ceil((l - this.dataRangeOption.min) / (this.dataRangeOption.max - this.dataRangeOption.min) * this._colorList.length);
                    return i == this._colorList.length && i--,
                    this._selectedMap[i] ? this._colorList[i] : null 
                },
                getColorByIndex: function(i) {
                    return i >= this._colorList.length ? i = this._colorList.length - 1 : 0 > i && (i = 0),
                    this._colorList[i]
                },
                onbeforDispose: function() {
                    this.messageCenter.unbind(p.EVENT.HOVER, this._onhoverlink)
                }
            },
            C.inherits(B, u),
            z("../component").define("dataRange", B),
            B
        }
        ),
        k("echarts/util/shape/HandlePolygon", ["require", "zrender/shape/Base", "zrender/shape/Polygon", "zrender/tool/util"], function(p) {
            function o(i) {
                q.call(this, i)
            }
            var q = p("zrender/shape/Base")
              , m = p("zrender/shape/Polygon")
              , l = p("zrender/tool/util");
            return o.prototype = {
                type: "handle-polygon",
                buildPath: function(n, i) {
                    m.prototype.buildPath(n, i)
                },
                isCover: function(u, s) {
                    var v = this.transformCoordToLocal(u, s);
                    u = v[0],
                    s = v[1];
                    var r = this.style.rect;
                    return u >= r.x && r.x + r.width >= u && s >= r.y && r.y + r.height >= s ? !0 : !1
                }
            },
            l.inherits(o, q),
            o
        }
        ),
        k("echarts/chart/k", ["require", "./base", "../util/shape/Candle", "../component/axis", "../component/grid", "../component/dataZoom", "../config", "../util/ecData", "zrender/tool/util", "../chart"], function(s) {
            function p(x, w, r, n, y) {
                v.call(this, x, w, r, n, y),
                this.refresh(n)
            }
            var v = s("./base")
              , m = s("../util/shape/Candle");
            s("../component/axis"),
            s("../component/grid"),
            s("../component/dataZoom");
            var l = s("../config");
            l.k = {
                zlevel: 0,
                z: 2,
                clickable: !0,
                hoverable: !0,
                legendHoverLink: !1,
                xAxisIndex: 0,
                yAxisIndex: 0,
                itemStyle: {
                    normal: {
                        color: "#fff",
                        color0: "#00aa11",
                        lineStyle: {
                            width: 1,
                            color: "#ff3200",
                            color0: "#00aa11"
                        },
                        label: {
                            show: !1
                        }
                    },
                    emphasis: {
                        label: {
                            show: !1
                        }
                    }
                }
            };
            var u = s("../util/ecData")
              , q = s("zrender/tool/util");
            return p.prototype = {
                type: l.CHART_TYPE_K,
                _buildShape: function() {
                    var z = this.series;
                    this.selectedMap = {};
                    for (var x, B = {
                        top: [],
                        bottom: []
                    }, w = 0, A = z.length; A > w; w++) {
                        z[w].type === l.CHART_TYPE_K && (z[w] = this.reformOption(z[w]),
                        this.legendHoverLink = z[w].legendHoverLink || this.legendHoverLink,
                        x = this.component.xAxis.getAxis(z[w].xAxisIndex),
                        x.type === l.COMPONENT_TYPE_AXIS_CATEGORY && B[x.getPosition()].push(w))
                    }
                    for (var y in B) {
                        B[y].length > 0 && this._buildSinglePosition(y, B[y])
                    }
                    this.addShapeList()
                },
                _buildSinglePosition: function(A, y) {
                    var C = this._mapData(y)
                      , x = C.locationMap
                      , w = C.maxDataLength;
                    if (0 !== w && 0 !== x.length) {
                        this._buildHorizontal(y, w, x);
                        for (var B = 0, z = y.length; z > B; B++) {
                            this.buildMark(y[B])
                        }
                    }
                },
                _mapData: function(B) {
                    for (var D, y, A = this.series, C = this.component.legend, x = [], w = 0, E = 0, z = B.length; z > E; E++) {
                        D = A[B[E]],
                        y = D.name,
                        this.selectedMap[y] = C ? C.isSelected(y) : !0,
                        this.selectedMap[y] && x.push(B[E]),
                        w = Math.max(w, D.data.length)
                    }
                    return {
                        locationMap: x,
                        maxDataLength: w
                    }
                },
                _buildHorizontal: function(M, B, G) {
                    for (var J, P, F, D, C, I, K, H, w, x, N = this.series, E = {}, O = 0, A = G.length; A > O; O++) {
                        J = G[O],
                        P = N[J],
                        F = P.xAxisIndex || 0,
                        D = this.component.xAxis.getAxis(F),
                        K = P.barWidth || Math.floor(D.getGap() / 2),
                        x = P.barMaxWidth,
                        x && K > x && (K = x),
                        C = P.yAxisIndex || 0,
                        I = this.component.yAxis.getAxis(C),
                        E[J] = [];
                        for (var z = 0, L = B; L > z && null  != D.getNameByIndex(z); z++) {
                            H = P.data[z],
                            w = this.getDataFromOption(H, "-"),
                            "-" !== w && 4 == w.length && E[J].push([D.getCoordByIndex(z), K, I.getCoord(w[0]), I.getCoord(w[1]), I.getCoord(w[2]), I.getCoord(w[3]), z, D.getNameByIndex(z)])
                        }
                    }
                    this._buildKLine(M, E)
                },
                _buildKLine: function(S, E) {
                    for (var J, O, I, G, F, M, P, K, w, z, T, H, W, D, B, Q, X, R = this.series, N = 0, C = S.length; C > N; N++) {
                        if (X = S[N],
                        T = R[X],
                        D = E[X],
                        this._isLarge(D) && (D = this._getLargePointList(D)),
                        T.type === l.CHART_TYPE_K && null  != D) {
                            H = T,
                            J = this.query(H, "itemStyle.normal.lineStyle.width"),
                            O = this.query(H, "itemStyle.normal.lineStyle.color"),
                            I = this.query(H, "itemStyle.normal.lineStyle.color0"),
                            G = this.query(H, "itemStyle.normal.color"),
                            F = this.query(H, "itemStyle.normal.color0"),
                            M = this.query(H, "itemStyle.emphasis.lineStyle.width"),
                            P = this.query(H, "itemStyle.emphasis.lineStyle.color"),
                            K = this.query(H, "itemStyle.emphasis.lineStyle.color0"),
                            w = this.query(H, "itemStyle.emphasis.color"),
                            z = this.query(H, "itemStyle.emphasis.color0");
                            for (var Y = 0, A = D.length; A > Y; Y++) {
                                B = D[Y],
                                W = T.data[B[6]],
                                H = W,
                                Q = B[3] < B[2],
                                this.shapeList.push(this._getCandle(X, B[6], B[7], B[0], B[1], B[2], B[3], B[4], B[5], Q ? this.query(H, "itemStyle.normal.color") || G : this.query(H, "itemStyle.normal.color0") || F, this.query(H, "itemStyle.normal.lineStyle.width") || J, Q ? this.query(H, "itemStyle.normal.lineStyle.color") || O : this.query(H, "itemStyle.normal.lineStyle.color0") || I, Q ? this.query(H, "itemStyle.emphasis.color") || w || G : this.query(H, "itemStyle.emphasis.color0") || z || F, this.query(H, "itemStyle.emphasis.lineStyle.width") || M || J, Q ? this.query(H, "itemStyle.emphasis.lineStyle.color") || P || O : this.query(H, "itemStyle.emphasis.lineStyle.color0") || K || I))
                            }
                        }
                    }
                },
                _isLarge: function(i) {
                    return 0.5 > i[0][1]
                },
                _getLargePointList: function(x) {
                    for (var w = this.component.grid.getWidth(), y = x.length, r = [], o = 0; w > o; o++) {
                        r[o] = x[Math.floor(y / w * o)]
                    }
                    return r
                },
                _getCandle: function(K, z, D, O, B, A, F, H, E, i, o, L, C, M, x) {
                    var w = this.series
                      , I = w[K]
                      , N = I.data[z]
                      , J = [N, I]
                      , G = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        clickable: this.deepQuery(J, "clickable"),
                        hoverable: this.deepQuery(J, "hoverable"),
                        style: {
                            x: O,
                            y: [A, F, H, E],
                            width: B,
                            color: i,
                            strokeColor: L,
                            lineWidth: o,
                            brushType: "both"
                        },
                        highlightStyle: {
                            color: C,
                            strokeColor: x,
                            lineWidth: M
                        },
                        _seriesIndex: K
                    };
                    return G = this.addLabel(G, I, N, D),
                    u.pack(G, I, K, N, z, D),
                    G = new m(G)
                },
                getMarkCoord: function(x, w) {
                    var y = this.series[x]
                      , r = this.component.xAxis.getAxis(y.xAxisIndex)
                      , o = this.component.yAxis.getAxis(y.yAxisIndex);
                    return ["string" != typeof w.xAxis && r.getCoordByIndex ? r.getCoordByIndex(w.xAxis || 0) : r.getCoord(w.xAxis || 0), "string" != typeof w.yAxis && o.getCoordByIndex ? o.getCoordByIndex(w.yAxis || 0) : o.getCoord(w.yAxis || 0)]
                },
                refresh: function(i) {
                    i && (this.option = i,
                    this.series = i.series),
                    this.backupShapeList(),
                    this._buildShape()
                },
                addDataAnimation: function(E, H) {
                    function x() {
                        w--,
                        0 === w && H && H()
                    }
                    for (var C = this.series, G = {}, o = 0, I = E.length; I > o; o++) {
                        G[E[o][0]] = E[o]
                    }
                    for (var B, D, z, y, A, F, w = 0, o = 0, I = this.shapeList.length; I > o; o++) {
                        if (A = this.shapeList[o]._seriesIndex,
                        G[A] && !G[A][3] && "candle" === this.shapeList[o].type) {
                            if (F = u.get(this.shapeList[o], "dataIndex"),
                            y = C[A],
                            G[A][2] && F === y.data.length - 1) {
                                this.zr.delShape(this.shapeList[o].id);
                                continue
                            }
                            if (!G[A][2] && 0 === F) {
                                this.zr.delShape(this.shapeList[o].id);
                                continue
                            }
                            D = this.component.xAxis.getAxis(y.xAxisIndex || 0).getGap(),
                            B = G[A][2] ? D : -D,
                            z = 0,
                            w++,
                            this.zr.animate(this.shapeList[o].id, "").when(this.query(this.option, "animationDurationUpdate"), {
                                position: [B, z]
                            }).done(x).start()
                        }
                    }
                    w || x()
                }
            },
            q.inherits(p, v),
            s("../chart").define("k", p),
            p
        }
        ),
        k("echarts/chart/pie", ["require", "./base", "zrender/shape/Text", "zrender/shape/Ring", "zrender/shape/Circle", "zrender/shape/Sector", "zrender/shape/Polyline", "../config", "../util/ecData", "zrender/tool/util", "zrender/tool/math", "zrender/tool/color", "../chart"], function(B) {
            function D(F, n, m, l, G) {
                u.call(this, F, n, m, l, G);
                var s = this;
                s.shapeHandler.onmouseover = function(N) {
                    var Q = N.target
                      , H = A.get(Q, "seriesIndex")
                      , M = A.get(Q, "dataIndex")
                      , P = A.get(Q, "special")
                      , r = [Q.style.x, Q.style.y]
                      , R = Q.style.startAngle
                      , L = Q.style.endAngle
                      , J = ((L + R) / 2 + 360) % 360
                      , I = Q.highlightStyle.color
                      , K = s.getLabel(H, M, P, r, J, I, !0);
                    K && s.zr.addHoverShape(K);
                    var O = s.getLabelLine(H, M, r, Q.style.r0, Q.style.r, J, I, !0);
                    O && s.zr.addHoverShape(O)
                }
                ,
                this.refresh(l)
            }
            var u = B("./base")
              , z = B("zrender/shape/Text")
              , C = B("zrender/shape/Ring")
              , q = B("zrender/shape/Circle")
              , p = B("zrender/shape/Sector")
              , E = B("zrender/shape/Polyline")
              , y = B("../config");
            y.pie = {
                zlevel: 0,
                z: 2,
                clickable: !0,
                legendHoverLink: !0,
                center: ["50%", "50%"],
                radius: [0, "75%"],
                clockWise: !0,
                startAngle: 90,
                minAngle: 0,
                selectedOffset: 10,
                itemStyle: {
                    normal: {
                        borderColor: "rgba(0,0,0,0)",
                        borderWidth: 1,
                        label: {
                            show: !0,
                            position: "outer"
                        },
                        labelLine: {
                            show: !0,
                            length: 20,
                            lineStyle: {
                                width: 1,
                                type: "solid"
                            }
                        }
                    },
                    emphasis: {
                        borderColor: "rgba(0,0,0,0)",
                        borderWidth: 1,
                        label: {
                            show: !1
                        },
                        labelLine: {
                            show: !1,
                            length: 20,
                            lineStyle: {
                                width: 1,
                                type: "solid"
                            }
                        }
                    }
                }
            };
            var A = B("../util/ecData")
              , w = B("zrender/tool/util")
              , v = B("zrender/tool/math")
              , x = B("zrender/tool/color");
            return D.prototype = {
                type: y.CHART_TYPE_PIE,
                _buildShape: function() {
                    var J = this.series
                      , G = this.component.legend;
                    this.selectedMap = {},
                    this._selected = {};
                    var K, F, I;
                    this._selectedMode = !1;
                    for (var H, l = 0, o = J.length; o > l; l++) {
                        if (J[l].type === y.CHART_TYPE_PIE) {
                            if (J[l] = this.reformOption(J[l]),
                            this.legendHoverLink = J[l].legendHoverLink || this.legendHoverLink,
                            H = J[l].name || "",
                            this.selectedMap[H] = G ? G.isSelected(H) : !0,
                            !this.selectedMap[H]) {
                                continue
                            }
                            K = this.parseCenter(this.zr, J[l].center),
                            F = this.parseRadius(this.zr, J[l].radius),
                            this._selectedMode = this._selectedMode || J[l].selectedMode,
                            this._selected[l] = [],
                            this.deepQuery([J[l], this.option], "calculable") && (I = {
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase(),
                                hoverable: !1,
                                style: {
                                    x: K[0],
                                    y: K[1],
                                    r0: 10 >= F[0] ? 0 : F[0] - 10,
                                    r: F[1] + 10,
                                    brushType: "stroke",
                                    lineWidth: 1,
                                    strokeColor: J[l].calculableHolderColor || this.ecTheme.calculableHolderColor || y.calculableHolderColor
                                }
                            },
                            A.pack(I, J[l], l, void 0, -1),
                            this.setCalculable(I),
                            I = 10 >= F[0] ? new q(I) : new C(I),
                            this.shapeList.push(I)),
                            this._buildSinglePie(l),
                            this.buildMark(l)
                        }
                    }
                    this.addShapeList()
                },
                _buildSinglePie: function(ad) {
                    for (var N, S = this.series, Z = S[ad], ah = Z.data, R = this.component.legend, P = 0, O = 0, X = 0, aa = Number.NEGATIVE_INFINITY, T = [], G = 0, H = ah.length; H > G; G++) {
                        N = ah[G].name,
                        this.selectedMap[N] = R ? R.isSelected(N) : !0,
                        this.selectedMap[N] && !isNaN(ah[G].value) && (0 !== +ah[G].value ? P++ : O++,
                        X += +ah[G].value,
                        aa = Math.max(aa, +ah[G].value))
                    }
                    if (0 !== X) {
                        for (var ae, Q, af, M, J, ab, ag = 100, ac = Z.clockWise, Y = (Z.startAngle.toFixed(2) - 0 + 360) % 360, K = Z.minAngle || 0.01, ai = 360 - K * P - 0.01 * O, I = Z.roseType, G = 0, H = ah.length; H > G; G++) {
                            if (N = ah[G].name,
                            this.selectedMap[N] && !isNaN(ah[G].value)) {
                                if (Q = R ? R.getColor(N) : this.zr.getColor(G),
                                ag = ah[G].value / X,
                                ae = "area" != I ? ac ? Y - ag * ai - (0 !== ag ? K : 0.01) : ag * ai + Y + (0 !== ag ? K : 0.01) : ac ? Y - 360 / H : 360 / H + Y,
                                ae = ae.toFixed(2) - 0,
                                ag = (100 * ag).toFixed(2),
                                af = this.parseCenter(this.zr, Z.center),
                                M = this.parseRadius(this.zr, Z.radius),
                                J = +M[0],
                                ab = +M[1],
                                "radius" === I ? ab = 0.8 * ah[G].value / aa * (ab - J) + 0.2 * (ab - J) + J : "area" === I && (ab = Math.sqrt(ah[G].value / aa) * (ab - J) + J),
                                ac) {
                                    var F;
                                    F = Y,
                                    Y = ae,
                                    ae = F
                                }
                                this._buildItem(T, ad, G, ag, ah[G].selected, af, J, ab, Y, ae, Q),
                                ac || (Y = ae)
                            }
                        }
                        this._autoLabelLayout(T, af, ab);
                        for (var G = 0, H = T.length; H > G; G++) {
                            this.shapeList.push(T[G])
                        }
                        T = null 
                    }
                },
                _buildItem: function(O, T, I, N, R, H, F, W, M, K, J) {
                    var L = this.series
                      , P = ((K + M) / 2 + 360) % 360
                      , G = this.getSector(T, I, N, R, H, F, W, M, K, J);
                    A.pack(G, L[T], T, L[T].data[I], I, L[T].data[I].name, N),
                    O.push(G);
                    var Q = this.getLabel(T, I, N, H, P, J, !1)
                      , S = this.getLabelLine(T, I, H, F, W, P, J, !1);
                    S && (A.pack(S, L[T], T, L[T].data[I], I, L[T].data[I].name, N),
                    O.push(S)),
                    Q && (A.pack(Q, L[T], T, L[T].data[I], I, L[T].data[I].name, N),
                    Q._labelLine = S,
                    O.push(Q))
                },
                getSector: function(T, H, L, P, X, K, I, N, Q, M) {
                    var U = this.series
                      , J = U[T]
                      , V = J.data[H]
                      , G = [V, J]
                      , r = this.deepMerge(G, "itemStyle.normal") || {}
                      , R = this.deepMerge(G, "itemStyle.emphasis") || {}
                      , W = this.getItemStyleColor(r.color, T, H, V) || M
                      , S = this.getItemStyleColor(R.color, T, H, V) || ("string" == typeof W ? x.lift(W, -0.2) : W)
                      , O = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        clickable: this.deepQuery(G, "clickable"),
                        style: {
                            x: X[0],
                            y: X[1],
                            r0: K,
                            r: I,
                            startAngle: N,
                            endAngle: Q,
                            brushType: "both",
                            color: W,
                            lineWidth: r.borderWidth,
                            strokeColor: r.borderColor,
                            lineJoin: "round"
                        },
                        highlightStyle: {
                            color: S,
                            lineWidth: R.borderWidth,
                            strokeColor: R.borderColor,
                            lineJoin: "round"
                        },
                        _seriesIndex: T,
                        _dataIndex: H
                    };
                    if (P) {
                        var F = ((O.style.startAngle + O.style.endAngle) / 2).toFixed(2) - 0;
                        O.style._hasSelected = !0,
                        O.style._x = O.style.x,
                        O.style._y = O.style.y;
                        var Y = this.query(J, "selectedOffset");
                        O.style.x += v.cos(F, !0) * Y,
                        O.style.y -= v.sin(F, !0) * Y,
                        this._selected[T][H] = !0
                    } else {
                        this._selected[T][H] = !1
                    }
                    return this._selectedMode && (O.onclick = this.shapeHandler.onclick),
                    this.deepQuery([V, J, this.option], "calculable") && (this.setCalculable(O),
                    O.draggable = !0),
                    (this._needLabel(J, V, !0) || this._needLabelLine(J, V, !0)) && (O.onmouseover = this.shapeHandler.onmouseover),
                    O = new p(O)
                },
                getLabel: function(V, I, O, Z, N, K, J) {
                    var P = this.series
                      , R = P[V]
                      , i = R.data[I];
                    if (this._needLabel(R, i, J)) {
                        var W, M, X, H = J ? "emphasis" : "normal", F = w.merge(w.clone(i.itemStyle) || {}, R.itemStyle), S = F[H].label, Y = S.textStyle || {}, T = Z[0], Q = Z[1], G = this.parseRadius(this.zr, R.radius), aa = "middle";
                        S.position = S.position || F.normal.label.position,
                        "center" === S.position ? (W = T,
                        M = Q,
                        X = "center") : "inner" === S.position || "inside" === S.position ? (G = (G[0] + G[1]) * (S.distance || 0.5),
                        W = Math.round(T + G * v.cos(N, !0)),
                        M = Math.round(Q - G * v.sin(N, !0)),
                        K = "#fff",
                        X = "center") : (G = G[1] - -F[H].labelLine.length,
                        W = Math.round(T + G * v.cos(N, !0)),
                        M = Math.round(Q - G * v.sin(N, !0)),
                        X = N >= 90 && 270 >= N ? "right" : "left"),
                        "center" != S.position && "inner" != S.position && "inside" != S.position && (W += "left" === X ? 20 : -20),
                        i.__labelX = W - ("left" === X ? 5 : -5),
                        i.__labelY = M;
                        var m = new z({
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase() + 1,
                            hoverable: !1,
                            style: {
                                x: W,
                                y: M,
                                color: Y.color || K,
                                text: this.getLabelText(V, I, O, H),
                                textAlign: Y.align || X,
                                textBaseline: Y.baseline || aa,
                                textFont: this.getFont(Y)
                            },
                            highlightStyle: {
                                brushType: "fill"
                            }
                        });
                        return m._radius = G,
                        m._labelPosition = S.position || "outer",
                        m._rect = m.getRect(m.style),
                        m._seriesIndex = V,
                        m._dataIndex = I,
                        m
                    }
                },
                getLabelText: function(I, F, K, m) {
                    var l = this.series
                      , J = l[I]
                      , H = J.data[F]
                      , G = this.deepQuery([H, J], "itemStyle." + m + ".label.formatter");
                    return G ? "function" == typeof G ? G.call(this.myChart, {
                        seriesIndex: I,
                        seriesName: J.name || "",
                        series: J,
                        dataIndex: F,
                        data: H,
                        name: H.name,
                        value: H.value,
                        percent: K
                    }) : "string" == typeof G ? (G = G.replace("{a}", "{a0}").replace("{b}", "{b0}").replace("{c}", "{c0}").replace("{d}", "{d0}"),
                    G = G.replace("{a0}", J.name).replace("{b0}", H.name).replace("{c0}", H.value).replace("{d0}", K)) : void 0 : H.name
                },
                getLabelLine: function(S, H, L, O, X, K, I, M) {
                    var P = this.series
                      , m = P[S]
                      , T = m.data[H];
                    if (this._needLabelLine(m, T, M)) {
                        var J = M ? "emphasis" : "normal"
                          , V = w.merge(w.clone(T.itemStyle) || {}, m.itemStyle)
                          , G = V[J].labelLine
                          , s = G.lineStyle || {}
                          , Q = L[0]
                          , W = L[1]
                          , R = X
                          , N = this.parseRadius(this.zr, m.radius)[1] - -G.length
                          , F = v.cos(K, !0)
                          , Y = v.sin(K, !0);
                        return new E({
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase() + 1,
                            hoverable: !1,
                            style: {
                                pointList: [[Q + R * F, W - R * Y], [Q + N * F, W - N * Y], [T.__labelX, T.__labelY]],
                                strokeColor: s.color || I,
                                lineType: s.type,
                                lineWidth: s.width
                            },
                            _seriesIndex: S,
                            _dataIndex: H
                        })
                    }
                },
                _needLabel: function(l, i, m) {
                    return this.deepQuery([i, l], "itemStyle." + (m ? "emphasis" : "normal") + ".label.show")
                },
                _needLabelLine: function(l, i, m) {
                    return this.deepQuery([i, l], "itemStyle." + (m ? "emphasis" : "normal") + ".labelLine.show")
                },
                _autoLabelLayout: function(G, s, I) {
                    for (var m = [], l = [], H = 0, F = G.length; F > H; H++) {
                        ("outer" === G[H]._labelPosition || "outside" === G[H]._labelPosition) && (G[H]._rect._y = G[H]._rect.y,
                        G[H]._rect.x < s[0] ? m.push(G[H]) : l.push(G[H]))
                    }
                    this._layoutCalculate(m, s, I, -1),
                    this._layoutCalculate(l, s, I, 1)
                },
                _layoutCalculate: function(O, Q, H, M) {
                    function P(m, o, l) {
                        for (var e = m; o > e; e++) {
                            if (O[e]._rect.y += l,
                            O[e].style.y += l,
                            O[e]._labelLine && (O[e]._labelLine.style.pointList[1][1] += l,
                            O[e]._labelLine.style.pointList[2][1] += l),
                            e > m && o > e + 1 && O[e + 1]._rect.y > O[e]._rect.y + O[e]._rect.height) {
                                return G(e, l / 2),
                                void 0
                            }
                        }
                        G(o - 1, l / 2)
                    }
                    function G(l, m) {
                        for (var e = l; e >= 0 && (O[e]._rect.y -= m,
                        O[e].style.y -= m,
                        O[e]._labelLine && (O[e]._labelLine.style.pointList[1][1] -= m,
                        O[e]._labelLine.style.pointList[2][1] -= m),
                        !(e > 0 && O[e]._rect.y > O[e - 1]._rect.y + O[e - 1]._rect.height)); e--) {}
                    }
                    function F(ad, af, W, ab, ae) {
                        for (var T, S, ag, aa = W[0], ac = W[1], Y = ae > 0 ? af ? Number.MAX_VALUE : 0 : af ? Number.MAX_VALUE : 0, X = 0, Z = ad.length; Z > X; X++) {
                            S = Math.abs(ad[X]._rect.y - ac),
                            ag = ad[X]._radius - ab,
                            T = ab + ag > S ? Math.sqrt((ab + ag + 20) * (ab + ag + 20) - Math.pow(ad[X]._rect.y - ac, 2)) : Math.abs(ad[X]._rect.x + (ae > 0 ? 0 : ad[X]._rect.width) - aa),
                            af && T >= Y && (T = Y - 10),
                            !af && Y >= T && (T = Y + 10),
                            ad[X]._rect.x = ad[X].style.x = aa + T * ae,
                            ad[X]._labelLine && (ad[X]._labelLine.style.pointList[2][0] = aa + (T - 5) * ae,
                            ad[X]._labelLine.style.pointList[1][0] = aa + (T - 20) * ae),
                            Y = T
                        }
                    }
                    O.sort(function(l, i) {
                        return l._rect.y - i._rect.y
                    }
                    );
                    for (var R, L = 0, N = O.length, J = [], I = [], K = 0; N > K; K++) {
                        R = O[K]._rect.y - L,
                        0 > R && P(K, N, -R, M),
                        L = O[K]._rect.y + O[K]._rect.height
                    }
                    0 > this.zr.getHeight() - L && G(N - 1, L - this.zr.getHeight());
                    for (var K = 0; N > K; K++) {
                        O[K]._rect.y >= Q[1] ? I.push(O[K]) : J.push(O[K])
                    }
                    F(I, !0, Q, H, M),
                    F(J, !1, Q, H, M)
                },
                reformOption: function(l) {
                    var i = w.merge;
                    return l = i(i(l || {}, w.clone(this.ecTheme.pie || {})), w.clone(y.pie)),
                    l.itemStyle.normal.label.textStyle = this.getTextStyle(l.itemStyle.normal.label.textStyle),
                    l.itemStyle.emphasis.label.textStyle = this.getTextStyle(l.itemStyle.emphasis.label.textStyle),
                    l
                },
                refresh: function(i) {
                    i && (this.option = i,
                    this.series = i.series),
                    this.backupShapeList(),
                    this._buildShape()
                },
                addDataAnimation: function(S, I) {
                    function N() {
                        J--,
                        0 === J && I && I()
                    }
                    for (var P = this.series, Y = {}, M = 0, K = S.length; K > M; M++) {
                        Y[S[M][0]] = S[M]
                    }
                    var J = 0
                      , Q = {}
                      , O = {}
                      , l = {}
                      , F = this.shapeList;
                    this.shapeList = [];
                    for (var T, L, W, H = {}, M = 0, K = S.length; K > M; M++) {
                        T = S[M][0],
                        L = S[M][2],
                        W = S[M][3],
                        P[T] && P[T].type === y.CHART_TYPE_PIE && (L ? (W || (Q[T + "_" + P[T].data.length] = "delete"),
                        H[T] = 1) : W ? H[T] = 0 : (Q[T + "_-1"] = "delete",
                        H[T] = -1),
                        this._buildSinglePie(T))
                    }
                    for (var G, R, M = 0, K = this.shapeList.length; K > M; M++) {
                        switch (T = this.shapeList[M]._seriesIndex,
                        G = this.shapeList[M]._dataIndex,
                        R = T + "_" + G,
                        this.shapeList[M].type) {
                        case "sector":
                            Q[R] = this.shapeList[M];
                            break;
                        case "text":
                            O[R] = this.shapeList[M];
                            break;
                        case "polyline":
                            l[R] = this.shapeList[M]
                        }
                    }
                    this.shapeList = [];
                    for (var X, M = 0, K = F.length; K > M; M++) {
                        if (T = F[M]._seriesIndex,
                        Y[T]) {
                            if (G = F[M]._dataIndex + H[T],
                            R = T + "_" + G,
                            X = Q[R],
                            !X) {
                                continue
                            }
                            if ("sector" === F[M].type) {
                                "delete" != X ? (J++,
                                this.zr.animate(F[M].id, "style").when(400, {
                                    startAngle: X.style.startAngle,
                                    endAngle: X.style.endAngle
                                }).done(N).start()) : (J++,
                                this.zr.animate(F[M].id, "style").when(400, 0 > H[T] ? {
                                    startAngle: F[M].style.startAngle
                                } : {
                                    endAngle: F[M].style.endAngle
                                }).done(N).start())
                            } else {
                                if ("text" === F[M].type || "polyline" === F[M].type) {
                                    if ("delete" === X) {
                                        this.zr.delShape(F[M].id)
                                    } else {
                                        switch (F[M].type) {
                                        case "text":
                                            J++,
                                            X = O[R],
                                            this.zr.animate(F[M].id, "style").when(400, {
                                                x: X.style.x,
                                                y: X.style.y
                                            }).done(N).start();
                                            break;
                                        case "polyline":
                                            J++,
                                            X = l[R],
                                            this.zr.animate(F[M].id, "style").when(400, {
                                                pointList: X.style.pointList
                                            }).done(N).start()
                                        }
                                    }
                                }
                            }
                        }
                    }
                    this.shapeList = F,
                    J || N()
                },
                onclick: function(K) {
                    var M = this.series;
                    if (this.isClick && K.target) {
                        this.isClick = !1;
                        for (var G, J = K.target, L = J.style, F = A.get(J, "seriesIndex"), l = A.get(J, "dataIndex"), N = 0, H = this.shapeList.length; H > N; N++) {
                            if (this.shapeList[N].id === J.id) {
                                if (F = A.get(J, "seriesIndex"),
                                l = A.get(J, "dataIndex"),
                                L._hasSelected) {
                                    J.style.x = J.style._x,
                                    J.style.y = J.style._y,
                                    J.style._hasSelected = !1,
                                    this._selected[F][l] = !1
                                } else {
                                    var I = ((L.startAngle + L.endAngle) / 2).toFixed(2) - 0;
                                    J.style._hasSelected = !0,
                                    this._selected[F][l] = !0,
                                    J.style._x = J.style.x,
                                    J.style._y = J.style.y,
                                    G = this.query(M[F], "selectedOffset"),
                                    J.style.x += v.cos(I, !0) * G,
                                    J.style.y -= v.sin(I, !0) * G
                                }
                                this.zr.modShape(J.id, J)
                            } else {
                                this.shapeList[N].style._hasSelected && "single" === this._selectedMode && (F = A.get(this.shapeList[N], "seriesIndex"),
                                l = A.get(this.shapeList[N], "dataIndex"),
                                this.shapeList[N].style.x = this.shapeList[N].style._x,
                                this.shapeList[N].style.y = this.shapeList[N].style._y,
                                this.shapeList[N].style._hasSelected = !1,
                                this._selected[F][l] = !1,
                                this.zr.modShape(this.shapeList[N].id, this.shapeList[N]))
                            }
                        }
                        this.messageCenter.dispatch(y.EVENT.PIE_SELECTED, K.event, {
                            selected: this._selected,
                            target: A.get(J, "name")
                        }, this.myChart),
                        this.zr.refreshNextFrame()
                    }
                }
            },
            w.inherits(D, u),
            B("../chart").define("pie", D),
            D
        }
        ),
        k("echarts/chart/radar", ["require", "./base", "zrender/shape/Polygon", "../component/polar", "../config", "../util/ecData", "zrender/tool/util", "zrender/tool/color", "../util/accMath", "../chart"], function(v) {
            function p(y, s, r, n, z) {
                x.call(this, y, s, r, n, z),
                this.refresh(n)
            }
            var x = v("./base")
              , m = v("zrender/shape/Polygon");
            v("../component/polar");
            var l = v("../config");
            l.radar = {
                zlevel: 0,
                z: 2,
                clickable: !0,
                legendHoverLink: !0,
                polarIndex: 0,
                itemStyle: {
                    normal: {
                        label: {
                            show: !1
                        },
                        lineStyle: {
                            width: 2,
                            type: "solid"
                        }
                    },
                    emphasis: {
                        label: {
                            show: !1
                        }
                    }
                },
                symbolSize: 2
            };
            var w = v("../util/ecData")
              , u = v("zrender/tool/util")
              , q = v("zrender/tool/color");
            return p.prototype = {
                type: l.CHART_TYPE_RADAR,
                _buildShape: function() {
                    this.selectedMap = {},
                    this._symbol = this.option.symbolList,
                    this._queryTarget,
                    this._dropBoxList = [],
                    this._radarDataCounter = 0;
                    for (var y, s = this.series, A = this.component.legend, r = 0, z = s.length; z > r; r++) {
                        s[r].type === l.CHART_TYPE_RADAR && (this.serie = this.reformOption(s[r]),
                        this.legendHoverLink = s[r].legendHoverLink || this.legendHoverLink,
                        y = this.serie.name || "",
                        this.selectedMap[y] = A ? A.isSelected(y) : !0,
                        this.selectedMap[y] && (this._queryTarget = [this.serie, this.option],
                        this.deepQuery(this._queryTarget, "calculable") && this._addDropBox(r),
                        this._buildSingleRadar(r),
                        this.buildMark(r)))
                    }
                    this.addShapeList()
                },
                _buildSingleRadar: function(D) {
                    for (var F, A, C, E, z = this.component.legend, y = this.serie.data, G = this.deepQuery(this._queryTarget, "calculable"), B = 0; y.length > B; B++) {
                        C = y[B].name || "",
                        this.selectedMap[C] = z ? z.isSelected(C) : !0,
                        this.selectedMap[C] && (z ? (A = z.getColor(C),
                        F = z.getItemShape(C),
                        F && (F.style.brushType = this.deepQuery([y[B], this.serie], "itemStyle.normal.areaStyle") ? "both" : "stroke",
                        z.setItemShape(C, F))) : A = this.zr.getColor(B),
                        E = this._getPointList(this.serie.polarIndex, y[B]),
                        this._addSymbol(E, A, B, D, this.serie.polarIndex),
                        this._addDataShape(E, A, y[B], D, B, G),
                        this._radarDataCounter++)
                    }
                },
                _getPointList: function(D, A) {
                    for (var F, z, y = [], E = this.component.polar, C = 0, B = A.value.length; B > C; C++) {
                        z = this.getDataFromOption(A.value[C]),
                        F = "-" != z ? E.getVector(D, C, z) : !1,
                        F && y.push(F)
                    }
                    return y
                },
                _addSymbol: function(D, F, y, B, E) {
                    for (var o, G = this.series, A = this.component.polar, C = 0, z = D.length; z > C; C++) {
                        o = this.getSymbolShape(this.deepMerge([G[B].data[y], G[B]]), B, G[B].data[y].value[C], C, A.getIndicatorText(E, C), D[C][0], D[C][1], this._symbol[this._radarDataCounter % this._symbol.length], F, "#fff", "vertical"),
                        o.zlevel = this.getZlevelBase(),
                        o.z = this.getZBase() + 1,
                        w.set(o, "data", G[B].data[y]),
                        w.set(o, "value", G[B].data[y].value),
                        w.set(o, "dataIndex", y),
                        w.set(o, "special", C),
                        this.shapeList.push(o)
                    }
                },
                _addDataShape: function(D, I, s, G, i, B) {
                    var C = this.series
                      , z = [s, this.serie]
                      , y = this.getItemStyleColor(this.deepQuery(z, "itemStyle.normal.color"), G, i, s)
                      , A = this.deepQuery(z, "itemStyle.normal.lineStyle.width")
                      , E = this.deepQuery(z, "itemStyle.normal.lineStyle.type")
                      , o = this.deepQuery(z, "itemStyle.normal.areaStyle.color")
                      , F = this.deepQuery(z, "itemStyle.normal.areaStyle")
                      , H = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            pointList: D,
                            brushType: F ? "both" : "stroke",
                            color: o || y || ("string" == typeof I ? q.alpha(I, 0.5) : I),
                            strokeColor: y || I,
                            lineWidth: A,
                            lineType: E
                        },
                        highlightStyle: {
                            brushType: this.deepQuery(z, "itemStyle.emphasis.areaStyle") || F ? "both" : "stroke",
                            color: this.deepQuery(z, "itemStyle.emphasis.areaStyle.color") || o || y || ("string" == typeof I ? q.alpha(I, 0.5) : I),
                            strokeColor: this.getItemStyleColor(this.deepQuery(z, "itemStyle.emphasis.color"), G, i, s) || y || I,
                            lineWidth: this.deepQuery(z, "itemStyle.emphasis.lineStyle.width") || A,
                            lineType: this.deepQuery(z, "itemStyle.emphasis.lineStyle.type") || E
                        }
                    };
                    w.pack(H, C[G], G, s, i, s.name, this.component.polar.getIndicator(C[G].polarIndex)),
                    B && (H.draggable = !0,
                    this.setCalculable(H)),
                    H = new m(H),
                    this.shapeList.push(H)
                },
                _addDropBox: function(s) {
                    var r = this.series
                      , y = this.deepQuery(this._queryTarget, "polarIndex");
                    if (!this._dropBoxList[y]) {
                        var o = this.component.polar.getDropBox(y);
                        o.zlevel = this.getZlevelBase(),
                        o.z = this.getZBase(),
                        this.setCalculable(o),
                        w.pack(o, r, s, void 0, -1),
                        this.shapeList.push(o),
                        this._dropBoxList[y] = !0
                    }
                },
                ondragend: function(A, y) {
                    var B = this.series;
                    if (this.isDragend && A.target) {
                        var s = A.target
                          , o = w.get(s, "seriesIndex")
                          , z = w.get(s, "dataIndex");
                        this.component.legend && this.component.legend.del(B[o].data[z].name),
                        B[o].data.splice(z, 1),
                        y.dragOut = !0,
                        y.needRefresh = !0,
                        this.isDragend = !1
                    }
                },
                ondrop: function(G, o) {
                    var C = this.series;
                    if (this.isDrop && G.target) {
                        var F, e, H = G.target, B = G.dragged, D = w.get(H, "seriesIndex"), z = w.get(H, "dataIndex"), y = this.component.legend;
                        if (-1 === z) {
                            F = {
                                value: w.get(B, "value"),
                                name: w.get(B, "name")
                            },
                            C[D].data.push(F),
                            y && y.add(F.name, B.style.color || B.style.strokeColor)
                        } else {
                            var A = v("../util/accMath");
                            F = C[D].data[z],
                            y && y.del(F.name),
                            F.name += this.option.nameConnector + w.get(B, "name"),
                            e = w.get(B, "value");
                            for (var E = 0; e.length > E; E++) {
                                F.value[E] = A.accAdd(F.value[E], e[E])
                            }
                            y && y.add(F.name, B.style.color || B.style.strokeColor)
                        }
                        o.dragIn = o.dragIn || !0,
                        this.isDrop = !1
                    }
                },
                refresh: function(i) {
                    i && (this.option = i,
                    this.series = i.series),
                    this.backupShapeList(),
                    this._buildShape()
                }
            },
            u.inherits(p, x),
            v("../chart").define("radar", p),
            p
        }
        ),
        k("echarts/component/polar", ["require", "./base", "zrender/shape/Text", "zrender/shape/Line", "zrender/shape/Polygon", "zrender/shape/Circle", "zrender/shape/Ring", "../config", "zrender/tool/util", "../util/coordinates", "../util/accMath", "../util/smartSteps", "../component"], function(z) {
            function B(r, n, m, l, s) {
                u.call(this, r, n, m, l, s),
                this.refresh(l)
            }
            var u = z("./base")
              , x = z("zrender/shape/Text")
              , A = z("zrender/shape/Line")
              , q = z("zrender/shape/Polygon")
              , p = z("zrender/shape/Circle")
              , C = z("zrender/shape/Ring")
              , w = z("../config");
            w.polar = {
                zlevel: 0,
                z: 0,
                center: ["50%", "50%"],
                radius: "75%",
                startAngle: 90,
                boundaryGap: [0, 0],
                splitNumber: 5,
                name: {
                    show: !0,
                    textStyle: {
                        color: "#333"
                    }
                },
                axisLine: {
                    show: !0,
                    lineStyle: {
                        color: "#ccc",
                        width: 1,
                        type: "solid"
                    }
                },
                axisLabel: {
                    show: !1,
                    textStyle: {
                        color: "#333"
                    }
                },
                splitArea: {
                    show: !0,
                    areaStyle: {
                        color: ["rgba(250,250,250,0.3)", "rgba(200,200,200,0.3)"]
                    }
                },
                splitLine: {
                    show: !0,
                    lineStyle: {
                        width: 1,
                        color: "#ccc"
                    }
                },
                type: "polygon"
            };
            var y = z("zrender/tool/util")
              , v = z("../util/coordinates");
            return B.prototype = {
                type: w.COMPONENT_TYPE_POLAR,
                _buildShape: function() {
                    for (var i = 0; this.polar.length > i; i++) {
                        this._index = i,
                        this.reformOption(this.polar[i]),
                        this._queryTarget = [this.polar[i], this.option],
                        this._createVector(i),
                        this._buildSpiderWeb(i),
                        this._buildText(i),
                        this._adjustIndicatorValue(i),
                        this._addAxisLabel(i)
                    }
                    for (var i = 0; this.shapeList.length > i; i++) {
                        this.zr.addShape(this.shapeList[i])
                    }
                },
                _createVector: function(I) {
                    for (var K, E = this.polar[I], G = this.deepQuery(this._queryTarget, "indicator"), J = G.length, D = E.startAngle, m = 2 * Math.PI / J, L = this._getRadius(), F = E.__ecIndicator = [], H = 0; J > H; H++) {
                        K = v.polar2cartesian(L, D * Math.PI / 180 + m * H),
                        F.push({
                            vector: [K[1], -K[0]]
                        })
                    }
                },
                _getRadius: function() {
                    var i = this.polar[this._index];
                    return this.parsePercent(i.radius, Math.min(this.zr.getWidth(), this.zr.getHeight()) / 2)
                },
                _buildSpiderWeb: function(K) {
                    var M = this.polar[K]
                      , F = M.__ecIndicator
                      , I = M.splitArea
                      , L = M.splitLine
                      , E = this.getCenter(K)
                      , D = M.splitNumber
                      , N = L.lineStyle.color
                      , H = L.lineStyle.width
                      , J = L.show
                      , G = this.deepQuery(this._queryTarget, "axisLine");
                    this._addArea(F, D, E, I, N, H, J),
                    G.show && this._addLine(F, E, G)
                },
                _addAxisLabel: function(G) {
                    for (var L, W, K, I, W, H, N, M, e, i, R = z("../util/accMath"), J = this.polar[G], S = this.deepQuery(this._queryTarget, "indicator"), F = J.__ecIndicator, D = this.deepQuery(this._queryTarget, "splitNumber"), P = this.getCenter(G), T = 0; S.length > T; T++) {
                        if (L = this.deepQuery([S[T], J, this.option], "axisLabel"),
                        L.show) {
                            var Q = this.deepQuery([L, J, this.option], "textStyle")
                              , O = this.deepQuery([L, J], "formatter");
                            if (K = {},
                            K.textFont = this.getFont(Q),
                            K.color = Q.color,
                            K = y.merge(K, L),
                            K.lineWidth = K.width,
                            W = F[T].vector,
                            H = F[T].value,
                            M = 2 * (T / S.length) * Math.PI,
                            e = L.offset || 10,
                            i = L.interval || 0,
                            !H) {
                                return
                            }
                            for (var E = 1; D >= E; E += i + 1) {
                                I = y.merge({}, K),
                                N = R.accAdd(H.min, R.accMul(H.step, E)),
                                N = "function" == typeof O ? O(N) : "string" == typeof O ? O.replace("{a}", "{a0}").replace("{a0}", N) : this.numAddCommas(N),
                                I.text = N,
                                I.x = E * W[0] / D + Math.cos(M) * e + P[0],
                                I.y = E * W[1] / D + Math.sin(M) * e + P[1],
                                this.shapeList.push(new x({
                                    zlevel: this.getZlevelBase(),
                                    z: this.getZBase(),
                                    style: I,
                                    draggable: !1,
                                    hoverable: !1
                                }))
                            }
                        }
                    }
                },
                _buildText: function(L) {
                    for (var P, F, O, E, i, Q, J, K = this.polar[L], H = K.__ecIndicator, G = this.deepQuery(this._queryTarget, "indicator"), I = this.getCenter(L), M = 0, D = 0, N = 0; G.length > N; N++) {
                        E = this.deepQuery([G[N], K, this.option], "name"),
                        E.show && (J = this.deepQuery([E, K, this.option], "textStyle"),
                        F = {},
                        F.textFont = this.getFont(J),
                        F.color = J.color,
                        F.text = "function" == typeof E.formatter ? E.formatter.call(this.myChart, G[N].text, N) : "string" == typeof E.formatter ? E.formatter.replace("{value}", G[N].text) : G[N].text,
                        H[N].text = F.text,
                        P = H[N].vector,
                        O = Math.round(P[0]) > 0 ? "left" : 0 > Math.round(P[0]) ? "right" : "center",
                        null  == E.margin ? P = this._mapVector(P, I, 1.1) : (Q = E.margin,
                        M = P[0] > 0 ? Q : -Q,
                        D = P[1] > 0 ? Q : -Q,
                        M = 0 === P[0] ? 0 : M,
                        D = 0 === P[1] ? 0 : D,
                        P = this._mapVector(P, I, 1)),
                        F.textAlign = O,
                        F.x = P[0] + M,
                        F.y = P[1] + D,
                        i = E.rotate ? [E.rotate / 180 * Math.PI, P[0], P[1]] : [0, 0, 0],
                        this.shapeList.push(new x({
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase(),
                            style: F,
                            draggable: !1,
                            hoverable: !1,
                            rotation: i
                        })))
                    }
                },
                getIndicatorText: function(l, i) {
                    return this.polar[l] && this.polar[l].__ecIndicator[i] && this.polar[l].__ecIndicator[i].text
                },
                getDropBox: function(I) {
                    var K, E, I = I || 0, G = this.polar[I], J = this.getCenter(I), D = G.__ecIndicator, m = D.length, L = [], F = G.type;
                    if ("polygon" == F) {
                        for (var H = 0; m > H; H++) {
                            K = D[H].vector,
                            L.push(this._mapVector(K, J, 1.2))
                        }
                        E = this._getShape(L, "fill", "rgba(0,0,0,0)", "", 1)
                    } else {
                        "circle" == F && (E = this._getCircle("", 1, 1.2, J, "fill", "rgba(0,0,0,0)"))
                    }
                    return E
                },
                _addArea: function(M, O, F, K, N, E, D) {
                    for (var P, J, L, H, G = this.deepQuery(this._queryTarget, "type"), I = 0; O > I; I++) {
                        J = (O - I) / O,
                        D && ("polygon" == G ? (H = this._getPointList(M, J, F),
                        P = this._getShape(H, "stroke", "", N, E)) : "circle" == G && (P = this._getCircle(N, E, J, F, "stroke")),
                        this.shapeList.push(P)),
                        K.show && (L = (O - I - 1) / O,
                        this._addSplitArea(M, K, J, L, F, I))
                    }
                },
                _getCircle: function(E, r, G, m, l, F) {
                    var D = this._getRadius();
                    return new p({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            x: m[0],
                            y: m[1],
                            r: D * G,
                            brushType: l,
                            strokeColor: E,
                            lineWidth: r,
                            color: F
                        },
                        hoverable: !1,
                        draggable: !1
                    })
                },
                _getRing: function(r, o, s, m) {
                    var l = this._getRadius();
                    return new C({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            x: m[0],
                            y: m[1],
                            r: o * l,
                            r0: s * l,
                            color: r,
                            brushType: "fill"
                        },
                        hoverable: !1,
                        draggable: !1
                    })
                },
                _getPointList: function(E, s, G) {
                    for (var m, l = [], F = E.length, D = 0; F > D; D++) {
                        m = E[D].vector,
                        l.push(this._mapVector(m, G, s))
                    }
                    return l
                },
                _getShape: function(r, o, s, m, l) {
                    return new q({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            pointList: r,
                            brushType: o,
                            color: s,
                            strokeColor: m,
                            lineWidth: l
                        },
                        hoverable: !1,
                        draggable: !1
                    })
                },
                _addSplitArea: function(N, R, G, L, Q, F) {
                    var D, S, K, M, I, H = N.length, J = R.areaStyle.color, O = [], H = N.length, E = this.deepQuery(this._queryTarget, "type");
                    if ("string" == typeof J && (J = [J]),
                    S = J.length,
                    D = J[F % S],
                    "polygon" == E) {
                        for (var P = 0; H > P; P++) {
                            O = [],
                            K = N[P].vector,
                            M = N[(P + 1) % H].vector,
                            O.push(this._mapVector(K, Q, G)),
                            O.push(this._mapVector(K, Q, L)),
                            O.push(this._mapVector(M, Q, L)),
                            O.push(this._mapVector(M, Q, G)),
                            I = this._getShape(O, "fill", D, "", 1),
                            this.shapeList.push(I)
                        }
                    } else {
                        "circle" == E && (I = this._getRing(D, G, L, Q),
                        this.shapeList.push(I))
                    }
                },
                _mapVector: function(l, i, m) {
                    return [l[0] * m + i[0], l[1] * m + i[1]]
                },
                getCenter: function(i) {
                    var i = i || 0;
                    return this.parseCenter(this.zr, this.polar[i].center)
                },
                _addLine: function(K, M, F) {
                    for (var I, L, E = K.length, D = F.lineStyle, N = D.color, H = D.width, J = D.type, G = 0; E > G; G++) {
                        L = K[G].vector,
                        I = this._getLine(M[0], M[1], L[0] + M[0], L[1] + M[1], N, H, J),
                        this.shapeList.push(I)
                    }
                },
                _getLine: function(F, m, H, l, G, E, D) {
                    return new A({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            xStart: F,
                            yStart: m,
                            xEnd: H,
                            yEnd: l,
                            strokeColor: G,
                            lineWidth: E,
                            lineType: D
                        },
                        hoverable: !1
                    })
                },
                _adjustIndicatorValue: function(Q) {
                    for (var F, K, O, E = this.polar[Q], e = this.deepQuery(this._queryTarget, "indicator"), R = e.length, J = E.__ecIndicator, L = this._getSeriesData(Q), H = E.boundaryGap, G = E.splitNumber, I = E.scale, M = z("../util/smartSteps"), D = 0; R > D; D++) {
                        if ("number" == typeof e[D].max) {
                            F = e[D].max,
                            K = e[D].min || 0,
                            O = {
                                max: F,
                                min: K
                            }
                        } else {
                            var N = this._findValue(L, D, G, H);
                            K = N.min,
                            F = N.max
                        }
                        !I && K >= 0 && F >= 0 && (K = 0),
                        !I && 0 >= K && 0 >= F && (F = 0);
                        var P = M(K, F, G, O);
                        J[D].value = {
                            min: P.min,
                            max: P.max,
                            step: P.step
                        }
                    }
                },
                _getSeriesData: function(G) {
                    for (var D, I, m, l = [], H = this.component.legend, F = 0; this.series.length > F; F++) {
                        if (D = this.series[F],
                        D.type == w.CHART_TYPE_RADAR) {
                            I = D.data || [];
                            for (var E = 0; I.length > E; E++) {
                                m = this.deepQuery([I[E], D, this.option], "polarIndex") || 0,
                                m != G || H && !H.isSelected(I[E].name) || l.push(I[E])
                            }
                        }
                    }
                    return l
                },
                _findValue: function(I, K, E, G) {
                    function J(i) {
                        (i > D || void 0 === D) && (D = i),
                        (m > i || void 0 === m) && (m = i)
                    }
                    var D, m, L;
                    if (I && 0 !== I.length) {
                        if (1 == I.length && (m = 0),
                        1 != I.length) {
                            for (var F = 0; I.length > F; F++) {
                                J(this.getDataFromOption(I[F].value[K]))
                            }
                        } else {
                            L = I[0];
                            for (var F = 0; L.value.length > F; F++) {
                                J(this.getDataFromOption(L.value[F]))
                            }
                        }
                        var H = Math.abs(D - m);
                        return m -= Math.abs(H * G[0]),
                        D += Math.abs(H * G[1]),
                        m === D && (0 === D ? D = 1 : D > 0 ? m = D / E : D /= E),
                        {
                            max: D,
                            min: m
                        }
                    }
                },
                getVector: function(I, K, E) {
                    I = I || 0,
                    K = K || 0;
                    var G = this.polar[I].__ecIndicator;
                    if (!(K >= G.length)) {
                        var J, D = this.polar[I].__ecIndicator[K], m = this.getCenter(I), L = D.vector, F = D.value.max, H = D.value.min;
                        if (E === void 0) {
                            return m
                        }
                        switch (E) {
                        case "min":
                            E = H;
                            break;
                        case "max":
                            E = F;
                            break;
                        case "center":
                            E = (F + H) / 2
                        }
                        return J = F != H ? (E - H) / (F - H) : 0.5,
                        this._mapVector(L, m, J)
                    }
                },
                isInside: function(l) {
                    var i = this.getNearestIndex(l);
                    return i ? i.polarIndex : -1
                },
                getNearestIndex: function(J) {
                    for (var L, E, H, K, D, m, M, G, I, F = 0; this.polar.length > F; F++) {
                        if (L = this.polar[F],
                        E = this.getCenter(F),
                        J[0] == E[0] && J[1] == E[1]) {
                            return {
                                polarIndex: F,
                                valueIndex: 0
                            }
                        }
                        if (H = this._getRadius(),
                        D = L.startAngle,
                        m = L.indicator,
                        M = m.length,
                        G = 2 * Math.PI / M,
                        K = v.cartesian2polar(J[0] - E[0], E[1] - J[1]),
                        0 > J[0] - E[0] && (K[1] += Math.PI),
                        0 > K[1] && (K[1] += 2 * Math.PI),
                        I = K[1] - D / 180 * Math.PI + 2 * Math.PI,
                        Math.abs(Math.cos(I % (G / 2))) * H > K[0]) {
                            return {
                                polarIndex: F,
                                valueIndex: Math.floor((I + G / 2) / G) % M
                            }
                        }
                    }
                },
                getIndicator: function(i) {
                    var i = i || 0;
                    return this.polar[i].indicator
                },
                refresh: function(i) {
                    i && (this.option = i,
                    this.polar = this.option.polar,
                    this.series = this.option.series),
                    this.clear(),
                    this._buildShape()
                }
            },
            y.inherits(B, u),
            z("../component").define("polar", B),
            B
        }
        ),
        k("echarts/util/coordinates", ["require", "zrender/tool/math"], function(o) {
            function m(n, i) {
                return [n * l.sin(i), n * l.cos(i)]
            }
            function p(n, i) {
                return [Math.sqrt(n * n + i * i), Math.atan(i / n)]
            }
            var l = o("zrender/tool/math");
            return {
                polar2cartesian: m,
                cartesian2polar: p
            }
        }
        ),
        k("echarts/chart/chord", ["require", "./base", "zrender/shape/Text", "zrender/shape/Line", "zrender/shape/Sector", "../util/shape/Ribbon", "../util/shape/Icon", "zrender/shape/BezierCurve", "../config", "../util/ecData", "zrender/tool/util", "zrender/tool/vector", "../data/Graph", "../layout/Chord", "../chart"], function(D) {
            function G(p, n, m, l, r) {
                w.call(this, p, n, m, l, r),
                this.scaleLineLength = 4,
                this.scaleUnitAngle = 4,
                this.refresh(l)
            }
            var w = D("./base")
              , B = D("zrender/shape/Text")
              , F = D("zrender/shape/Line")
              , v = D("zrender/shape/Sector")
              , q = D("../util/shape/Ribbon")
              , H = D("../util/shape/Icon")
              , A = D("zrender/shape/BezierCurve")
              , C = D("../config");
            C.chord = {
                zlevel: 0,
                z: 2,
                clickable: !0,
                radius: ["65%", "75%"],
                center: ["50%", "50%"],
                padding: 2,
                sort: "none",
                sortSub: "none",
                startAngle: 90,
                clockWise: !0,
                ribbonType: !0,
                minRadius: 10,
                maxRadius: 20,
                symbol: "circle",
                showScale: !1,
                showScaleText: !1,
                itemStyle: {
                    normal: {
                        borderWidth: 0,
                        borderColor: "#000",
                        label: {
                            show: !0,
                            rotate: !1,
                            distance: 5
                        },
                        chordStyle: {
                            width: 1,
                            color: "black",
                            borderWidth: 1,
                            borderColor: "#999",
                            opacity: 0.5
                        }
                    },
                    emphasis: {
                        borderWidth: 0,
                        borderColor: "#000",
                        chordStyle: {
                            width: 1,
                            color: "black",
                            borderWidth: 1,
                            borderColor: "#999"
                        }
                    }
                }
            };
            var y = D("../util/ecData")
              , x = D("zrender/tool/util")
              , z = D("zrender/tool/vector")
              , E = D("../data/Graph")
              , u = D("../layout/Chord");
            return G.prototype = {
                type: C.CHART_TYPE_CHORD,
                _init: function() {
                    var L = this.series;
                    this.selectedMap = {};
                    for (var N = {}, I = {}, K = 0, M = L.length; M > K; K++) {
                        if (L[K].type === this.type) {
                            var p = this.isSelected(L[K].name);
                            this.selectedMap[L[K].name] = p,
                            p && this.buildMark(K),
                            this.reformOption(L[K]),
                            N[L[K].name] = L[K]
                        }
                    }
                    for (var K = 0, M = L.length; M > K; K++) {
                        if (L[K].type === this.type) {
                            if (L[K].insertToSerie) {
                                var m = N[L[K].insertToSerie];
                                L[K]._referenceSerie = m
                            } else {
                                I[L[K].name] = [L[K]]
                            }
                        }
                    }
                    for (var K = 0, M = L.length; M > K; K++) {
                        if (L[K].type === this.type && L[K].insertToSerie) {
                            for (var O = L[K]._referenceSerie; O && O._referenceSerie; ) {
                                O = O._referenceSerie
                            }
                            I[O.name] && this.selectedMap[L[K].name] && I[O.name].push(L[K])
                        }
                    }
                    for (var J in I) {
                        this._buildChords(I[J])
                    }
                    this.addShapeList()
                },
                _getNodeCategory: function(l, i) {
                    return l.categories && l.categories[i.category || 0]
                },
                _getNodeQueryTarget: function(l, i) {
                    var m = this._getNodeCategory(l, i);
                    return [i, m, l]
                },
                _getEdgeQueryTarget: function(l, i, m) {
                    return m = m || "normal",
                    [i.itemStyle && i.itemStyle[m], l.itemStyle[m].chordStyle]
                },
                _buildChords: function(Q) {
                    for (var Y = [], J = Q[0], O = function(i) {
                        return i.layout.size > 0
                    }
                    , W = function(i) {
                        return function(e) {
                            return i.getEdge(e.node2, e.node1)
                        }
                    }
                    , I = 0; Q.length > I; I++) {
                        var p = Q[I];
                        if (this.selectedMap[p.name]) {
                            var Z;
                            p.data && p.matrix ? Z = this._getSerieGraphFromDataMatrix(p, J) : p.nodes && p.links && (Z = this._getSerieGraphFromNodeLinks(p, J)),
                            Z.filterNode(O, this),
                            p.ribbonType && Z.filterEdge(W(Z)),
                            Y.push(Z),
                            Z.__serie = p
                        }
                    }
                    if (Y.length) {
                        var N = Y[0];
                        if (!J.ribbonType) {
                            var P = J.minRadius
                              , L = J.maxRadius
                              , K = 1 / 0
                              , M = -1 / 0;
                            N.eachNode(function(i) {
                                M = Math.max(i.layout.size, M),
                                K = Math.min(i.layout.size, K)
                            }
                            );
                            var R = (L - P) / (M - K);
                            N.eachNode(function(n) {
                                var m = this._getNodeQueryTarget(J, n)
                                  , l = this.query(m, "symbolSize");
                                n.layout.size = M === K ? l || K : l || (n.layout.size - K) * R + P
                            }
                            , this)
                        }
                        var S = new u;
                        S.clockWise = J.clockWise,
                        S.startAngle = J.startAngle * Math.PI / 180,
                        S.clockWise || (S.startAngle = -S.startAngle),
                        S.padding = J.padding * Math.PI / 180,
                        S.sort = J.sort,
                        S.sortSub = J.sortSub,
                        S.directed = J.ribbonType,
                        S.run(Y);
                        var X = this.query(J, "itemStyle.normal.label.show");
                        if (J.ribbonType) {
                            this._buildSectors(J, 0, N, J, Y),
                            X && this._buildLabels(J, 0, N, J, Y);
                            for (var I = 0, T = 0; Q.length > I; I++) {
                                this.selectedMap[Q[I].name] && this._buildRibbons(Q, I, Y[T++], J)
                            }
                            J.showScale && this._buildScales(J, 0, N)
                        } else {
                            this._buildNodeIcons(J, 0, N, J, Y),
                            X && this._buildLabels(J, 0, N, J, Y);
                            for (var I = 0, T = 0; Q.length > I; I++) {
                                this.selectedMap[Q[I].name] && this._buildEdgeCurves(Q, I, Y[T++], J, N)
                            }
                        }
                        this._initHoverHandler(Q, Y)
                    }
                },
                _getSerieGraphFromDataMatrix: function(S, W) {
                    for (var L = [], Q = 0, T = [], K = 0; S.matrix.length > K; K++) {
                        T[K] = S.matrix[K].slice()
                    }
                    for (var I = S.data || S.nodes, K = 0; I.length > K; K++) {
                        var X = {}
                          , P = I[K];
                        P.rawIndex = K;
                        for (var R in P) {
                            "name" === R ? X.id = P.name : X[R] = P[R]
                        }
                        var N = this._getNodeCategory(W, P)
                          , M = N ? N.name : P.name;
                        if (this.selectedMap[M] = this.isSelected(M),
                        this.selectedMap[M]) {
                            L.push(X),
                            Q++
                        } else {
                            T.splice(Q, 1);
                            for (var O = 0; T.length > O; O++) {
                                T[O].splice(Q, 1)
                            }
                        }
                    }
                    var J = E.fromMatrix(L, T, !0);
                    return J.eachNode(function(i) {
                        i.layout = {
                            size: i.data.outValue
                        },
                        i.rawIndex = i.data.rawIndex
                    }
                    ),
                    J.eachEdge(function(i) {
                        i.layout = {
                            weight: i.data.weight
                        }
                    }
                    ),
                    J
                },
                _getSerieGraphFromNodeLinks: function(S, W) {
                    for (var L = new E(!0), Q = S.data || S.nodes, T = 0, K = Q.length; K > T; T++) {
                        var I = Q[T];
                        if (I && !I.ignore) {
                            var X = this._getNodeCategory(W, I)
                              , P = X ? X.name : I.name;
                            if (this.selectedMap[P] = this.isSelected(P),
                            this.selectedMap[P]) {
                                var R = L.addNode(I.name, I);
                                R.rawIndex = T
                            }
                        }
                    }
                    for (var T = 0, K = S.links.length; K > T; T++) {
                        var N = S.links[T]
                          , M = N.source
                          , O = N.target;
                        "number" == typeof M && (M = Q[M],
                        M && (M = M.name)),
                        "number" == typeof O && (O = Q[O],
                        O && (O = O.name));
                        var J = L.addEdge(M, O, N);
                        J && (J.rawIndex = T)
                    }
                    return L.eachNode(function(m) {
                        var o = m.data.value;
                        if (null  == o) {
                            if (o = 0,
                            W.ribbonType) {
                                for (var l = 0; m.outEdges.length > l; l++) {
                                    o += m.outEdges[l].data.weight || 0
                                }
                            } else {
                                for (var l = 0; m.edges.length > l; l++) {
                                    o += m.edges[l].data.weight || 0
                                }
                            }
                        }
                        m.layout = {
                            size: o
                        }
                    }
                    ),
                    L.eachEdge(function(i) {
                        i.layout = {
                            weight: null  == i.data.weight ? 1 : i.data.weight
                        }
                    }
                    ),
                    L
                },
                _initHoverHandler: function(p, o) {
                    var r = p[0]
                      , m = o[0]
                      , l = this;
                    m.eachNode(function(i) {
                        i.shape.onmouseover = function() {
                            m.eachNode(function(n) {
                                n.shape.style.opacity = 0.1,
                                n.labelShape && (n.labelShape.style.opacity = 0.1,
                                n.labelShape.modSelf()),
                                n.shape.modSelf()
                            }
                            );
                            for (var L = 0; o.length > L; L++) {
                                for (var K = 0; o[L].edges.length > K; K++) {
                                    var J = o[L].edges[K]
                                      , I = l._getEdgeQueryTarget(o[L].__serie, J.data);
                                    J.shape.style.opacity = 0.1 * l.deepQuery(I, "opacity"),
                                    J.shape.modSelf()
                                }
                            }
                            i.shape.style.opacity = 1,
                            i.labelShape && (i.labelShape.style.opacity = 1);
                            for (var L = 0; o.length > L; L++) {
                                var e = o[L].getNodeById(i.id);
                                if (e) {
                                    for (var K = 0; e.outEdges.length > K; K++) {
                                        var J = e.outEdges[K]
                                          , I = l._getEdgeQueryTarget(o[L].__serie, J.data);
                                        J.shape.style.opacity = l.deepQuery(I, "opacity");
                                        var t = o[0].getNodeById(J.node2.id);
                                        t && (t.shape && (t.shape.style.opacity = 1),
                                        t.labelShape && (t.labelShape.style.opacity = 1))
                                    }
                                }
                            }
                            l.zr.refreshNextFrame()
                        }
                        ,
                        i.shape.onmouseout = function() {
                            m.eachNode(function(s) {
                                s.shape.style.opacity = 1,
                                s.labelShape && (s.labelShape.style.opacity = 1,
                                s.labelShape.modSelf()),
                                s.shape.modSelf()
                            }
                            );
                            for (var I = 0; o.length > I; I++) {
                                for (var J = 0; o[I].edges.length > J; J++) {
                                    var t = o[I].edges[J]
                                      , n = [t.data, r];
                                    t.shape.style.opacity = l.deepQuery(n, "itemStyle.normal.chordStyle.opacity"),
                                    t.shape.modSelf()
                                }
                            }
                            l.zr.refreshNextFrame()
                        }
                    }
                    )
                },
                _buildSectors: function(L, I, M, p) {
                    var o = this.parseCenter(this.zr, p.center)
                      , K = this.parseRadius(this.zr, p.radius)
                      , J = p.clockWise
                      , m = J ? 1 : -1;
                    M.eachNode(function(t) {
                        var l = this._getNodeCategory(p, t.data)
                          , e = l ? this.getColor(l.name) : this.getColor(t.id)
                          , i = 180 * (t.layout.startAngle / Math.PI) * m
                          , s = 180 * (t.layout.endAngle / Math.PI) * m
                          , r = new v({
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase(),
                            style: {
                                x: o[0],
                                y: o[1],
                                r0: K[0],
                                r: K[1],
                                startAngle: i,
                                endAngle: s,
                                brushType: "fill",
                                opacity: 1,
                                color: e,
                                clockWise: J
                            },
                            clickable: p.clickable,
                            highlightStyle: {
                                brushType: "fill"
                            }
                        });
                        r.style.lineWidth = this.deepQuery([t.data, p], "itemStyle.normal.borderWidth"),
                        r.highlightStyle.lineWidth = this.deepQuery([t.data, p], "itemStyle.emphasis.borderWidth"),
                        r.style.strokeColor = this.deepQuery([t.data, p], "itemStyle.normal.borderColor"),
                        r.highlightStyle.strokeColor = this.deepQuery([t.data, p], "itemStyle.emphasis.borderColor"),
                        r.style.lineWidth > 0 && (r.style.brushType = "both"),
                        r.highlightStyle.lineWidth > 0 && (r.highlightStyle.brushType = "both"),
                        y.pack(r, L, I, t.data, t.rawIndex, t.id, t.category),
                        this.shapeList.push(r),
                        t.shape = r
                    }
                    , this)
                },
                _buildNodeIcons: function(I, p, K, m) {
                    var l = this.parseCenter(this.zr, m.center)
                      , J = this.parseRadius(this.zr, m.radius)
                      , s = J[1];
                    K.eachNode(function(r) {
                        var i = r.layout.startAngle
                          , M = r.layout.endAngle
                          , N = (i + M) / 2
                          , t = s * Math.cos(N)
                          , L = s * Math.sin(N)
                          , O = this._getNodeQueryTarget(m, r.data)
                          , e = this._getNodeCategory(m, r.data)
                          , P = this.deepQuery(O, "itemStyle.normal.color");
                        P || (P = e ? this.getColor(e.name) : this.getColor(r.id));
                        var Q = new H({
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase() + 1,
                            style: {
                                x: -r.layout.size,
                                y: -r.layout.size,
                                width: 2 * r.layout.size,
                                height: 2 * r.layout.size,
                                iconType: this.deepQuery(O, "symbol"),
                                color: P,
                                brushType: "both",
                                lineWidth: this.deepQuery(O, "itemStyle.normal.borderWidth"),
                                strokeColor: this.deepQuery(O, "itemStyle.normal.borderColor")
                            },
                            highlightStyle: {
                                color: this.deepQuery(O, "itemStyle.emphasis.color"),
                                lineWidth: this.deepQuery(O, "itemStyle.emphasis.borderWidth"),
                                strokeColor: this.deepQuery(O, "itemStyle.emphasis.borderColor")
                            },
                            clickable: m.clickable,
                            position: [t + l[0], L + l[1]]
                        });
                        y.pack(Q, I, p, r.data, r.rawIndex, r.id, r.category),
                        this.shapeList.push(Q),
                        r.shape = Q
                    }
                    , this)
                },
                _buildLabels: function(N, P, I, O) {
                    var p = this.query(O, "itemStyle.normal.label.color")
                      , i = this.query(O, "itemStyle.normal.label.rotate")
                      , Q = this.query(O, "itemStyle.normal.label.distance")
                      , L = this.parseCenter(this.zr, O.center)
                      , M = this.parseRadius(this.zr, O.radius)
                      , K = O.clockWise
                      , J = K ? 1 : -1;
                    I.eachNode(function(s) {
                        var V = 180 * (s.layout.startAngle / Math.PI) * J
                          , o = 180 * (s.layout.endAngle / Math.PI) * J
                          , r = (V * -J + o * -J) / 2;
                        r %= 360,
                        0 > r && (r += 360);
                        var R = 90 >= r || r >= 270;
                        r = r * Math.PI / 180;
                        var l = [Math.cos(r), -Math.sin(r)]
                          , S = 0;
                        S = O.ribbonType ? O.showScaleText ? 35 + Q : Q : Q + s.layout.size;
                        var U = z.scale([], l, M[1] + S);
                        z.add(U, U, L);
                        var T = {
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase() + 1,
                            hoverable: !1,
                            style: {
                                text: null  == s.data.label ? s.id : s.data.label,
                                textAlign: R ? "left" : "right",
                                color: p || "#000000"
                            }
                        };
                        i ? (T.rotation = R ? r : Math.PI + r,
                        T.style.x = R ? M[1] + S : -M[1] - S,
                        T.style.y = 0,
                        T.position = L.slice()) : (T.style.x = U[0],
                        T.style.y = U[1]),
                        T.style.textColor = this.deepQuery([s.data, O], "itemStyle.normal.label.textStyle.color") || "#fff",
                        T.style.textFont = this.getFont(this.deepQuery([s.data, O], "itemStyle.normal.label.textStyle")),
                        T = new B(T),
                        this.shapeList.push(T),
                        s.labelShape = T
                    }
                    , this)
                },
                _buildRibbons: function(I, p, K, m) {
                    var l = I[p]
                      , J = this.parseCenter(this.zr, m.center)
                      , r = this.parseRadius(this.zr, m.radius);
                    K.eachEdge(function(o, t) {
                        var i, n = K.getEdge(o.node2, o.node1);
                        if (n && !o.shape) {
                            if (n.shape) {
                                return o.shape = n.shape,
                                void 0
                            }
                            var N = 180 * (o.layout.startAngle / Math.PI)
                              , e = 180 * (o.layout.endAngle / Math.PI)
                              , O = 180 * (n.layout.startAngle / Math.PI)
                              , R = 180 * (n.layout.endAngle / Math.PI);
                            i = 1 === I.length ? o.layout.weight <= n.layout.weight ? this.getColor(o.node1.id) : this.getColor(o.node2.id) : this.getColor(l.name);
                            var Q, L, P = this._getEdgeQueryTarget(l, o.data), M = this._getEdgeQueryTarget(l, o.data, "emphasis"), s = new q({
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase(),
                                style: {
                                    x: J[0],
                                    y: J[1],
                                    r: r[0],
                                    source0: N,
                                    source1: e,
                                    target0: O,
                                    target1: R,
                                    brushType: "both",
                                    opacity: this.deepQuery(P, "opacity"),
                                    color: i,
                                    lineWidth: this.deepQuery(P, "borderWidth"),
                                    strokeColor: this.deepQuery(P, "borderColor"),
                                    clockWise: m.clockWise
                                },
                                clickable: m.clickable,
                                highlightStyle: {
                                    brushType: "both",
                                    opacity: this.deepQuery(M, "opacity"),
                                    lineWidth: this.deepQuery(M, "borderWidth"),
                                    strokeColor: this.deepQuery(M, "borderColor")
                                }
                            });
                            o.layout.weight <= n.layout.weight ? (Q = n.node1,
                            L = n.node2) : (Q = o.node1,
                            L = o.node2),
                            y.pack(s, l, p, o.data, null  == o.rawIndex ? t : o.rawIndex, o.data.name || Q.id + "-" + L.id, Q.id, L.id),
                            this.shapeList.push(s),
                            o.shape = s
                        }
                    }
                    , this)
                },
                _buildEdgeCurves: function(I, p, K, m, l) {
                    var J = I[p]
                      , s = this.parseCenter(this.zr, m.center);
                    K.eachEdge(function(O, r) {
                        var M = l.getNodeById(O.node1.id)
                          , Q = l.getNodeById(O.node2.id)
                          , N = M.shape
                          , t = Q.shape
                          , L = this._getEdgeQueryTarget(J, O.data)
                          , P = this._getEdgeQueryTarget(J, O.data, "emphasis")
                          , o = new A({
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase(),
                            style: {
                                xStart: N.position[0],
                                yStart: N.position[1],
                                xEnd: t.position[0],
                                yEnd: t.position[1],
                                cpX1: s[0],
                                cpY1: s[1],
                                lineWidth: this.deepQuery(L, "width"),
                                strokeColor: this.deepQuery(L, "color"),
                                opacity: this.deepQuery(L, "opacity")
                            },
                            highlightStyle: {
                                lineWidth: this.deepQuery(P, "width"),
                                strokeColor: this.deepQuery(P, "color"),
                                opacity: this.deepQuery(P, "opacity")
                            }
                        });
                        y.pack(o, J, p, O.data, null  == O.rawIndex ? r : O.rawIndex, O.data.name || O.node1.id + "-" + O.node2.id, O.node1.id, O.node2.id),
                        this.shapeList.push(o),
                        O.shape = o
                    }
                    , this)
                },
                _buildScales: function(P, R, K) {
                    var J, i, S = P.clockWise, N = this.parseCenter(this.zr, P.center), O = this.parseRadius(this.zr, P.radius), M = S ? 1 : -1, L = 0, Q = -1 / 0;
                    P.showScaleText && (K.eachNode(function(m) {
                        var l = m.data.value;
                        l > Q && (Q = l),
                        L += l
                    }
                    ),
                    Q > 10000000000 ? (J = "b",
                    i = 1e-9) : Q > 10000000 ? (J = "m",
                    i = 0.000001) : Q > 10000 ? (J = "k",
                    i = 0.001) : (J = "",
                    i = 1));
                    var I = L / (360 - P.padding);
                    K.eachNode(function(aa) {
                        for (var e = 180 * (aa.layout.startAngle / Math.PI), l = 180 * (aa.layout.endAngle / Math.PI), r = e; ; ) {
                            if (S && r > l || !S && l > r) {
                                break
                            }
                            var T = r / 180 * Math.PI
                              , Z = [Math.cos(T), Math.sin(T)]
                              , W = z.scale([], Z, O[1] + 1);
                            z.add(W, W, N);
                            var o = z.scale([], Z, O[1] + this.scaleLineLength);
                            z.add(o, o, N);
                            var U = new F({
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase() - 1,
                                hoverable: !1,
                                style: {
                                    xStart: W[0],
                                    yStart: W[1],
                                    xEnd: o[0],
                                    yEnd: o[1],
                                    lineCap: "round",
                                    brushType: "stroke",
                                    strokeColor: "#666",
                                    lineWidth: 1
                                }
                            });
                            this.shapeList.push(U),
                            r += M * this.scaleUnitAngle
                        }
                        if (P.showScaleText) {
                            for (var p = e, m = 5 * I * this.scaleUnitAngle, X = 0; ; ) {
                                if (S && p > l || !S && l > p) {
                                    break
                                }
                                var T = p;
                                T %= 360,
                                0 > T && (T += 360);
                                var Y = 90 >= T || T >= 270
                                  , s = new B({
                                    zlevel: this.getZlevelBase(),
                                    z: this.getZBase() - 1,
                                    hoverable: !1,
                                    style: {
                                        x: Y ? O[1] + this.scaleLineLength + 4 : -O[1] - this.scaleLineLength - 4,
                                        y: 0,
                                        text: Math.round(10 * X) / 10 + J,
                                        textAlign: Y ? "left" : "right"
                                    },
                                    position: N.slice(),
                                    rotation: Y ? [-T / 180 * Math.PI, 0, 0] : [-(T + 180) / 180 * Math.PI, 0, 0]
                                });
                                this.shapeList.push(s),
                                X += m * i,
                                p += 5 * M * this.scaleUnitAngle
                            }
                        }
                    }
                    , this)
                },
                refresh: function(l) {
                    if (l && (this.option = l,
                    this.series = l.series),
                    this.legend = this.component.legend,
                    this.legend) {
                        this.getColor = function(n) {
                            return this.legend.getColor(n)
                        }
                        ,
                        this.isSelected = function(n) {
                            return this.legend.isSelected(n)
                        }
                    } else {
                        var i = {}
                          , m = 0;
                        this.getColor = function(n) {
                            return i[n] ? i[n] : (i[n] || (i[n] = this.zr.getColor(m++)),
                            i[n])
                        }
                        ,
                        this.isSelected = function() {
                            return !0
                        }
                    }
                    this.backupShapeList(),
                    this._init()
                },
                reformOption: function(l) {
                    var i = x.merge;
                    l = i(i(l || {}, this.ecTheme.chord), C.chord),
                    l.itemStyle.normal.label.textStyle = this.getTextStyle(l.itemStyle.normal.label.textStyle)
                }
            },
            x.inherits(G, w),
            D("../chart").define("chord", G),
            G
        }
        ),
        k("echarts/util/shape/Ribbon", ["require", "zrender/shape/Base", "zrender/shape/util/PathProxy", "zrender/tool/util", "zrender/tool/area"], function(q) {
            function p(i) {
                s.call(this, i),
                this._pathProxy = new m
            }
            var s = q("zrender/shape/Base")
              , m = q("zrender/shape/util/PathProxy")
              , l = q("zrender/tool/util")
              , r = q("zrender/tool/area");
            return p.prototype = {
                type: "ribbon",
                buildPath: function(L, A) {
                    var F = A.clockWise || !1
                      , I = this._pathProxy;
                    I.begin(L);
                    var O = A.x
                      , E = A.y
                      , C = A.r
                      , B = A.source0 / 180 * Math.PI
                      , H = A.source1 / 180 * Math.PI
                      , J = A.target0 / 180 * Math.PI
                      , G = A.target1 / 180 * Math.PI
                      , v = O + Math.cos(B) * C
                      , w = E + Math.sin(B) * C
                      , M = O + Math.cos(H) * C
                      , D = E + Math.sin(H) * C
                      , N = O + Math.cos(J) * C
                      , z = E + Math.sin(J) * C
                      , x = O + Math.cos(G) * C
                      , K = E + Math.sin(G) * C;
                    I.moveTo(v, w),
                    I.arc(O, E, A.r, B, H, !F),
                    I.bezierCurveTo(0.7 * (O - M) + M, 0.7 * (E - D) + D, 0.7 * (O - N) + N, 0.7 * (E - z) + z, N, z),
                    (A.source0 !== A.target0 || A.source1 !== A.target1) && (I.arc(O, E, A.r, J, G, !F),
                    I.bezierCurveTo(0.7 * (O - x) + x, 0.7 * (E - K) + K, 0.7 * (O - v) + v, 0.7 * (E - w) + w, v, w))
                },
                getRect: function(i) {
                    return i.__rect ? i.__rect : (this._pathProxy.isEmpty() || this.buildPath(null , i),
                    this._pathProxy.fastBoundingRect())
                },
                isCover: function(o, i) {
                    var u = this.getRect(this.style);
                    return o >= u.x && u.x + u.width >= o && i >= u.y && u.y + u.height >= i ? r.isInsidePath(this._pathProxy.pathCommands, 0, "fill", o, i) : void 0
                }
            },
            l.inherits(p, s),
            p
        }
        ),
        k("echarts/data/Graph", ["require", "zrender/tool/util"], function(p) {
            var o = p("zrender/tool/util")
              , q = function(i) {
                this._directed = i || !1,
                this.nodes = [],
                this.edges = [],
                this._nodesMap = {},
                this._edgesMap = {}
            }
            ;
            q.prototype.isDirected = function() {
                return this._directed
            }
            ,
            q.prototype.addNode = function(s, r) {
                if (this._nodesMap[s]) {
                    return this._nodesMap[s]
                }
                var n = new q.Node(s,r);
                return this.nodes.push(n),
                this._nodesMap[s] = n,
                n
            }
            ,
            q.prototype.getNodeById = function(i) {
                return this._nodesMap[i]
            }
            ,
            q.prototype.addEdge = function(u, s, r) {
                if ("string" == typeof u && (u = this._nodesMap[u]),
                "string" == typeof s && (s = this._nodesMap[s]),
                u && s) {
                    var n = u.id + "-" + s.id;
                    if (this._edgesMap[n]) {
                        return this._edgesMap[n]
                    }
                    var v = new q.Edge(u,s,r);
                    return this._directed && (u.outEdges.push(v),
                    s.inEdges.push(v)),
                    u.edges.push(v),
                    u !== s && s.edges.push(v),
                    this.edges.push(v),
                    this._edgesMap[n] = v,
                    v
                }
            }
            ,
            q.prototype.removeEdge = function(t) {
                var u = t.node1
                  , s = t.node2
                  , r = u.id + "-" + s.id;
                this._directed && (u.outEdges.splice(o.indexOf(u.outEdges, t), 1),
                s.inEdges.splice(o.indexOf(s.inEdges, t), 1)),
                u.edges.splice(o.indexOf(u.edges, t), 1),
                u !== s && s.edges.splice(o.indexOf(s.edges, t), 1),
                delete this._edgesMap[r],
                this.edges.splice(o.indexOf(this.edges, t), 1)
            }
            ,
            q.prototype.getEdge = function(n, i) {
                return "string" != typeof n && (n = n.id),
                "string" != typeof i && (i = i.id),
                this._directed ? this._edgesMap[n + "-" + i] : this._edgesMap[n + "-" + i] || this._edgesMap[i + "-" + n]
            }
            ,
            q.prototype.removeNode = function(s) {
                if ("string" != typeof s || (s = this._nodesMap[s])) {
                    delete this._nodesMap[s.id],
                    this.nodes.splice(o.indexOf(this.nodes, s), 1);
                    for (var t = 0; this.edges.length > t; ) {
                        var r = this.edges[t];
                        r.node1 === s || r.node2 === s ? this.removeEdge(r) : t++
                    }
                }
            }
            ,
            q.prototype.filterNode = function(u, s) {
                for (var v = this.nodes.length, r = 0; v > r; ) {
                    u.call(s, this.nodes[r], r) ? r++ : (this.removeNode(this.nodes[r]),
                    v--)
                }
            }
            ,
            q.prototype.filterEdge = function(u, s) {
                for (var v = this.edges.length, r = 0; v > r; ) {
                    u.call(s, this.edges[r], r) ? r++ : (this.removeEdge(this.edges[r]),
                    v--)
                }
            }
            ,
            q.prototype.eachNode = function(u, s) {
                for (var v = this.nodes.length, r = 0; v > r; r++) {
                    this.nodes[r] && u.call(s, this.nodes[r], r)
                }
            }
            ,
            q.prototype.eachEdge = function(u, s) {
                for (var v = this.edges.length, r = 0; v > r; r++) {
                    this.edges[r] && u.call(s, this.edges[r], r)
                }
            }
            ,
            q.prototype.clear = function() {
                this.nodes.length = 0,
                this.edges.length = 0,
                this._nodesMap = {},
                this._edgesMap = {}
            }
            ,
            q.prototype.breadthFirstTraverse = function(B, D, w, z) {
                if ("string" == typeof D && (D = this._nodesMap[D]),
                D) {
                    var C = "edges";
                    "out" === w ? C = "outEdges" : "in" === w && (C = "inEdges");
                    for (var v = 0; this.nodes.length > v; v++) {
                        this.nodes[v].__visited = !1
                    }
                    if (!B.call(z, D, null )) {
                        for (var u = [D]; u.length; ) {
                            for (var E = u.shift(), y = E[C], v = 0; y.length > v; v++) {
                                var A = y[v]
                                  , x = A.node1 === E ? A.node2 : A.node1;
                                if (!x.__visited) {
                                    if (B.call(x, x, E)) {
                                        return
                                    }
                                    u.push(x),
                                    x.__visited = !0
                                }
                            }
                        }
                    }
                }
            }
            ,
            q.prototype.clone = function() {
                for (var s = new q(this._directed), r = 0; this.nodes.length > r; r++) {
                    s.addNode(this.nodes[r].id, this.nodes[r].data)
                }
                for (var r = 0; this.edges.length > r; r++) {
                    var n = this.edges[r];
                    s.addEdge(n.node1.id, n.node2.id, n.data)
                }
                return s
            }
            ;
            var m = function(n, i) {
                this.id = n,
                this.data = i || null ,
                this.inEdges = [],
                this.outEdges = [],
                this.edges = []
            }
            ;
            m.prototype.degree = function() {
                return this.edges.length
            }
            ,
            m.prototype.inDegree = function() {
                return this.inEdges.length
            }
            ,
            m.prototype.outDegree = function() {
                return this.outEdges.length
            }
            ;
            var l = function(r, i, s) {
                this.node1 = r,
                this.node2 = i,
                this.data = s || null 
            }
            ;
            return q.Node = m,
            q.Edge = l,
            q.fromMatrix = function(B, E, z) {
                if (E && E.length && E[0].length === E.length && B.length === E.length) {
                    for (var D = E.length, u = new q(z), n = 0; D > n; n++) {
                        var F = u.addNode(B[n].id, B[n]);
                        F.data.value = 0,
                        z && (F.data.outValue = F.data.inValue = 0)
                    }
                    for (var n = 0; D > n; n++) {
                        for (var y = 0; D > y; y++) {
                            var A = E[n][y];
                            z && (u.nodes[n].data.outValue += A,
                            u.nodes[y].data.inValue += A),
                            u.nodes[n].data.value += A,
                            u.nodes[y].data.value += A
                        }
                    }
                    for (var n = 0; D > n; n++) {
                        for (var y = n; D > y; y++) {
                            var A = E[n][y];
                            if (0 !== A) {
                                var w = u.nodes[n]
                                  , v = u.nodes[y]
                                  , x = u.addEdge(w, v, {});
                                if (x.data.weight = A,
                                n !== y && z && E[y][n]) {
                                    var C = u.addEdge(v, w, {});
                                    C.data.weight = E[y][n]
                                }
                            }
                        }
                    }
                    return u
                }
            }
            ,
            q
        }
        ),
        k("echarts/layout/Chord", ["require"], function() {
            var l = function(n) {
                n = n || {},
                this.sort = n.sort || null ,
                this.sortSub = n.sortSub || null ,
                this.padding = 0.05,
                this.startAngle = n.startAngle || 0,
                this.clockWise = null  == n.clockWise ? !1 : n.clockWise,
                this.center = n.center || [0, 0],
                this.directed = !0
            }
            ;
            l.prototype.run = function(K) {
                K instanceof Array || (K = [K]);
                var G = K.length;
                if (G) {
                    for (var O = K[0], C = O.nodes.length, A = [], z = 0, E = 0; C > E; E++) {
                        var H = O.nodes[E]
                          , D = {
                            size: 0,
                            subGroups: [],
                            node: H
                        };
                        A.push(D);
                        for (var n = 0, q = 0; K.length > q; q++) {
                            var L = K[q]
                              , B = L.getNodeById(H.id);
                            if (B) {
                                D.size += B.layout.size;
                                for (var M = this.directed ? B.outEdges : B.edges, w = 0; M.length > w; w++) {
                                    var t = M[w]
                                      , I = t.layout.weight;
                                    D.subGroups.push({
                                        weight: I,
                                        edge: t,
                                        graph: L
                                    }),
                                    n += I
                                }
                            }
                        }
                        z += D.size;
                        for (var N = D.size / n, w = 0; D.subGroups.length > w; w++) {
                            D.subGroups[w].weight *= N
                        }
                        "ascending" === this.sortSub ? D.subGroups.sort(i) : "descending" === this.sort && (D.subGroups.sort(i),
                        D.subGroups.reverse())
                    }
                    "ascending" === this.sort ? A.sort(m) : "descending" === this.sort && (A.sort(m),
                    A.reverse());
                    for (var N = (2 * Math.PI - this.padding * C) / z, J = this.startAngle, F = this.clockWise ? 1 : -1, E = 0; C > E; E++) {
                        var D = A[E];
                        D.node.layout.startAngle = J,
                        D.node.layout.endAngle = J + F * D.size * N,
                        D.node.layout.subGroups = [];
                        for (var w = 0; D.subGroups.length > w; w++) {
                            var v = D.subGroups[w];
                            v.edge.layout.startAngle = J,
                            J += F * v.weight * N,
                            v.edge.layout.endAngle = J
                        }
                        J = D.node.layout.endAngle + F * this.padding
                    }
                }
            }
            ;
            var i = function(o, n) {
                return o.weight - n.weight
            }
              , m = function(o, n) {
                return o.size - n.size
            }
            ;
            return l
        }
        ),
        k("echarts/chart/force", ["require", "./base", "../data/Graph", "../layout/Force", "zrender/shape/Line", "zrender/shape/BezierCurve", "zrender/shape/Image", "../util/shape/Icon", "../config", "../util/ecData", "zrender/tool/util", "zrender/config", "zrender/tool/vector", "../chart"], function(J) {
            function z(r, n, s, p, i) {
                var l = this;
                B.call(this, r, n, s, p, i),
                this.__nodePositionMap = {},
                this._graph = new A(!0),
                this._layout = new G,
                this._layout.onupdate = function() {
                    l._step()
                }
                ,
                this._steps = 1,
                this.ondragstart = function() {
                    E.apply(l, arguments)
                }
                ,
                this.ondragend = function() {
                    M.apply(l, arguments)
                }
                ,
                this.ondrop = function() {}
                ,
                this.shapeHandler.ondragstart = function() {
                    l.isDragstart = !0
                }
                ,
                this.onmousemove = function() {
                    H.apply(l, arguments)
                }
                ,
                this.refresh(p)
            }
            function E(l) {
                if (this.isDragstart && l.target) {
                    var i = l.target;
                    i.fixed = !0,
                    this.isDragstart = !1,
                    this.zr.on(x.EVENT.MOUSEMOVE, this.onmousemove)
                }
            }
            function H() {
                this._layout.temperature = 0.8,
                this._step()
            }
            function M(l, i) {
                if (this.isDragend && l.target) {
                    var m = l.target;
                    m.fixed = !1,
                    i.dragIn = !0,
                    i.needRefresh = !1,
                    this.isDragend = !1,
                    this.zr.un(x.EVENT.MOUSEMOVE, this.onmousemove)
                }
            }
            function D(o, m, p) {
                var l = w.create();
                return l[0] = (Math.random() - 0.5) * p + o,
                l[1] = (Math.random() - 0.5) * p + m,
                l
            }
            var B = J("./base")
              , A = J("../data/Graph")
              , G = J("../layout/Force")
              , I = J("zrender/shape/Line")
              , F = J("zrender/shape/BezierCurve")
              , q = J("zrender/shape/Image")
              , v = J("../util/shape/Icon")
              , K = J("../config");
            K.force = {
                zlevel: 1,
                z: 2,
                center: ["50%", "50%"],
                size: "100%",
                preventOverlap: !1,
                coolDown: 0.99,
                minRadius: 10,
                maxRadius: 20,
                ratioScaling: !1,
                large: !1,
                useWorker: !1,
                steps: 1,
                scaling: 1,
                gravity: 1,
                symbol: "circle",
                symbolSize: 0,
                linkSymbol: null ,
                linkSymbolSize: [10, 15],
                draggable: !0,
                clickable: !0,
                roam: !1,
                itemStyle: {
                    normal: {
                        label: {
                            show: !1,
                            position: "inside"
                        },
                        nodeStyle: {
                            brushType: "both",
                            borderColor: "#5182ab",
                            borderWidth: 1
                        },
                        linkStyle: {
                            color: "#5182ab",
                            width: 1,
                            type: "line"
                        }
                    },
                    emphasis: {
                        label: {
                            show: !1
                        },
                        nodeStyle: {},
                        linkStyle: {
                            opacity: 0
                        }
                    }
                }
            };
            var C = J("../util/ecData")
              , L = J("zrender/tool/util")
              , x = J("zrender/config")
              , w = J("zrender/tool/vector");
            return z.prototype = {
                constructor: z,
                type: K.CHART_TYPE_FORCE,
                _init: function() {
                    var r, p = this.component.legend, u = this.series;
                    this.clear();
                    for (var m = 0, l = u.length; l > m; m++) {
                        var s = u[m];
                        if (s.type === K.CHART_TYPE_FORCE) {
                            if (u[m] = this.reformOption(u[m]),
                            r = u[m].name || "",
                            this.selectedMap[r] = p ? p.isSelected(r) : !0,
                            !this.selectedMap[r]) {
                                continue
                            }
                            this.buildMark(m),
                            this._initSerie(s, m);
                            break
                        }
                    }
                    this.animationEffect()
                },
                _getNodeCategory: function(l, i) {
                    return l.categories && l.categories[i.category || 0]
                },
                _getNodeQueryTarget: function(o, m, p) {
                    p = p || "normal";
                    var l = this._getNodeCategory(o, m) || {};
                    return [m.itemStyle && m.itemStyle[p], l && l.itemStyle && l.itemStyle[p], o.itemStyle[p].nodeStyle]
                },
                _getEdgeQueryTarget: function(l, i, m) {
                    return m = m || "normal",
                    [i.itemStyle && i.itemStyle[m], l.itemStyle[m].linkStyle]
                },
                _initSerie: function(o, m) {
                    this._temperature = 1,
                    this._graph = o.data ? this._getSerieGraphFromDataMatrix(o) : this._getSerieGraphFromNodeLinks(o),
                    this._buildLinkShapes(o, m),
                    this._buildNodeShapes(o, m);
                    var p = o.roam === !0 || "move" === o.roam
                      , l = o.roam === !0 || "scale" === o.roam;
                    this.zr.modLayer(this.getZlevelBase(), {
                        panable: p,
                        zoomable: l
                    }),
                    (this.query("markPoint.effect.show") || this.query("markLine.effect.show")) && this.zr.modLayer(K.EFFECT_ZLEVEL, {
                        panable: p,
                        zoomable: l
                    }),
                    this._initLayout(o),
                    this._step()
                },
                _getSerieGraphFromDataMatrix: function(S) {
                    for (var X = [], u = 0, Q = [], W = 0; S.matrix.length > W; W++) {
                        Q[W] = S.matrix[W].slice()
                    }
                    for (var s = S.data || S.nodes, W = 0; s.length > W; W++) {
                        var p = {}
                          , P = s[W];
                        for (var R in P) {
                            "name" === R ? p.id = P.name : p[R] = P[R]
                        }
                        var N = this._getNodeCategory(S, P)
                          , y = N ? N.name : P.name;
                        if (this.selectedMap[y] = this.isSelected(y),
                        this.selectedMap[y]) {
                            X.push(p),
                            u++
                        } else {
                            Q.splice(u, 1);
                            for (var O = 0; Q.length > O; O++) {
                                Q[O].splice(u, 1)
                            }
                        }
                    }
                    var T = A.fromMatrix(X, Q, !0);
                    return T.eachNode(function(l, i) {
                        l.layout = {
                            size: l.data.value,
                            mass: 0
                        },
                        l.rawIndex = i
                    }
                    ),
                    T.eachEdge(function(i) {
                        i.layout = {
                            weight: i.data.weight
                        }
                    }
                    ),
                    T
                },
                _getSerieGraphFromNodeLinks: function(S) {
                    for (var X = new A(!0), u = S.data || S.nodes, Q = 0, W = u.length; W > Q; Q++) {
                        var s = u[Q];
                        if (s && !s.ignore) {
                            var p = this._getNodeCategory(S, s)
                              , P = p ? p.name : s.name;
                            if (this.selectedMap[P] = this.isSelected(P),
                            this.selectedMap[P]) {
                                var R = X.addNode(s.name, s);
                                R.rawIndex = Q
                            }
                        }
                    }
                    for (var Q = 0, W = S.links.length; W > Q; Q++) {
                        var N = S.links[Q]
                          , y = N.source
                          , O = N.target;
                        "number" == typeof y && (y = u[y],
                        y && (y = y.name)),
                        "number" == typeof O && (O = u[O],
                        O && (O = O.name));
                        var T = X.addEdge(y, O, N);
                        T && (T.rawIndex = Q)
                    }
                    return X.eachNode(function(l) {
                        var i = l.data.value;
                        if (null  == i) {
                            i = 0;
                            for (var m = 0; l.edges.length > m; m++) {
                                i += l.edges[m].data.weight || 0
                            }
                        }
                        l.layout = {
                            size: i,
                            mass: 0
                        }
                    }
                    ),
                    X.eachEdge(function(i) {
                        i.layout = {
                            weight: null  == i.data.weight ? 1 : i.data.weight
                        }
                    }
                    ),
                    X
                },
                _initLayout: function(T) {
                    var Z = this._graph
                      , y = Z.nodes.length
                      , R = this.query(T, "minRadius")
                      , Y = this.query(T, "maxRadius");
                    this._steps = T.steps || 1,
                    this._layout.center = this.parseCenter(this.zr, T.center),
                    this._layout.width = this.parsePercent(T.size, this.zr.getWidth()),
                    this._layout.height = this.parsePercent(T.size, this.zr.getHeight()),
                    this._layout.large = T.large,
                    this._layout.scaling = T.scaling,
                    this._layout.ratioScaling = T.ratioScaling,
                    this._layout.gravity = T.gravity,
                    this._layout.temperature = 1,
                    this._layout.coolDown = T.coolDown,
                    this._layout.preventNodeEdgeOverlap = T.preventOverlap,
                    this._layout.preventNodeOverlap = T.preventOverlap;
                    for (var o = 1 / 0, aa = -1 / 0, Q = 0; y > Q; Q++) {
                        var S = Z.nodes[Q];
                        aa = Math.max(S.layout.size, aa),
                        o = Math.min(S.layout.size, o)
                    }
                    for (var O = aa - o, Q = 0; y > Q; Q++) {
                        var S = Z.nodes[Q];
                        O > 0 ? (S.layout.size = (S.layout.size - o) * (Y - R) / O + R,
                        S.layout.mass = S.layout.size / Y) : (S.layout.size = (Y - R) / 2,
                        S.layout.mass = 0.5)
                    }
                    for (var Q = 0; y > Q; Q++) {
                        var S = Z.nodes[Q];
                        if (this.__nodePositionMap[S.id] !== void 0) {
                            S.layout.position = w.create(),
                            w.copy(S.layout.position, this.__nodePositionMap[S.id])
                        } else {
                            if (S.data.initial !== void 0) {
                                S.layout.position = w.create(),
                                w.copy(S.layout.position, S.data.initial)
                            } else {
                                var N = this._layout.center
                                  , P = Math.min(this._layout.width, this._layout.height);
                                S.layout.position = D(N[0], N[1], 0.8 * P)
                            }
                        }
                        var W = S.shape.style
                          , u = S.layout.size;
                        W.width = W.width || 2 * u,
                        W.height = W.height || 2 * u,
                        W.x = -W.width / 2,
                        W.y = -W.height / 2,
                        w.copy(S.shape.position, S.layout.position)
                    }
                    y = Z.edges.length,
                    aa = -1 / 0;
                    for (var Q = 0; y > Q; Q++) {
                        var X = Z.edges[Q];
                        X.layout.weight > aa && (aa = X.layout.weight)
                    }
                    for (var Q = 0; y > Q; Q++) {
                        var X = Z.edges[Q];
                        X.layout.weight /= aa
                    }
                    this._layout.init(Z, T.useWorker)
                },
                _buildNodeShapes: function(o, m) {
                    var p = this._graph
                      , l = this.query(o, "categories");
                    p.eachNode(function(O) {
                        var i = this._getNodeCategory(o, O.data)
                          , N = [O.data, i, o]
                          , y = this._getNodeQueryTarget(o, O.data)
                          , u = this._getNodeQueryTarget(o, O.data, "emphasis")
                          , e = new v({
                            style: {
                                x: 0,
                                y: 0,
                                color: this.deepQuery(y, "color"),
                                brushType: "both",
                                strokeColor: this.deepQuery(y, "strokeColor") || this.deepQuery(y, "borderColor"),
                                lineWidth: this.deepQuery(y, "lineWidth") || this.deepQuery(y, "borderWidth")
                            },
                            highlightStyle: {
                                color: this.deepQuery(u, "color"),
                                strokeColor: this.deepQuery(u, "strokeColor") || this.deepQuery(u, "borderColor"),
                                lineWidth: this.deepQuery(u, "lineWidth") || this.deepQuery(u, "borderWidth")
                            },
                            clickable: o.clickable,
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase()
                        });
                        e.style.color || (e.style.color = i ? this.getColor(i.name) : this.getColor(O.id)),
                        e.style.iconType = this.deepQuery(N, "symbol"),
                        e.style.width = e.style.height = 2 * (this.deepQuery(N, "symbolSize") || 0),
                        e.style.iconType.match("image") && (e.style.image = e.style.iconType.replace(RegExp("^image:\\/\\/"), ""),
                        e = new q({
                            style: e.style,
                            highlightStyle: e.highlightStyle,
                            clickable: e.clickable,
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase()
                        })),
                        this.deepQuery(N, "itemStyle.normal.label.show") && (e.style.text = null  == O.data.label ? O.id : O.data.label,
                        e.style.textPosition = this.deepQuery(N, "itemStyle.normal.label.position"),
                        e.style.textColor = this.deepQuery(N, "itemStyle.normal.label.textStyle.color"),
                        e.style.textFont = this.getFont(this.deepQuery(N, "itemStyle.normal.label.textStyle") || {})),
                        this.deepQuery(N, "itemStyle.emphasis.label.show") && (e.highlightStyle.textPosition = this.deepQuery(N, "itemStyle.emphasis.label.position"),
                        e.highlightStyle.textColor = this.deepQuery(N, "itemStyle.emphasis.label.textStyle.color"),
                        e.highlightStyle.textFont = this.getFont(this.deepQuery(N, "itemStyle.emphasis.label.textStyle") || {})),
                        this.deepQuery(N, "draggable") && (this.setCalculable(e),
                        e.dragEnableTime = 0,
                        e.draggable = !0,
                        e.ondragstart = this.shapeHandler.ondragstart,
                        e.ondragover = null );
                        var t = "";
                        if (O.category !== void 0) {
                            var i = l[O.category];
                            t = i && i.name || ""
                        }
                        C.pack(e, o, m, O.data, O.rawIndex, O.data.name || "", O.category),
                        this.shapeList.push(e),
                        this.zr.addShape(e),
                        O.shape = e
                    }
                    , this)
                },
                _buildLinkShapes: function(S, Z) {
                    for (var N = this._graph, Q = N.edges.length, X = 0; Q > X; X++) {
                        var p = N.edges[X]
                          , m = p.data
                          , aa = p.node1
                          , P = p.node2
                          , O = N.getEdge(P, aa)
                          , T = this._getEdgeQueryTarget(S, m)
                          , Y = this.deepQuery(T, "type");
                        S.linkSymbol && "none" !== S.linkSymbol && (Y = "line");
                        var W = "line" === Y ? I : F
                          , R = new W({
                            style: {
                                xStart: 0,
                                yStart: 0,
                                xEnd: 0,
                                yEnd: 0
                            },
                            clickable: this.query(S, "clickable"),
                            highlightStyle: {},
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase()
                        });
                        if (O && O.shape && (R.style.offset = 4,
                        O.shape.style.offset = 4),
                        L.merge(R.style, this.query(S, "itemStyle.normal.linkStyle"), !0),
                        L.merge(R.highlightStyle, this.query(S, "itemStyle.emphasis.linkStyle"), !0),
                        m.itemStyle !== void 0 && (m.itemStyle.normal && L.merge(R.style, m.itemStyle.normal, !0),
                        m.itemStyle.emphasis && L.merge(R.highlightStyle, m.itemStyle.emphasis, !0)),
                        R.style.lineWidth = R.style.lineWidth || R.style.width,
                        R.style.strokeColor = R.style.strokeColor || R.style.color,
                        R.highlightStyle.lineWidth = R.highlightStyle.lineWidth || R.highlightStyle.width,
                        R.highlightStyle.strokeColor = R.highlightStyle.strokeColor || R.highlightStyle.color,
                        C.pack(R, S, Z, p.data, null  == p.rawIndex ? X : p.rawIndex, p.data.name || aa.id + " - " + P.id, aa.id, P.id),
                        this.shapeList.push(R),
                        this.zr.addShape(R),
                        p.shape = R,
                        S.linkSymbol && "none" !== S.linkSymbol) {
                            var U = new v({
                                style: {
                                    x: -5,
                                    y: 0,
                                    width: S.linkSymbolSize[0],
                                    height: S.linkSymbolSize[1],
                                    iconType: S.linkSymbol,
                                    brushType: "fill",
                                    color: R.style.strokeColor
                                },
                                highlightStyle: {
                                    brushType: "fill"
                                },
                                position: [0, 0],
                                rotation: 0
                            });
                            R._symbolShape = U,
                            this.shapeList.push(U),
                            this.zr.addShape(U)
                        }
                    }
                },
                _updateLinkShapes: function() {
                    for (var T = w.create(), X = w.create(), y = w.create(), R = w.create(), W = this._graph.edges, u = 0, p = W.length; p > u; u++) {
                        var Y = W[u]
                          , Q = Y.node1.shape
                          , S = Y.node2.shape;
                        w.copy(y, Q.position),
                        w.copy(R, S.position);
                        var O = Y.shape.style;
                        if (w.sub(T, y, R),
                        w.normalize(T, T),
                        O.offset ? (X[0] = T[1],
                        X[1] = -T[0],
                        w.scaleAndAdd(y, y, X, O.offset),
                        w.scaleAndAdd(R, R, X, O.offset)) : "bezier-curve" === Y.shape.type && (O.cpX1 = (y[0] + R[0]) / 2 - (R[1] - y[1]) / 4,
                        O.cpY1 = (y[1] + R[1]) / 2 - (y[0] - R[0]) / 4),
                        O.xStart = y[0],
                        O.yStart = y[1],
                        O.xEnd = R[0],
                        O.yEnd = R[1],
                        Y.shape.modSelf(),
                        Y.shape._symbolShape) {
                            var N = Y.shape._symbolShape;
                            w.copy(N.position, R),
                            w.scaleAndAdd(N.position, N.position, T, S.style.width / 2 + 2);
                            var P = Math.atan2(T[1], T[0]);
                            N.rotation = Math.PI / 2 - P,
                            N.modSelf()
                        }
                    }
                },
                _syncNodePositions: function() {
                    for (var P = this._graph, R = 0; P.nodes.length > R; R++) {
                        var u = P.nodes[R]
                          , N = u.layout.position
                          , Q = u.data
                          , p = u.shape
                          , m = p.fixed || Q.fixX
                          , S = p.fixed || Q.fixY;
                        m === !0 ? m = 1 : isNaN(m) && (m = 0),
                        S === !0 ? S = 1 : isNaN(S) && (S = 0),
                        p.position[0] += (N[0] - p.position[0]) * (1 - m),
                        p.position[1] += (N[1] - p.position[1]) * (1 - S),
                        w.copy(N, p.position);
                        var y = Q.name;
                        if (y) {
                            var O = this.__nodePositionMap[y];
                            O || (O = this.__nodePositionMap[y] = w.create()),
                            w.copy(O, N)
                        }
                        p.modSelf()
                    }
                },
                _step: function() {
                    this._syncNodePositions(),
                    this._updateLinkShapes(),
                    this.zr.refreshNextFrame(),
                    this._layout.temperature > 0.01 ? this._layout.step(this._steps) : this.messageCenter.dispatch(K.EVENT.FORCE_LAYOUT_END, {}, {}, this.myChart)
                },
                refresh: function(l) {
                    if (l && (this.option = l,
                    this.series = this.option.series),
                    this.legend = this.component.legend,
                    this.legend) {
                        this.getColor = function(n) {
                            return this.legend.getColor(n)
                        }
                        ,
                        this.isSelected = function(n) {
                            return this.legend.isSelected(n)
                        }
                    } else {
                        var i = {}
                          , m = 0;
                        this.getColor = function(n) {
                            return i[n] ? i[n] : (i[n] || (i[n] = this.zr.getColor(m++)),
                            i[n])
                        }
                        ,
                        this.isSelected = function() {
                            return !0
                        }
                    }
                    this._init()
                },
                dispose: function() {
                    this.clear(),
                    this.shapeList = null ,
                    this.effectList = null ,
                    this._layout.dispose(),
                    this._layout = null ,
                    this.__nodePositionMap = {}
                },
                getPosition: function() {
                    var i = [];
                    return this._graph.eachNode(function(e) {
                        e.layout && i.push({
                            name: e.data.name,
                            position: Array.prototype.slice.call(e.layout.position)
                        })
                    }
                    ),
                    i
                }
            },
            L.inherits(z, B),
            J("../chart").define("force", z),
            z
        }
        ),
        k("echarts/layout/Force", ["require", "./forceLayoutWorker", "zrender/tool/vector"], function(v) {
            function p() {
                if ("undefined" != typeof Worker && "undefined" != typeof Blob) {
                    try {
                        var n = new Blob([m.getWorkerCode()]);
                        x = window.URL.createObjectURL(n)
                    } catch (i) {
                        x = ""
                    }
                }
                return x
            }
            var x, m = v("./forceLayoutWorker"), l = v("zrender/tool/vector"), w = window.requestAnimationFrame || window.msRequestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function(i) {
                setTimeout(i, 16)
            }
            , u = "undefined" == typeof Float32Array ? Array : Float32Array, q = function(r) {
                x === void 0 && p(),
                r = r || {},
                this.width = r.width || 500,
                this.height = r.height || 500,
                this.center = r.center || [this.width / 2, this.height / 2],
                this.ratioScaling = r.ratioScaling || !1,
                this.scaling = r.scaling || 1,
                this.gravity = r.gravity !== void 0 ? r.gravity : 1,
                this.large = r.large || !1,
                this.preventNodeOverlap = r.preventNodeOverlap || !1,
                this.preventNodeEdgeOverlap = r.preventNodeEdgeOverlap || !1,
                this.maxSpeedIncrease = r.maxSpeedIncrease || 1,
                this.onupdate = r.onupdate || function() {}
                ,
                this.temperature = r.temperature || 1,
                this.coolDown = r.coolDown || 0.99,
                this._layout = null ,
                this._layoutWorker = null ;
                var o = this
                  , n = this._$onupdate;
                this._$onupdate = function(i) {
                    n.call(o, i)
                }
            }
            ;
            return q.prototype.updateConfig = function() {
                var y = this.width
                  , s = this.height
                  , z = Math.min(y, s)
                  , r = {
                    center: this.center,
                    width: this.ratioScaling ? y : z,
                    height: this.ratioScaling ? s : z,
                    scaling: this.scaling || 1,
                    gravity: this.gravity || 1,
                    barnesHutOptimize: this.large,
                    preventNodeOverlap: this.preventNodeOverlap,
                    preventNodeEdgeOverlap: this.preventNodeEdgeOverlap,
                    maxSpeedIncrease: this.maxSpeedIncrease
                };
                if (this._layoutWorker) {
                    this._layoutWorker.postMessage({
                        cmd: "updateConfig",
                        config: r
                    })
                } else {
                    for (var o in r) {
                        this._layout[o] = r[o]
                    }
                }
            }
            ,
            q.prototype.init = function(C, F) {
                if (this._layoutWorker && (this._layoutWorker.terminate(),
                this._layoutWorker = null ),
                x && F) {
                    try {
                        this._layoutWorker || (this._layoutWorker = new Worker(x),
                        this._layoutWorker.onmessage = this._$onupdate),
                        this._layout = null 
                    } catch (E) {
                        this._layoutWorker = null ,
                        this._layout || (this._layout = new m)
                    }
                } else {
                    this._layout || (this._layout = new m)
                }
                this.temperature = 1,
                this.graph = C;
                for (var n = C.nodes.length, G = new u(2 * n), A = new u(n), B = new u(n), y = 0; n > y; y++) {
                    var r = C.nodes[y];
                    G[2 * y] = r.layout.position[0],
                    G[2 * y + 1] = r.layout.position[1],
                    A[y] = r.layout.mass === void 0 ? 1 : r.layout.mass,
                    B[y] = r.layout.size === void 0 ? 1 : r.layout.size,
                    r.layout.__index = y
                }
                n = C.edges.length;
                for (var z = new u(2 * n), D = new u(n), y = 0; n > y; y++) {
                    var i = C.edges[y];
                    z[2 * y] = i.node1.layout.__index,
                    z[2 * y + 1] = i.node2.layout.__index,
                    D[y] = i.layout.weight || 1
                }
                this._layoutWorker ? this._layoutWorker.postMessage({
                    cmd: "init",
                    nodesPosition: G,
                    nodesMass: A,
                    nodesSize: B,
                    edges: z,
                    edgesWeight: D
                }) : (this._layout.initNodes(G, A, B),
                this._layout.initEdges(z, D)),
                this.updateConfig()
            }
            ,
            q.prototype.step = function(z) {
                var r = this.graph.nodes;
                if (this._layoutWorker) {
                    for (var A = new u(2 * r.length), o = 0; r.length > o; o++) {
                        var y = r[o];
                        A[2 * o] = y.layout.position[0],
                        A[2 * o + 1] = y.layout.position[1]
                    }
                    this._layoutWorker.postMessage(A.buffer, [A.buffer]),
                    this._layoutWorker.postMessage({
                        cmd: "update",
                        steps: z,
                        temperature: this.temperature,
                        coolDown: this.coolDown
                    });
                    for (var o = 0; z > o; o++) {
                        this.temperature *= this.coolDown
                    }
                } else {
                    w(this._$onupdate);
                    for (var o = 0; r.length > o; o++) {
                        var y = r[o];
                        l.copy(this._layout.nodes[o].position, y.layout.position)
                    }
                    for (var o = 0; z > o; o++) {
                        this._layout.temperature = this.temperature,
                        this._layout.update(),
                        this.temperature *= this.coolDown
                    }
                }
            }
            ,
            q.prototype._$onupdate = function(s) {
                if (this._layoutWorker) {
                    for (var r = new Float32Array(s.data), y = 0; this.graph.nodes.length > y; y++) {
                        var o = this.graph.nodes[y];
                        o.layout.position[0] = r[2 * y],
                        o.layout.position[1] = r[2 * y + 1]
                    }
                    this.onupdate && this.onupdate()
                } else {
                    if (this._layout) {
                        for (var y = 0; this.graph.nodes.length > y; y++) {
                            var o = this.graph.nodes[y];
                            l.copy(o.layout.position, this._layout.nodes[y].position)
                        }
                        this.onupdate && this.onupdate()
                    }
                }
            }
            ,
            q.prototype.dispose = function() {
                this._layoutWorker && this._layoutWorker.terminate(),
                this._layoutWorker = null ,
                this._layout = null 
            }
            ,
            q
        }
        ),
        k("echarts/layout/forceLayoutWorker", ["require", "zrender/tool/vector"], function f(v) {
            function x() {
                this.subRegions = [],
                this.nSubRegions = 0,
                this.node = null ,
                this.mass = 0,
                this.centerOfMass = null ,
                this.bbox = new q(4),
                this.size = 0
            }
            function p() {
                this.position = i.create(),
                this.force = i.create(),
                this.forcePrev = i.create(),
                this.speed = i.create(),
                this.speedPrev = i.create(),
                this.mass = 1,
                this.inDegree = 0,
                this.outDegree = 0
            }
            function w(n, l) {
                this.node1 = n,
                this.node2 = l,
                this.weight = 1
            }
            function m() {
                this.barnesHutOptimize = !1,
                this.barnesHutTheta = 1.5,
                this.repulsionByDegree = !1,
                this.preventNodeOverlap = !1,
                this.preventNodeEdgeOverlap = !1,
                this.strongGravity = !0,
                this.gravity = 1,
                this.scaling = 1,
                this.edgeWeightInfluence = 1,
                this.center = [0, 0],
                this.width = 500,
                this.height = 500,
                this.maxSpeedIncrease = 1,
                this.nodes = [],
                this.edges = [],
                this.bbox = new q(4),
                this._rootRegion = new x,
                this._rootRegion.centerOfMass = i.create(),
                this._massArr = null ,
                this._k = 0
            }
            var i, y = "undefined" == typeof window && v === void 0;
            i = y ? {
                create: function(o, l) {
                    var r = new Float32Array(2);
                    return r[0] = o || 0,
                    r[1] = l || 0,
                    r
                },
                dist: function(r, o) {
                    var s = o[0] - r[0]
                      , l = o[1] - r[1];
                    return Math.sqrt(s * s + l * l)
                },
                len: function(o) {
                    var l = o[0]
                      , r = o[1];
                    return Math.sqrt(l * l + r * r)
                },
                scaleAndAdd: function(r, o, s, l) {
                    return r[0] = o[0] + s[0] * l,
                    r[1] = o[1] + s[1] * l,
                    r
                },
                scale: function(o, l, r) {
                    return o[0] = l[0] * r,
                    o[1] = l[1] * r,
                    o
                },
                add: function(o, l, r) {
                    return o[0] = l[0] + r[0],
                    o[1] = l[1] + r[1],
                    o
                },
                sub: function(o, l, r) {
                    return o[0] = l[0] - r[0],
                    o[1] = l[1] - r[1],
                    o
                },
                dot: function(n, l) {
                    return n[0] * l[0] + n[1] * l[1]
                },
                normalize: function(s, r) {
                    var z = r[0]
                      , o = r[1]
                      , l = z * z + o * o;
                    return l > 0 && (l = 1 / Math.sqrt(l),
                    s[0] = r[0] * l,
                    s[1] = r[1] * l),
                    s
                },
                negate: function(n, l) {
                    return n[0] = -l[0],
                    n[1] = -l[1],
                    n
                },
                copy: function(n, l) {
                    return n[0] = l[0],
                    n[1] = l[1],
                    n
                },
                set: function(o, l, r) {
                    return o[0] = l,
                    o[1] = r,
                    o
                }
            } : v("zrender/tool/vector");
            var q = "undefined" == typeof Float32Array ? Array : Float32Array;
            if (x.prototype.beforeUpdate = function() {
                for (var l = 0; this.nSubRegions > l; l++) {
                    this.subRegions[l].beforeUpdate()
                }
                this.mass = 0,
                this.centerOfMass && (this.centerOfMass[0] = 0,
                this.centerOfMass[1] = 0),
                this.nSubRegions = 0,
                this.node = null 
            }
            ,
            x.prototype.afterUpdate = function() {
                this.subRegions.length = this.nSubRegions;
                for (var l = 0; this.nSubRegions > l; l++) {
                    this.subRegions[l].afterUpdate()
                }
            }
            ,
            x.prototype.addNode = function(l) {
                if (0 === this.nSubRegions) {
                    if (null  == this.node) {
                        return this.node = l,
                        void 0
                    }
                    this._addNodeToSubRegion(this.node),
                    this.node = null 
                }
                this._addNodeToSubRegion(l),
                this._updateCenterOfMass(l)
            }
            ,
            x.prototype.findSubRegion = function(r, o) {
                for (var s = 0; this.nSubRegions > s; s++) {
                    var l = this.subRegions[s];
                    if (l.contain(r, o)) {
                        return l
                    }
                }
            }
            ,
            x.prototype.contain = function(n, l) {
                return n >= this.bbox[0] && this.bbox[2] >= n && l >= this.bbox[1] && this.bbox[3] >= l
            }
            ,
            x.prototype.setBBox = function(r, o, s, l) {
                this.bbox[0] = r,
                this.bbox[1] = o,
                this.bbox[2] = s,
                this.bbox[3] = l,
                this.size = (s - r + l - o) / 2
            }
            ,
            x.prototype._newSubRegion = function() {
                var l = this.subRegions[this.nSubRegions];
                return l || (l = new x,
                this.subRegions[this.nSubRegions] = l),
                this.nSubRegions++,
                l
            }
            ,
            x.prototype._addNodeToSubRegion = function(E) {
                var G = this.findSubRegion(E.position[0], E.position[1])
                  , B = this.bbox;
                if (!G) {
                    var D = (B[0] + B[2]) / 2
                      , F = (B[1] + B[3]) / 2
                      , A = (B[2] - B[0]) / 2
                      , z = (B[3] - B[1]) / 2
                      , H = E.position[0] >= D ? 1 : 0
                      , C = E.position[1] >= F ? 1 : 0
                      , G = this._newSubRegion();
                    G.setBBox(H * A + B[0], C * z + B[1], (H + 1) * A + B[0], (C + 1) * z + B[1])
                }
                G.addNode(E)
            }
            ,
            x.prototype._updateCenterOfMass = function(o) {
                null  == this.centerOfMass && (this.centerOfMass = i.create());
                var l = this.centerOfMass[0] * this.mass
                  , r = this.centerOfMass[1] * this.mass;
                l += o.position[0] * o.mass,
                r += o.position[1] * o.mass,
                this.mass += o.mass,
                this.centerOfMass[0] = l / this.mass,
                this.centerOfMass[1] = r / this.mass
            }
            ,
            m.prototype.nodeToNodeRepulsionFactor = function(o, l, r) {
                return r * r * o / l
            }
            ,
            m.prototype.edgeToNodeRepulsionFactor = function(o, l, r) {
                return r * o / l
            }
            ,
            m.prototype.attractionFactor = function(o, l, r) {
                return o * l / r
            }
            ,
            m.prototype.initNodes = function(C, z, n) {
                this.temperature = 1;
                var l = C.length / 2;
                this.nodes.length = 0;
                for (var D = n !== void 0, B = 0; l > B; B++) {
                    var A = new p;
                    A.position[0] = C[2 * B],
                    A.position[1] = C[2 * B + 1],
                    A.mass = z[B],
                    D && (A.size = n[B]),
                    this.nodes.push(A)
                }
                this._massArr = z,
                D && (this._sizeArr = n)
            }
            ,
            m.prototype.initEdges = function(G, H) {
                var B = G.length / 2;
                this.edges.length = 0;
                for (var E = H !== void 0, A = 0; B > A; A++) {
                    var z = G[2 * A]
                      , I = G[2 * A + 1]
                      , D = this.nodes[z]
                      , F = this.nodes[I];
                    if (D && F) {
                        D.outDegree++,
                        F.inDegree++;
                        var C = new w(D,F);
                        E && (C.weight = H[A]),
                        this.edges.push(C)
                    }
                }
            }
            ,
            m.prototype.update = function() {
                var s = this.nodes.length;
                if (this.updateBBox(),
                this._k = 0.4 * this.scaling * Math.sqrt(this.width * this.height / s),
                this.barnesHutOptimize) {
                    this._rootRegion.setBBox(this.bbox[0], this.bbox[1], this.bbox[2], this.bbox[3]),
                    this._rootRegion.beforeUpdate();
                    for (var r = 0; s > r; r++) {
                        this._rootRegion.addNode(this.nodes[r])
                    }
                    this._rootRegion.afterUpdate()
                } else {
                    var z = 0
                      , o = this._rootRegion.centerOfMass;
                    i.set(o, 0, 0);
                    for (var r = 0; s > r; r++) {
                        var l = this.nodes[r];
                        z += l.mass,
                        i.scaleAndAdd(o, o, l.position, l.mass)
                    }
                    z > 0 && i.scale(o, o, 1 / z)
                }
                this.updateForce(),
                this.updatePosition()
            }
            ,
            m.prototype.updateForce = function() {
                for (var o = this.nodes.length, l = 0; o > l; l++) {
                    var r = this.nodes[l];
                    i.copy(r.forcePrev, r.force),
                    i.copy(r.speedPrev, r.speed),
                    i.set(r.force, 0, 0)
                }
                this.updateNodeNodeForce(),
                this.gravity > 0 && this.updateGravityForce(),
                this.updateEdgeForce(),
                this.preventNodeEdgeOverlap && this.updateNodeEdgeForce()
            }
            ,
            m.prototype.updatePosition = function() {
                for (var E = this.nodes.length, G = i.create(), z = 0; E > z; z++) {
                    var C = this.nodes[z]
                      , F = C.speed;
                    i.scale(C.force, C.force, 1 / 30);
                    var r = i.len(C.force) + 0.1
                      , H = Math.min(r, 500) / r;
                    i.scale(C.force, C.force, H),
                    i.add(F, F, C.force),
                    i.scale(F, F, this.temperature),
                    i.sub(G, F, C.speedPrev);
                    var B = i.len(G);
                    if (B > 0) {
                        i.scale(G, G, 1 / B);
                        var D = i.len(C.speedPrev);
                        D > 0 && (B = Math.min(B / D, this.maxSpeedIncrease) * D,
                        i.scaleAndAdd(F, C.speedPrev, G, B))
                    }
                    var A = i.len(F)
                      , H = Math.min(A, 100) / (A + 0.1);
                    i.scale(F, F, H),
                    i.add(C.position, C.position, F)
                }
            }
            ,
            m.prototype.updateNodeNodeForce = function() {
                for (var s = this.nodes.length, r = 0; s > r; r++) {
                    var z = this.nodes[r];
                    if (this.barnesHutOptimize) {
                        this.applyRegionToNodeRepulsion(this._rootRegion, z)
                    } else {
                        for (var o = r + 1; s > o; o++) {
                            var l = this.nodes[o];
                            this.applyNodeToNodeRepulsion(z, l, !1)
                        }
                    }
                }
            }
            ,
            m.prototype.updateGravityForce = function() {
                for (var l = 0; this.nodes.length > l; l++) {
                    this.applyNodeGravity(this.nodes[l])
                }
            }
            ,
            m.prototype.updateEdgeForce = function() {
                for (var l = 0; this.edges.length > l; l++) {
                    this.applyEdgeAttraction(this.edges[l])
                }
            }
            ,
            m.prototype.updateNodeEdgeForce = function() {
                for (var n = 0; this.nodes.length > n; n++) {
                    for (var l = 0; this.edges.length > l; l++) {
                        this.applyEdgeToNodeRepulsion(this.edges[l], this.nodes[n])
                    }
                }
            }
            ,
            m.prototype.applyRegionToNodeRepulsion = function() {
                var l = i.create();
                return function(s, A) {
                    if (s.node) {
                        this.applyNodeToNodeRepulsion(s.node, A, !0)
                    } else {
                        if (0 === s.mass && 0 === A.mass) {
                            return
                        }
                        i.sub(l, A.position, s.centerOfMass);
                        var r = l[0] * l[0] + l[1] * l[1];
                        if (r > this.barnesHutTheta * s.size * s.size) {
                            var e = this._k * this._k * (A.mass + s.mass) / (r + 1);
                            i.scaleAndAdd(A.force, A.force, l, 2 * e)
                        } else {
                            for (var z = 0; s.nSubRegions > z; z++) {
                                this.applyRegionToNodeRepulsion(s.subRegions[z], A)
                            }
                        }
                    }
                }
            }
            (),
            m.prototype.applyNodeToNodeRepulsion = function() {
                var l = i.create();
                return function(A, D, z) {
                    if (A !== D && (0 !== A.mass || 0 !== D.mass)) {
                        i.sub(l, A.position, D.position);
                        var r = l[0] * l[0] + l[1] * l[1];
                        if (0 !== r) {
                            var C, B = A.mass + D.mass, e = Math.sqrt(r);
                            i.scale(l, l, 1 / e),
                            this.preventNodeOverlap ? (e = e - A.size - D.size,
                            e > 0 ? C = this.nodeToNodeRepulsionFactor(B, e, this._k) : 0 >= e && (C = 10 * this._k * this._k * B)) : C = this.nodeToNodeRepulsionFactor(B, e, this._k),
                            z || i.scaleAndAdd(A.force, A.force, l, 2 * C),
                            i.scaleAndAdd(D.force, D.force, l, 2 * -C)
                        }
                    }
                }
            }
            (),
            m.prototype.applyEdgeAttraction = function() {
                var l = i.create();
                return function(z) {
                    var C = z.node1
                      , r = z.node2;
                    i.sub(l, C.position, r.position);
                    var e, B = i.len(l);
                    e = 0 === this.edgeWeightInfluence ? 1 : 1 == this.edgeWeightInfluence ? z.weight : Math.pow(z.weight, this.edgeWeightInfluence);
                    var A;
                    if (!(this.preventOverlap && (B = B - C.size - r.size,
                    0 >= B))) {
                        var A = this.attractionFactor(e, B, this._k);
                        i.scaleAndAdd(C.force, C.force, l, -A),
                        i.scaleAndAdd(r.force, r.force, l, A)
                    }
                }
            }
            (),
            m.prototype.applyNodeGravity = function() {
                var l = i.create();
                return function(e) {
                    i.sub(l, this.center, e.position),
                    this.width > this.height ? l[1] *= this.width / this.height : l[0] *= this.height / this.width;
                    var o = i.len(l) / 100;
                    this.strongGravity ? i.scaleAndAdd(e.force, e.force, l, o * this.gravity * e.mass) : i.scaleAndAdd(e.force, e.force, l, this.gravity * e.mass / (o + 1))
                }
            }
            (),
            m.prototype.applyEdgeToNodeRepulsion = function() {
                var o = i.create()
                  , l = i.create()
                  , r = i.create();
                return function(A, z) {
                    var D = A.node1
                      , C = A.node2;
                    if (D !== z && C !== z) {
                        i.sub(o, C.position, D.position),
                        i.sub(l, z.position, D.position);
                        var t = i.len(o);
                        i.scale(o, o, 1 / t);
                        var B = i.dot(o, l);
                        if (!(0 > B || B > t)) {
                            i.scaleAndAdd(r, D.position, o, B);
                            var e = i.dist(r, z.position) - z.size
                              , n = this.edgeToNodeRepulsionFactor(z.mass, Math.max(e, 0.1), 100);
                            i.sub(o, z.position, r),
                            i.normalize(o, o),
                            i.scaleAndAdd(z.force, z.force, o, n),
                            i.scaleAndAdd(D.force, D.force, o, -n),
                            i.scaleAndAdd(C.force, C.force, o, -n)
                        }
                    }
                }
            }
            (),
            m.prototype.updateBBox = function() {
                for (var z = 1 / 0, s = 1 / 0, B = -1 / 0, r = -1 / 0, l = 0; this.nodes.length > l; l++) {
                    var A = this.nodes[l].position;
                    z = Math.min(z, A[0]),
                    s = Math.min(s, A[1]),
                    B = Math.max(B, A[0]),
                    r = Math.max(r, A[1])
                }
                this.bbox[0] = z,
                this.bbox[1] = s,
                this.bbox[2] = B,
                this.bbox[3] = r
            }
            ,
            m.getWorkerCode = function() {
                var l = "" + f;
                return l.slice(l.indexOf("{") + 1, l.lastIndexOf("return"))
            }
            ,
            y) {
                var u = null ;
                self.onmessage = function(E) {
                    if (E.data instanceof ArrayBuffer) {
                        if (!u) {
                            return
                        }
                        for (var B = new Float32Array(E.data), F = B.length / 2, A = 0; F > A; A++) {
                            var z = u.nodes[A];
                            z.position[0] = B[2 * A],
                            z.position[1] = B[2 * A + 1]
                        }
                    } else {
                        switch (E.data.cmd) {
                        case "init":
                            u || (u = new m),
                            u.initNodes(E.data.nodesPosition, E.data.nodesMass, E.data.nodesSize),
                            u.initEdges(E.data.edges, E.data.edgesWeight);
                            break;
                        case "updateConfig":
                            if (u) {
                                for (var D in E.data.config) {
                                    u[D] = E.data.config[D]
                                }
                            }
                            break;
                        case "update":
                            var C = E.data.steps;
                            if (u) {
                                var F = u.nodes.length
                                  , B = new Float32Array(2 * F);
                                u.temperature = E.data.temperature;
                                for (var A = 0; C > A; A++) {
                                    u.update(),
                                    u.temperature *= E.data.coolDown
                                }
                                for (var A = 0; F > A; A++) {
                                    var z = u.nodes[A];
                                    B[2 * A] = z.position[0],
                                    B[2 * A + 1] = z.position[1]
                                }
                                self.postMessage(B.buffer, [B.buffer])
                            } else {
                                var o = new Float32Array;
                                self.postMessage(o.buffer, [o.buffer])
                            }
                        }
                    }
                }
            }
            return m
        }
        ),
        k("echarts/chart/map", ["require", "./base", "zrender/shape/Text", "zrender/shape/Path", "zrender/shape/Circle", "zrender/shape/Rectangle", "zrender/shape/Line", "zrender/shape/Polygon", "zrender/shape/Ellipse", "../component/dataRange", "../component/roamController", "../config", "../util/ecData", "zrender/tool/util", "zrender/config", "zrender/tool/event", "../util/mapData/params", "../util/mapData/textFixed", "../util/mapData/geoCoord", "../util/projection/svg", "../util/projection/normal", "../chart"], function(J) {
            function z(s, n, m, l, u) {
                E.call(this, s, n, m, l, u);
                var p = this;
                p._onmousewheel = function(i) {
                    return p.__onmousewheel(i)
                }
                ,
                p._onmousedown = function(i) {
                    return p.__onmousedown(i)
                }
                ,
                p._onmousemove = function(i) {
                    return p.__onmousemove(i)
                }
                ,
                p._onmouseup = function(i) {
                    return p.__onmouseup(i)
                }
                ,
                p._onroamcontroller = function(i) {
                    return p.__onroamcontroller(i)
                }
                ,
                p._ondrhoverlink = function(i) {
                    return p.__ondrhoverlink(i)
                }
                ,
                this._isAlive = !0,
                this._selectedMode = {},
                this._activeMapType = {},
                this._clickable = {},
                this._hoverable = {},
                this._showLegendSymbol = {},
                this._selected = {},
                this._mapTypeMap = {},
                this._mapDataMap = {},
                this._nameMap = {},
                this._specialArea = {},
                this._refreshDelayTicket,
                this._mapDataRequireCounter,
                this._markAnimation = !1,
                this._hoverLinkMap = {},
                this._roamMap = {},
                this._scaleLimitMap = {},
                this._mx,
                this._my,
                this._mousedown,
                this._justMove,
                this._curMapType,
                this.refresh(l),
                this.zr.on(K.EVENT.MOUSEWHEEL, this._onmousewheel),
                this.zr.on(K.EVENT.MOUSEDOWN, this._onmousedown),
                n.bind(F.EVENT.ROAMCONTROLLER, this._onroamcontroller),
                n.bind(F.EVENT.DATA_RANGE_HOVERLINK, this._ondrhoverlink)
            }
            var E = J("./base")
              , H = J("zrender/shape/Text")
              , M = J("zrender/shape/Path")
              , D = J("zrender/shape/Circle")
              , B = J("zrender/shape/Rectangle")
              , A = J("zrender/shape/Line")
              , G = J("zrender/shape/Polygon")
              , I = J("zrender/shape/Ellipse");
            J("../component/dataRange"),
            J("../component/roamController");
            var F = J("../config");
            F.map = {
                zlevel: 0,
                z: 2,
                mapType: "china",
                mapValuePrecision: 0,
                showLegendSymbol: !0,
                dataRangeHoverLink: !0,
                hoverable: !0,
                clickable: !0,
                itemStyle: {
                    normal: {
                        borderColor: "rgba(0,0,0,0)",
                        borderWidth: 1,
                        areaStyle: {
                            color: "#ccc"
                        },
                        label: {
                            show: !1,
                            textStyle: {
                                color: "rgb(139,69,19)"
                            }
                        }
                    },
                    emphasis: {
                        borderColor: "rgba(0,0,0,0)",
                        borderWidth: 1,
                        areaStyle: {
                            color: "rgba(255,215,0,0.8)"
                        },
                        label: {
                            show: !1,
                            textStyle: {
                                color: "rgb(100,0,0)"
                            }
                        }
                    }
                }
            };
            var q = J("../util/ecData")
              , v = J("zrender/tool/util")
              , K = J("zrender/config")
              , C = J("zrender/tool/event")
              , L = J("../util/mapData/params").params
              , x = J("../util/mapData/textFixed")
              , w = J("../util/mapData/geoCoord");
            return z.prototype = {
                type: F.CHART_TYPE_MAP,
                _buildShape: function() {
                    var U = this.series;
                    this.selectedMap = {},
                    this._activeMapType = {};
                    for (var Z, N, Q, Y, y = this.component.legend, m = {}, aa = {}, P = {}, R = {}, O = 0, W = U.length; W > O; O++) {
                        if (U[O].type == F.CHART_TYPE_MAP && (U[O] = this.reformOption(U[O]),
                        N = U[O].mapType,
                        aa[N] = aa[N] || {},
                        aa[N][O] = !0,
                        P[N] = P[N] || U[O].mapValuePrecision,
                        this._scaleLimitMap[N] = this._scaleLimitMap[N] || {},
                        U[O].scaleLimit && v.merge(this._scaleLimitMap[N], U[O].scaleLimit, !0),
                        this._roamMap[N] = U[O].roam || this._roamMap[N],
                        this._hoverLinkMap[N] = U[O].dataRangeHoverLink || this._hoverLinkMap[N],
                        this._nameMap[N] = this._nameMap[N] || {},
                        U[O].nameMap && v.merge(this._nameMap[N], U[O].nameMap, !0),
                        this._activeMapType[N] = !0,
                        U[O].textFixed && v.merge(x, U[O].textFixed, !0),
                        U[O].geoCoord && v.merge(w, U[O].geoCoord, !0),
                        this._selectedMode[N] = this._selectedMode[N] || U[O].selectedMode,
                        (null  == this._hoverable[N] || this._hoverable[N]) && (this._hoverable[N] = U[O].hoverable),
                        (null  == this._clickable[N] || this._clickable[N]) && (this._clickable[N] = U[O].clickable),
                        (null  == this._showLegendSymbol[N] || this._showLegendSymbol[N]) && (this._showLegendSymbol[N] = U[O].showLegendSymbol),
                        R[N] = R[N] || U[O].mapValueCalculation,
                        Z = U[O].name,
                        this.selectedMap[Z] = y ? y.isSelected(Z) : !0,
                        this.selectedMap[Z])) {
                            m[N] = m[N] || {},
                            Q = U[O].data;
                            for (var u = 0, S = Q.length; S > u; u++) {
                                Y = this._nameChange(N, Q[u].name),
                                m[N][Y] = m[N][Y] || {
                                    seriesIndex: []
                                };
                                for (var X in Q[u]) {
                                    "value" != X ? m[N][Y][X] = Q[u][X] : isNaN(Q[u].value) || (null  == m[N][Y].value && (m[N][Y].value = 0),
                                    m[N][Y].value += +Q[u].value)
                                }
                                m[N][Y].seriesIndex.push(O)
                            }
                        }
                    }
                    this._mapDataRequireCounter = 0;
                    for (var T in m) {
                        this._mapDataRequireCounter++
                    }
                    this._clearSelected(),
                    0 === this._mapDataRequireCounter && (this.clear(),
                    this.zr && this.zr.delShape(this.lastShapeList),
                    this.lastShapeList = []);
                    for (var T in m) {
                        if (R[T] && "average" == R[T]) {
                            for (var S in m[T]) {
                                m[T][S].value = (m[T][S].value / m[T][S].seriesIndex.length).toFixed(P[T]) - 0
                            }
                        }
                        this._mapDataMap[T] = this._mapDataMap[T] || {},
                        this._mapDataMap[T].mapData ? this._mapDataCallback(T, m[T], aa[T])(this._mapDataMap[T].mapData) : L[T.replace(/\|.*/, "")].getGeoJson && (this._specialArea[T] = L[T.replace(/\|.*/, "")].specialArea || this._specialArea[T],
                        L[T.replace(/\|.*/, "")].getGeoJson(this._mapDataCallback(T, m[T], aa[T])))
                    }
                },
                _mapDataCallback: function(m, o, l) {
                    var e = this;
                    return function(i) {
                        e._isAlive && null  != e._activeMapType[m] && (-1 != m.indexOf("|") && (i = e._getSubMapData(m, i)),
                        e._mapDataMap[m].mapData = i,
                        i.firstChild ? (e._mapDataMap[m].rate = 1,
                        e._mapDataMap[m].projection = J("../util/projection/svg")) : (e._mapDataMap[m].rate = 0.75,
                        e._mapDataMap[m].projection = J("../util/projection/normal")),
                        e._buildMap(m, e._getProjectionData(m, i, l), o, l),
                        e._buildMark(m, l),
                        0 >= --e._mapDataRequireCounter && (e.addShapeList(),
                        e.zr.refreshNextFrame()))
                    }
                },
                _clearSelected: function() {
                    for (var i in this._selected) {
                        this._activeMapType[this._mapTypeMap[i]] || (delete this._selected[i],
                        delete this._mapTypeMap[i])
                    }
                },
                _getSubMapData: function(r, p) {
                    for (var u = r.replace(/^.*\|/, ""), m = p.features, l = 0, s = m.length; s > l; l++) {
                        if (m[l].properties && m[l].properties.name == u) {
                            m = m[l],
                            "United States of America" == u && m.geometry.coordinates.length > 1 && (m = {
                                geometry: {
                                    coordinates: m.geometry.coordinates.slice(5, 6),
                                    type: m.geometry.type
                                },
                                id: m.id,
                                properties: m.properties,
                                type: m.type
                            });
                            break
                        }
                    }
                    return {
                        type: "FeatureCollection",
                        features: [m]
                    }
                },
                _getProjectionData: function(W, aa, O) {
                    var S, Z = this._mapDataMap[W].projection, N = [], u = this._mapDataMap[W].bbox || Z.getBbox(aa, this._specialArea[W]);
                    S = this._mapDataMap[W].hasRoam ? this._mapDataMap[W].transform : this._getTransform(u, O, this._mapDataMap[W].rate);
                    var ab, R = this._mapDataMap[W].lastTransform || {
                        scale: {}
                    };
                    S.left != R.left || S.top != R.top || S.scale.x != R.scale.x || S.scale.y != R.scale.y ? (ab = Z.geoJson2Path(aa, S, this._specialArea[W]),
                    R = v.clone(S)) : (S = this._mapDataMap[W].transform,
                    ab = this._mapDataMap[W].pathArray),
                    this._mapDataMap[W].bbox = u,
                    this._mapDataMap[W].transform = S,
                    this._mapDataMap[W].lastTransform = R,
                    this._mapDataMap[W].pathArray = ab;
                    for (var T = [S.left, S.top], Q = 0, P = ab.length; P > Q; Q++) {
                        N.push(this._getSingleProvince(W, ab[Q], T))
                    }
                    if (this._specialArea[W]) {
                        for (var X in this._specialArea[W]) {
                            N.push(this._getSpecialProjectionData(W, aa, X, this._specialArea[W][X], T))
                        }
                    }
                    if ("china" == W) {
                        var y = this.geo2pos(W, w["南海诸岛"] || L["南海诸岛"].textCoord)
                          , U = S.scale.x / 10.5
                          , Y = [32 * U + y[0], 83 * U + y[1]];
                        x["南海诸岛"] && (Y[0] += x["南海诸岛"][0],
                        Y[1] += x["南海诸岛"][1]),
                        N.push({
                            name: this._nameChange(W, "南海诸岛"),
                            path: L["南海诸岛"].getPath(y, U),
                            position: T,
                            textX: Y[0],
                            textY: Y[1]
                        })
                    }
                    return N
                },
                _getSpecialProjectionData: function(ad, P, W, ab, O) {
                    P = this._getSubMapData("x|" + W, P);
                    var e = J("../util/projection/normal")
                      , ae = e.getBbox(P)
                      , T = this.geo2pos(ad, [ab.left, ab.top])
                      , X = this.geo2pos(ad, [ab.left + ab.width, ab.top + ab.height])
                      , R = Math.abs(X[0] - T[0])
                      , Q = Math.abs(X[1] - T[1])
                      , S = ae.width
                      , Y = ae.height
                      , N = R / 0.75 / S
                      , Z = Q / Y;
                    N > Z ? (N = 0.75 * Z,
                    R = S * N) : (Z = N,
                    N = 0.75 * Z,
                    Q = Y * Z);
                    var ac = {
                        OffsetLeft: T[0],
                        OffsetTop: T[1],
                        scale: {
                            x: N,
                            y: Z
                        }
                    }
                      , aa = e.geoJson2Path(P, ac);
                    return this._getSingleProvince(ad, aa[0], O)
                },
                _getSingleProvince: function(u, p, N) {
                    var m, l = p.properties.name, y = x[l] || [0, 0];
                    if (w[l]) {
                        m = this.geo2pos(u, w[l])
                    } else {
                        if (p.cp) {
                            m = [p.cp[0] + y[0], p.cp[1] + y[1]]
                        } else {
                            var s = this._mapDataMap[u].bbox;
                            m = this.geo2pos(u, [s.left + s.width / 2, s.top + s.height / 2]),
                            m[0] += y[0],
                            m[1] += y[1]
                        }
                    }
                    return p.name = this._nameChange(u, l),
                    p.position = N,
                    p.textX = m[0],
                    p.textY = m[1],
                    p
                },
                _getTransform: function(ae, R, Y) {
                    var ab, ah, X, T, S, aa, ac, Z = this.series, N = this.zr.getWidth(), O = this.zr.getHeight(), af = Math.round(0.02 * Math.min(N, O));
                    for (var W in R) {
                        ab = Z[W].mapLocation || {},
                        X = ab.x || X,
                        S = ab.y || S,
                        aa = ab.width || aa,
                        ac = ab.height || ac
                    }
                    ah = this.parsePercent(X, N),
                    ah = isNaN(ah) ? af : ah,
                    T = this.parsePercent(S, O),
                    T = isNaN(T) ? af : T,
                    aa = null  == aa ? N - ah - 2 * af : this.parsePercent(aa, N),
                    ac = null  == ac ? O - T - 2 * af : this.parsePercent(ac, O);
                    var ag = ae.width
                      , Q = ae.height
                      , P = aa / Y / ag
                      , ad = ac / Q;
                    if (P > ad ? (P = ad * Y,
                    aa = ag * P) : (ad = P,
                    P = ad * Y,
                    ac = Q * ad),
                    isNaN(X)) {
                        switch (X = X || "center",
                        X + "") {
                        case "center":
                            ah = Math.floor((N - aa) / 2);
                            break;
                        case "right":
                            ah = N - aa
                        }
                    }
                    if (isNaN(S)) {
                        switch (S = S || "center",
                        S + "") {
                        case "center":
                            T = Math.floor((O - ac) / 2);
                            break;
                        case "bottom":
                            T = O - ac
                        }
                    }
                    return {
                        left: ah,
                        top: T,
                        width: aa,
                        height: ac,
                        baseScale: 1,
                        scale: {
                            x: P,
                            y: ad
                        }
                    }
                },
                _buildMap: function(ab, S, V, ac) {
                    for (var U, ad, R, s, Z, ae, aa, Y, O, af, m, l = this.series, i = this.component.legend, o = this.component.dataRange, Q = 0, P = S.length; P > Q; Q++) {
                        if (Y = v.clone(S[Q]),
                        O = {
                            name: Y.name,
                            path: Y.path,
                            position: v.clone(Y.position)
                        },
                        ad = Y.name,
                        R = V[ad]) {
                            Z = [R],
                            U = "";
                            for (var N = 0, r = R.seriesIndex.length; r > N; N++) {
                                Z.push(l[R.seriesIndex[N]]),
                                U += l[R.seriesIndex[N]].name + " ",
                                i && this._showLegendSymbol[ab] && i.hasColor(l[R.seriesIndex[N]].name) && this.shapeList.push(new D({
                                    zlevel: this.getZlevelBase(),
                                    z: this.getZBase() + 1,
                                    position: v.clone(Y.position),
                                    _mapType: ab,
                                    style: {
                                        x: Y.textX + 3 + 7 * N,
                                        y: Y.textY - 10,
                                        r: 3,
                                        color: i.getColor(l[R.seriesIndex[N]].name)
                                    },
                                    hoverable: !1
                                }))
                            }
                            s = R.value
                        } else {
                            R = "-",
                            U = "",
                            Z = [];
                            for (var T in ac) {
                                Z.push(l[T])
                            }
                            s = "-"
                        }
                        switch (this.ecTheme.map && Z.push(this.ecTheme.map),
                        Z.push(F),
                        ae = o && !isNaN(s) ? o.getColor(s) : null ,
                        Y.color = Y.color || ae || this.getItemStyleColor(this.deepQuery(Z, "itemStyle.normal.color"), R.seriesIndex, -1, R) || this.deepQuery(Z, "itemStyle.normal.areaStyle.color"),
                        Y.strokeColor = Y.strokeColor || this.deepQuery(Z, "itemStyle.normal.borderColor"),
                        Y.lineWidth = Y.lineWidth || this.deepQuery(Z, "itemStyle.normal.borderWidth"),
                        O.color = this.getItemStyleColor(this.deepQuery(Z, "itemStyle.emphasis.color"), R.seriesIndex, -1, R) || this.deepQuery(Z, "itemStyle.emphasis.areaStyle.color") || Y.color,
                        O.strokeColor = this.deepQuery(Z, "itemStyle.emphasis.borderColor") || Y.strokeColor,
                        O.lineWidth = this.deepQuery(Z, "itemStyle.emphasis.borderWidth") || Y.lineWidth,
                        Y.brushType = O.brushType = Y.brushType || "both",
                        Y.lineJoin = O.lineJoin = "round",
                        Y._name = O._name = ad,
                        aa = this.deepQuery(Z, "itemStyle.normal.label.textStyle"),
                        m = {
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase() + 1,
                            position: v.clone(Y.position),
                            _mapType: ab,
                            _geo: this.pos2geo(ab, [Y.textX, Y.textY]),
                            style: {
                                brushType: "fill",
                                x: Y.textX,
                                y: Y.textY,
                                text: this.getLabelText(ad, s, Z, "normal"),
                                _name: ad,
                                textAlign: "center",
                                color: this.deepQuery(Z, "itemStyle.normal.label.show") ? this.deepQuery(Z, "itemStyle.normal.label.textStyle.color") : "rgba(0,0,0,0)",
                                textFont: this.getFont(aa)
                            }
                        },
                        m._style = v.clone(m.style),
                        m.highlightStyle = v.clone(m.style),
                        this.deepQuery(Z, "itemStyle.emphasis.label.show") ? (m.highlightStyle.text = this.getLabelText(ad, s, Z, "emphasis"),
                        m.highlightStyle.color = this.deepQuery(Z, "itemStyle.emphasis.label.textStyle.color") || m.style.color,
                        aa = this.deepQuery(Z, "itemStyle.emphasis.label.textStyle") || aa,
                        m.highlightStyle.textFont = this.getFont(aa)) : m.highlightStyle.color = "rgba(0,0,0,0)",
                        af = {
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase(),
                            position: v.clone(Y.position),
                            style: Y,
                            highlightStyle: O,
                            _style: v.clone(Y),
                            _mapType: ab
                        },
                        null  != Y.scale && (af.scale = v.clone(Y.scale)),
                        m = new H(m),
                        af.style.shapeType) {
                        case "rectangle":
                            af = new B(af);
                            break;
                        case "line":
                            af = new A(af);
                            break;
                        case "circle":
                            af = new D(af);
                            break;
                        case "polygon":
                            af = new G(af);
                            break;
                        case "ellipse":
                            af = new I(af);
                            break;
                        default:
                            af = new M(af),
                            af.buildPathArray && (af.style.pathArray = af.buildPathArray(af.style.path))
                        }
                        (this._selectedMode[ab] && this._selected[ad] || R.selected && this._selected[ad] !== !1) && (m.style = m.highlightStyle,
                        af.style = af.highlightStyle),
                        m.clickable = af.clickable = this._clickable[ab] && (null  == R.clickable || R.clickable),
                        this._selectedMode[ab] && (this._selected[ad] = null  != this._selected[ad] ? this._selected[ad] : R.selected,
                        this._mapTypeMap[ad] = ab,
                        (null  == R.selectable || R.selectable) && (af.clickable = m.clickable = !0,
                        af.onclick = m.onclick = this.shapeHandler.onclick)),
                        this._hoverable[ab] && (null  == R.hoverable || R.hoverable) ? (m.hoverable = af.hoverable = !0,
                        af.hoverConnect = m.id,
                        m.hoverConnect = af.id) : m.hoverable = af.hoverable = !1,
                        q.pack(m, {
                            name: U,
                            tooltip: this.deepQuery(Z, "tooltip")
                        }, 0, R, 0, ad),
                        this.shapeList.push(m),
                        q.pack(af, {
                            name: U,
                            tooltip: this.deepQuery(Z, "tooltip")
                        }, 0, R, 0, ad),
                        this.shapeList.push(af)
                    }
                },
                _buildMark: function(o, m) {
                    this._seriesIndexToMapType = this._seriesIndexToMapType || {},
                    this.markAttachStyle = this.markAttachStyle || {};
                    var p = [this._mapDataMap[o].transform.left, this._mapDataMap[o].transform.top];
                    "none" == o && (p = [0, 0]);
                    for (var l in m) {
                        this._seriesIndexToMapType[l] = o,
                        this.markAttachStyle[l] = {
                            position: p,
                            _mapType: o
                        },
                        this.buildMark(l)
                    }
                },
                getMarkCoord: function(l, i) {
                    return i.geoCoord || w[i.name] ? this.geo2pos(this._seriesIndexToMapType[l], i.geoCoord || w[i.name]) : [0, 0]
                },
                getMarkGeo: function(i) {
                    return i.geoCoord || w[i.name]
                },
                _nameChange: function(l, i) {
                    return this._nameMap[l][i] || i
                },
                getLabelText: function(p, o, r, m) {
                    var l = this.deepQuery(r, "itemStyle." + m + ".label.formatter");
                    return l ? "function" == typeof l ? l.call(this.myChart, p, o) : "string" == typeof l ? (l = l.replace("{a}", "{a0}").replace("{b}", "{b0}"),
                    l = l.replace("{a0}", p).replace("{b0}", o)) : void 0 : p
                },
                _findMapTypeByPos: function(N, p) {
                    var P, m, l, O, y;
                    for (var u in this._mapDataMap) {
                        if (P = this._mapDataMap[u].transform,
                        P && this._roamMap[u] && this._activeMapType[u] && (m = P.left,
                        l = P.top,
                        O = P.width,
                        y = P.height,
                        N >= m && m + O >= N && p >= l && l + y >= p)) {
                            return u
                        }
                    }
                },
                __onmousewheel: function(ai) {
                    function T(s, r) {
                        for (var u = 0; s.pointList.length > u; u++) {
                            var o = s.pointList[u];
                            o[0] *= r,
                            o[1] *= r
                        }
                        var l = s.controlPointList;
                        if (l) {
                            for (var u = 0; l.length > u; u++) {
                                var o = l[u];
                                o[0] *= r,
                                o[1] *= r
                            }
                        }
                    }
                    function ab(l, i) {
                        l.xStart *= i,
                        l.yStart *= i,
                        l.xEnd *= i,
                        l.yEnd *= i,
                        null  != l.cpX1 && (l.cpX1 *= i,
                        l.cpY1 *= i)
                    }
                    if (!(0 >= this.shapeList.length)) {
                        for (var ae = 0, am = this.shapeList.length; am > ae; ae++) {
                            var aa = this.shapeList[ae];
                            if (aa.__animating) {
                                return
                            }
                        }
                        var Z, Y, ac = ai.event, af = C.getX(ac), N = C.getY(ac), O = C.getDelta(ac), aj = ai.mapTypeControl;
                        aj || (aj = {},
                        Y = this._findMapTypeByPos(af, N),
                        Y && this._roamMap[Y] && "move" != this._roamMap[Y] && (aj[Y] = !0));
                        var ak = !1;
                        for (Y in aj) {
                            if (aj[Y]) {
                                ak = !0;
                                var S = this._mapDataMap[Y].transform
                                  , Q = S.left
                                  , ag = S.top
                                  , al = S.width
                                  , ah = S.height
                                  , ad = this.pos2geo(Y, [af - Q, N - ag]);
                                if (O > 0) {
                                    if (Z = 1.2,
                                    null  != this._scaleLimitMap[Y].max && S.baseScale >= this._scaleLimitMap[Y].max) {
                                        continue
                                    }
                                } else {
                                    if (Z = 1 / 1.2,
                                    null  != this._scaleLimitMap[Y].min && S.baseScale <= this._scaleLimitMap[Y].min) {
                                        continue
                                    }
                                }
                                S.baseScale *= Z,
                                S.scale.x *= Z,
                                S.scale.y *= Z,
                                S.width = al * Z,
                                S.height = ah * Z,
                                this._mapDataMap[Y].hasRoam = !0,
                                this._mapDataMap[Y].transform = S,
                                ad = this.geo2pos(Y, ad),
                                S.left -= ad[0] - (af - Q),
                                S.top -= ad[1] - (N - ag),
                                this._mapDataMap[Y].transform = S,
                                this.clearEffectShape(!0);
                                for (var ae = 0, am = this.shapeList.length; am > ae; ae++) {
                                    var aa = this.shapeList[ae];
                                    if (aa._mapType == Y) {
                                        var R = aa.type
                                          , an = aa.style;
                                        switch (aa.position[0] = S.left,
                                        aa.position[1] = S.top,
                                        R) {
                                        case "path":
                                        case "symbol":
                                        case "circle":
                                        case "rectangle":
                                        case "polygon":
                                        case "line":
                                        case "ellipse":
                                            aa.scale[0] *= Z,
                                            aa.scale[1] *= Z;
                                            break;
                                        case "mark-line":
                                            ab(an, Z);
                                            break;
                                        case "polyline":
                                            T(an, Z);
                                            break;
                                        case "shape-bundle":
                                            for (var P = 0; an.shapeList.length > P; P++) {
                                                var p = an.shapeList[P];
                                                "mark-line" == p.type ? ab(p.style, Z) : "polyline" == p.type && T(p.style, Z)
                                            }
                                            break;
                                        case "icon":
                                        case "image":
                                            ad = this.geo2pos(Y, aa._geo),
                                            an.x = an._x = ad[0] - an.width / 2,
                                            an.y = an._y = ad[1] - an.height / 2;
                                            break;
                                        default:
                                            ad = this.geo2pos(Y, aa._geo),
                                            an.x = ad[0],
                                            an.y = ad[1],
                                            "text" == R && (aa._style.x = aa.highlightStyle.x = ad[0],
                                            aa._style.y = aa.highlightStyle.y = ad[1])
                                        }
                                        this.zr.modShape(aa.id)
                                    }
                                }
                            }
                        }
                        if (ak) {
                            C.stop(ac),
                            this.zr.refreshNextFrame();
                            var m = this;
                            clearTimeout(this._refreshDelayTicket),
                            this._refreshDelayTicket = setTimeout(function() {
                                m && m.shapeList && m.animationEffect()
                            }
                            , 100),
                            this.messageCenter.dispatch(F.EVENT.MAP_ROAM, ai.event, {
                                type: "scale"
                            }, this.myChart)
                        }
                    }
                },
                __onmousedown: function(u) {
                    if (!(0 >= this.shapeList.length)) {
                        var p = u.target;
                        if (!p || !p.draggable) {
                            var N = u.event
                              , m = C.getX(N)
                              , l = C.getY(N)
                              , y = this._findMapTypeByPos(m, l);
                            if (y && this._roamMap[y] && "scale" != this._roamMap[y]) {
                                this._mousedown = !0,
                                this._mx = m,
                                this._my = l,
                                this._curMapType = y,
                                this.zr.on(K.EVENT.MOUSEUP, this._onmouseup);
                                var s = this;
                                setTimeout(function() {
                                    s.zr.on(K.EVENT.MOUSEMOVE, s._onmousemove)
                                }
                                , 100)
                            }
                        }
                    }
                },
                __onmousemove: function(u) {
                    if (this._mousedown && this._isAlive) {
                        var p = u.event
                          , N = C.getX(p)
                          , m = C.getY(p)
                          , l = this._mapDataMap[this._curMapType].transform;
                        l.hasRoam = !0,
                        l.left -= this._mx - N,
                        l.top -= this._my - m,
                        this._mx = N,
                        this._my = m,
                        this._mapDataMap[this._curMapType].transform = l;
                        for (var y = 0, s = this.shapeList.length; s > y; y++) {
                            this.shapeList[y]._mapType == this._curMapType && (this.shapeList[y].position[0] = l.left,
                            this.shapeList[y].position[1] = l.top,
                            this.zr.modShape(this.shapeList[y].id))
                        }
                        this.messageCenter.dispatch(F.EVENT.MAP_ROAM, u.event, {
                            type: "move"
                        }, this.myChart),
                        this.clearEffectShape(!0),
                        this.zr.refreshNextFrame(),
                        this._justMove = !0,
                        C.stop(p)
                    }
                },
                __onmouseup: function(l) {
                    var i = l.event;
                    this._mx = C.getX(i),
                    this._my = C.getY(i),
                    this._mousedown = !1;
                    var m = this;
                    setTimeout(function() {
                        m._justMove && m.animationEffect(),
                        m._justMove = !1,
                        m.zr.un(K.EVENT.MOUSEMOVE, m._onmousemove),
                        m.zr.un(K.EVENT.MOUSEUP, m._onmouseup)
                    }
                    , 120)
                },
                __onroamcontroller: function(Q) {
                    var S = Q.event;
                    S.zrenderX = this.zr.getWidth() / 2,
                    S.zrenderY = this.zr.getHeight() / 2;
                    var u = Q.mapTypeControl
                      , O = 0
                      , R = 0
                      , p = Q.step;
                    switch (Q.roamType) {
                    case "scaleUp":
                        return S.zrenderDelta = 1,
                        this.__onmousewheel({
                            event: S,
                            mapTypeControl: u
                        }),
                        void 0;
                    case "scaleDown":
                        return S.zrenderDelta = -1,
                        this.__onmousewheel({
                            event: S,
                            mapTypeControl: u
                        }),
                        void 0;
                    case "up":
                        O = -p;
                        break;
                    case "down":
                        O = p;
                        break;
                    case "left":
                        R = -p;
                        break;
                    case "right":
                        R = p
                    }
                    var m, T;
                    for (T in u) {
                        this._mapDataMap[T] && this._activeMapType[T] && (m = this._mapDataMap[T].transform,
                        m.hasRoam = !0,
                        m.left -= R,
                        m.top -= O,
                        this._mapDataMap[T].transform = m)
                    }
                    for (var N = 0, P = this.shapeList.length; P > N; N++) {
                        T = this.shapeList[N]._mapType,
                        u[T] && this._activeMapType[T] && (m = this._mapDataMap[T].transform,
                        this.shapeList[N].position[0] = m.left,
                        this.shapeList[N].position[1] = m.top,
                        this.zr.modShape(this.shapeList[N].id))
                    }
                    this.messageCenter.dispatch(F.EVENT.MAP_ROAM, Q.event, {
                        type: "move"
                    }, this.myChart),
                    this.clearEffectShape(!0),
                    this.zr.refreshNextFrame(),
                    clearTimeout(this.dircetionTimer);
                    var y = this;
                    this.dircetionTimer = setTimeout(function() {
                        y.animationEffect()
                    }
                    , 150)
                },
                __ondrhoverlink: function(p) {
                    for (var o, r, m = 0, l = this.shapeList.length; l > m; m++) {
                        o = this.shapeList[m]._mapType,
                        this._hoverLinkMap[o] && this._activeMapType[o] && (r = q.get(this.shapeList[m], "value"),
                        null  != r && r >= p.valueMin && p.valueMax >= r && this.zr.addHoverShape(this.shapeList[m]))
                    }
                },
                onclick: function(N) {
                    if (this.isClick && N.target && !this._justMove && "icon" != N.target.type) {
                        this.isClick = !1;
                        var p = N.target
                          , P = p.style._name
                          , m = this.shapeList.length
                          , l = p._mapType || "";
                        if ("single" == this._selectedMode[l]) {
                            for (var O in this._selected) {
                                if (this._selected[O] && this._mapTypeMap[O] == l) {
                                    for (var y = 0; m > y; y++) {
                                        this.shapeList[y].style._name == O && this.shapeList[y]._mapType == l && (this.shapeList[y].style = this.shapeList[y]._style,
                                        this.zr.modShape(this.shapeList[y].id))
                                    }
                                    O != P && (this._selected[O] = !1)
                                }
                            }
                        }
                        this._selected[P] = !this._selected[P];
                        for (var y = 0; m > y; y++) {
                            this.shapeList[y].style._name == P && this.shapeList[y]._mapType == l && (this.shapeList[y].style = this._selected[P] ? this.shapeList[y].highlightStyle : this.shapeList[y]._style,
                            this.zr.modShape(this.shapeList[y].id))
                        }
                        this.messageCenter.dispatch(F.EVENT.MAP_SELECTED, N.event, {
                            selected: this._selected,
                            target: P
                        }, this.myChart),
                        this.zr.refreshNextFrame();
                        var u = this;
                        setTimeout(function() {
                            u.zr.trigger(K.EVENT.MOUSEMOVE, N.event)
                        }
                        , 100)
                    }
                },
                refresh: function(i) {
                    i && (this.option = i,
                    this.series = i.series),
                    this._mapDataRequireCounter > 0 ? this.clear() : this.backupShapeList(),
                    this._buildShape(),
                    this.zr.refreshHover()
                },
                ondataRange: function(l, i) {
                    this.component.dataRange && (this.refresh(),
                    i.needRefresh = !0)
                },
                pos2geo: function(l, i) {
                    return this._mapDataMap[l].transform ? this._mapDataMap[l].projection.pos2geo(this._mapDataMap[l].transform, i) : null 
                },
                getGeoByPos: function(l, i) {
                    if (!this._mapDataMap[l].transform) {
                        return null 
                    }
                    var m = [this._mapDataMap[l].transform.left, this._mapDataMap[l].transform.top];
                    return i instanceof Array ? (i[0] -= m[0],
                    i[1] -= m[1]) : (i.x -= m[0],
                    i.y -= m[1]),
                    this.pos2geo(l, i)
                },
                geo2pos: function(l, i) {
                    return this._mapDataMap[l].transform ? this._mapDataMap[l].projection.geo2pos(this._mapDataMap[l].transform, i) : null 
                },
                getPosByGeo: function(l, i) {
                    if (!this._mapDataMap[l].transform) {
                        return null 
                    }
                    var m = this.geo2pos(l, i);
                    return m[0] += this._mapDataMap[l].transform.left,
                    m[1] += this._mapDataMap[l].transform.top,
                    m
                },
                getMapPosition: function(i) {
                    return this._mapDataMap[i].transform ? [this._mapDataMap[i].transform.left, this._mapDataMap[i].transform.top] : null 
                },
                onbeforDispose: function() {
                    this._isAlive = !1,
                    this.zr.un(K.EVENT.MOUSEWHEEL, this._onmousewheel),
                    this.zr.un(K.EVENT.MOUSEDOWN, this._onmousedown),
                    this.messageCenter.unbind(F.EVENT.ROAMCONTROLLER, this._onroamcontroller),
                    this.messageCenter.unbind(F.EVENT.DATA_RANGE_HOVERLINK, this._ondrhoverlink)
                }
            },
            v.inherits(z, E),
            J("../chart").define("map", z),
            z
        }
        ),
        k("zrender/shape/Path", ["require", "./Base", "./util/PathProxy", "../tool/util"], function(v) {
            var p = v("./Base")
              , x = v("./util/PathProxy")
              , m = x.PathSegment
              , l = function(i) {
                return Math.sqrt(i[0] * i[0] + i[1] * i[1])
            }
              , w = function(n, i) {
                return (n[0] * i[0] + n[1] * i[1]) / (l(n) * l(i))
            }
              , u = function(n, i) {
                return (n[0] * i[1] < n[1] * i[0] ? -1 : 1) * Math.acos(w(n, i))
            }
              , q = function(i) {
                p.call(this, i)
            }
            ;
            return q.prototype = {
                type: "path",
                buildPathArray: function(aa, I, P) {
                    if (!aa) {
                        return []
                    }
                    I = I || 0,
                    P = P || 0;
                    var ae = aa
                      , O = ["m", "M", "l", "L", "v", "V", "h", "H", "z", "Z", "c", "C", "q", "Q", "t", "T", "s", "S", "a", "A"];
                    ae = ae.replace(/-/g, " -"),
                    ae = ae.replace(/  /g, " "),
                    ae = ae.replace(/ /g, ","),
                    ae = ae.replace(/,,/g, ",");
                    var M;
                    for (M = 0; O.length > M; M++) {
                        ae = ae.replace(RegExp(O[M], "g"), "|" + O[M])
                    }
                    var J = ae.split("|")
                      , R = []
                      , T = 0
                      , Q = 0;
                    for (M = 1; J.length > M; M++) {
                        var A = J[M]
                          , B = A.charAt(0);
                        A = A.slice(1),
                        A = A.replace(RegExp("e,-", "g"), "e-");
                        var ab = A.split(",");
                        ab.length > 0 && "" === ab[0] && ab.shift();
                        for (var N = 0; ab.length > N; N++) {
                            ab[N] = parseFloat(ab[N])
                        }
                        for (; ab.length > 0 && !isNaN(ab[0]); ) {
                            var ac, H, E, Y, ad, Z, S, F, af = null , C = [], z = T, i = Q;
                            switch (B) {
                            case "l":
                                T += ab.shift(),
                                Q += ab.shift(),
                                af = "L",
                                C.push(T, Q);
                                break;
                            case "L":
                                T = ab.shift(),
                                Q = ab.shift(),
                                C.push(T, Q);
                                break;
                            case "m":
                                T += ab.shift(),
                                Q += ab.shift(),
                                af = "M",
                                C.push(T, Q),
                                B = "l";
                                break;
                            case "M":
                                T = ab.shift(),
                                Q = ab.shift(),
                                af = "M",
                                C.push(T, Q),
                                B = "L";
                                break;
                            case "h":
                                T += ab.shift(),
                                af = "L",
                                C.push(T, Q);
                                break;
                            case "H":
                                T = ab.shift(),
                                af = "L",
                                C.push(T, Q);
                                break;
                            case "v":
                                Q += ab.shift(),
                                af = "L",
                                C.push(T, Q);
                                break;
                            case "V":
                                Q = ab.shift(),
                                af = "L",
                                C.push(T, Q);
                                break;
                            case "C":
                                C.push(ab.shift(), ab.shift(), ab.shift(), ab.shift()),
                                T = ab.shift(),
                                Q = ab.shift(),
                                C.push(T, Q);
                                break;
                            case "c":
                                C.push(T + ab.shift(), Q + ab.shift(), T + ab.shift(), Q + ab.shift()),
                                T += ab.shift(),
                                Q += ab.shift(),
                                af = "C",
                                C.push(T, Q);
                                break;
                            case "S":
                                ac = T,
                                H = Q,
                                E = R[R.length - 1],
                                "C" === E.command && (ac = T + (T - E.points[2]),
                                H = Q + (Q - E.points[3])),
                                C.push(ac, H, ab.shift(), ab.shift()),
                                T = ab.shift(),
                                Q = ab.shift(),
                                af = "C",
                                C.push(T, Q);
                                break;
                            case "s":
                                ac = T,
                                H = Q,
                                E = R[R.length - 1],
                                "C" === E.command && (ac = T + (T - E.points[2]),
                                H = Q + (Q - E.points[3])),
                                C.push(ac, H, T + ab.shift(), Q + ab.shift()),
                                T += ab.shift(),
                                Q += ab.shift(),
                                af = "C",
                                C.push(T, Q);
                                break;
                            case "Q":
                                C.push(ab.shift(), ab.shift()),
                                T = ab.shift(),
                                Q = ab.shift(),
                                C.push(T, Q);
                                break;
                            case "q":
                                C.push(T + ab.shift(), Q + ab.shift()),
                                T += ab.shift(),
                                Q += ab.shift(),
                                af = "Q",
                                C.push(T, Q);
                                break;
                            case "T":
                                ac = T,
                                H = Q,
                                E = R[R.length - 1],
                                "Q" === E.command && (ac = T + (T - E.points[0]),
                                H = Q + (Q - E.points[1])),
                                T = ab.shift(),
                                Q = ab.shift(),
                                af = "Q",
                                C.push(ac, H, T, Q);
                                break;
                            case "t":
                                ac = T,
                                H = Q,
                                E = R[R.length - 1],
                                "Q" === E.command && (ac = T + (T - E.points[0]),
                                H = Q + (Q - E.points[1])),
                                T += ab.shift(),
                                Q += ab.shift(),
                                af = "Q",
                                C.push(ac, H, T, Q);
                                break;
                            case "A":
                                Y = ab.shift(),
                                ad = ab.shift(),
                                Z = ab.shift(),
                                S = ab.shift(),
                                F = ab.shift(),
                                z = T,
                                i = Q,
                                T = ab.shift(),
                                Q = ab.shift(),
                                af = "A",
                                C = this._convertPoint(z, i, T, Q, S, F, Y, ad, Z);
                                break;
                            case "a":
                                Y = ab.shift(),
                                ad = ab.shift(),
                                Z = ab.shift(),
                                S = ab.shift(),
                                F = ab.shift(),
                                z = T,
                                i = Q,
                                T += ab.shift(),
                                Q += ab.shift(),
                                af = "A",
                                C = this._convertPoint(z, i, T, Q, S, F, Y, ad, Z)
                            }
                            for (var D = 0, G = C.length; G > D; D += 2) {
                                C[D] += I,
                                C[D + 1] += P
                            }
                            R.push(new m(af || B,C))
                        }
                        ("z" === B || "Z" === B) && R.push(new m("z",[]))
                    }
                    return R
                },
                _convertPoint: function(N, C, F, J, R, D, H, K, G) {
                    var o = G * (Math.PI / 180)
                      , r = Math.cos(o) * (N - F) / 2 + Math.sin(o) * (C - J) / 2
                      , O = -1 * Math.sin(o) * (N - F) / 2 + Math.cos(o) * (C - J) / 2
                      , E = r * r / (H * H) + O * O / (K * K);
                    E > 1 && (H *= Math.sqrt(E),
                    K *= Math.sqrt(E));
                    var P = Math.sqrt((H * H * K * K - H * H * O * O - K * K * r * r) / (H * H * O * O + K * K * r * r));
                    R === D && (P *= -1),
                    isNaN(P) && (P = 0);
                    var B = P * H * O / K
                      , z = P * -K * r / H
                      , L = (N + F) / 2 + Math.cos(o) * B - Math.sin(o) * z
                      , Q = (C + J) / 2 + Math.sin(o) * B + Math.cos(o) * z
                      , M = u([1, 0], [(r - B) / H, (O - z) / K])
                      , I = [(r - B) / H, (O - z) / K]
                      , A = [(-1 * r - B) / H, (-1 * O - z) / K]
                      , S = u(I, A);
                    return -1 >= w(I, A) && (S = Math.PI),
                    w(I, A) >= 1 && (S = 0),
                    0 === D && S > 0 && (S -= 2 * Math.PI),
                    1 === D && 0 > S && (S += 2 * Math.PI),
                    [L, Q, H, K, M, S, o, D]
                },
                buildPath: function(T, F) {
                    var K = F.path
                      , P = F.x || 0
                      , Z = F.y || 0;
                    F.pathArray = F.pathArray || this.buildPathArray(K, P, Z);
                    for (var J = F.pathArray, H = F.pointList = [], G = [], N = 0, Q = J.length; Q > N; N++) {
                        "M" == J[N].command.toUpperCase() && (G.length > 0 && H.push(G),
                        G = []);
                        for (var M = J[N].points, z = 0, A = M.length; A > z; z += 2) {
                            G.push([M[z], M[z + 1]])
                        }
                    }
                    G.length > 0 && H.push(G);
                    for (var N = 0, Q = J.length; Q > N; N++) {
                        var W = J[N].command
                          , M = J[N].points;
                        switch (W) {
                        case "L":
                            T.lineTo(M[0], M[1]);
                            break;
                        case "M":
                            T.moveTo(M[0], M[1]);
                            break;
                        case "C":
                            T.bezierCurveTo(M[0], M[1], M[2], M[3], M[4], M[5]);
                            break;
                        case "Q":
                            T.quadraticCurveTo(M[0], M[1], M[2], M[3]);
                            break;
                        case "A":
                            var I = M[0]
                              , X = M[1]
                              , E = M[2]
                              , C = M[3]
                              , R = M[4]
                              , Y = M[5]
                              , S = M[6]
                              , O = M[7]
                              , D = E > C ? E : C
                              , aa = E > C ? 1 : E / C
                              , B = E > C ? C / E : 1;
                            T.translate(I, X),
                            T.rotate(S),
                            T.scale(aa, B),
                            T.arc(0, 0, D, R, R + Y, 1 - O),
                            T.scale(1 / aa, 1 / B),
                            T.rotate(-S),
                            T.translate(-I, -X);
                            break;
                        case "z":
                            T.closePath()
                        }
                    }
                },
                getRect: function(H) {
                    if (H.__rect) {
                        return H.__rect
                    }
                    var J;
                    J = "stroke" == H.brushType || "fill" == H.brushType ? H.lineWidth || 1 : 0;
                    for (var A = Number.MAX_VALUE, F = Number.MIN_VALUE, I = Number.MAX_VALUE, z = Number.MIN_VALUE, y = H.x || 0, K = H.y || 0, E = H.pathArray || this.buildPathArray(H.path), G = 0; E.length > G; G++) {
                        for (var C = E[G].points, B = 0; C.length > B; B++) {
                            0 === B % 2 ? (A > C[B] + y && (A = C[B]),
                            C[B] + y > F && (F = C[B])) : (I > C[B] + K && (I = C[B]),
                            C[B] + K > z && (z = C[B]))
                        }
                    }
                    var D;
                    return D = A === Number.MAX_VALUE || F === Number.MIN_VALUE || I === Number.MAX_VALUE || z === Number.MIN_VALUE ? {
                        x: 0,
                        y: 0,
                        width: 0,
                        height: 0
                    } : {
                        x: Math.round(A - J / 2),
                        y: Math.round(I - J / 2),
                        width: F - A + J,
                        height: z - I + J
                    },
                    H.__rect = D,
                    D
                }
            },
            v("../tool/util").inherits(q, p),
            q
        }
        ),
        k("zrender/shape/Ellipse", ["require", "./Base", "../tool/util"], function(l) {
            var i = l("./Base")
              , m = function(n) {
                i.call(this, n)
            }
            ;
            return m.prototype = {
                type: "ellipse",
                buildPath: function(x, z) {
                    var u = 0.5522848
                      , w = z.x
                      , y = z.y
                      , q = z.a
                      , p = z.b
                      , A = q * u
                      , v = p * u;
                    x.moveTo(w - q, y),
                    x.bezierCurveTo(w - q, y - v, w - A, y - p, w, y - p),
                    x.bezierCurveTo(w + A, y - p, w + q, y - v, w + q, y),
                    x.bezierCurveTo(w + q, y + v, w + A, y + p, w, y + p),
                    x.bezierCurveTo(w - A, y + p, w - q, y + v, w - q, y),
                    x.closePath()
                },
                getRect: function(o) {
                    if (o.__rect) {
                        return o.__rect
                    }
                    var n;
                    return n = "stroke" == o.brushType || "fill" == o.brushType ? o.lineWidth || 1 : 0,
                    o.__rect = {
                        x: Math.round(o.x - o.a - n / 2),
                        y: Math.round(o.y - o.b - n / 2),
                        width: 2 * o.a + n,
                        height: 2 * o.b + n
                    },
                    o.__rect
                }
            },
            l("../tool/util").inherits(m, i),
            m
        }
        ),
        k("echarts/component/roamController", ["require", "./base", "zrender/shape/Rectangle", "zrender/shape/Sector", "zrender/shape/Circle", "../config", "zrender/tool/util", "zrender/tool/color", "zrender/tool/event", "../component"], function(x) {
            function z(C, s, n, l, D) {
                if (l.roamController && l.roamController.show) {
                    if (!l.roamController.mapTypeControl) {
                        return console.error("option.roamController.mapTypeControl has not been defined."),
                        void 0
                    }
                    q.call(this, C, s, n, l, D),
                    this.rcOption = l.roamController;
                    var B = this;
                    this._drictionMouseDown = function(i) {
                        return B.__drictionMouseDown(i)
                    }
                    ,
                    this._drictionMouseUp = function(i) {
                        return B.__drictionMouseUp(i)
                    }
                    ,
                    this._drictionMouseMove = function(i) {
                        return B.__drictionMouseMove(i)
                    }
                    ,
                    this._drictionMouseOut = function(i) {
                        return B.__drictionMouseOut(i)
                    }
                    ,
                    this._scaleHandler = function(i) {
                        return B.__scaleHandler(i)
                    }
                    ,
                    this.refresh(l)
                }
            }
            var q = x("./base")
              , v = x("zrender/shape/Rectangle")
              , y = x("zrender/shape/Sector")
              , p = x("zrender/shape/Circle")
              , m = x("../config");
            m.roamController = {
                zlevel: 0,
                z: 4,
                show: !0,
                x: "left",
                y: "top",
                width: 80,
                height: 120,
                backgroundColor: "rgba(0,0,0,0)",
                borderColor: "#ccc",
                borderWidth: 0,
                padding: 5,
                handleColor: "#6495ed",
                fillerColor: "#fff",
                step: 15,
                mapTypeControl: null 
            };
            var A = x("zrender/tool/util")
              , u = x("zrender/tool/color")
              , w = x("zrender/tool/event");
            return z.prototype = {
                type: m.COMPONENT_TYPE_ROAMCONTROLLER,
                _buildShape: function() {
                    if (this.rcOption.show) {
                        this._itemGroupLocation = this._getItemGroupLocation(),
                        this._buildBackground(),
                        this._buildItem();
                        for (var l = 0, i = this.shapeList.length; i > l; l++) {
                            this.zr.addShape(this.shapeList[l])
                        }
                    }
                },
                _buildItem: function() {
                    this.shapeList.push(this._getDirectionShape("up")),
                    this.shapeList.push(this._getDirectionShape("down")),
                    this.shapeList.push(this._getDirectionShape("left")),
                    this.shapeList.push(this._getDirectionShape("right")),
                    this.shapeList.push(this._getScaleShape("scaleUp")),
                    this.shapeList.push(this._getScaleShape("scaleDown"))
                },
                _getDirectionShape: function(s) {
                    var r = this._itemGroupLocation.r
                      , C = this._itemGroupLocation.x + r
                      , l = this._itemGroupLocation.y + r
                      , B = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            x: C,
                            y: l,
                            r: r,
                            startAngle: -45,
                            endAngle: 45,
                            color: this.rcOption.handleColor,
                            text: ">",
                            textX: C + r / 2 + 4,
                            textY: l - 0.5,
                            textAlign: "center",
                            textBaseline: "middle",
                            textPosition: "specific",
                            textColor: this.rcOption.fillerColor,
                            textFont: Math.floor(r / 2) + "px arial"
                        },
                        highlightStyle: {
                            color: u.lift(this.rcOption.handleColor, -0.2),
                            brushType: "fill"
                        },
                        clickable: !0
                    };
                    switch (s) {
                    case "up":
                        B.rotation = [Math.PI / 2, C, l];
                        break;
                    case "left":
                        B.rotation = [Math.PI, C, l];
                        break;
                    case "down":
                        B.rotation = [-Math.PI / 2, C, l]
                    }
                    return B = new y(B),
                    B._roamType = s,
                    B.onmousedown = this._drictionMouseDown,
                    B.onmouseup = this._drictionMouseUp,
                    B.onmousemove = this._drictionMouseMove,
                    B.onmouseout = this._drictionMouseOut,
                    B
                },
                _getScaleShape: function(E) {
                    var B = this._itemGroupLocation.width
                      , F = this._itemGroupLocation.height - B;
                    F = 0 > F ? 20 : F;
                    var o = Math.min(B / 2 - 5, F) / 2
                      , l = this._itemGroupLocation.x + ("scaleDown" === E ? B - o : o)
                      , D = this._itemGroupLocation.y + this._itemGroupLocation.height - o
                      , C = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                            x: l,
                            y: D,
                            r: o,
                            color: this.rcOption.handleColor,
                            text: "scaleDown" === E ? "-" : "+",
                            textX: l,
                            textY: D - 2,
                            textAlign: "center",
                            textBaseline: "middle",
                            textPosition: "specific",
                            textColor: this.rcOption.fillerColor,
                            textFont: Math.floor(o) + "px verdana"
                        },
                        highlightStyle: {
                            color: u.lift(this.rcOption.handleColor, -0.2),
                            brushType: "fill"
                        },
                        clickable: !0
                    };
                    return C = new p(C),
                    C._roamType = E,
                    C.onmousedown = this._scaleHandler,
                    C
                },
                _buildBackground: function() {
                    var i = this.reformCssArray(this.rcOption.padding);
                    this.shapeList.push(new v({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        hoverable: !1,
                        style: {
                            x: this._itemGroupLocation.x - i[3],
                            y: this._itemGroupLocation.y - i[0],
                            width: this._itemGroupLocation.width + i[3] + i[1],
                            height: this._itemGroupLocation.height + i[0] + i[2],
                            brushType: 0 === this.rcOption.borderWidth ? "fill" : "both",
                            color: this.rcOption.backgroundColor,
                            strokeColor: this.rcOption.borderColor,
                            lineWidth: this.rcOption.borderWidth
                        }
                    }))
                },
                _getItemGroupLocation: function() {
                    var D, B = this.reformCssArray(this.rcOption.padding), F = this.rcOption.width, s = this.rcOption.height, l = this.zr.getWidth(), E = this.zr.getHeight();
                    switch (this.rcOption.x) {
                    case "center":
                        D = Math.floor((l - F) / 2);
                        break;
                    case "left":
                        D = B[3] + this.rcOption.borderWidth;
                        break;
                    case "right":
                        D = l - F - B[1] - B[3] - 2 * this.rcOption.borderWidth;
                        break;
                    default:
                        D = this.parsePercent(this.rcOption.x, l)
                    }
                    var C;
                    switch (this.rcOption.y) {
                    case "top":
                        C = B[0] + this.rcOption.borderWidth;
                        break;
                    case "bottom":
                        C = E - s - B[0] - B[2] - 2 * this.rcOption.borderWidth;
                        break;
                    case "center":
                        C = Math.floor((E - s) / 2);
                        break;
                    default:
                        C = this.parsePercent(this.rcOption.y, E)
                    }
                    return {
                        x: D,
                        y: C,
                        r: F / 2,
                        width: F,
                        height: s
                    }
                },
                __drictionMouseDown: function(i) {
                    this.mousedown = !0,
                    this._drictionHandlerOn(i)
                },
                __drictionMouseUp: function(i) {
                    this.mousedown = !1,
                    this._drictionHandlerOff(i)
                },
                __drictionMouseMove: function(i) {
                    this.mousedown && this._drictionHandlerOn(i)
                },
                __drictionMouseOut: function(i) {
                    this._drictionHandlerOff(i)
                },
                _drictionHandlerOn: function(l) {
                    this._dispatchEvent(l.event, l.target._roamType),
                    clearInterval(this.dircetionTimer);
                    var i = this;
                    this.dircetionTimer = setInterval(function() {
                        i._dispatchEvent(l.event, l.target._roamType)
                    }
                    , 100),
                    w.stop(l.event)
                },
                _drictionHandlerOff: function() {
                    clearInterval(this.dircetionTimer)
                },
                __scaleHandler: function(i) {
                    this._dispatchEvent(i.event, i.target._roamType),
                    w.stop(i.event)
                },
                _dispatchEvent: function(l, i) {
                    this.messageCenter.dispatch(m.EVENT.ROAMCONTROLLER, l, {
                        roamType: i,
                        mapTypeControl: this.rcOption.mapTypeControl,
                        step: this.rcOption.step
                    }, this.myChart)
                },
                refresh: function(i) {
                    i && (this.option = i || this.option,
                    this.option.roamController = this.reformOption(this.option.roamController),
                    this.rcOption = this.option.roamController),
                    this.clear(),
                    this._buildShape()
                }
            },
            A.inherits(z, q),
            x("../component").define("roamController", z),
            z
        }
        ),
        k("echarts/util/mapData/params", ["require"], function(o) {
            function m(y) {
                if (!y.UTF8Encoding) {
                    return y
                }
                for (var A = y.features, w = 0; A.length > w; w++) {
                    for (var z = A[w], q = z.geometry.coordinates, n = z.geometry.encodeOffsets, B = 0; q.length > B; B++) {
                        var v = q[B];
                        if ("Polygon" === z.geometry.type) {
                            q[B] = p(v, n[B])
                        } else {
                            if ("MultiPolygon" === z.geometry.type) {
                                for (var x = 0; v.length > x; x++) {
                                    var u = v[x];
                                    v[x] = p(u, n[B][x])
                                }
                            }
                        }
                    }
                }
                return y.UTF8Encoding = !1,
                y
            }
            function p(y, v) {
                for (var A = [], u = v[0], q = v[1], z = 0; y.length > z; z += 2) {
                    var x = y.charCodeAt(z) - 64
                      , w = y.charCodeAt(z + 1) - 64;
                    x = x >> 1 ^ -(1 & x),
                    w = w >> 1 ^ -(1 & w),
                    x += u,
                    w += q,
                    u = x,
                    q = w,
                    A.push([x / 1024, w / 1024])
                }
                return A
            }
            var l = {
                none: {
                    getGeoJson: function(i) {
                        i({
                            type: "FeatureCollection",
                            features: [{
                                type: "Feature",
                                geometry: {
                                    coordinates: [],
                                    encodeOffsets: [],
                                    type: "Polygon"
                                },
                                properties: {}
                            }]
                        })
                    }
                },
                world: {
                    getGeoJson: function(e) {
                        o(["./geoJson/world_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                china: {
                    getGeoJson: function(e) {
                        o(["./geoJson/china_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "南海诸岛": {
                    textCoord: [126, 25],
                    getPath: function(z, B) {
                        for (var v = [[[0, 3.5], [7, 11.2], [15, 11.9], [30, 7], [42, 0.7], [52, 0.7], [56, 7.7], [59, 0.7], [64, 0.7], [64, 0], [5, 0], [0, 3.5]], [[13, 16.1], [19, 14.7], [16, 21.7], [11, 23.1], [13, 16.1]], [[12, 32.2], [14, 38.5], [15, 38.5], [13, 32.2], [12, 32.2]], [[16, 47.6], [12, 53.2], [13, 53.2], [18, 47.6], [16, 47.6]], [[6, 64.4], [8, 70], [9, 70], [8, 64.4], [6, 64.4]], [[23, 82.6], [29, 79.8], [30, 79.8], [25, 82.6], [23, 82.6]], [[37, 70.7], [43, 62.3], [44, 62.3], [39, 70.7], [37, 70.7]], [[48, 51.1], [51, 45.5], [53, 45.5], [50, 51.1], [48, 51.1]], [[51, 35], [51, 28.7], [53, 28.7], [53, 35], [51, 35]], [[52, 22.4], [55, 17.5], [56, 17.5], [53, 22.4], [52, 22.4]], [[58, 12.6], [62, 7], [63, 7], [60, 12.6], [58, 12.6]], [[0, 3.5], [0, 93.1], [64, 93.1], [64, 0], [63, 0], [63, 92.4], [1, 92.4], [1, 3.5], [0, 3.5]]], x = "", A = z[0], u = z[1], q = 0, C = v.length; C > q; q++) {
                            x += "M " + ((v[q][0][0] * B + A).toFixed(2) - 0) + " " + ((v[q][0][1] * B + u).toFixed(2) - 0) + " ";
                            for (var w = 1, y = v[q].length; y > w; w++) {
                                x += "L " + ((v[q][w][0] * B + A).toFixed(2) - 0) + " " + ((v[q][w][1] * B + u).toFixed(2) - 0) + " "
                            }
                        }
                        return x + " Z"
                    }
                },
                "新疆": {
                    getGeoJson: function(e) {
                        o(["./geoJson/xin_jiang_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "西藏": {
                    getGeoJson: function(e) {
                        o(["./geoJson/xi_zang_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "内蒙古": {
                    getGeoJson: function(e) {
                        o(["./geoJson/nei_meng_gu_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "青海": {
                    getGeoJson: function(e) {
                        o(["./geoJson/qing_hai_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "四川": {
                    getGeoJson: function(e) {
                        o(["./geoJson/si_chuan_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "黑龙江": {
                    getGeoJson: function(e) {
                        o(["./geoJson/hei_long_jiang_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "甘肃": {
                    getGeoJson: function(e) {
                        o(["./geoJson/gan_su_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "云南": {
                    getGeoJson: function(e) {
                        o(["./geoJson/yun_nan_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "广西": {
                    getGeoJson: function(e) {
                        o(["./geoJson/guang_xi_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "湖南": {
                    getGeoJson: function(e) {
                        o(["./geoJson/hu_nan_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "陕西": {
                    getGeoJson: function(e) {
                        o(["./geoJson/shan_xi_1_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "广东": {
                    getGeoJson: function(e) {
                        o(["./geoJson/guang_dong_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "吉林": {
                    getGeoJson: function(e) {
                        o(["./geoJson/ji_lin_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "河北": {
                    getGeoJson: function(e) {
                        o(["./geoJson/he_bei_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "湖北": {
                    getGeoJson: function(e) {
                        o(["./geoJson/hu_bei_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "贵州": {
                    getGeoJson: function(e) {
                        o(["./geoJson/gui_zhou_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "山东": {
                    getGeoJson: function(e) {
                        o(["./geoJson/shan_dong_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "江西": {
                    getGeoJson: function(e) {
                        o(["./geoJson/jiang_xi_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "河南": {
                    getGeoJson: function(e) {
                        o(["./geoJson/he_nan_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "辽宁": {
                    getGeoJson: function(e) {
                        o(["./geoJson/liao_ning_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "山西": {
                    getGeoJson: function(e) {
                        o(["./geoJson/shan_xi_2_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "安徽": {
                    getGeoJson: function(e) {
                        o(["./geoJson/an_hui_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "福建": {
                    getGeoJson: function(e) {
                        o(["./geoJson/fu_jian_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "浙江": {
                    getGeoJson: function(e) {
                        o(["./geoJson/zhe_jiang_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "江苏": {
                    getGeoJson: function(e) {
                        o(["./geoJson/jiang_su_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "重庆": {
                    getGeoJson: function(e) {
                        o(["./geoJson/chong_qing_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "宁夏": {
                    getGeoJson: function(e) {
                        o(["./geoJson/ning_xia_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "海南": {
                    getGeoJson: function(e) {
                        o(["./geoJson/hai_nan_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "台湾": {
                    getGeoJson: function(e) {
                        o(["./geoJson/tai_wan_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "北京": {
                    getGeoJson: function(e) {
                        o(["./geoJson/bei_jing_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "天津": {
                    getGeoJson: function(e) {
                        o(["./geoJson/tian_jin_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "上海": {
                    getGeoJson: function(e) {
                        o(["./geoJson/shang_hai_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "香港": {
                    getGeoJson: function(e) {
                        o(["./geoJson/xiang_gang_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                },
                "澳门": {
                    getGeoJson: function(e) {
                        o(["./geoJson/ao_men_geo"], function(i) {
                            e(m(i))
                        }
                        )
                    }
                }
            };
            return {
                decode: m,
                params: l
            }
        }
        ),
        k("echarts/util/mapData/textFixed", [], function() {
            return {
                "广东": [0, -10],
                "香港": [10, 10],
                "澳门": [-10, 18],
                "黑龙江": [0, 20],
                "天津": [5, 5],
                "深圳市": [-35, 0],
                "红河哈尼族彝族自治州": [0, 20],
                "楚雄彝族自治州": [-5, 15],
                "石河子市": [-5, 5],
                "五家渠市": [0, -10],
                "昌吉回族自治州": [10, 10],
                "昌江黎族自治县": [0, 20],
                "陵水黎族自治县": [0, 20],
                "东方市": [0, 20],
                "渭南市": [0, 20]
            }
        }
        ),
        k("echarts/util/mapData/geoCoord", [], function() {
            return {
                Russia: [100, 60],
                "United States of America": [-99, 38]
            }
        }
        ),
        k("echarts/util/projection/svg", ["require", "zrender/shape/Path"], function(z) {
            function B(i) {
                return parseFloat(i || 0)
            }
            function u(t) {
                for (var E = t.firstChild; "svg" != E.nodeName.toLowerCase() || 1 != E.nodeType; ) {
                    E = E.nextSibling
                }
                var m = B(E.getAttribute("x"))
                  , l = B(E.getAttribute("y"))
                  , D = B(E.getAttribute("width"))
                  , s = B(E.getAttribute("height"));
                return {
                    left: m,
                    top: l,
                    width: D,
                    height: s
                }
            }
            function x(r, o) {
                function s(F) {
                    var n = F.tagName;
                    if (v[n]) {
                        var G = v[n](F, m);
                        G && (G.scale = m,
                        G.properties = {
                            name: F.getAttribute("name") || ""
                        },
                        G.id = F.id,
                        C(G, F),
                        l.push(G))
                    }
                    for (var E = F.childNodes, i = 0, D = E.length; D > i; i++) {
                        s(E[i])
                    }
                }
                var m = [o.scale.x, o.scale.y]
                  , l = [];
                return s(r),
                l
            }
            function A(l, i) {
                var m = i instanceof Array ? [1 * i[0], 1 * i[1]] : [1 * i.x, 1 * i.y];
                return [m[0] / l.scale.x, m[1] / l.scale.y]
            }
            function q(l, i) {
                var m = i instanceof Array ? [1 * i[0], 1 * i[1]] : [1 * i.x, 1 * i.y];
                return [m[0] * l.scale.x, m[1] * l.scale.y]
            }
            function p(i) {
                return i.replace(/^\s\s*/, "").replace(/\s\s*$/, "")
            }
            function C(s, r) {
                var E = r.getAttribute("fill")
                  , m = r.getAttribute("stroke")
                  , l = r.getAttribute("stroke-width")
                  , D = r.getAttribute("opacity");
                E && "none" != E ? (s.color = E,
                m ? (s.brushType = "both",
                s.strokeColor = m) : s.brushType = "fill") : m && "none" != m && (s.strokeColor = m,
                s.brushType = "stroke"),
                l && "none" != l && (s.lineWidth = parseFloat(l)),
                D && "none" != D && (s.opacity = parseFloat(D))
            }
            function w(s) {
                for (var r = p(s).replace(/,/g, " ").split(/\s+/), E = [], m = 0; r.length > m; ) {
                    var l = parseFloat(r[m++])
                      , D = parseFloat(r[m++]);
                    E.push([l, D])
                }
                return E
            }
            var y = z("zrender/shape/Path")
              , v = {
                path: function(o, m) {
                    var r = o.getAttribute("d")
                      , l = y.prototype.getRect({
                        path: r
                    });
                    return {
                        shapeType: "path",
                        path: r,
                        cp: [(l.x + l.width / 2) * m[0], (l.y + l.height / 2) * m[1]]
                    }
                },
                rect: function(t, E) {
                    var m = B(t.getAttribute("x"))
                      , l = B(t.getAttribute("y"))
                      , D = B(t.getAttribute("width"))
                      , s = B(t.getAttribute("height"));
                    return {
                        shapeType: "rectangle",
                        x: m,
                        y: l,
                        width: D,
                        height: s,
                        cp: [(m + D / 2) * E[0], (l + s / 2) * E[1]]
                    }
                },
                line: function(t, E) {
                    var m = B(t.getAttribute("x1"))
                      , l = B(t.getAttribute("y1"))
                      , D = B(t.getAttribute("x2"))
                      , s = B(t.getAttribute("y2"));
                    return {
                        shapeType: "line",
                        xStart: m,
                        yStart: l,
                        xEnd: D,
                        yEnd: s,
                        cp: [0.5 * (m + D) * E[0], 0.5 * (l + s) * E[1]]
                    }
                },
                circle: function(r, t) {
                    var m = B(r.getAttribute("cx"))
                      , l = B(r.getAttribute("cy"))
                      , s = B(r.getAttribute("r"));
                    return {
                        shapeType: "circle",
                        x: m,
                        y: l,
                        r: s,
                        cp: [m * t[0], l * t[1]]
                    }
                },
                ellipse: function(s, r) {
                    var E = parseFloat(s.getAttribute("cx") || 0)
                      , m = parseFloat(s.getAttribute("cy") || 0)
                      , l = parseFloat(s.getAttribute("rx") || 0)
                      , D = parseFloat(s.getAttribute("ry") || 0);
                    return {
                        shapeType: "ellipse",
                        x: E,
                        y: m,
                        a: l,
                        b: D,
                        cp: [E * r[0], m * r[1]]
                    }
                },
                polygon: function(E, s) {
                    var G = E.getAttribute("points")
                      , m = [1 / 0, 1 / 0]
                      , l = [-1 / 0, -1 / 0];
                    if (G) {
                        G = w(G);
                        for (var F = 0; G.length > F; F++) {
                            var D = G[F];
                            m[0] = Math.min(D[0], m[0]),
                            m[1] = Math.min(D[1], m[1]),
                            l[0] = Math.max(D[0], l[0]),
                            l[1] = Math.max(D[1], l[1])
                        }
                        return {
                            shapeType: "polygon",
                            pointList: G,
                            cp: [(m[0] + l[0]) / 2 * s[0], (m[1] + l[1]) / 2 * s[0]]
                        }
                    }
                },
                polyline: function(l, i) {
                    var m = v.polygon(l, i);
                    return m
                }
            };
            return {
                getBbox: u,
                geoJson2Path: x,
                pos2geo: A,
                geo2pos: q
            }
        }
        ),
        k("echarts/util/projection/normal", [], function() {
            function s(i, o) {
                return o = o || {},
                i.srcSize || p(i, o),
                i.srcSize
            }
            function p(A, C) {
                C = C || {},
                q.xmin = 360,
                q.xmax = -360,
                q.ymin = 180,
                q.ymax = -180;
                for (var w, y, B = A.features, r = 0, D = B.length; D > r; r++) {
                    if (y = B[r],
                    !y.properties.name || !C[y.properties.name]) {
                        switch (y.type) {
                        case "Feature":
                            q[y.geometry.type](y.geometry.coordinates);
                            break;
                        case "GeometryCollection":
                            w = y.geometries;
                            for (var x = 0, z = w.length; z > x; x++) {
                                q[w[x].type](w[x].coordinates)
                            }
                        }
                    }
                }
                return A.srcSize = {
                    left: 1 * q.xmin.toFixed(4),
                    top: 1 * q.ymin.toFixed(4),
                    width: 1 * (q.xmax - q.xmin).toFixed(4),
                    height: 1 * (q.ymax - q.ymin).toFixed(4)
                },
                A
            }
            function v(E, w, C) {
                function I(n, i) {
                    G = n.type,
                    J = n.coordinates,
                    u._bbox = {
                        xmin: 360,
                        xmax: -360,
                        ymin: 180,
                        ymax: -180
                    },
                    H = u[G](J),
                    z.push({
                        path: H,
                        cp: i.properties.cp ? u.makePoint(i.properties.cp) : u.makePoint([(u._bbox.xmin + u._bbox.xmax) / 2, (u._bbox.ymin + u._bbox.ymax) / 2]),
                        properties: i.properties,
                        id: i.id
                    })
                }
                C = C || {},
                u.scale = null ,
                u.offset = null ,
                E.srcSize || p(E, C),
                w.offset = {
                    x: E.srcSize.left,
                    y: E.srcSize.top,
                    left: w.OffsetLeft || 0,
                    top: w.OffsetTop || 0
                },
                u.scale = w.scale,
                u.offset = w.offset;
                for (var o, K, B, D = E.features, z = [], x = 0, A = D.length; A > x; x++) {
                    if (B = D[x],
                    !B.properties.name || !C[B.properties.name]) {
                        if ("Feature" == B.type) {
                            I(B.geometry, B)
                        } else {
                            if ("GeometryCollection" == B.type) {
                                o = B.geometries;
                                for (var F = 0, t = o.length; t > F; F++) {
                                    K = o[F],
                                    I(K, K)
                                }
                            }
                        }
                    }
                }
                var G, J, H;
                return z
            }
            function m(w, r) {
                var x, o;
                return r instanceof Array ? (x = 1 * r[0],
                o = 1 * r[1]) : (x = 1 * r.x,
                o = 1 * r.y),
                x = x / w.scale.x + w.offset.x - 168.5,
                x = x > 180 ? x - 360 : x,
                o = 90 - (o / w.scale.y + w.offset.y),
                [x, o]
            }
            function l(n, i) {
                return u.offset = n.offset,
                u.scale = n.scale,
                i instanceof Array ? u.makePoint([1 * i[0], 1 * i[1]]) : u.makePoint([1 * i.x, 1 * i.y])
            }
            var u = {
                formatPoint: function(i) {
                    return [(-168.5 > i[0] && i[1] > 63.8 ? i[0] + 360 : i[0]) + 168.5, 90 - i[1]]
                },
                makePoint: function(x) {
                    var w = this
                      , y = w.formatPoint(x);
                    w._bbox.xmin > x[0] && (w._bbox.xmin = x[0]),
                    w._bbox.xmax < x[0] && (w._bbox.xmax = x[0]),
                    w._bbox.ymin > x[1] && (w._bbox.ymin = x[1]),
                    w._bbox.ymax < x[1] && (w._bbox.ymax = x[1]);
                    var r = (y[0] - u.offset.x) * u.scale.x + u.offset.left
                      , o = (y[1] - u.offset.y) * u.scale.y + u.offset.top;
                    return [r, o]
                },
                Point: function(i) {
                    return i = this.makePoint(i),
                    i.join(",")
                },
                LineString: function(x) {
                    for (var w, y = "", r = 0, o = x.length; o > r; r++) {
                        w = u.makePoint(x[r]),
                        y = 0 === r ? "M" + w.join(",") : y + "L" + w.join(",")
                    }
                    return y
                },
                Polygon: function(w) {
                    for (var r = "", x = 0, o = w.length; o > x; x++) {
                        r = r + u.LineString(w[x]) + "z"
                    }
                    return r
                },
                MultiPoint: function(w) {
                    for (var r = [], x = 0, o = w.length; o > x; x++) {
                        r.push(u.Point(w[x]))
                    }
                    return r
                },
                MultiLineString: function(w) {
                    for (var r = "", x = 0, o = w.length; o > x; x++) {
                        r += u.LineString(w[x])
                    }
                    return r
                },
                MultiPolygon: function(w) {
                    for (var r = "", x = 0, o = w.length; o > x; x++) {
                        r += u.Polygon(w[x])
                    }
                    return r
                }
            }
              , q = {
                formatPoint: u.formatPoint,
                makePoint: function(x) {
                    var w = this
                      , y = w.formatPoint(x)
                      , r = y[0]
                      , o = y[1];
                    w.xmin > r && (w.xmin = r),
                    r > w.xmax && (w.xmax = r),
                    w.ymin > o && (w.ymin = o),
                    o > w.ymax && (w.ymax = o)
                },
                Point: function(i) {
                    this.makePoint(i)
                },
                LineString: function(o) {
                    for (var i = 0, r = o.length; r > i; i++) {
                        this.makePoint(o[i])
                    }
                },
                Polygon: function(o) {
                    for (var i = 0, r = o.length; r > i; i++) {
                        this.LineString(o[i])
                    }
                },
                MultiPoint: function(o) {
                    for (var i = 0, r = o.length; r > i; i++) {
                        this.Point(o[i])
                    }
                },
                MultiLineString: function(o) {
                    for (var i = 0, r = o.length; r > i; i++) {
                        this.LineString(o[i])
                    }
                },
                MultiPolygon: function(o) {
                    for (var i = 0, r = o.length; r > i; i++) {
                        this.Polygon(o[i])
                    }
                }
            };
            return {
                getBbox: s,
                geoJson2Path: v,
                pos2geo: m,
                geo2pos: l
            }
        }
        ),
        k("echarts/util/mapData/geoJson/an_hui_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "3415",
                    properties: {
                        name: "六安市",
                        cp: [116.3123, 31.8329],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nJUXUV°UÑnU@mlLVaVln@@bn@VU@xlb@lLnKlVIJUVxnI@lVL@b°VX@bxnVVUnVVnU@kX@VwV@al¥UUnUWa@@wĸULU¥lKUa@aUI@alLVaU¯anWkUKm@XV@VaXlW@aU_UWVUI¯@ma¯W¯I@UU@WWU@U@@UU@VkV@@WUUm@UaU@lK@IUKL@KWmXUWaXI@@a@a@U@U@KV¥lwk°b²JVIVKlV@UXlaUl`UVLVVVUJU@Lnm@_VK@KUIW@J@Xk@WW@UmmXmWk@kK@aUUVmmkUwUmWL@WmU@UJmUULkKWakLWVkIlwULW@X°lUJ@°ULWVwmJ@bmb¯Vkm@@WkWm¯wL@lkXWmXym¯UImJUbkV@Vn¯@V@lUb@mk@maUxmlUbULWn@JLmKUkWKkwUKbmXWxkVUKmLkVV@JUUWL@xkJUUV@X@VVlUbVX@xk¤x¼xWxnnn@Þ¼JVb°aVn@mlnXUJlbVlkz@lUlXJmxVxXnWxXÈWlU@UxU@VX@xUL@UÆmLnV@lWXk@@JlbXblnlJ"],
                        encodeOffsets: [[118710, 33351]]
                    }
                }, {
                    type: "Feature",
                    id: "3408",
                    properties: {
                        name: "安庆市",
                        cp: [116.7517, 30.5255],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@n°znWXlW@kK°xXnl@Xn@l°Una@anIxXUVK@¯VIkW¯X@VKxklJXUlKXblLVKnVVIV@Xn@XKVnVxlnnUlmV@²óUkVlWbln@VVVIn@lw@WVIXblV@ÈxaUaVIVVnKVLKln@b²K@»U£ÑķġÝÅbKa@Im@Û@kWÓkkmKÅnóJUÅ£W@wĕ@wĉţ¯¯UkK±l¯U¥UÑkÝUķ»Ý¥¯JIUVbUl¯ÈV¼VJU¼Vb@bkLUl@VJ@bUXÇ@lkVmXmKkLVxVL@VkVVVlzWkbmLUUUbVbUVlÒnJlUnLllUL@bUVxlLXVÆ¦ÈVU¦WJ"],
                        encodeOffsets: [[118834, 31759]]
                    }
                }, {
                    type: "Feature",
                    id: "3411",
                    properties: {
                        name: "滁州市",
                        cp: [118.1909, 32.536],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@`nnl@xK@X°KXVIXVlbXVWnXlL@È»LVan@VJêVVn@X@laÞbVayn@_xnWVXnWl@VnUVkI@lnXKVLVV@V@kW@LlVô@J@bVnnKnkVa@»lç@nwKmaUUUVÑ@nmWXalI@alVn@VwUaVU@nlaôJnUVVXlJaXXVK@UV@VWx@nXVWXVUlLUbVULVVnUVbUbVb@@aKÆnnKVK@U@UU@@a@V°¯ÈJVIlķ@aaUaVKU_@mkxUI@aUlyU@@wkKWmUbUnUVWbkJW_J@bn@Vm@@KULk@V@@bVbÅm@LW@UVVbkK@UkKWL@VULUKWIUJUbkK@_WVXUJka@XVa@ky@aVIUUW@@mUlLKWÑUKVan@UkVmmIXKaVaUwVU@UmykU¯@±UUL@WUIVUU@KkIWaaU@kUUaÇUó»mKk¯@y@kWK@bkI¯`mnl¯XWlkVUzUJlbUbVJl@nnm@VULV`XnWÆbmUUnJmUknJ¯km@yk@kUxL@VUbmnn¤lX@`z@JmaULUVl@Xn@xllkXWaaW@UVmUb@mVXWxXbWbUÒnVVnVVUL"],
                        encodeOffsets: [[120004, 33520]]
                    }
                }, {
                    type: "Feature",
                    id: "3418",
                    properties: {
                        name: "宣城市",
                        cp: [118.8062, 30.6244],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Vb@XLJXxlIXxlVlV@I²¤nlUnVU@VULWVUJ@Lnb@lV@UnV@@VVVlLnbnJUVkUUVWn@@anUVnVJVIV@@nUJVbUb@VUbVK@bn@VbnIlxkllXVlXKWUXUlL°¤UVVb@bUlkXWxXz@IlaUlnUlJVInVÆJULVUnVK°@VnlVnxV@XLlK@wVL@KnUlJXUbnKVLXlUw@VWlLXKm@@a@VLnmlIVVnKn@kVaVlwk@@a@k@VIUa@maUa@wna@kmWUUmVUIVÇ@aKmakUJ@InmUUaVaklX@Vk@m@VU@wnK@alKVUkUkKbmUkm@U£WVk@@UÝbbaÇx@b@WVUa¯@wVwUUV@VwnK@KWaÅ@KIUyUI@WmXóUbWaKm@km@IUyIUaWKx@zUKUL@llVUnkLVVkJWX@VUKUVIkVWakb@VWb@n@JkXUlmL@xkL@`VxLUÈUJ@Vm@@bmIUlUL@VUVVbknm@mKUwKVÈ@J@LV±kkJUIl"],
                        encodeOffsets: [[120803, 31247]]
                    }
                }, {
                    type: "Feature",
                    id: "3412",
                    properties: {
                        name: "阜阳市",
                        cp: [115.7629, 32.9919],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Vn@ak°a±@¥@UUI@aUmlwUUxb@¥XU@mmI@a@Kn@@_W@@WI@mUVVXUl@XaV@K@I@aLX@aVI°K@KVLUUwyXkK@kKÆbXnlK@k@aJlU@w@U@»@aXKWn_JXkVKn@°LlKXW@¯U@aUK@kmJUwVIUJkmLK@kka@wUVm@@am@UkUbkK@nmVÒ¯VUWVVmIULk@ma@kkK@nUbUamU`UUVUkKVkkW@@bkmnmUXVKXVL@VbUmbVXJ@nmKÅI@KWKUXVJUL@VUKUX@KUKWL@LUJmaXXm@kVVV@L@VUL@VlK@L@V@LUK@VUb@UUU@°@nVxU`Lkn@`@XVJ@XVmk@UKmV¯LVVn±Wm@Ub@JlLUl@VLk@lmVVn@bnV@V°IVaVJXI°K°V@XXVlVVUnKVlUbWXnV@bV`U@@m@@@nxmn@bXVlL@¤nbUl¦VVUnJVUVl@@bÞL"],
                        encodeOffsets: [[118418, 34392]]
                    }
                }, {
                    type: "Feature",
                    id: "3413",
                    properties: {
                        name: "宿州市",
                        cp: [117.5208, 33.6841],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@UWU@bkW@aWU@aUIkWVlLXblVIUVV@mn@V_n@VaUK@I@UaanJVU@lVUVnnKVVlaUaI@wnKLnll@nVlk@wVKXkl@@bbUJ@VU@UUUyVk@aVUXwlWXXWU¹@aU@WUI@mlUnJ@Il@aXbV@VKl@XxVL@WIJlb@al@IUUm@@aVK@¥¯@mUķ¯bWk£Vm@akm@VaÅ@UVWa@UJWkJUbWbU@UlXk@amV@K¯nk@lU@Uxmz@bU`ÇbUbÅVm£U@Wwx@akLUK@UlakwUJWVkLmaUal@n_mVUnKVUUmÅXWa@kJmx@XUJ@bVLXxl@VVUVVUbkLWbU@@lUVVVVXK@XkJ@nU@@bV@VxUVlbU@xXLWn@UxVbVĊV@b@XV`mnkJ@kUKmbaU@VbnbÆx@XU@@`k@@bl@@bkL@WakXWaU@Vmkx@XWW@@wUUUbJU¯V@¯ÞU@WxXlL@bkb@lVlnbJW@kkU@mbkaWJIVlmz¯`UnU@mb@@`@bkVlnV@b@V@aVxn@VxKXnl@nbVKbVK@a_V@Vw@WLlwnK@UmIU@VW@UÈ@lKnalw@@V°@aUmlUUw@V@@UXK"],
                        encodeOffsets: [[119836, 35061]]
                    }
                }, {
                    type: "Feature",
                    id: "3410",
                    properties: {
                        name: "黄山市",
                        cp: [118.0481, 29.9542],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lXnlWX@VUJVnUJVzXJVxkVJlI²lU@K@IUÇLVxnLn@lmUaVU@UVKVknJ@an@@UVIVÇKUw@_lK@wnKVklW@I@mXa@UlaXblUJVUVL@UXWlIUUlKVmkU@kVKVL@ywXLVbJVz@Jln@nLXbVaônW@la@UVWUa@@a@mk@WIk@VwUa¯¥m@UUVK@ImK@aX£kKÅVa_@±akXWWLnU@@a@¯mK@LJUWwUVVmbXX@lWLn`mzUJUbLk@makVWmkXambkKkna@ab@U@Unm@WV@VbUbUJWIk@@lmL@°UVUVmn@@kmWkb@x_m@@aU@b@JlUzlWxXn@b²@l`IVlUlL@VKnVbUl@VlIn@@bbVWUk@@bX@Valb@bnb°Vn@xVKlbVnV@VxL@ln@UXVVL"],
                        encodeOffsets: [[120747, 31095]]
                    }
                }, {
                    type: "Feature",
                    id: "3414",
                    properties: {
                        name: "巢湖市",
                        cp: [117.7734, 31.4978],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VV@blL@XlWnnn@VXXl@@WIX@VJ@LxŎxln@bXJVblX@VVbUVn@VbUVlb@LnJVbVLVXLÒVLÒVbVIVylUXk°Wknm°_lJ@aXL@lz°@lnLô¼VÈVUUaVKU@WW@@UUa@knmVLlaV@a@kak±@UmwkKmkǉÝUUkL@mlIVmnÝWkkUÝ@KƑĉa@»mma@mX¤¯Uw@@UU@bU±±L@akmLUKmLUUUJVbbÇw@kUWaUJ@Xkxm@UJUUm@kakXUVl±ôU@kn"],
                        encodeOffsets: [[119847, 32007]]
                    }
                }, {
                    type: "Feature",
                    id: "3416",
                    properties: {
                        name: "亳州市",
                        cp: [116.1914, 33.4698],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lU@Un@@anUlw@KVmUwlaX_lKna@KU@@kWKUU@ankWXK@@V²VVIÈU@al@VaÈamK@wU@klaUV@XVUU»WUUbkmUkVmk@aÈw@mWU@VkIkVWKUÑķXȭºU¯l@kkLWmÅaL@lLWlzVxVUK@L¯LUJ@bWK@b@JLU@Wbk@WVUUV@nJ@XX@@`m@@L@bnJ@nWV@¦awVVkxVn@bVJ@V¦@²¯blb@mUU@¼¦XbUV`@nnxUxWLkUkVWKkV@XV@@VVL@VX@lVV@L@blL@`L@xXKVL@VnU@lwnU@ml@XnV@@UVW°LnalUI@aUK@aa@UkXW@I@mWL@UXK@UVW@U@@kWn@@V@XblaVxL@bVKXbIlJ"],
                        encodeOffsets: [[119183, 34594]]
                    }
                }, {
                    type: "Feature",
                    id: "3417",
                    properties: {
                        name: "池州市",
                        cp: [117.3889, 30.2014],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@V°°ĊŤ@xĖ@xXÆ¤VôIÆmnLllXÔ@lÜn@@JbLÆaĢÞĸ°VVUUKVanK@UV@VLVVnln@xnklxXamk@WV@Xa@naVkKlk@mkUWwkJWwIWK@UaUwWIUyVIUmVI@UXWmkkWKUUVWm@@kKw@UUUmkaULwm@¯Uma@akaUbW@@a@VlUXa@am@kJ@UVkUamL@UkKVUkJk_±@a@WmXwÇkkaVaUa±wV@VkwnyUaW@UU¯amLk@m@kmmU¯K@L@lUX¯WlkXVbbVUL@J@LVKnlJXnlb@`nXlalV@bnL@Vnb¼@lXbWlkLK@zUJmIUxUVUVmX", "@@llUL@VlxL@a@UwXa¯@"],
                        encodeOffsets: [[119543, 30781], [120061, 31152]]
                    }
                }, {
                    type: "Feature",
                    id: "3401",
                    properties: {
                        name: "合肥市",
                        cp: [117.29, 32.0581],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@LxVĊLÞkVlVVXaWaXwWnU@anVVUX@bXblWkk@wWmk@VUVKnb@Iy@_kWm£nmVa@UKwlVl@zn@°lIlmnVIVmnVaXÅWmU_VK@Unmmk@UIVakaaUÑUKÑWKUUKUamI@KkaVUUam@VUUa@UkWUaWI@akmōwwUL@`mn@KVIUVUUUKVk_VkbW@VkUULUJ±I¯alkxU¦@L@V@V@b@b@WJXbWVXn@LKVL@JkLV@Vbn@VV@XU@UlV@@VV@V@XXV@@VJ°°Xnb°@JUVVXV`@bkXWUbU@Wn@VLXlm°bVUbkK@bVJ@bVbkLV¦KķV@x@XbmVVVk¦"],
                        encodeOffsets: [[119678, 33323]]
                    }
                }, {
                    type: "Feature",
                    id: "3403",
                    properties: {
                        name: "蚌埠市",
                        cp: [117.4109, 33.1073],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VÒXLlUlJ@UXV@nÇx@bnlUVllnVaXVV¼UVWU@V²wVV@Vl@VnwlI@XbÆWVnUVmLUVnm`k@VbnblKXUVIlxkb@VVLlK@bwXxV@n¤ÆUVaÈaV_@anyVwV@kl@°m@LnUbl@WVkV@XaaVIXlIV@XbVUÆ@XKWwUkmW@_UmnIlJXkWKXmV@w@_XV@Kl@kU@KlX@@UUUUKWLm@klJVUUmk@mXUWmXw`m@zUbÝakbW@m@UUéUIm@UbKÇ¼@kKWXmWUkaWUJWU¯L@WLwk@mm@_ÅlUVkmWUnV@VWLUbbƑĬ¯l"],
                        encodeOffsets: [[119543, 33722]]
                    }
                }, {
                    type: "Feature",
                    id: "3402",
                    properties: {
                        name: "芜湖市",
                        cp: [118.3557, 31.0858],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@bVaV@XllLXU°lL@V@VUnVl¯IkVUVU@@b@lUXUWmbn@¼bƒĊLÞ@lVXlmÞUnkJ@nlKVVÞXklWVaVI@aUKn»lL@Kn@XXwlm@mn°@V@WywXlWVk@aUaVU¯£kKWVXVWLUkkWlkkwmJUam@@aULVa@UVaUaVI@m@UUJUIUmmV@bm@UXVVUlVmImakKUU@UU@VmU@@kma@KVIXUVK@UVmUkVm±£@JkU@nlkLUlmb@WbU@@XnlWb"],
                        encodeOffsets: [[120814, 31585]]
                    }
                }, {
                    type: "Feature",
                    id: "3406",
                    properties: {
                        name: "淮北市",
                        cp: [116.6968, 33.6896],
                        childNum: 3
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@lnnK@¦n@@VV@@VV@nIVV@VW²a@b@bVnUVVV@Vz@l@°UVIVaVV@x@XX@WlwUnV@XblWb@XlK@a@k@al@@_V@@WÅwmaUaV@bnaVL@llInmU_@W@aUUĉUaVwm@XWK@wVkaVUUwU@@aV@@mlI@WLWUUUVU@kV@XalKVaUVUUUk@WwUK@aVI@WUk@@UUU±xkb@lV@xnLÇbUbk@@bÇVUJ±U@U@WLXml@bVVXL@lV@@LmbkLW`kbVxUn@LkxmV@bm@@VkV"], ["@@VVVkV@¥@UV@U@VUUJkWakKUlXVJ@bXV@blX@aXV@V"]],
                        encodeOffsets: [[[119183, 34594]], [[119836, 35061]]]
                    }
                }, {
                    type: "Feature",
                    id: "3404",
                    properties: {
                        name: "淮南市",
                        cp: [116.7847, 32.7722],
                        childNum: 2
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°kƒīaVaXK@UUVmnXUlVÆkVKUUUmmUÑkUUÝlĉKUwKbU@UxW@@lmVUUVmUUmwaWkL¯K@mULWlIm`XWL@b@¼@V@xkVI@b@l@lkV°Ȯ¹ĸW"],
                        encodeOffsets: [[119543, 33722]]
                    }
                }, {
                    type: "Feature",
                    id: "3405",
                    properties: {
                        name: "马鞍山市",
                        cp: [118.6304, 31.5363],
                        childNum: 2
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ǊnllLnxV@laXLVKmaaXbVIbVKVVVIVyn@n_W@@UnJlUVVXlLnaUWlV@VVIXW@_W@XK@K@UVUUwVamÑXmmwwKUnUKçU@JU¯@m@nknWxWm@@LkKm¼VL@bUJUbkXWl"],
                        encodeOffsets: [[121219, 32288]]
                    }
                }, {
                    type: "Feature",
                    id: "3407",
                    properties: {
                        name: "铜陵市",
                        cp: [117.9382, 30.9375],
                        childNum: 3
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ÒV¤@¼V²@aVV@@x°V£nW@nbnaVXVW@k@aV@VUUl°JUkVm@U@UkK¯WVkKWkU@Ubakwmlwm@kUmUUKU@@VmLUbVLUV¯U"], ["@@LllUL@VlxL@a@UwXamK"]],
                        encodeOffsets: [[[120522, 31529]], [[120094, 31146]]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/ao_men_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "8200",
                    properties: {
                        name: "澳门",
                        cp: [113.5715, 22.1583],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@HQFMDIDGBI@E@EEKEGCEIGGEKEMGSEU@CBEDAJAP@F@LBT@JCHMPOdADCFADAB@LFLDFFP@DAB@@AF@D@B@@FBD@FADHBBHAD@FAJ@JEDCJI`gFIJW"],
                        encodeOffsets: [[116325, 22699]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/bei_jing_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "110228",
                    properties: {
                        name: "密云县",
                        cp: [117.0923, 40.5121],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@vIHZDZQtDLNMXIbHRCXXITbJ@H`LGPRDDJNCLHTOCWFGvGBUJMKGFO^IHWXITQCIY^AXGfRDXF`DJOLB~G\\DZIHHpErUVMhHb]\\MBVF@FTP`@zTbD\\@~M\\K`H^EVODWICAakAQXoIcCOCIgGYNWFWNGGKKGaJEGMEIKYJUT_J_Go@_SyQaSFMEGTcYOQLIIi@EKAUPCV[EEXQCW|aMUMAaYCYNIDGGACIMGGSKDQGaF_C[GaB@GOIiOKAYLmI@CN]F[SWWAcKKI@HMUimEKbeYQYISNUOcBKPIFBNgvDPGZYFSf]CMSIWGEUFgDIQ[MeDMJS@RR@LphFPCHaBAJKF@J]IBJO@HlO@@RKAMPJHCNDJTHFP@ZGNANBRFH@J_fM^ONJNF\\VTDJHDON@XRND\\XRCPVETCLBVKDFJINHRGPRV@\\CLJN@VbXbLVT"],
                        encodeOffsets: [[119561, 41684]]
                    }
                }, {
                    type: "Feature",
                    id: "110116",
                    properties: {
                        name: "怀柔区",
                        cp: [116.6377, 40.6219],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@JHTVHXCHPfnDJGHNDJSB[JSBGVSAOH@PMPuDEHHXZN@PHF@ZLJ@LHVYJA\\OFWP]BMtMBSRGV[JeVAPQVIFENMD¡@^NV\\JH@NNL@NM\\kTQ\\I^FNIpBHGTBFFAZQfKDIXQTLXFXNNVMVHRGpCFLlRLEVBBH`IVO\\G`RDPAXLXBXORHZEHTDLLN@VGTMrQNFPeASKG@GMOAKBYMK@GTUHUXSHMVDNMOUEOZMJML@^KRACMZEZMRQLUHE@OFENPR@DI\\ChMHIDG\\GJMDWHCKGMDCIQCHO_K@GaIJSWWQDaGWJMNCKRsCYGYuJUSaKaW@UIMDK@[QUHOGQJMEILCAUDKFSOUQD[WMCQ@WPMGCCIUSE[IMPMN]`e@IEGAQBMHM@YEOSGCIDMIGNOLB@QP@GkP@AI^J@ILEBIbADGEOog@KQQWSekWQQUOFKZLF@PUNmIaHIUeBCTSHENcJa@_IWSaGu`GLSBKJQFOXGDXVQVOBIHcDSJWBEFGTMH[^mLaXcHiKElTRKtFXZ`MHMPCNRDxZB\\ICIHK@KHbIVFZ@BPnGTGbDXRDJaZKRiGEFSFEJhjFNZFjn"],
                        encodeOffsets: [[119314, 41552]]
                    }
                }, {
                    type: "Feature",
                    id: "110111",
                    properties: {
                        name: "房山区",
                        cp: [115.8453, 39.7163],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@h@bl@HRJDZ``TA\\VVD^H`\\pF\\J`JGv@ZO\\GPSTEjPTR`FnEbDTDHEhLFMTK@ETSPULKEI@OVISKSJACEQNQbVIXGDIN@dMB[IIBcN]ZHNLP@XOWCFWCNRHTpATD@^NVNLED@Rh@jCEF}E[OOHUEW]W@QGGDIQSH_MmFmCUT_K]i@MHCMWFCFE{BMHMPOHKS]CFNGBELDH_@BcAKOACESAOBELaXAROB@FODMEDWJAG[aE@UM@DImEWJMC@OeCA{aE[@{L@MINUCQXKfUJORCHqJBF@TCXWNQX]M[EAJO@@KMBQJIC]EWMCCUBEBFHKDOTMBGNGF]MWDBRDdMDQVyE@LPVHDCP@JVVMTG~HNSH[CmRUvHPHBbA\\PTNRC\\YNJPRARPJDDR"],
                        encodeOffsets: [[118343, 40770]]
                    }
                }, {
                    type: "Feature",
                    id: "110229",
                    properties: {
                        name: "延庆县",
                        cp: [116.1543, 40.5286],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@^AXOPEB[ZIGU@KKI@YGE@OYMGWFGvCNO@OPGTBHUTA\\ITACIGMIHmCOeDGGWSUIGimYEEMgiFITEFEjHLQbYCIWQaCSHmHAOY@UEaJG@LGLDJ[JAwYQCDMNONGY_EWLsSQFkMO[NWAIGaIYL@HMBOKiOQDWEUDMQSF_QIUBWdg@[NaAKQ@M]OQ@WhgLUMMFYQDIRCEUZOOCIOJ[KIUMKL@HIDKVEBM`HJAJSJUdBLGNEdMBMO[BYEWJSNKNaD]PE\\SjOT_RQVEZPpNQXfNA~lNG`@PNLp¼RFLfbdKbATUh@FSNWjGFZVLFHVA~X¨PPROfFJbNJPLFbENJPrEFNPFRHDDJdENJLVEPBJTVTHGHFRFH@PXP\\ORQHW\\BjWFDERLPPBbB\\E`B\\D\\L`@F]FCnJ^AZL"],
                        encodeOffsets: [[119262, 41751]]
                    }
                }, {
                    type: "Feature",
                    id: "110109",
                    properties: {
                        name: "门头沟区",
                        cp: [115.8, 39.9957],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@V@XMnGPY²JQNEhH\\AZMPDVTTDZCPiJkHSHCjIdFtEHITCNITQEKUAMCEIKCECABYESKFWAKBEIIHABGDCKCAIHMHALKEI\\CFIBILIJQZS]BBEECS@E@@C]COKI@CABAAEEDMGCH]A[M@CJWHJaUMRFRBDTITLUJ@PFJKLOVST@FSLENgKGFSCaCmF_ESQiOSFOT[HYPu@IH_[IoE_[]GUC[USB__CYQI@Gakg@qZeHQNMNV\\FVLPgJAFJPRLCH[XcPELUT[JiV_EELFTADBXRTRLJC@fHXHHbPd`fR@NfT`@TLplHMpCEJHJBVLF@JTVnG^KXDXHNVGRLRXFJVdDHSNWLGfEzA"],
                        encodeOffsets: [[118635, 41113]]
                    }
                }, {
                    type: "Feature",
                    id: "110114",
                    properties: {
                        name: "昌平区",
                        cp: [116.1777, 40.2134],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VNLJI\\JPPDYPFVQDCJZRNEVNhKXgR@^P@NLRbB\\Mh@XcVARJE`RTCNFVXRCjPPLNA@GZKbJJHXB\\MNPjLdGbWnK\\]NGHSFEXATIdCJGPARUWUHCPWRELITAHKv_E@iYCaW_BQ\\Y@QIO@QDCIGZCEMWGFMFAFgHEDOCSqKCCFGAMKEAC@ODGCGs@WH@KQA@EE@CE@GEA@EH@GGUEEJEAYD@JM@@DAA@FHD@FTJEHUC@JUBKCKG@G[CIIQReAYhO@OXGDO@@FF@IHJFCPEBACBIAAKDOABXARHPNEHGbQAAKQFGIAM[C@WHKaGiCEGOAHUKCIokSCUSOCYN[BgGMFIR±OZmHWNU@ShbbXDHVXXGJ^lZ@PZ\\Nb@\\FHJAD"],
                        encodeOffsets: [[118750, 41232]]
                    }
                }, {
                    type: "Feature",
                    id: "110115",
                    properties: {
                        name: "大兴区",
                        cp: [116.4716, 39.6352],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@F\\E~DFN@BDFEpHFCHBBEGCDCJBHUDSBB@ELCPbF@B\\J@BJVAFJ\\ADKTCBGECFMT@BMN@@FH@DaNBEnvB@FPBATK@FHEFIAKFBFL@@PKBFJHC@FXBRAFCDMPDTOL@JIVFDHH@DDH@BGRFCDLD@N^@@CNA@KNOAEBCECFEGCFGMGFIPMOEJOLBADBBHGG@GCHIECY@INC@DMGS\\AIOZAAEYA@GT@KKMBEETCGMVINFxA@MJADB@FlA@HJA@NND@DFA@DVAZBBOFKH_JA@K^GBC@EFEG@gAENMXKJigC@IbSJMqGOP£RGSMGE@kbQFDPEFiBSGGSBK]I{CDWCIDOic[C_G@SuSO@EWKCO@MNY@\\uZOPENQD[LKESSKGBKEG@EJGAGHoH¥CqhifeJkX_XFFGHFNEDFPENKHM^IFIVL^S`DVEnNnG`RTCJHH@R^XFXGVPP"],
                        encodeOffsets: [[119042, 40704]]
                    }
                }, {
                    type: "Feature",
                    id: "110113",
                    properties: {
                        name: "顺义区",
                        cp: [116.7242, 40.1619],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@EhEBENXHFNYDJHCD@RJP@R[ZARX`DbjZF@bHXT`Jb@dIFMTGDSfAJVbGnJVM@OKELYPERVXRflXTT@NIfC\\NJRhCVEHFJXNT^DTeZEHYCOhuAMJELOdAVPTMOWBWNMNEJgl]@WGUFIC[T{EEDEHGCIGMI@SECUQI[D{A{GQESPUH]CsiMCmHUeoHENcAaDGCMDGMQCACCBaCGLMAHB@DIEQLOAAEEJ@CW@CDINGAAGKQOCgV@LG@BEGDKNeREFBNCFIDOPKD[@YRW@GFWDAFE@EHDDrLDTCPGF", "@@KrJEH[\\B@FF@CHFBHUNAJKADGECBCMAG^E@EbI@BEGP"],
                        encodeOffsets: [[119283, 41084], [119377, 41046]]
                    }
                }, {
                    type: "Feature",
                    id: "110117",
                    properties: {
                        name: "平谷区",
                        cp: [117.1706, 40.2052],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ZJZRafFLjnVGNJ@LLBdXX\\T^EDMJ@nZKLBjPPJ@HbA\\H`DbERHLCFK^BZaFWXQLAGMHa\\OLO@SBIpBdCLVQfElO@GSAKEDQTC@GEBKG@ORIJBDAPDFA@CaOq@GGQAAEJK@KMUGAAGEAa@MGMBGCGSIIW@WSUCMDOJeWOM@IUF{WMWaDIMgIoRoCOKeEOEAG_I[cg@wLIFENQFDVTFJ@HNDJGHCFFFS|D\\EJHV@Xk^IhMFMNAXPX"],
                        encodeOffsets: [[119748, 41190]]
                    }
                }, {
                    type: "Feature",
                    id: "110112",
                    properties: {
                        name: "通州区",
                        cp: [116.7297, 39.8131],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@FDAJTGDNDCTDDEDBBE@DT@@EHCDGJ@EIZ@@FDBR@ATFBBVFFE@@HNA\\VE@CLIFNJFNJBCP]A@LJFA@HJEDD\\C@DBCHLAEPF@@DH@APHAERDF\\GIxDTM@CFLBBFJ@CNUPMHECGDBF]BMFPDLRBHHBJMDCX@@DFIBFPBRKJF@CGANBHKbDDABDRDHNNCHDbCdBFMpGHiOYMefKJMC}HWAUNW\\NNBNAkNU|]HMTMN@MZBLFFF@RIRUTBMFIEGaAGGAOIIUGTSFcYKS@MSLYPKRUBU]EWDOI]CKGASgW@MTWKIMCS@uMAKKADMECGAKVUTSDy@IjWLMNBF@hHEF@FAD]H@LIBG`ELAPYAUB@CEB@CMC@MIB@GkB@ECAIB@NwBMEUJHNSDFFNALLS@@HZBBFYBJP[BHTCND@JMZ@FDGJHDH@GHAABCKAIPPFONEJNHEHHDEFFDADBFMP@L"],
                        encodeOffsets: [[119329, 40782]]
                    }
                }, {
                    type: "Feature",
                    id: "110105",
                    properties: {
                        name: "朝阳区",
                        cp: [116.4977, 39.949],
                        childNum: 2
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@bFGHBHFBFIVFHHG@@FFB@HDFF@@FRB@LXGt@DHCH@PBDLFBNF@BEXCHEX@ZQ\\@LCPOJCDEAMFEfQLMHCAFH@@KhUNE^AAEHCFDNGVODMI@AEKADEN@CSJw[HCEFQGBBOG@@CE@FOKBDGCAD@C[FCGIB@IE@K^BDOIAEMMIJEDKF@[UMB@GF@EEAUEABSQ@CA@EY@FJI@CHGD@FS@@CAFCACFSCCDCMSHBIECMB@D]@@MKCDCQEAHG@CCG@CGUEIJK@SPOCCNEDQBDNDB@DJCDLFCBBALJB@BVGPBKVO@KHCCCD@FE@BNA@FNCTDDJA@FGB@NBDW@CL@hT@@ZHHQDDDAFSAANBC@HG@EFS@@DE@@PCB@Ue@CADNJB@FCBWA@LI^ix@FIHrH"], ["@@HUNAJKADGECBCMAG^E@EbI@BEGPKrJEH[\\B@FF@CHFB"]],
                        encodeOffsets: [[[119169, 40992]], [[119398, 41063]]]
                    }
                }, {
                    type: "Feature",
                    id: "110108",
                    properties: {
                        name: "海淀区",
                        cp: [116.2202, 40.0239],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@plDJVLGPBFHjDbHGL@X\\DBNHJREBLRBHaFGMGOBQAWPBLCBBAJBDFADOIEJGE@@EP@HCPWP@ZgfBRQJJ\\D@HLHLDVA@IVDFGSI@EGC@EBB@CN@@IZCAGHGaEqGJG@EjwJ]@K@GSA@e_I@NE@CA@Kg@KC@ENCFAKQAW@WIMK@V@I@@F@^EDFB@HcIaDYCBRRDCHD@EFLN@FE@CJUPEJOJMTBPEDIFCMIAKNOGMRFJNDVBFLSRMJSDGJsFcEiJGDGTIlOjYD"],
                        encodeOffsets: [[118834, 41050]]
                    }
                }, {
                    type: "Feature",
                    id: "110106",
                    properties: {
                        name: "丰台区",
                        cp: [116.2683, 39.8309],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@hMN@NFTQCFRCBJFA@HJ@@HJ@HJ\\FTACD@@UNLXJX@@MA@@IECAQlDFEHBDI~D@GXCFMVDFCH@@NF@ANJC@FnAB@AMF@@EDCDDLGP@LUOAUH@AIABKAAEDCKID@CCACMWA@EGDEILA@OK@AELEJBFEEGL@BSOA@EuAFmMACbG@@EM@ANS@ENFDAHSDCL[BEIUBAII@A[E@OaKD@FAACTGVIACDHDAFGAEDoGEFACM@ig@@QFCMKMU@]SCoBGSMQDEXXDWPO@MKYGM^AdJJA\\cNB\\G^DNHFCBFABDBJ@PL^D@DF@T@FDAF^A"],
                        encodeOffsets: [[118958, 40846]]
                    }
                }, {
                    type: "Feature",
                    id: "110107",
                    properties: {
                        name: "石景山区",
                        cp: [116.1887, 39.9346],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@NQPHLMJBDNJEFCAONSPIFIVODIF@@EKMFEC@DGQCAQZDbCdJ@GEAFC@]@EJ@DCSB[EGII@@GI@@GEBAIQDDESRMEM@gNYTIRKJAJEJ[DFJKLGBGNBJLDCDAHGBJJAFBLEXTLZFBAFDLD"],
                        encodeOffsets: [[118940, 40953]]
                    }
                }, {
                    type: "Feature",
                    id: "110102",
                    properties: {
                        name: "西城区",
                        cp: [116.3631, 39.9353],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XBDA@EIACM@IJAD]BC@SFABISAD]H@@OAEDQEW@BLEMD@FLDh@@LDBF@@M`J@fTB@H"],
                        encodeOffsets: [[119175, 40932]]
                    }
                }, {
                    type: "Feature",
                    id: "110101",
                    properties: {
                        name: "东城区",
                        cp: [116.418, 39.9367],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@DBf@@VDA@OF@@CT@FEH@@GADBMTBBECCRCGG@YS@@gDK@AC@PG@C^TBAJEB@TADC^IB@J"],
                        encodeOffsets: [[119182, 40921]]
                    }
                }, {
                    type: "Feature",
                    id: "110104",
                    properties: {
                        name: "宣武区",
                        cp: [116.3603, 39.8852],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@RBX@RFFCBFU@aK@WA}CCJGAEFkCBRFD@JB@@N"],
                        encodeOffsets: [[119118, 40855]]
                    }
                }, {
                    type: "Feature",
                    id: "110103",
                    properties: {
                        name: "崇文区",
                        cp: [116.4166, 39.8811],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XBL@@bEVD@BX@AC@MHA@EIBCCDSEMmB@EIDBME@@MG@EDUCENWD@H"],
                        encodeOffsets: [[119175, 40829]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/china_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "xin_jiang",
                    properties: {
                        name: "新疆",
                        cp: [84.9023, 41.748],
                        childNum: 18
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@ρȁôƧƦóəʵסʵóƪԫʵѵͩƧͩړυࡓɛʵ@ȃ@óᇑѵƨɝɚôóНѺͩɜ̏ԭʵôƧɞñ@υƩ݇ȂóƩƧ@ѵȂυƥŌਗ॥ɛóʵѵƧѹ݇̍ࢯəɞυρͩ̏óਙƨƧŋôōó̍ͩóʵןóŋړͪƧѶ@ɜԭԫƦɛȄ̍ɝȄöςƩȂ̏ñȀ̏ƩóóŎə@Ő̎@ɞȀɝŎôƨóנѵȄƧ@óŏɝóɜôŎ̍ͨςŎ@ƨóôƨɞ݈ʶóƨφó̎Ȁƨ̍ԮòѸԮמ@ѺȀ@ƪၬֆòȂñ̐òȂɜóƨ̒Ŏ̑߼@φρȀ@Ő๐ς̎Ƨφ@ɝφڔ೦Ԯǿࢰ@ƦŏԮƨƨȄƧ۬ɜʶڔŐɚɚóŐôƨ߼ôƧƧó̐ƥóŏѺǿƦȁφƧςƨƧ̒@ɜƥƦυ̐ɛƪͩƩəƪʷ̑ə@ȃƨʵנŋྸōਚԭԪ@ɝƨŋ̒օςʵôƧ"],
                        encodeOffsets: [[98730, 43786]]
                    }
                }, {
                    type: "Feature",
                    id: "xi_zang",
                    properties: {
                        name: "西藏",
                        cp: [88.7695, 31.6846],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ôŌנôʶ̎ͪôóŎƨŌਚƧ̐ôςͪφɚɝࢰ݈̎ѺѶƨôʶ०ɜਘƦŋφѶȁ̍ôŏɚŋ@̑ə@ŏò̍ɜóƥôʷƧ̍φѹԪ̍ע@Ѹʷɜ@ôñנ@Ѷɛɞô̐ŏѶƨѸƧƥōƦôŏô@ƧôƩ̒ŋƨŌƦǿô̎ɜȁ̒óʶѶôôО̒ςƥɜНφσɛȁ̎υƨఱƧŏ@ʵƥ@ŌóóóͩƨƧóŋ̑õóɞóɝԩͪɝρôƧ̍ƧѹͨڑŎ̑ōóƧࢭͩ̏ѵɝóఱóóԪυô@̒ƥŌ̏Ƨ̑Ȅ݇ŎƧѵӏ@ɛõŏɛȄôӒƧŌѵǿɝƧŋԫ@̏ʴƥ@óǿ̑Ȁóǿ̍ςóóυô@ʶɛñρƦƩŐó̎óѵó̑ͪࢯОóɜןƧ̏ƥȄ߻̎̏̐ןŎɝɜöɞƩȀôöɛȀóͪ̐ƨƪ̍̎ȂƥԪυО@φɞôƪ"],
                        encodeOffsets: [[80911, 35146]]
                    }
                }, {
                    type: "Feature",
                    id: "nei_meng_gu",
                    properties: {
                        name: "内蒙古",
                        cp: [117.5977, 44.3408],
                        childNum: 12
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ኊȁ૊ö߼ƩɜɛנñԮɛѶóԮô@ȁѸóמ̎ගѺၬ@߼ʶԮӒ߼̎@ŐѹӒ̒Ԫƨöග̑ѶȄ̒ς।ѶɚöɞɜʴڔôôȂ̎ѺȀςƨƪóԪɜôɛОਕڔԭѵ̍ѹȂԫɛƥ̍Ȃóɜ̎ô@ʶ݊ੲࢮʵږͪנƨôȂƧ̐ͪ@ŐƦƨφԬѶɜôƦ@ŐƧôôƦəŐ̏@ŐڒѶԬô̐ʳԩНςōôŏɞ@ƨȂѶəóƧ̒ػ̎ó̐Őנóƨô̒@ƨɚɚ@עԫɛɛ@ȁυͩƥʳòևρ̑ࡗƧͪ༃ॣԮփ̎Ʀ@ôô@ôō@@ȁѵóƨ̍υȃóʵɛƨƥóυȂóəƪ̐ρƧͩɜԭڔȄ̎عƧȁ̐ŏó̍ɛƥƧ̑óρŐ@Ƨ̏ɝəɛ߻ͩ̍ͩɝО̍ƪƧóóӓƨóƧʳ݇@ɝςƪ@ʴƩƧƦôƨɛȄəƧŋυóͩѵ@ɝǿóŌן̍ɛóО̍̑̏ôȁ̍ŏòȁñóƦͩ@ǿə@ɛƧ̑ρȁυô̍օѹóȃə@ȂσʵѷƪòƩ̍ôó߻ۯôʳƧóõʵѵóѹɜ̍ȂѹôɛŌφֈƩͨρóυӑóޟఱ̑݇ͪóƪƨŌóȄڔԬƩςםñ̑ȃѵŐԭŏƨȁɛǿρôõɚɛóƧОə@ѹ̐ѵöԪͨôͪɛ̒ןŏƧƥóôƥƧɛŌôóɝó@̒݇Ӓ̒Ō@Ŏԭࢰ"],
                        encodeOffsets: [[99540, 43830]]
                    }
                }, {
                    type: "Feature",
                    id: "qing_hai",
                    properties: {
                        name: "青海",
                        cp: [96.2402, 35.4199],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ƨ@ôƪ݈ȁƪ@φɝòóƨԮʶɛ̐ѹͪôОəóƧɞᇒѶ@ôږô@ǿѶƪȁςɜͩφςŋɞôѶɛƨŌɞ@ɚςŐñԪॢͩƨȂɞóƨŐ̎ŏעӏ̎óƧƦô̒ȁɜςͩ̒ɚɛƨôƨɝφɛóȁƨŋóóɚͩƨóóƩ@ƧəŋƦƩ̍@ƧƧôǿυ̑@ȁɞǿõŏρƥסɚƧóτԫɞôƧƦ@ñȃòñƥóυôôѹѵ@ŏ̏Ȅɝó@ȂəŌóəѹƦ@Ő̍Ōυ݈ԩŐƧóôƧ̑ôʵɞƧ̑ѵôƩɞƧ̑óНѵóôʵ̑ɛȂó̍ƥȀƧŋ̑Ōóƪ@ƨóóŐƥƦŎѷƨѵƧ̏Őɝóѵɜן@óòɛ@ѷʸס@ԩ̎υѺƨ̎óʸôƦɛñ̎@Őɚ@̒əŌóŐ̎"],
                        encodeOffsets: [[91890, 36945]]
                    }
                }, {
                    type: "Feature",
                    id: "si_chuan",
                    properties: {
                        name: "四川",
                        cp: [102.9199, 30.1904],
                        childNum: 21
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ôôŋó̑Ԯ̒ɛОמͪƨōöͫ߼ƥôȃƨóóñôƧóƧôōڔŏƨŐ@ŎôòƥѺŎ@ōɜóנôǿôƦôԮ̍ɜôɚƧñɛɚȁ̍Ƨɛևυ@óóôŋρԭɝ@Ƨʸ̍ŏυɜƧƧóƧƨȁρ̍ƨȃɚôʵφóô̑̏Ȃ̑ʵɜʵɞ@ƨʳסƩóŎəóɜƧôƩƧρóôôô@ŎƧƨƨƪѹó̍̍Ʃ@̏ѹНôޟ̍ƩóƪυɝɛəƨôŎɛȀ@Ȃ@ñɝʶ@Ōρנ̏õóɛͨƨȂѵОɛʵ@̏ƩŐó߼Ƨల̍φɜȂυτɛОρƦɝƨóƪ̒Ѷɝƨóʶ̒óƨƨôԪŏφ݇̎ŋ@ŏѺƥôɚɚŋ@ȁɞô̐ȃ@ŐѶóѺφóƦôñòòȄ"],
                        encodeOffsets: [[104220, 34336]]
                    }
                }, {
                    type: "Feature",
                    id: "hei_long_jiang",
                    properties: {
                        name: "黑龙江",
                        cp: [128.1445, 48.5156],
                        childNum: 13
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ᇔȂਚНƨŐѶŏöƥςŏñƧƦóƨȁ@óƨóȁφӑóóƨóǿ̎̑ôНɞó̑ɜə߼̎ǿ̒ôڒӑφ@Ƨȁ̎̏ƥƩ̎ρశôȂςƨφ@נɞ݈̑ƥƧɛƨʵƧȃƥ@Ƨƥ@ŏ̑ԩôɝρρóɛƧƩͩƧó߻ʸ̍ʷѹƥɞڕõ̍öɝυ̍ȂƧ̐̑ŏóƨñŋѹóóȁ̍̏Ԭõʸ̏ŏ@ǿ̍@ƧОυ@ñƨòȀƥŎ̑ŐѵóɛŌóȂԫōƧŎѹñ̍ʶóОן@Ƨ̎Ѷô@Ȃ@óŎó@@ó̍ƥԭք༄।ƨͩ̒ࡘςñֈƦʴφͪ@ȂɜɜסԬə@Ƨə̑@Ƨóןô̏ŏ̍ô̑ؼôƨѵɚƧȁɝ@óŐρŎԪО̏ʴ"],
                        encodeOffsets: [[124380, 54630]]
                    }
                }, {
                    type: "Feature",
                    id: "gan_su",
                    properties: {
                        name: "甘肃",
                        cp: [95.7129, 40.166],
                        childNum: 14
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ڔôԮࢯ@ō̑ŋ݈ӑ@̑ɞôóôɜŋƦƨôóƨƦנŐɜ̑óͩԩͧѶõѺ̏ɚ@ƨНɜôöəςóɜȀƧȂԮŐѶŏ̒ȄמòƪρړԫôȃƧŋôƩ݈ͩɚ@@ǿɜ@φͩóŏɜӑƧōôǿ̎ôƥƪóõö@ôƨôƧƦôó̒ɜ@ɞŌõʶ̏Ő@ȀóôƨȂ@ʶע@@ƥ୾ӑó̑óŋôʵóɛړ@@ƩöóƩóρɛƨ̑@óʷƥƥ̎ɛƧôōƧǿôͩѵôɝȃɞȁõƧρóó@ōƧŏړŐóŎôƨóƨôòƧôóȄ߻ƦõͬƧŎםͩɜНԭ̑ô̒óŌóƥ@óƨɝσԬƨôעəςƦöŐɝȀ@Ȃφ̒óȀƨƨ̎@ƥƪɚŌ@ƨôƪƧôəͪôôƧŌôȂυɜƧɞƧóəɜ̑ρͪɛ̑Ȃóƨƥ̍ôסӐ̍ŐƧŏɝôƧȁॡͪòԩρŏ@əɝƧŋѵɜɝóρŌυɛͪρƩȂѵ@Ȁڕó@ȄɜʶφࡔڔƨͪѶͪԬʶôƩעʶɚʶƥôóƨςȂ"],
                        encodeOffsets: [[98730, 43740]]
                    }
                }, {
                    type: "Feature",
                    id: "yun_nan",
                    properties: {
                        name: "云南",
                        cp: [101.8652, 25.1807],
                        childNum: 16
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ôɞôɝ̒öôŌƧƨôͪôô@ŋƦ@ʶƨŐô߻ƪŏ@̐ɜʶѶНƧȁɜͧöô̐ςן@ŋɞʵ@ò@ȁɜǿóōɚƧɜφɞôƩ̎ƪóޠѺО@̐̎ƪô̎ѺƧƩƨƧ@ōóóôóςƪƨƨóôɛó̑ԭƥŌɛǿɝƨɛͩô@ǿƨȁѺŌɚɛ̍ןѶНɛƧôóƥȁƦͩôŎɞƨ̑ɜòôφ@ƨʵ@ɛѹōóȃəƨυǿóʵρƧƧŌƩɛ̏ȄñƧƧȀɝ̍ԩʶƧ̑υóŌƥʳɚӑóНƥô̑óӒѵʵѹƧӐןôƪφõŌƪ̒ԫŌƧؼƨƨסρȁƧƨȂóʶó@@ʴƨôôφ̎Ŏ@ȀƨƪɚƨóƨôôôςóޤƧŌƩŋƧԪ"],
                        encodeOffsets: [[100530, 28800]]
                    }
                }, {
                    type: "Feature",
                    id: "guang_xi",
                    properties: {
                        name: "广西",
                        cp: [108.2813, 23.6426],
                        childNum: 14
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ƦŋѺ̎ڔʵƨŐ@ƦמȄƪôóȂɜŌɚͩɜ@öóɜôôȂƦôɜȁ@ɞφóȄ̎ƨʶɞŋƨʴɚǿ̐̎Ԭ@ôñ@̏ƨρ۫ôɚƨƨНƪŐ̎ƥóƦʵƥŋ@ȃóƥƧ@@ŏɝǿôυƧȁѵɛ@əóŏ̑@@ə̍óƧó@ȁƩρóòНƥô@Ӓ̑@óŎ̍ƥσŎυ@̍ƨ@Ō̑ôóͪƨ̒óŌړ̏Ŏ@ŌôȄѺŎ@ɜƧʶυ@ñóɛƧ̒ɝóōƥͪ"],
                        encodeOffsets: [[107011, 25335]]
                    }
                }, {
                    type: "Feature",
                    id: "hu_nan",
                    properties: {
                        name: "湖南",
                        cp: [111.5332, 27.3779],
                        childNum: 14
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@քɜОƨ@öŐמóƪôƩɚ̒Ő߼ȁςͩɜòƪɜȀòñɝòѺͪ@ŏƨŋóɝôǿƨɚȃóəƨȃѵͩó̍@ȃƨóóƥƨƧ@ʵƦóͩɜɛóñԭɛōυȂ̍ƧƦō@ɛƥɛȀ̑óʷóō̍ƩŏƧОəƧóς۬Ƨ@̐óòԫ@̏̍əȀƧʳɝŌóɞƧƨɜóŐƨò@ȄƧŌρŋóôԪОóʶ@̎óȄ"],
                        encodeOffsets: [[111870, 29161]]
                    }
                }, {
                    type: "Feature",
                    id: "shan_xi_1",
                    properties: {
                        name: "陕西",
                        cp: [109.5996, 35.6396],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ςôöƨɝȂɞȄѶóóͪƨȀóŎƨ̍ɜƦƦôʸ̒@ɜƧςƪôõô@ƪڔ@ôɜóʶôŌô̒୽Ӓ@Ʀ@Ѻ̎ɜѺɛѶôöʶôƨóʴ߼۰óô̎ñƪѸƩτʶ@ȁòŋəѹóǿ̑ʵ@ȁ̒ʷυփô݉ôН̏ط@ȁƨóô̏ƪõ@ʳ̐ʵ@ɝɛŋƩŌɛóןôƧŋ̒ó@ŏ̐ƥ@ŏυ@ƧƧôן̏@ƥȂѹɜəɛóԭ̎ƥóóóȀןɛô@ŎѹōñƦ"],
                        encodeOffsets: [[108001, 33705]]
                    }
                }, {
                    type: "Feature",
                    id: "guang_dong",
                    properties: {
                        name: "广东",
                        cp: [113.4668, 22.8076],
                        childNum: 21
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@Ȃôôƨ̎@ɚ̒@ôŐ@ɚѶɜƨȂóφɞȀ@Őƨ@ôƦ@ȄƦŌƥʶƦôôŎôʸ̒ɜǿƦ@ɜƥŎ̎ƨφȁɜŎòƥԮŎƨōóŏɛƧɝəɞƧ߼ɜςȃñȄƦŎ̒ōôòƨəƨɚН@əƨ̏ƪʵυŌəɛóəԭŏəóŏѹρʵɝƦ̏ƥʳѶöō̑óóŋρȀυƧƥɛѹōƧôןɛŏѵ@óŋôʵɝƪԩõ@Ƨō̍@Ƨ@@ƦɝԮƪО@@", "@@X¯aWĀ@l"],
                        encodeOffsets: [[112411, 21916], [116325, 22697]]
                    }
                }, {
                    type: "Feature",
                    id: "ji_lin",
                    properties: {
                        name: "吉林",
                        cp: [126.4746, 43.5938],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@נ@ôН̎ʵѺòƨōԬŎôȁɜŋѶô̒ŏƦōñǿòƧφ@ƨН̎@@Ȁ̐Őöʷ̐ԫ̎ôȂѺôòŌôƧ̒Őƨ̏̎ȁφ@ŋƩͩםȃƨ@ȁ̑ʶ@Ōóôɛƥѹ̑συ݇@ɜρƧȃࢯƨôəȂɛōƩɛ̏υρóõƪʴυφ@ʶôŌóρք@ɜƧ@ɝǿƧͪρȀƩó̏ŐƨȂ̍غړȃɛԮƨͪ̏ςƩôɚφȁƦôɜƧôʶφȄ"],
                        encodeOffsets: [[126181, 47341]]
                    }
                }, {
                    type: "Feature",
                    id: "he_bei",
                    properties: {
                        name: "河北",
                        cp: [115.4004, 37.9688],
                        childNum: 11
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@Ʃ̒̏ŌѺ̒ƩóȄƧŌƥͪòôñȂ̎ŐóȂ̒̐̎ôНɜנ̎ôŋɞȀѶ@ôͪφƨŌɚɜȃóƧƨƥƪ@ʳƩɞρ݈@υНφʵɜƦρƨƧ̍ɝóɛѹ̍ρŏ̑ôóƨ@ƧƦôƨɛ@ƥƨ@ȂƦ@@ôəŐƧʶƨŌυ̍̎ɛŋôōɝ@óƧ̍ƦʵѵʳôʵɜŏςôƪŋƨŌɚ@ôНƥƧ@ōѸɛ̐ô̎ʵѵНԭ@̍̍Ƨò@ȁɝ@əρυͩƪ̏ƩõƧŎƧōóॡȄɛʶɜȀ@ɞςѶƧƥςɛŐ@ɚɜɜ@Ŏôôςƪς"], ["@@õə@Ƨɛ@ŐóƦφô"]],
                        encodeOffsets: [[[117271, 40455]], [[120061, 41040]]]
                    }
                }, {
                    type: "Feature",
                    id: "hu_bei",
                    properties: {
                        name: "湖北",
                        cp: [112.2363, 31.1572],
                        childNum: 17
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ñȄυƦöŐƩóנƨƨφ@@Ő̏Ʀ@Ő̑ôƨŌנóɜôƪŋɜŌѶօڔə݈òɞōɜŎôӏƦóƨô̒óôȃƨó̎ŐôƧƪ@ƨȁςƧə̑̎Н@̍Ƨŏρôԭͩԫ̍ʵƧóȀôɞƧŌ@ŐѹͩñòɞñɛǿƩɛñρͪ߻Ȃ̑ŏƪəƩóםôõŏƧ@ɛНƥȄó̑ѺƧôφóƨƨƦƪóɜŐôóòôƨóφ̐ƨóƦ̎"],
                        encodeOffsets: [[112860, 31905]]
                    }
                }, {
                    type: "Feature",
                    id: "gui_zhou",
                    properties: {
                        name: "贵州",
                        cp: [106.6113, 26.9385],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ɜȀƦŋԮô̒ɚôōעƪƧʴɝ@ɛʶ̒ʶ̐ȁƦóȂô@ôŏ@ōôƨʶѸô@ʶƨɞó@ōτöòυƨ@@əƨô@ɛ̒@Ʀɜôȃ@̍ôʵԩНôóςŌƨŋ@ȃƧñôŏƧɛƨôɝƧʵ̍ôȃυ@ɝɛȂƥóóȁɛóõôɛ@əͪɛŋôȁƩóםȃ@ƥƧŏړʶѹ̍ƥŌƦȂóôɜƨѵО̎נəɜѹŋƧȂ@ȀóɜͪɞƧ"],
                        encodeOffsets: [[106651, 27901]]
                    }
                }, {
                    type: "Feature",
                    id: "shan_dong",
                    properties: {
                        name: "山东",
                        cp: [118.7402, 36.4307],
                        childNum: 17
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ʃ̐φͪɚςɞ@@Ȃƨñ̎̎Ԯ@ѶОƨƧڔ@φН̑ŋ@Ʃ̒ǿ̎@ƨɜԬςôʶ̐ʶöԫƨƧנƥɜŎôō̎@ôŏóρƧŏԫôóƧԩó@ƥɜƧԭóƨʵɛƨ߻ӑɜНԩóô̑óƧʳəóɛƧ@õȀƧ̍ȃɛŐóŏυО̍óɝƩԩ@ƧɚԫȄɚʶƨɞʶԪ̐ړɛƪ̒"],
                        encodeOffsets: [[118261, 37036]]
                    }
                }, {
                    type: "Feature",
                    id: "jiang_xi",
                    properties: {
                        name: "江西",
                        cp: [116.0156, 27.29],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ƧȄôɚəȄ̎ʶԬԮͪςóƨŐƪτɞƦōƥƧ@ŏςôóŐôô̒ʷѶƪƩƩǿ@ō̒ɛôυ@Ƨȁѹɛəƨѹ̑ƨ̏óƥѵʷô̍ɛȁôŏɝǿƧԫƧôʳƥōòȃρȄ߻ɛɝƨɞɚɜƨôŐƧŎԭōñƦòԮɜôɛôͪƥ@ʶƧƨôƦƧô@Ȅô̎Ѷͪ"],
                        encodeOffsets: [[117000, 29025]]
                    }
                }, {
                    type: "Feature",
                    id: "he_nan",
                    properties: {
                        name: "河南",
                        cp: [113.4668, 33.8818],
                        childNum: 17
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@φ̎ƪ̐ɞȄɚ@@Ȃעó̎ŌѺ̒ôֆॢȃôƨŎƨōƪöƩ̑ڔɜԩ̏ɝʵƧəʵԬȃƨəԪ@@Ƨ̒ŏô̍υȁƧɚ̍ôóŋ@ɝƧŋõ̑σ@ŏɜŋôɝ̒ƧɚôôطρóóɛƩ@óƨ̍ŏƧôóȄ̑ôƧóƥôóӐɛōɝŎ݇ñړɚѵֆ@ɞ̏ʶ@ʴƩöó̐"],
                        encodeOffsets: [[113040, 35416]]
                    }
                }, {
                    type: "Feature",
                    id: "liao_ning",
                    properties: {
                        name: "辽宁",
                        cp: [122.3438, 41.0889],
                        childNum: 14
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ƨʴƧôôӔƨô̎ƩɞН̎ͪ߼ͪɜɞɚ̐@ƨςŏ̒ôƦƨɜô̎ƪôςǿƨͩɞȀƨ@@ɛςփôóŋ@ʵφυƩʳö॥փρѹס@əɛ@ͩࢯ@ѹʵρƩʶφȀƧ݈̒۬óʸɝŎѵ@ԭԫןɛƧƨƥςɛυʶφО"],
                        encodeOffsets: [[122131, 42301]]
                    }
                }, {
                    type: "Feature",
                    id: "shan_xi_2",
                    properties: {
                        name: "山西",
                        cp: [112.4121, 37.6611],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ɚѺñŌɚôȄѺ̎ֆφóςȂ̒ɜƨɚ@@Ȁƨŋôȃƪѹ̑̐ŋƪ̑Ʃρρóó@ōɛɛ@əɜŏƦρƨρѵ@ɝɛǿɜʵóօѹ̑̍ŋסô@ȁə@ɝȃ̏̍ƩυƧô@Ȃ̐ظóОó݊φք̑ʸ@Ȃ̒ʶôȀ"],
                        encodeOffsets: [[113581, 39645]]
                    }
                }, {
                    type: "Feature",
                    id: "an_hui",
                    properties: {
                        name: "安徽",
                        cp: [117.2461, 32.0361],
                        childNum: 17
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ó̎̑Ő@ƨƪѶǿɜ̑φƦʵ̐ƧѵôóƪôôυςƨȂɞŏ@̍ԫôò̑ƥóȃѶͩƧƥôŏѺôŏƦ@ƥͩƧôȁυó@̑ƧɛѵʵƩƪѵ̑ʸóóôŏρó@ŐƦƨƥŎσɝƩ@̎̍Оɚ̒ρƨƧȂôɜςôóظəó̑ƨóɞɛŌ@Őτö̒ƨŌ@ɞôŌ̎óƨəφȂ"],
                        encodeOffsets: [[119431, 34741]]
                    }
                }, {
                    type: "Feature",
                    id: "fu_jian",
                    properties: {
                        name: "福建",
                        cp: [118.3008, 25.9277],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@̎óȁƨӑ̒̎ɚƨͩφŐƨɝ̎ŋóŏρ@ōƨòʳəóƨō̏õɛƧ@ƨѵƧōəŏóŋƧô̑ɝɛʳƥ@@óɛõ@Ƨ̑ƧóȁəƧ̑Ƨ̐@ɚəОƧƧɚóñ̑ŎóʴƨƨԬɞȀóŐɜȂó̎ѶʸôƦƧ̐Ѻ̒ɚƧѺɜƨȂ"],
                        encodeOffsets: [[121321, 28981]]
                    }
                }, {
                    type: "Feature",
                    id: "zhe_jiang",
                    properties: {
                        name: "浙江",
                        cp: [120.498, 29.0918],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ѷʶƨɜ@̒φôóȂƨƦͪ@̐Ѹ̍τȂ̒̑נŐמôƪƧôӑ̑@ƥρͩƨօ̏@@υɝó@ŋɛ@ôƩəóƧѵυó@ƩɜŋƧ@̍ŌƧɞυŏƧͪ̍ə̑ƧӒôȂ̍@óφ̑ɜ@ŎƪȀ"],
                        encodeOffsets: [[121051, 30105]]
                    }
                }, {
                    type: "Feature",
                    id: "jiang_su",
                    properties: {
                        name: "江苏",
                        cp: [120.0586, 32.915],
                        childNum: 13
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ôɞ̎φНôŐɜŏ̎Ȅƨöǿƨ@ôɜɚƨʴ̒ôôó@Ƨ̎əԮȃԪૉöͩ̐ƧòʵφƧôʵ@óړɜóŏɜǿƧɝρσȁѷ̎̏ƥóŐѹóŐƨƦѵͪôȄƦñ̒Ԭó@̎ɝŐƧȁρóφƩóóôƨѶ̏ƥʶυɛ̒ѵȀ"],
                        encodeOffsets: [[119161, 35460]]
                    }
                }, {
                    type: "Feature",
                    id: "chong_qing",
                    properties: {
                        name: "重庆",
                        cp: [107.7539, 30.1904],
                        childNum: 40
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@əȂòɜƨѺɛƦȁ̐@ƪõŏφƥòȃƥ̍Ƨôυ̏ƧôñóóôɛŏƩôƧƥôƧóυƨ̒ѹôƦȃ@փƥɛ̑@@ɜƧó@ɚƧ@ñφσõ@ŎɝôƧ@ʵѷóƧʵó@ŎóŐó@ôȁƥó̒υôóʶəƧȄς̎ƧȂôƨƨƨφɛ̎Őƨʷɞ@ςԮóŌôôφ@ɜֈ̎ƨ"],
                        encodeOffsets: [[111150, 32446]]
                    }
                }, {
                    type: "Feature",
                    id: "ning_xia",
                    properties: {
                        name: "宁夏",
                        cp: [105.9961, 37.3096],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ల̒ôޠφӒςôƪͧυևɜŋѺó̎ȁ̍ɛ@ѹס@@ʵƧȁôó@ǿ̐ŏöʵɝŋɛ@ô̑ƥóóƨƧóôó@ƩôóƦ̍óȀƨŎɛӒôŐυͪɛ@@Ȁə@"],
                        encodeOffsets: [[106831, 38340]]
                    }
                }, {
                    type: "Feature",
                    id: "hai_nan",
                    properties: {
                        name: "海南",
                        cp: [109.9512, 19.2041],
                        childNum: 18
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@φɜƦʶ̐ôφô̎@ƨŎö@τʵƦԩ۫õН̏óƥȃƧ@Ʃəםƨ̑Ʀ@ޤ"],
                        encodeOffsets: [[111240, 19846]]
                    }
                }, {
                    type: "Feature",
                    id: "tai_wan",
                    properties: {
                        name: "台湾",
                        cp: [121.0254, 23.5986],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ôƩɝöƧɝѵəޣ̏ρƩԭóōóͪρɞƧОôԪ݈ଦѶɜ̒ɛ"],
                        encodeOffsets: [[124831, 25650]]
                    }
                }, {
                    type: "Feature",
                    id: "bei_jing",
                    properties: {
                        name: "北京",
                        cp: [116.4551, 40.2539],
                        childNum: 19
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@óóóυóôƥ@ŏóóə@ƧŋƩŌρóɛŐóʶѶʴƥʶ̎ôƨɞ@óŎɜŌ̎̍φƧŋƨʵ"],
                        encodeOffsets: [[120241, 41176]]
                    }
                }, {
                    type: "Feature",
                    id: "tian_jin",
                    properties: {
                        name: "天津",
                        cp: [117.4219, 39.4189],
                        childNum: 18
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ôôɜ@ƨöɚôôôɚŏ@óƥ@@ȁƦƧɜ@óƧƨƥ@ƧóəН̏óѷɜ@ŎƦƨóО"],
                        encodeOffsets: [[119610, 40545]]
                    }
                }, {
                    type: "Feature",
                    id: "shang_hai",
                    properties: {
                        name: "上海",
                        cp: [121.4648, 31.2891],
                        childNum: 19
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ɞςƨɛȀôŐڔɛóυô̍ןŏ̑̒"],
                        encodeOffsets: [[123840, 31771]]
                    }
                }, {
                    type: "Feature",
                    id: "xiang_gang",
                    properties: {
                        name: "香港",
                        cp: [114.2578, 22.3242],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@óɛƩ@ρ@óôȀɚŎƨ@ö@@ōƨ@"],
                        encodeOffsets: [[117361, 22950]]
                    }
                }, {
                    type: "Feature",
                    id: "ao_men",
                    properties: {
                        name: "澳门",
                        cp: [113.5547, 22.1484],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@X¯aWĀ@l"],
                        encodeOffsets: [[116325, 22697]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/chong_qing_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "500242",
                    properties: {
                        name: "酉阳土家族苗族自治县",
                        cp: [108.8196, 28.8666],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XJ°lJX@lbl@XbV@VLnJlxnbUU@IVK@lVIVwnJlU@n@J@L@Jn@l_nWVLVln@@blLmV@@xÔ`nxVÈLlxLVxVVV_U»VWn_m¥XwVmnX°lmUUVwÞaVk@a@mmIUa@mwk@m@@U¯a@UV@@K@ykkmwkV@kU@ÑVkKWLÅamaUm@kyU@WkU@UaIUaVaUUmUUa@aVLXKWa¯UUbmJXnWnX`l@@xkzWÆ@VLU¦x@b@JkIkJ@LmbUamJwm@óxnk@V@xVnUVmVUVUbVlUbkXW"],
                        encodeOffsets: [[110914, 29695]]
                    }
                }, {
                    type: "Feature",
                    id: "500236",
                    properties: {
                        name: "奉节县",
                        cp: [109.3909, 30.9265],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@WVXbUnK@x@b²kxmKkl¯_VV°VU@bnKVVV@@nk@nbn@°@VLČU@°WV@VnU@InKVl@nUbKnXWlknLlKUwnalLaVlUXmWk@UU@UWWIUyķ¹XaWW@XKUIVmU@W@UVU@KV@n»VkUkÇmUmVIUmULUbm@wUaKkkm¯ÑUL@bWVnx@VmxUI@klmkkK@aK@IlJ@I¯k@mak@mnkJVL@bV@UbW`UUUVI@VU@VVbUJVLUVVbUXVVxk¦VJUnVxnVVUJV@Ubl@@bXV@L"],
                        encodeOffsets: [[111781, 31658]]
                    }
                }, {
                    type: "Feature",
                    id: "500238",
                    properties: {
                        name: "巫溪县",
                        cp: [109.3359, 31.4813],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nLWbXVLVUV@KIVl@b@lbUVnU@JÆU@V@n°KĢUl@VbÞKV@_VKXUU@KX@wlkkU@mWKUU@UôJ@XV@aVmÞIVaVL@»km@UkLU@aU@WWLUUUKkbwWa@KU@kaXmWLamVk@UmL@JmVUU@¯X@ċVUK¯@ÅnWKLkKULWK@UXK@wW@LkV@bVLlXn`¯xU°LnlV@n°Lnl"],
                        encodeOffsets: [[111488, 32361]]
                    }
                }, {
                    type: "Feature",
                    id: "500234",
                    properties: {
                        name: "开县",
                        cp: [108.4131, 31.2561],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@n@naIw@@VVKLVbVxnVÆUnanKWXamKmk¯K@mkUm¯KV°w@Wm@UIUUlKUU@a¯KWanwmUXamKkUWUnU@KkUwWKXaWLUWkImaUUUKka±k@l¯wwmbUkXm@UJkIWXXbmUJXUV@°KllVXV@xmbnV@blV@VU`UL@Va@bULlb°VXbÜ@V@bL@JxnLVb@lVb@V@@zbXWXKVLV@@bUVVL@blVna@ll@zl@@J"],
                        encodeOffsets: [[111150, 32434]]
                    }
                }, {
                    type: "Feature",
                    id: "500243",
                    properties: {
                        name: "彭水苗族土家族自治县",
                        cp: [108.2043, 29.3994],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Jlb@nVV@bXb@ÆlLUl`nVKU¼VxkbWnlUxlXX@°°WnnJ@VUn@Jk°L@VlV@nUJx@bVVVz@VnLlaKnalVlIU¼@nV@@anKUwVal@UlJlI@akU@UWXKVI¯Uak@@KmkXWÜkXWykIWwXw@laXamkVUUym_XmlkkmmakwmIUKU@Wak@kaW@kI¯WIk¦VUUmaUV@XkVUV±aUb¯b¯¥m@@ImJ@mmL@kUKUkkJbV¦"],
                        encodeOffsets: [[110408, 29729]]
                    }
                }, {
                    type: "Feature",
                    id: "500235",
                    properties: {
                        name: "云阳县",
                        cp: [108.8306, 31.0089],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lbLVVVnblJVXXKWbXLVxl@LmVXVVlnLWbnVmxXb°L@bVVkLVVVJn@@X_WmkUK@alUKX@@xWL@VXLVKlLKXLÆm@ma@ml@mU@UUmL@aVUU¯U°`lknLlw±@a@wmLVWaXU@KWU@ak@VaU@IUVmUUwVmUIl¥UwUVWUaVUUKVIUa@UUUUJUUmknl@@VWV@L¯aUbUlx@@b@VULUx@VUxVVU@bU@mxUU@mUVklkk@WxknlxK@amLKUK"],
                        encodeOffsets: [[111016, 31742]]
                    }
                }, {
                    type: "Feature",
                    id: "500101",
                    properties: {
                        name: "万州区",
                        cp: [108.3911, 30.6958],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ĸĊVInaWWXlJVIn@lWVnax°xkl@²LVLnK@bLkwlmXw@lllkUnVV@VnwV@@aVUUVw@UVwVK@U@a@kwVVa°b@KXU@U@mkÇÑamlkUVmn@VULUm@kUVkUawUWm@Uw¯mKUUmVUUULUKUW@XbWVkaWwkUUk@maUbmbVlk¦xUVUIWVUkJVVkL@UmJUUVU@lLUVUlx@@VbJUL¯¤@V"],
                        encodeOffsets: [[110464, 31551]]
                    }
                }, {
                    type: "Feature",
                    id: "500229",
                    properties: {
                        name: "城口县",
                        cp: [108.7756, 31.9098],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VK@w¯L@m@UÅV@ImVUVka@@aUkJ@LUUVUKmLmbÅVmUUwUaKUL@U@xJmbm@nVJ@X@VkVnlLXx@b@bUVLU`UnbU@@mVVX@JX@VLVVklV`@bUL@VLVKn@U@UJkn@lmLmK@X@Jn@mbnÞWVXnJkKČÑÆ@VK@knaÜmXlUČW°kôÇÆ@a@yÞ_VmUnU@K"],
                        encodeOffsets: [[111893, 32513]]
                    }
                }, {
                    type: "Feature",
                    id: "500116",
                    properties: {
                        name: "江津区",
                        cp: [106.2158, 28.9874],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@InWUUlU@LValX@°²lÒXxlK@Ul@@Un@UaVJ@I@W@UUUVUwVIUKUaUUVwn@Üx@XUlnnbJ@¥VklKUUlk@ynU@kVUUVWnI@¥V£VWVIUKU@UVa@n@Vm@@nlUaVkUwJ@blLkLW@XWmXkmmLn@m@U@UVm@UVUUlakUVaVkV@@wnaWUk@VwklmVIkUUxmJ@U@KIkx±V@IUm@K@IUKkbWKUbnm@bmVnbmb@xkxUJ@ULW`@bX@WVXL@V¯mk¯@UJ@VmLUaWnX@WJ@nkKkxW@UIV@@KkImmkK@UW@XaWIU@UIkbWbxXlLVbnV@bWlX@VxVLnl@nÆÞVÜ"],
                        encodeOffsets: [[108585, 30032]]
                    }
                }, {
                    type: "Feature",
                    id: "500240",
                    properties: {
                        name: "石柱土家族自治县",
                        cp: [108.2813, 30.1025],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@kl@¼UbmVXJ@bV@nxVIVJULVVk@@LWbnJVU@bVbUJ@blLXnWV@mbnV@Vbn@VJVLnaVanbl@VlVXxlbXUWaX@VUUVwUUVm@I@WmI@amlLlK@alwnUV@kóVaÝk@UlbVK@VU»VUUVWU@U`ULkwm@@KmU@knK»VkJkUmbLkbmK@UUyUU@awm@@XXJ@VVLVVUbVnUJVX@Kk`WXXJWXUbmW@bkLUm`Xnb@JVL@LU@°VVXKVnUxVLUbmJ"],
                        encodeOffsets: [[110588, 30769]]
                    }
                }, {
                    type: "Feature",
                    id: "500237",
                    properties: {
                        name: "巫山县",
                        cp: [109.8853, 31.1188],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@kVUbkKmbVxkLmKkllbV@@LXbxlaLVVVKXXV@@bVlKV@ln@¼°KXaU@Ulw°JXalIUaÝWXW@kVU@VUVWUUUamUw@aVamwn@VUUlLXWm£@wÇĉkKklmLUÒ¯Wn@ğ±kwmaWm¼U@@LUV@V@XVUnVJLW@XXWbĸºVzXJVXV@@VXlWn"],
                        encodeOffsets: [[112399, 31917]]
                    }
                }, {
                    type: "Feature",
                    id: "500102",
                    properties: {
                        name: "涪陵区",
                        cp: [107.3364, 29.6796],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nèVblĖVVnL@xVn@nJ@LUVVX@lbUJV@@nn@VVVK@zV@nzVJVUlmX@@_VVVbnaVal@@knW@wnaVK@aVIJ@£kUVW@wXUVJam@Ik_X¥@WwkKkwmkUxnÅmm¥WV@Um@UlVL@JU@@X@UVkKVkKVkKkb@bmJVXUVVUbU@@`W_UV¯b"],
                        encodeOffsets: [[109508, 30207]]
                    }
                }, {
                    type: "Feature",
                    id: "500230",
                    properties: {
                        name: "丰都县",
                        cp: [107.8418, 29.9048],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Þè@XUK@LlV@blbUJ@V@bnV@VVVXU@lbXal@VXnKV@maXUÞ@amk@aVKXVanb£°mnIVaUKVwUmWLUU¯V@@KUK@IaWmn_VlK@anXVaXWWIXWl_@LUWVIUmVaUUUK@UWI@Wn@VI@mkU@U¯Kl@ImVÅLwU¤óbUU@wWXkmm@LU@@VUIWVUL@JUnax@JnbUIWVx@UXlV@¤IUJ@bULmb@xmX@lk@UbmbUaUU@`W@kn"],
                        encodeOffsets: [[110048, 30713]]
                    }
                }, {
                    type: "Feature",
                    id: "500232",
                    properties: {
                        name: "武隆县",
                        cp: [107.655, 29.35],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lwbVm@IVKXUVJ@UV@@KnnWlX@xVVôaV£xÆKnUVm@UmIXm¯¯@WkWVwmkXlaUwV»ULmk_VkK@ÅWa@aUU@mkaIb@n¼nm_@mmK@ULUVVmI@aUJ@XWJ@U`UIkm±kk@@lULmUmKUnVnlUVmI@VkVlxbkIVmLUxkKUXn¦ÆnmVwlnlxlLXx@W¦`"],
                        encodeOffsets: [[110262, 30291]]
                    }
                }, {
                    type: "Feature",
                    id: "500119",
                    properties: {
                        name: "南川区",
                        cp: [107.1716, 29.1302],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VUbVJVUn@VLX@WVXVVI@VUVWxU@m@ĊX@@¼V°aVUX`@_V@VaUUVUWnI@alaLUlLUllLVU@@WV@@IUKVkn@@VlLVwnKUlJakwlU@UnJVUmkUVmXa@wVK@UUw@VVI@ak@alInwlKXUmaUW@wWLkKVak_ÇaUV@XbLVxUlWIk@UK@V@kU@VbUVUlVnLUV@lVXmxkV@L@V@Vk@WbUwmL@JUI@xVxkx"],
                        encodeOffsets: [[109463, 29830]]
                    }
                }, {
                    type: "Feature",
                    id: "500241",
                    properties: {
                        name: "秀山土家族苗族自治县",
                        cp: [109.0173, 28.5205],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XlV@lzn@VnbÆbXKlLUÒV@@llUnxll@z@LU@@V°b@Vn@l@VÑUnK@UU@aUakVm@K¯wklmnnUl`nI@almkIUwmWVkUakkJmUUa@K@aU@@_m@@wUyVUUa@Um@awl@Wka±UkUykIWVb@bUVk@aU@UXUUIWakUWmUxUV@nUVWb@XXVVmXX@VbVLkVWx"],
                        encodeOffsets: [[111330, 29183]]
                    }
                }, {
                    type: "Feature",
                    id: "500114",
                    properties: {
                        name: "黔江区",
                        cp: [108.7207, 29.4708],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VX@V@LV@VJUL@lVnnxlb@VXVXV@@W@UIVK@kUKna@£VWUaVUUalIVJVIUW_lm@bXKV@mn@JUUw@KnIVll@VanLVmUkVKXLVKUIVamw@UaU_lwKlwUWV_Ua@aUa@KUwm_Ó@wU@nkK@am@UkUKmXk`m@@I@K@I@mkVmIUxUJ@kUL@JVVlnklWnn`VzUVnlWbkb@WxXxlJXzWÛlWXnl@Ll@Vb°UJWLX@VlV@bkJ"],
                        encodeOffsets: [[111106, 30420]]
                    }
                }, {
                    type: "Feature",
                    id: "500117",
                    properties: {
                        name: "合川区",
                        cp: [106.3257, 30.108],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XKVXlKVL@UnV@aValXXKU@WVwUaVU@IV@@aVWL@U@anVV@@bVK@UVL@bnJWL@VnUnb@@JnIlVl@@bXIWbn@UKVLVKXLlaV@VVnK@bVLmIV@KmknUUWVI@aVJ@_WU_VmUwU@KVak@am¯mJU_UJUkU@WkIV`UI@JV@LmmU@@mbUzÅ@VK@nUKbakb@UWK@bkVVbVÛ@@`Xk@W@n@lXL@bmb@VVJUn@JnUlnUlmX@`XLlbkJW@kzlb@`@b@b"],
                        encodeOffsets: [[108529, 31101]]
                    }
                }, {
                    type: "Feature",
                    id: "500222",
                    properties: {
                        name: "綦江县",
                        cp: [106.6553, 28.8171],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@¦@XlVX@@UVKlVUX@lanVlUVbXWVXVVVUnKVUlwUwU@UJ@nmVkUVlwXam@VaUUUw@W@kk»mV@UmKkwVKVUU@@LUKVI@mV@XVWxnXVKUUUK@wWU@UUWnUlLXamUIam@wI@K@amImUUkI@makUkKWUUan@wamLVxk@UVmUUL@Vm@kV@I@ak@@bWVXJlLVbVL@@bn@@`Un@WbUKULWVXb@UVmbXWVb@bVmxUKUV@Un@V@V@nmnKlnnWWXX@lKkK@aIVxUlVbk@mn@@U@mbVUV@VLUJUXU¤"],
                        encodeOffsets: [[109137, 29779]]
                    }
                }, {
                    type: "Feature",
                    id: "500233",
                    properties: {
                        name: "忠县",
                        cp: [107.8967, 30.3223],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VLÞĊU@W@¼V@lk@w²mlVUllVnI@VlKUUlIVXUVJVUwl¥UkUKUIm@aU@mUna@XUWmkK@aVIUa@aUVmIXa@Kl@UUVKUIUJmwU@@aWInUVa»k@@l¯n¤mabWUUL@bnl@bÝWVnbU@mLUWk@Wbka@WVUU@UmUmVkUULVlVUxl@L@VbÈÒlb"],
                        encodeOffsets: [[110239, 31146]]
                    }
                }, {
                    type: "Feature",
                    id: "500228",
                    properties: {
                        name: "梁平县",
                        cp: [107.7429, 30.6519],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XLV@VV@b°°nnkb@bnJWVXblIUVxWnUJnVVLVUJlUnLVK@UnUVJ²nKVbVKla@aXlJkKlb@U°£KVIUa@@kwVVUkKV@VUkkUVk±n@xkl@U@»@XVÝĉUJnxWb@UXKkVUbUKWUkVmkkLU`b"],
                        encodeOffsets: [[109980, 31247]]
                    }
                }, {
                    type: "Feature",
                    id: "500113",
                    properties: {
                        name: "巴南区",
                        cp: [106.7322, 29.4214],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nxnVlJlUXL¦@x@Vl@nKVVX@V_V@@KlVXU@lKlxXIl@ÈĊ@Vl@n_VJlnVlnb²VVVJVVmUUkĕUamçU@»W@@ĉnV@XwVU@UUJWUXUW@UKm@UVUIVaUUVmLUVUUUWWXUakVmUkbW@UVkUL@VW@kUW@mJUXVVU@lmV@zklVVkLUl@¦I"],
                        encodeOffsets: [[108990, 30061]]
                    }
                }, {
                    type: "Feature",
                    id: "500223",
                    properties: {
                        name: "潼南县",
                        cp: [105.7764, 30.1135],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@a@a@_kalyX@lIkaWK@_nWVkkmmV@IVmUI@Una@aWK@k@mkbWaknmJUk@mk@@kUal@Ua@Wa@aXLlwUKlkk@KmI@VUJ@Lk@@VUUmL@amJU£kKUaWakLmU@bVVUbnbWV@xkL@bUbxUxVbXJVbUVWIUVU@kLWxkKWV@n¯VUbU@@VVX@VmaUL@VUK@VVbn@lVnI@@lnLULm@Ub@l@na@lK@XVVkJ@b@zl@@VnV@bVb@J@bnXV`lXXmVI@W@InbV@@aVKUblKVLUanLlmnLlK"],
                        encodeOffsets: [[108529, 31101]]
                    }
                }, {
                    type: "Feature",
                    id: "500118",
                    properties: {
                        name: "永川区",
                        cp: [105.8643, 29.2566],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@bÜnWVLXlxVVxXxlVn@@bVblK@a@UnLVJV@@UnLVU@VXaVKVX@n`WUÿ@IUKlaUUUkWyUÛÅÝ@mmkUKUwW@Xk@amUUakKWwXaK@VVLklXVlkxVUL@bm@Vxn`IVxUVkLVUl@@lkXmmVUn@VV@Xb"],
                        encodeOffsets: [[108192, 30038]]
                    }
                }, {
                    type: "Feature",
                    id: "500231",
                    properties: {
                        name: "垫江县",
                        cp: [107.4573, 30.2454],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ċ°¤nÒ¼aV_lKnllUXVVLValULVW@XamwVIUKkaÇÑa@U@KkVwkUUVKlVnU@aU@VIka@akU@KVL@WÝçUV@VmbÅ¯@LKnnJWVkxlL@VX@VxmnXVWxUb@bkn"],
                        encodeOffsets: [[109812, 30961]]
                    }
                }, {
                    type: "Feature",
                    id: "500112",
                    properties: {
                        name: "渝北区",
                        cp: [106.7212, 29.8499],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@bVVXLa@lnbWn@L@XVlK@VVLUVlbkLUKVVVL@VnXVL@VV@UbVb@x@¦UxVb@bUJL@LVVxlK@nk@U@WUVLlKXV@VblU@UUKVU@wn@VJVanLlkX@VaVK¯@a@U@U@VaUKkUU±maUkm@UUkbm@@Vk@@JwU@Ub@I@JmwUL@a@@KkVÇLkWk@kUU@@xUVmKUnllUb"],
                        encodeOffsets: [[109013, 30381]]
                    }
                }, {
                    type: "Feature",
                    id: "500115",
                    properties: {
                        name: "长寿区",
                        cp: [107.1606, 29.9762],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VVUbXlX¥l@XnVmlxUx@@blVnnôĀlm@aVaXwWUnmUwW@@UkKlwUXmImL@KÆ°na@UUImyU@@yULUUm@@mU@VIkaW@UUV@KI@mmUw@mKUnUUIlVLUb@@V@V@b°ULUbW@klmKUbUIm@@xUVVL"],
                        encodeOffsets: [[109429, 30747]]
                    }
                }, {
                    type: "Feature",
                    id: "500225",
                    properties: {
                        name: "大足县",
                        cp: [105.7544, 29.6136],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XUmaVaUU@anVlKXbValU@aV@@IXK@@bV@VxVK@UXLlUJXa@_@@aVKÅWVkwWawUa@am@kUWLU@kWmX@ykI@W@UV@na@LlLV@UkwWUKmXX`mIVl@bXLWVkbkkx@`VXm@@J@U@UUKUxk@WbUIVl@VXLWJUkUlUImxXlmb@X@VUJUnVbW@UV@@VVX@bnW@LVxUnlJUV@n@VxVIn@l`UVVVL"],
                        encodeOffsets: [[108270, 30578]]
                    }
                }, {
                    type: "Feature",
                    id: "500224",
                    properties: {
                        name: "铜梁县",
                        cp: [106.0291, 29.8059],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VblLV¤nI@bnKVV@Ul@@KVI@UnJ@LlklVLkxWK@bXb@Vbk@Vb@ll@@nVlnIlmXblaXl@W@_Ü@UUalU@aXL@VlabaVL@mUL@UUÇXUWX_WaU»m_@UWULWb@UUVmK@VU@UImK@V@bkLxXblxXUÆUL@b@@`WbIkVWK@VULUwU@@a@WL@JU@@bkVUb"],
                        encodeOffsets: [[108316, 30527]]
                    }
                }, {
                    type: "Feature",
                    id: "500226",
                    properties: {
                        name: "荣昌县",
                        cp: [105.5127, 29.4708],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VI@U@WnaWknwVJVkVlIXWK@UUkVJXal@VwVL@V@V@In@UW@_wlllaXUWK@aUknJW_Û@aWaU@@UVmUUaUImJVnÅUmVUm`kUUVWLnVU@VVmXK@nxmULkxImJ@nU`@X@Vkn@`@nlV@nVJVaXVLnK@bVV@nV@lbXW@"],
                        encodeOffsets: [[108012, 30392]]
                    }
                }, {
                    type: "Feature",
                    id: "500227",
                    properties: {
                        name: "璧山县",
                        cp: [106.2048, 29.5807],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XzVlVVkbVL@JVĀX¼VXbW`XWVÈVVVkV@@UXa@alK@IU@UKWUyUI@wVUUWVak@VUkW¹@WXI@yVIUK@kWwkÑ¯±W@kUb@KkVVVmXJ"],
                        encodeOffsets: [[108585, 30032]]
                    }
                }, {
                    type: "Feature",
                    id: "500109",
                    properties: {
                        name: "北碚区",
                        cp: [106.5674, 29.8883],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XVLV@@JkL@bWb@VU@UlÆVya@nV@nn@KU@IVJU_lJXV@VlVIV`nIn°@blUbKVI@aUaVw@¥@wUaVaU@@UUKWm@UUKUUVLlKkaVUUK@UkLWU@@KXmma@kbWKUU@aUamLnÞ@VWLk@@Wm@ULU@@UKUVWI"],
                        encodeOffsets: [[108855, 30449]]
                    }
                }, {
                    type: "Feature",
                    id: "500110",
                    properties: {
                        name: "万盛区",
                        cp: [106.908, 28.9325],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VIV@@wVJ@InKVxXal@@U@U@KlUnwUW@kVUKUmVkUa@I@KW@@bk@@mU@m@k@a@aIUxmJk@wULwkKmVVX@VXV@xVLVVULmWXwWUU@@nUJVL@KV@UVULlxnL@VnUl¼@l@XVxVVUbn@WbkxUlVnU@m"],
                        encodeOffsets: [[109452, 29779]]
                    }
                }, {
                    type: "Feature",
                    id: "500107",
                    properties: {
                        name: "九龙坡区",
                        cp: [106.3586, 29.4049],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XKL@V@XbV@lW@UV@@VXIV@UVKlL@KnnJ@VV@VU@I@@mVUVWUUmL@V¯LUK@UV@UU@a@U@yU@WLUK@X@KUVmL@@aXI@w@ammVk@WÛwm@UxVVVbVLUJVxVUV@V@X@JUIVbm@@Vk@@VkL@lVLUJ@zWJ@X"],
                        encodeOffsets: [[108799, 30241]]
                    }
                }, {
                    type: "Feature",
                    id: "500106",
                    properties: {
                        name: "沙坪坝区",
                        cp: [106.3696, 29.6191],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XºlUVl@UbVXUV@xVJVzXJVUL@VV@VKn@@Xl@XK@UmÝnKVbVakkVm@kUK@UmIm@LkKULVU@WJ@UU@@VkXU@Wa@@UKWL"],
                        encodeOffsets: [[108799, 30241]]
                    }
                }, {
                    type: "Feature",
                    id: "500108",
                    properties: {
                        name: "南岸区",
                        cp: [106.6663, 29.5367],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VVJVL@bUVVnl`XIlwXJlw°nnlIXW@UÇĉk@WJkwkL@WVkU@LU@U`W@UXUV@n"],
                        encodeOffsets: [[109092, 30241]]
                    }
                }, {
                    type: "Feature",
                    id: "500105",
                    properties: {
                        name: "江北区",
                        cp: [106.8311, 29.6191],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nLVU@wV@lV@XllÈKlU@L@@bVKnx@I@JVaV@x@Il@@Un@laVVn@mkUIm`k@WXJmk¯mkxWIkxWJk_UmVUUK@UU@@l"],
                        encodeOffsets: [[109013, 30319]]
                    }
                }, {
                    type: "Feature",
                    id: "500104",
                    properties: {
                        name: "大渡口区",
                        cp: [106.4905, 29.4214],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@k@@U@w¥WKkVkImUmwa@b@xWJ@b@nKVU@L@WVLXKV@@z@V@bVVU@@VVL°K@U"],
                        encodeOffsets: [[109080, 30190]]
                    }
                }, {
                    type: "Feature",
                    id: "500111",
                    properties: {
                        name: "双桥区",
                        cp: [105.7874, 29.4928],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@WwUwU@kK@KmbU@@V@XlJ@znWlXV@XK"],
                        encodeOffsets: [[108372, 30235]]
                    }
                }, {
                    type: "Feature",
                    id: "500103",
                    properties: {
                        name: "渝中区",
                        cp: [106.5344, 29.5477],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VL@VV@VL@aUKIUU@@JUVU@"],
                        encodeOffsets: [[109036, 30257]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/fu_jian_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "3507",
                    properties: {
                        name: "南平市",
                        cp: [118.136, 27.2845],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@knyk@KU¥wV@nkWzUmk@@lKUa@aVI@UKUamKUUVaUI@X@UV@K±IUVVlUbUbUL@KWUXmWk@KkXmmkÅKUa@amUbkUkKWUnwUÇwVUUÝUKV£U@nKWwXLVKm¥@wUXkmWk@@wX@lU@yVImaXwV@knU@mbk@mlUXmU@mV@n@bnW@bUIWJImVUKWbUK@nkKaU@W_VUUmWmL@UU@bUWUL@V@bmVUz@`mUUVVbXL@VL@lmLUxmVamXkW@xWbUVbUxkU±@ÅUmmkLUbW@@`kLknVlV@lbXxlVUXVVUU@UbWkIWVUUUJkI@llbUxVL@VVUU°ULUmWXUV@VULWb@xm@UaVLVKUa@w@VbkmVambUUm@@VkK@@bxlxX@n¤@X@@lkLWV@nVkb@bWJXLWx@nkxmmbXn@VWVUn@VnJ@bVXl@VJXnWbX`lLUlJVI@@VXV@Vl@bn@@Æmn@VxXU@mVIlxVnIl@nVJaXI@mlU@aXkVm°klmnVV_na°@V@xÜ¦XKVnnUlVXbVKLXKV@naV@@VVl@@lXblXWnLlbVK²n@@VLUnlV@lXxô°V@UnaUUlKXLVUVVUbVVlUnJVX@VW@an@lb@nl@VU@anUVW@kaUm@InVVKVU@kUW@Uam@km@kVa@a@nwU@WlI@mVI@WXaW_n@nlkkW@U¥@kV@Uw@wU@@IXK¥VIn@nU@`@Xl@VVLnaWbVaUwnU@VIKlV"],
                        encodeOffsets: [[122119, 28086]]
                    }
                }, {
                    type: "Feature",
                    id: "3504",
                    properties: {
                        name: "三明市",
                        cp: [117.5317, 26.3013],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lL@Un@VVnabnUla@Ux@VbULUKVbn@w@XaVK@UVUXWVnVKV¯VU@UUKVwka@klJVIVVXUlJXVaV@VUUVWkUWwkaU@UklmlK@_X@ValKnnÆV²@lVVwUaVXa@wlXnWbnUVwnK@kK@UWKUaVUnV@_VynU@a@UVKVXaV@@VnKnXVVUX`V@blL@mVLXaVLnUJXIVJ@amX@a@mnUV@nVWnkl@naV@ml@@KmKUam@UU@@UlKUVkUK@aVaUwVU¥UIkJ@wmI@mbkwkVW@UXKULU`IVKUa@LkkVmUU@WlULUWÅU@I@WWnU@@w@a@Uam_XyVIVWkk@mwVKXUV@nwVXkWÅU@aU¯KUnK@¯mULXVLnWVbVbUVm@Ub¯¼W@am`kbamLUUUaUXV`@x@XmJ@n@L@xkJUU@kU@mWm@kUUwUUVWl@VUkIy@kkaVUUmIWVXbWxU@kmVkK@nWVX¦WxU@@bkx@VU@Wk@kUbmJUUmkUW@_kKWK@knV¤kIUKWLUbV@Wbk@@VWL@VkI@lUXVxUVU@@mWIV@a¯nUaaUV@Jb@bÞ°VbU@XaUVmL@VXblnV°n@Vnx@VUUUlK@InJVb@Vlnn@VL@VWJUx@XlJUVVVl@LUUUJ@L@lUL°¦kVVnV@xVl@blLnlLVaXll@nVUn@xn@nml°X@lb"],
                        encodeOffsets: [[119858, 27754]]
                    }
                }, {
                    type: "Feature",
                    id: "3508",
                    properties: {
                        name: "龙岩市",
                        cp: [116.8066, 25.2026],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@aI@VUbVb°m@bUXJ@nV@VUUwVW@klJ@UXK@Ul@Xa@UVaXKVLlJU£lm@XLlL@`VXnlVVnIVall@XV@@Ulw@aV@XwW¥XU@mlLnUlV@XwWaXUJVnUVlb@lzlJUVk@UXVVVxlVn@nXV@@lVVlI@w@K@mnI@W@wU_VWbVVVnKbla_nbX@°»Van@VUUaUamXUKWK@a@Uk@wWkXWW@wUUKw@_lywUkU@@U@kamVmXaUVUka@Wk@»UUUVKkbWUVUbk@mkxkKnIVUmW@kUKmXUmVaU@kU@m@KUWVkIWJ@U@UI@wUUUa@KW»nU@mVkUmm@XwWU@UUmL@w@mnVUU@aWak@@amxU@UxULWVXbVLU`mbUImVUbnV@@bVn@bnVWxLmyUbIUK@aVmakbVUXWUlKWbkV@WLUlk@@nbb@lkKmU@UIWJkw¯UUVVxm@@XkbWxXKlUzWJkUUL@bmKkV@@VUIUlWV@XK@VkbWx°xUb@LUbk@@VWb@LXJ@VWXU@@bUVVVVn@VVlLn@l@xk¦Vx@bVJXbn@JlnXxV@@nJ@X@V@lmxbUn@xVL@VVKlL@lnLVaVL@xkl@LxVl°XWVXVlJWnxlJ"],
                        encodeOffsets: [[119194, 26657]]
                    }
                }, {
                    type: "Feature",
                    id: "3509",
                    properties: {
                        name: "宁德市",
                        cp: [119.6521, 26.9824],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@LVKVaVaUkVU²J@LVU@@WVJUbVVnLVbL@VUJ@bVbkL@l@VnyXmlU@xV¦L@lmz@lnL@bVVbVb@lnKVkVl¤@zXV@l@XJVLVKnXVKVnU@wUm@KU@UlVlw@U@U@UaUKlU@kXKlmXIWKXaVIVUVK@KU@@kJVUnLVJUL@VIVa@VnLKUnl`VbVV@Vbn@Vzn@lKnVlIVVKUalkXJl@XXVWVLVUUmVU@Unm£lK@Uk@WUXK@U@WVwVkĠkĢÇ°aUÅUwmaţɱUÇaw±V¹XalKôx@UVaÜʓͿVóbÅLJm¯Vk¦k@mamXkKUULakbk@mV@LkJWb@VkmXk@UVmaUV@amLUKUamI@KUaU@WbU@UUUUIWJUkm@wKkVJm@kxÇVUK@mUVUkmlkkVm@amwLVWU@UbVLkUb@VmK@XaVWU_VJnwV@@kUmWakx@kwWakIWxnbUJz@kVW@@x@XllnVW@xn¦ULWKXxmL@VU¤VLÞVVUÈxVmxXVlLlVanV@bbVLlÆnnlW@LXlWnXV"],
                        encodeOffsets: [[121816, 27816]]
                    }
                }, {
                    type: "Feature",
                    id: "3501",
                    properties: {
                        name: "福州市",
                        cp: [119.4543, 25.9222],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lxna@nJ@xlIVJV¦UVxUb@bLVUlVkL@V@VVn@VbLn@LUlJXblx@lwXbVn@lU@mxUIV`UXWb@nLU@ValUKVaV@UXKnxbn@lUkllnUVnV@VLUÈlwn@UIlLxn@VlXIVJVVVV@XaV@Vb@LnJVbVLnK@bVUnbVUl@nWl@UXalI@KnUl@labVKVlLnWnbl@l¥°UnIÆKôa΀Ua@UUwÇWǓIUWUÅVkƨm@@£@KmLU¤ULˣJkUVǟUUķ@ĉVKUk@Ñ°wôÇç@īé@Åţ¥mīÛkm¼Å@VķVó°ō¦U°n@bVJXVVL@bUakLmx@xmxXzW`XbWnXV@bWLÛ@a@aXbWVkaÝwU@mlWKkLWWkLUKULW@kVmVUUÝUamV¤n@xUVUzkJV¦lJU"],
                        encodeOffsets: [[121253, 26511]]
                    }
                }, {
                    type: "Feature",
                    id: "3506",
                    properties: {
                        name: "漳州市",
                        cp: [117.5757, 24.3732],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@bl@Xb@bVVUm@nx@nKVV@XVWxn@VnUl@nmVX¼@LVbVV@xVJV@@XIlJXUV@Ln@lVV@UbVnnWVL@lnXUVmJLlwnll@VaUXVlaLVUVV@¼Xl@lbUVVWbnnUlb@@VV@aVUmlUaUny@kU@Wkk@WaUVk@@ammk@@U@UlU@aUa@wl@mXLllnLU@anVnU@L@VVV@KlXnWVnVanUw@w@wmnÅ@waUam@UkmUl@@aa@U@¥kôKwÈ¯°w@ŻkwǕaKÑÛk@ĕōřċ£ĵUKW»kÅŻLU@Ulġw@¤VzVUbkKUbmLmlULU¼UxmbXl@bWVb@bUnVUVbULU@@VkbVL@`U@WX@XV@b°@b¯@¤@Xm@@b@`UVVUL"],
                        encodeOffsets: [[119712, 24953]]
                    }
                }, {
                    type: "Feature",
                    id: "3505",
                    properties: {
                        name: "泉州市",
                        cp: [118.3228, 25.1147],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Vlxkz@`xLVV@xXXWXl@xl@V@bnV°@LVm°LVbV@ÆXWlUmxU@WVULnx@llUXUJWzn`Vb@@b@xV@mXX@@JÆVVXVKXkV@nVlUl@KVbULJV_VKLVWX@lUVkIU¥lIVyVU@wm£nUVWU@am@UmWw@UX@@amVUn@@aUUlUVanaWUXWmUnkK@VUlVVUUw@XLWWXma@knmbVbVXbVL@XJlInlLwmXów@çV»ÇçŋaķƧóƅóKġ°nÅUķƑUÇW@¯xÇ°öÆlVn@lla@Lb`@VXVVx@V@bULVJUkÇ@¼XUKk@mmULkaWbk@x@UkL@a@K@U@UmKmbU@kV@UmVUbUmmXkW@LUU@U@KmVmU@bVmKkkWKnk@@xVb@bkV@V@Vl@nn@bl@VUXbl@XlV@@lmzVVbknUVb"],
                        encodeOffsets: [[120398, 25797]]
                    }
                }, {
                    type: "Feature",
                    id: "3503",
                    properties: {
                        name: "莆田市",
                        cp: [119.0918, 25.3455],
                        childNum: 2
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VbÞVVnUlUX@VKVLlKXXlKXLnkV@ÞxlbXUWab@bÜ@XK@aWUXmWaX_Wynw@wnwlKbV@aUKWUUI@amV¯Ŏ¥ô¯ĸUUÆ@n»¯aƿé@ţ¯nĉĬÝKóó@ÑU¼@èxWônxKmkkJWI@UKWaUUaamn@lnbWXXWK@VxUVkUV@ULmlnVWXXVmbUbkVVV@bm@UVn@bW@@VXxn@Vn@bVUX"],
                        encodeOffsets: [[121388, 26264]]
                    }
                }, {
                    type: "Feature",
                    id: "3502",
                    properties: {
                        name: "厦门市",
                        cp: [118.1689, 24.6478],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@VlUV@nanL@V@V@L@blK@Vwl@XalbVKnnl@VLW»È@lVUIVK@a@UUwWUU@_aK@bkkm@UkõÅxóLl@¦@Vb@bk@VnVln@Vbb@xmÆn@x@xx"],
                        encodeOffsets: [[120747, 25465]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/gan_su_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "6209",
                    properties: {
                        name: "酒泉市",
                        cp: [96.2622, 40.4517],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÇnÅaĉ@U¯¥UŹ£WUýUU±JkkUwyÞIČxĊĕĊ¯¥ÆUkţUÅÓ±¼IUx¯UÒƑÝÅ°KÝnğ°ÅU@@Vn@þ¼¯WnŎ°XLWlnVnbWnVXxmbabóUlǕUUaIUmlU¥k¥ĉwkkÝɛa@¯U¯°mVkVnKlōÑÇÑU@klUġkUŻnUW@¯k»mWV£UKnUmUww@UIVaXwm»Èmmwn¯ċ¯LĉUJUalka±Va@Uk@ÛÑ¯WmnUaɝ¤Ûmn¯m±x@wóxÛLġÒUx¯VÈJUbózÝÇKĉ¯ōlÝUÅWl¯nťbÝ@¯ǩLġmV@Æ¯ĢkÆmĊkVťLɃmÝXó°@ĢbVóVÝ¦ɱ@ƧaġUVĠÇÈV¼UVţwmbJÇwˋaXmÇ¯KkkmbXm¼V¼ǬŚ²¤ôŰÆƴô̐ŤǪnɆӨ¼ɆLÆłUĊxŎƞȘǔˎǬǪnƨŮǬö°»ġÞÜÆĸÒĊǀbƾèôÈ@¼¯þŤĸƧ°VĀ¯b@lÈĊʠń̐ȘKǀֲॗţÿǕý@ʊǓƨóÆÑǖŃôw@΋ʈƆÅÈVVĊVóĊÅ@ÞƒĬV@Þī@°V@ĸĢ°XτƜĠ@ÈaÜ¥ŐƅnğóĕVġUůƿŋĕa±VUťÇğÑ"],
                        encodeOffsets: [[101892, 40821]]
                    }
                }, {
                    type: "Feature",
                    id: "6207",
                    properties: {
                        name: "张掖市",
                        cp: [99.7998, 38.7433],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÈÒŎÒkmLUlU¯nV°@°ɜbÞĠaÈ»ĸlLVUÈ@Ċ@ýUm@@ÆVĠ¯ÞmLÆ¯ÞƒÑ°VVwJ²»ÆÔVlŤÅV¦ĉ°ĉĖċwÝJzVxll²IVVVþX¤źV°¦VĊ@ÆbÈmǔLĸĠ¯Ģaô¯ĸmÆÛUlÇĸk°XyĊUǔVǩnmV»a@ýnK°n@l¥@»żĊ¤mç@£ČU@mmVkÞUƐ±²¹°ĠwÅƑŃU¯V¯aÈŁÇ»ġn_°xŎKlxklx@Þw@Æm²bÇ²LlkWXať¯ĊaÑK±w@wUÅçV±Uk@@¯¯xU±±UU°ōxVxÅÔō°ó¯UÝ¦óbÝþ@ĉÈóUVUx@VUVÝwÅÈÇóVkk¯JÇkmmL@KÇx@bk@U°ķ²ó`mn¯°UwlÅkU`¦ɛôķz@ÅnÇ°U¼¯KmVk²J¼ƏÞķô¤UL@mnğ`ÇnUxÇ@ÛÿU@kŻ@x@móJkÅ¥VŹĉóÒĉlċ°ķUƽÜ@x"],
                        encodeOffsets: [[99720, 40090]]
                    }
                }, {
                    type: "Feature",
                    id: "6230",
                    properties: {
                        name: "甘南藏族自治州",
                        cp: [102.9199, 34.6893],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÞnKlnwX¥WÝXkxÞUn°aĊVnUUKlÞĶWXnĠ¥ô»@nmVL@¤°VzJanU@aÆwna@kU¯yX_aĉbwéXkWwÅa¯V¥m¯UI@@mb°aÈçU¥@»knwɜƇ°I°ÑÈmVU¯Xa@wW@wV¯Č¥l¯Uwnm@kaUaóKkk@Çab@ÒWa¯IÇxÛam¼VUxÒl@zÝÒ¯bÝaĉVĉwÇWzJmJn²mÜ¯U¯ĉ@ġ¤Åb@²nml@@ULVxVU¼Ålmab@°l@WIU¯@m@ó@UzţyXÇUÇVUUVLkbWakVWmUbkkKUÆ»n°Knk@aUVmnk»l¯Ģlw@_kKVU@na@lUk@¯¥mV@kmbWb¯Åõa@mkU@kÇkU@`@óóbl¼Uxn¼lVÈx@blVkVVn`XÈġÈ@ÇK£ÝJmUUnUĖmlUmKUnVÅaUwUĉ`¯n¯wW¼nxV@bĉnkIċŘkXU±ÒxÈ@X°`lVIÈ¯ĊVVVan@VaUVażVmblkÈWWIXaalL@wVbV¦lL@lĠnÒUnkL@ÆÞkÞKbñþW¦ÛċVULUºkÈlŎUxÆxÞUUxÒx@XbL@lÆ@ÒlXVln@bm¼J@Ånx@bnĠmxVXmbÈè@Ċ£ČWw"],
                        encodeOffsets: [[105210, 36349]]
                    }
                }, {
                    type: "Feature",
                    id: "6206",
                    properties: {
                        name: "武威市",
                        cp: [103.0188, 38.1061],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@±¯¥@klwU»ÞÝmwKm¯ç@kVÇUL¯lVUKġġm@a@U@X£°l°LŎÇ@aōVÝwÔKUÅWJ¯lm@ÛVWa@klĉUmaLUanak¯J±KkXóÜÅx²Ç@nUÒĊb°@ÆkLXÇÆ@xÝnxWxţ¯¤I@ÆnVVVlU²ÆèV@x²xLÒĉbŦ°WbXklÞ@l¤XĊ`wl@ĢÈŎm@bnVUb@ÈÆÛLèÇUÒÅ¦lĸ`°ĮʟÆǓbĉôϚĊÆĢnŤé΀ÑĸĀĊ¦@@l°l¦Ȯ¦ɆÞĊKŤĵĸů»mŁyġķŭ@Çɱȭ¯mƧUĊķnŁŻ»UaUƛɞÝƨů"],
                        encodeOffsets: [[106336, 38543]]
                    }
                }, {
                    type: "Feature",
                    id: "6212",
                    properties: {
                        name: "陇南市",
                        cp: [105.304, 33.5632],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÈÞ@l`UmV¼@nnÆwVlnVVaLVÈ_ÿÞ@naxÆ@l_@VxnK@llLnxmÈŎJnbUxI°l@n¦lÈIlmX¥k°@kJk²é@klaUaVaU@@ÝnIWnmnxkºÞaV°V@nwKxôbÞ£VUbþLn»mVwIJ°@nb@°°IġUkÇKV@Å¯»lLnm£@anK@ÑÜn@»mL@£ykUUmbUÞÝ@kyÇbó»XUxWVzb±mÝbXawUamL¯»@wUKVwm¯ĵJ°ÅUWVkKVk°wÈVVÑlU¥kmVamknUw¯¯bċ¥ÅKkKkVċVk£kKVwÑa@kóyÛ¯ÇVkówXō¥Ç¼ów¯U±k@xIĉÒÅVmÈnÜ@n°bUbÝVUnnJ¯Į@m¦nVÜ@L°JXbÑ@aÈb@llôLVbb@lmnVxk°ċ¦U°@xX@xWb°UVÇn¯Ò¯Jɛƈmxl@¼"],
                        encodeOffsets: [[106527, 34943]]
                    }
                }, {
                    type: "Feature",
                    id: "6210",
                    properties: {
                        name: "庆阳市",
                        cp: [107.5342, 36.2],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@kwĉ»VamV¯wIóVkl¯KmVō¯ÝWkL@bÝKō¦@@Lx@b@la@km@@l¯nm@UaÅ@óWUXm¥nw`@UUxķôÇ°ğ¦@VJ_nIVnalxkXJWn¯nVLxl¤nnVbklVX@xnxmV@bUK@nm@@xV°±aÅnkUWnUax@mn@¯LmUĀlU@lV@blLUblxklkIÇx¯°UXbaVUnV@°LUlnbX@`°nVmbnÆmVkLmK¦U@Xy@kl@U°K@¼XbW@bWnLVaVVz@xlVČ¥lbUxÞlVU@nÆWôn²VJlUƧLnmÜLXan@mw@wlUlV²mblwVÈlLÞ±@lVnUlxnkma@mkJ@kXVU@mn@¼VXUVlLnmVbôaVnWV»ÈUl°È¯ÆInÆU@kk»mKkÆġk¯@»mk¯@óÇlÇ@VykklUml¯Þ@w"],
                        encodeOffsets: [[111229, 36383]]
                    }
                }, {
                    type: "Feature",
                    id: "6204",
                    properties: {
                        name: "白银市",
                        cp: [104.8645, 36.5076],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VKUÈl@è°nLnxÝÞV¼kx@l¦²°ĊóĠĊ»@ÈxaĊxlwÈVŤa@¯²aÇ£Jk£lnUÞ@°ô@ywl»lIX¥Ǫnw@ÑÞWlaÅlL@Uwĉakl@¯mwna°JV¯nUVÓÞÑm£²óWaUÇ@óÝUçV»ÈkkW@¯xV@XlK@wX@Vmm_@wÈÝKU¯ÇwVwÅK¯VkJXkWVaIm¯UkÇlVĀV°mxók@¼óWxĉÜU@UbzÛJÇk@ÆnVlÔ@kxô@ĬWL¯K@aÛImm@IUa@UÇêU¤VÒÇx¯ÒVlk@Wbĉ¦UbkWV_y¯Laók@b@nmbkx°"],
                        encodeOffsets: [[106077, 37885]]
                    }
                }, {
                    type: "Feature",
                    id: "6211",
                    properties: {
                        name: "定西市",
                        cp: [104.5569, 35.0848],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@aV²wVJV_@LlanÅllŦçÜÓ_lnWaôkxUbmV@È°lènk°l¦`@nnL@ÈlÜIyVaV@ĊÛXwô@»lônwU¯ÿUÈkl°VnJUblXWIl°UV@aVVVmnL@lUUwmk£bV¥VUVwÛlaÇÝÞmk£LUy¯L@WlkKW_XaWmġU@akakXkmVwmŹVUbWónmwnWW£KÈnV¥¥Æ_klWbU¯V°aôbnaVwmaōInÇmwkK@kmLUw@`kÅ@wb@mÝĀÇ`UKUbmUUkÅxmm@»nUVk_Ý@Ç¦VÇè¯ban@@JV°nU¦°ÆbXxWlêxĊabW`zV°@lmbÅx@bmVbI`¦@ÒUVUI@ÆL@b¼@@lmxnL°ULÞğÞ°kLUL°xVnKVl@zX@"],
                        encodeOffsets: [[106122, 36794]]
                    }
                }, {
                    type: "Feature",
                    id: "6205",
                    properties: {
                        name: "天水市",
                        cp: [105.6445, 34.6289],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@UyÈVVUnn@VU`UblzJnk@VbKU°lwW°nkVUÈl£°V@n¥VklkU±Unlw¯UkwmKUlmkUmnkym@Å@UmWÈU°l°anlJkUKlU¯Èm@kmWV»kkÝLUWUx±b@¯ma@¯IJUxnm¼KýaVUÝ¤óawLmxU@¯UbÝ¹lmwmnXmJ@ÞV@UbVbkbl@±êlIl¯@lW¦knÇJkm¥k@¯Jmbóa¯bUV°akXlÅ`¦U¦ÇmLX¤mXnxmôXaVźUnUxlnlWbl@bĢVnXWbX`lLXk@°KVzKl¤nÞÝÈkbÜ"],
                        encodeOffsets: [[108180, 35984]]
                    }
                }, {
                    type: "Feature",
                    id: "6201",
                    properties: {
                        name: "兰州市",
                        cp: [103.5901, 36.3043],
                        childNum: 5
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@lW²L°IlmbVbKnbĊVlk@XbÜU@kn°XIÆVLÓÞxŎUlôb°KzU`lXVaĊ¥Xal@kU°ÑÈwUÑV£ÈéV@VbJ@nnÜJ@bL°XK@īówl@kÓmUÅmK@m_k¥l¯mkçÇ¯@nUaVwólXbmk`ÛÔťèkkmÆkbK@U`UI±xUbWlXmbVbÅÒólkIWJk@zKŻ¼@xUxó¯LWb@ÅÒ±¦U`nbťĀUVbLU"], ["@@¯lwna@mōÈ¯K¯kW¤@@V@bĢnĢVLU°k"]],
                        encodeOffsets: [[[105188, 37649]], [[106077, 37885]]]
                    }
                }, {
                    type: "Feature",
                    id: "6208",
                    properties: {
                        name: "平凉市",
                        cp: [107.0728, 35.321],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÆLUxÈxV°LÇÞ@xn`Ü@X@nĊÆwnJmwUxaUkw@V@waVmlLXÝl@XVĢmV°@nl@UUUWK@wÿVI²Òlm@nÝĊýVV@nJ°Ułm@kV¼nKĢÈ¤ôKblnKllVk²aĠ¥È¯ĸóVw@V_xmn¦VWôXÆ@Vbn@°m@kn@@lb@ka@wK@@UlKVaWXW²¹lÓw@_°n@@_lKÅķW@mLUWn»Û@l_Ç`Ûmm°ÅbWb@VWbUUKÇÅaġlmkUġl»LlUm¦@¯U¤ÇkVUml¯Xx¯kVLUa@mlIkyVa_UV@mmUVUÇVzUxUVU¦a¤lnVxVk@mKUnUU@bU", "@@@ż@mlkġk"],
                        encodeOffsets: [[107877, 36338], [108439, 36265]]
                    }
                }, {
                    type: "Feature",
                    id: "6229",
                    properties: {
                        name: "临夏回族自治州",
                        cp: [103.2715, 35.5737],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@ż»Ly@lXIJlôkÆÑUanaWXkW@yk@ULmUw¯KVlK¯ĠÝÝVK¯mKnwk@@»@aK@ÅVJVU@Ñ¥_Uy¯@£UKmn@ó¼ğ¦WmĵXÝkVLmVĉU¯bmÝVwWlXÞW¦xkmmLÝ±U@VÞ@ÅÈW°XÜ¼ƨyUĮnWnXÝxUx°lVXJlôV"],
                        encodeOffsets: [[105548, 37075]]
                    }
                }, {
                    type: "Feature",
                    id: "6203",
                    properties: {
                        name: "金昌市",
                        cp: [102.074, 38.5126],
                        childNum: 2
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ĢÈ¼Çł°bU°VƒńÆǖŰnÆōĬǔaʠÅ¯ĭ_kķÆ¥VÑÈçÜKÅ@ÇVaUm@aōnġÇk@xĉ_Wk£@Ý±KÈ±aÅn@Ýx@kwlkwōL¯wm`"],
                        encodeOffsets: [[103849, 38970]]
                    }
                }, {
                    type: "Feature",
                    id: "6202",
                    properties: {
                        name: "嘉峪关市",
                        cp: [98.1738, 39.8035],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@llĊx¦l¦kVVnJVbǖVkôVabnaWwUXmmamUXkWKō¯Xm°»ĉÇ@UVKķkÇ¼ğb"],
                        encodeOffsets: [[100182, 40664]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/guang_dong_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "4418",
                    properties: {
                        name: "清远市",
                        cp: [112.9175, 24.3292],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lÇ¯kÿaV¯VaÈU¥ÆÇIlxmnbUxlUôl°kWl@ôVwUanUl@xVkaX¥kU»a¯±@kka@UwmUkwJk±k@L@ÝWUwVÝxÇU¯ÇX@mÅ@@yĉ£VmUwȗ»ÇUnlUnWU¯`Uk@@x@bÇxX¼VV¯LĀkÝL¯@VĀ¯lnĊW¦kVÇôkUÇUK@ţU@aóÜUU»@¦k@VxKVbn@Æl@xbWnlUlxÈlVÈ°Æ@¼@xWxŎVK°¥nÆkŎ@ÈÑmK@¥k@ô@nôV"],
                        encodeOffsets: [[115707, 25527]]
                    }
                }, {
                    type: "Feature",
                    id: "4402",
                    properties: {
                        name: "韶关市",
                        cp: [113.7964, 24.7028],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@WXk±Ñ@UwmUwĉwlmn@Æwn£mkI¥ÇÅ@¥aón£nWWw£V`Þ@nVml@xô¼IV¥kUmkamUkVWwÛ»mó£UVÅKmn@x@kbmm¯aXkaVĉaUbÝ²lIlxnVVx@lb@l²°bV¼lW¦bUlwk@mVVbUxó@kX¯lókVkwVmankwJÅÈ¦ÇVUbU°blĀ°kÈ@x¦ÆÜ°@°¦óaVUôlUlbXl@nÜVnKlnIVÞ°W°U@bnm@¥IV²Ul°VnalzXyl_Vyƒ¦lLlx@ÞbKmknVWanwÑVwČº@n_ÞVaVÜIl@KÈVJ@a£È@@kmaV¯W@_a¯KmbkÇkLmw@Å¥"],
                        encodeOffsets: [[117147, 25549]]
                    }
                }, {
                    type: "Feature",
                    id: "4408",
                    properties: {
                        name: "湛江市",
                        cp: [110.3577, 20.9894],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@kX@aUUċlkJk@wVJXUWk°W@nKnwlUl²blU@lIl@XbWxnm@lW@wwUJX¯VU°`ŎóˋkÝÝkÅ@ÇmğÈřmwaĵVxUÛ»°ĠǷnýmóX¥ɅĵҏÇ@°²ĊUĖ±ĮU¤Ç°Ā¯ɐnżUĊĊĬV@è@ÔÒU¼l¤nĠbêVĠ°ÈyzVaVnUÆLabVlwÆ@"],
                        encodeOffsets: [[113040, 22416]]
                    }
                }, {
                    type: "Feature",
                    id: "4414",
                    properties: {
                        name: "梅州市",
                        cp: [116.1255, 24.1534],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nÔlW¼x¦@lVllLkèa@z¤Ė¼UxlnUKUbÝlU¼lb@VxVklJÈwV¯@ĠlÛĖnbkÆźÞUÈôklmL¥LWnKUkVa°Vx@IVV@x°bUkaa@mV@@ywLÑUwVUVUbÞVVann@XwÇÿ¯²aVamkXaÆ»@»nw@¥UXakbWa¯KUw@¥m@kwmLU»UUJ@kmU@UUWU@yanwmçÛl¯¯UmKUmwVkmÝXbW@XWÝbk¯@±w@»U@W¯Å@Ç¥UU@IUakJĀê°þXkam@_J°m@X"],
                        encodeOffsets: [[118125, 24419]]
                    }
                }, {
                    type: "Feature",
                    id: "4416",
                    properties: {
                        name: "河源市",
                        cp: [114.917, 23.9722],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°VlmX¹laĢÒlm@V£@¦Ģklynn¼lW°zW°VbÈV@lÆbnnJkXVÆaÅW@UUw@kaV»ÞkVaVLkmVw»ĕ£@yblçkKkU@k¥wX»kmÓ@Wn¯I`@nlbWý¯éÿlI@XUmWUw@@UJUÇmKUV@xţk¯¯LWnUxK@Å±»Vwa¯@¤WX@Û¦@¤ÇIÈ¼WxX@WxwUnVbÅèmVa±²UWl@klÈ¤nôÜ¼XxlUnVlbVnlU¦Jó»@wnkmUÝ@U_¤XxmXm¤ôb@¦ÈÆ¦lJn"],
                        encodeOffsets: [[117057, 25167]]
                    }
                }, {
                    type: "Feature",
                    id: "4412",
                    properties: {
                        name: "肇庆市",
                        cp: [112.1265, 23.5822],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@l@¥@V¼VôÛ@bV@ŤVLÈlVÈólUX¥mĉ°kÿU°@ÞKlÿ°KUUW»Èw@aw@@nm@w£kÓVUVnKk¥£Vam@nkKkbÆǫmakmLU¥UmÛwmVUmUJÇaUxÇIn`mb@Þ¯b@nJ@nlUVlVULW¯Û`Ç_¯`m¯IbĉWċzx±Jx¯ÆU_k@J@UmbXôlLn¦@¼ĊxlUXxUbLĠUnVĊwlUb@lWXm²@ÞWxXUnb"],
                        encodeOffsets: [[114627, 24818]]
                    }
                }, {
                    type: "Feature",
                    id: "4413",
                    properties: {
                        name: "惠州市",
                        cp: [114.6204, 23.1647],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lbW°bnnla@@wnmÆLVUkÇl@XkV²±bnUÆçUaVmxXw@WXwÇ»ÈJ@£Ü¥@XW@£°bUx²¼@ÆLVwmX°K°Ťl@wVUnLÈVVIky±wkKU¯ÅkXġÑÛlwUwlm@mnKWaÅm¯óÇmğb¯alĉUwķbmb@lÞÒVnmĀŹ@VbVUnmakLm`@xĉkklVÔVJVnlVUnmJmaLUblzmkLaō@@zV¦UV²kJnÜU@VXUL@lJL@bÝ¤UnVb@xVnlK²Vx°VxlIlkVl²k¤@n"],
                        encodeOffsets: [[116776, 24492]]
                    }
                }, {
                    type: "Feature",
                    id: "4409",
                    properties: {
                        name: "茂名市",
                        cp: [111.0059, 22.0221],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@LnÇlkKnkÆLUmÈxlUJló°n@ana@@X_@mÝóóU@aaU¯mL¯kV¯ÇVwkw@V±Ŏ£@@alw±Vk@mÅm¯ÿÅƧIÇ`ōô¯_UVW°IVx@xkX@mnwXWa@kkJ@kVa±kkVmxmL@¯XXlWVUI@xlIklVČV@blW@@nUxVblVxkôlxnynIÆ»Æ°aXwlKbVnXbL¤kLèVV¼²IlĠVXynz°KVx°@VlLlblK"],
                        encodeOffsets: [[113761, 23237]]
                    }
                }, {
                    type: "Feature",
                    id: "4407",
                    properties: {
                        name: "江门市",
                        cp: [112.6318, 22.1484],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lUXx°JWnnÆXVWX@ºVLV¯nUVnbôxaXmWXIUb°xlKl¯KxXÞ°XÈ¥Ü@ĉÞUç»nóVmax¯UÅU¥Ý¯@ç@ș@çĉÅUmUç±ĉKÝxÝ_ÅJk¯»ó¯nmèkǀWx¼mnUÜġ°@¦@xLkÇaVnUxVVlnIlbnÆÆKX¦"],
                        encodeOffsets: [[114852, 22928]]
                    }
                }, {
                    type: "Feature",
                    id: "4417",
                    properties: {
                        name: "阳江市",
                        cp: [111.8298, 22.0715],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°nKV°b@bôVÞô@nVlÒôÆUnlnn@lmkmVkaÈkÆÆk¥ÅÞ»ÆKXkW¥ÅLmÅkamJUkUVwUmÈblKw@@¥Ģ¯VÛnm»Xwlƿ@kbWaʵ@óLl¯ƽ@Ln°Æ@nUl²kxb@@ō¤U²@lxUxÈU°l"],
                        encodeOffsets: [[114053, 22782]]
                    }
                }, {
                    type: "Feature",
                    id: "4453",
                    properties: {
                        name: "云浮市",
                        cp: [111.7859, 22.8516],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@VIl@`V°Åw²IwČyĊXa°Jn°_È`Ü_°XKVkUUVk@mmI@°a@Ýnam_ÈJVwlĉX@lUómaUmVU°UK¹@WXUWmÅXm¯IWwkVWlÅLÝ¼Æl¦ÅÅÇlbUllnknm@kmVmóÅkÑUW`@@bmb@¯mkôIkVÇwnVÅKmlLklmÈKVĊK°²`n¤nUbWlxVxLUx@°nXm`VklVxmnnx"],
                        encodeOffsets: [[114053, 23873]]
                    }
                }, {
                    type: "Feature",
                    id: "4401",
                    properties: {
                        name: "广州市",
                        cp: [113.5107, 23.2196],
                        childNum: 13
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ș¼VxUnĊ¤@z@Æ@nÈW°ÈVwUÞVxÞX@Kl@ÞVaĊbU@ml£k±lUkkJw¯UUw±kLUm@waUVmÞ£@aKkI@KVUW@ÛVmlIU±VU¥@yğzƧÇƽĠřÅnī±m@²¯l°@nÝÆóUll@XnÝVU¦mVV°V¼Jnb@°mbn@²¯¯wVw@@nmxX¤¯L@VLUm@@l"],
                        encodeOffsets: [[115673, 24019]]
                    }
                }, {
                    type: "Feature",
                    id: "4415",
                    properties: {
                        name: "汕尾市",
                        cp: [115.5762, 23.0438],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@@VxnXWV@bVJV@ÞÅU¥Ċx£UWUwÅUU¥WVUkĊÇnkV`°LVwnU@lbĊ¯Vnal@@çkUÝ¥ġaó¯ÅaÅLŻÆUýmy¯ó@ĉÆóȯwÆXbmL@nknVxkxÜĢÒWÆlV°Ll²xlz"],
                        encodeOffsets: [[118193, 23806]]
                    }
                }, {
                    type: "Feature",
                    id: "4452",
                    properties: {
                        name: "揭阳市",
                        cp: [116.1255, 23.313],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VÈ¦Æ@X°V@@¼x²°@lÞaWXX@aÞWlnUxVnnL°V@kmĢl@ak@mlk°aX±nwm±²¯JV²@wW_maV»U@m¯ĉUÑJlabVnlĸLlƅÛÇ±wÝ@ĉxó@è@kmbUĉ°ka@mVxU¯KU_mlĉÈVlXUV¦ÆVxVVX¤ĉwV¦ÝÆ"],
                        encodeOffsets: [[118384, 24036]]
                    }
                }, {
                    type: "Feature",
                    id: "4404",
                    properties: {
                        name: "珠海市",
                        cp: [113.7305, 22.1155],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@è@Þ°V¦VÆ°wnbUÆ»nçÆ@nxÜ¤²llU°VnÈJÞ°UôéķUklô£VVˌKÞV°£n¥£ȗÝy¯¯mÅkw¯bÇĔğ@Ýn¯ĊVğōŁŻķJ@Ț", "@@X¯kmèVbnJ"],
                        encodeOffsets: [[115774, 22602], [116325, 22697]]
                    }
                }, {
                    type: "Feature",
                    id: "4406",
                    properties: {
                        name: "佛山市",
                        cp: [112.8955, 23.1097],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÈbInVVnUÜxnVV¦nKlnbÅǬlalL@mnUb¤l¦LUmUVlÔ¤@xmnVl°_XVVmkVmÈ@kn@VUK@°KW£nw@m@Ux°x°@±mna@¯amIU»U¯nUV¥ÞUWmk@Vk¯UknÑWÝĊÛ@Ç¦W¯WÝwLk°kL¯wVaWJXWnbwkVW@kĊ"],
                        encodeOffsets: [[115088, 23316]]
                    }
                }, {
                    type: "Feature",
                    id: "4451",
                    properties: {
                        name: "潮州市",
                        cp: [116.7847, 23.8293],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°Üknèmxbz@VVX@VnV@lIVVV¼nKlxn@@¦Vx°LXblaWbV°£¯W@nW@aUñVwW»@¥ŤÅUÝǓÝóV@ńÇkUVmIUwÅVWÇX¹@W¯bkl@nlb@kġn@l"],
                        encodeOffsets: [[119161, 24306]]
                    }
                }, {
                    type: "Feature",
                    id: "4405",
                    properties: {
                        name: "汕头市",
                        cp: [117.1692, 23.3405],
                        childNum: 2
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@U±°I±n²mx²@WºXÈÆUVxJUnlVÈ@ŃôUǔÞVçn»VyĢÛVm@»kaÝUÇ¼óÛÈķKċ¥X¥Wwğk¯@wķKkUmabkIVÒ°Ċ@nVU¼bn`Xx"],
                        encodeOffsets: [[119251, 24059]]
                    }
                }, {
                    type: "Feature",
                    id: "4403",
                    properties: {
                        name: "深圳市",
                        cp: [114.5435, 22.5439],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÞL@xbVVK°X°Kô¥Vw@anUèlkĊl@wn_lKnbVmUaUź@nÿUmÝÑ¯Ubk@ÆkxŻ@aÇXwJ¯LķÝUĕóĸóêWº@b²nmĬÆ"],
                        encodeOffsets: [[116404, 23265]]
                    }
                }, {
                    type: "Feature",
                    id: "4419",
                    properties: {
                        name: "东莞市",
                        cp: [113.8953, 22.901],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ŏ@blKnykVaKnbnIVmUkUmUIUÓçmV@bUxó¦¯LW¯LUUa@wÝKğŚƾƨÈĠy"],
                        encodeOffsets: [[116573, 23670]]
                    }
                }, {
                    type: "Feature",
                    id: "4420",
                    properties: {
                        name: "中山市",
                        cp: [113.4229, 22.478],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XÒlmV°ôÞÅ@m¯°k±@@aX¹¯VÝÇIUmV¯kk±Û£mw@ÅmèÅ¼mô¼èV"],
                        encodeOffsets: [[115887, 23209]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/guang_xi_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "4510",
                    properties: {
                        name: "百色市",
                        cp: [106.6003, 23.9227],
                        childNum: 12
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lklWXL@VIl@XnJn@VUUalk@mK@kny@UlU@a°UU@VmaU@Ua@UWw@n@KmLm@alkmnIm@an@VIUamWÅImwU@@a@KX@JVLUVmUaVkUa@m@@Ulmkk°UaVUlKXbVwVIkaVmUk@KVk@aaW¯m@w¥laX@KmakVmnUl@nxVKInU@yVaVIV@na°KlxX@@_lmXUV`VIVV@n@lbn@@WUkValK@²yl@VUV@@K°L@KU@@UVaXIVVV@naVkVa@K@UUK@UUaLWaw@m@K@UVV@mVUUVKnLmVLKbVK@UUIkmI@mUIVK@IUK@VkL@WU@mU@WmUk@I@VJk@WwX_@amK@UUWkIK@LVb@mVmakL@J@bU@Ux@xbmI@`Iwm@UbmKUaUWa¯UkJWV@XJUU¯LUmV@ma@kkamKwLUUmWVkkm@aVUUkVKnVVUmXK@UW@km@Ukkm@@W@UkUy@I@aUUmb¤U@kUmL@bmJU@Ua@wkLWWkL@U@VaU@LUakKWbkUWVkKkLVLUV@JVbz@V@VmUU@kVmK¯@VU_VWakVmIUKUaU@@bml@XU@@V@LmKUVmVUKKbkaUXKUL@x@V@l@mxU¦V@lL@V@Ln@@VV@nlKUaV@nLUbmJnL@VWLkbmV@@LWXLlxVVIVV@x@V²blUVmLVUK@kWWXUlV@Xl`LXl@@Vn@VnbV@lVUVUÈVb@@`UXU`l@@XUVm@k@xmVknUJVXUbmKULmbx@VlJ@LVbkKUbVLÇUUVUVmU@VaUkUKVUwmLkUUVVlbkaXmwKUVVU@@V±Uk@VWUUm»XamUbKk`U@UnWW_kKmbUVUVmnUV@nJVUlUbU@UV@n@JmI@VmbnVUXlx¯kKmnVV@L@VbkVUmm@Ub¯LmlUL@VWLkmkLmmn£WmnKU_mWbnbmx@U¦UJU@Xmlk¦@mnUUm@@Jn@lVÔVJnIVWI@aÆK@I@aVKIlÞnnl@nl`nbÆX²l@xV@llbVn²VVl@nnV@IlW@Un@@kVa°KnÈmVaVXUlaVÈUVlwôUlynIVaan@lVXbI@n¥la@K_n@bÆx@XnJVnKVz@`VXVU`@b¦UV@VIlxUnVKXÈbVllbVbnVn@"],
                        encodeOffsets: [[109126, 25684]]
                    }
                }, {
                    type: "Feature",
                    id: "4512",
                    properties: {
                        name: "河池市",
                        cp: [107.8638, 24.5819],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lLVlbVV@nXVlI@JVXmnW°bIVV@ln@nalVUbnW@kVkÒlbVKn²°bUlV²@X@`nbaUI@°wlU@aXJVI@aVK@wUamIXm@XUV@@bV@VmImnUUwVaVKXUnVK@akVwV@nL@UV`n@@XlnIUJl@X¦V@aUIVm@anV@UwnL@VlbVL@KVVXUWwUUVUka@UVJnUlbnalbVVn@°LV`Þ@XVxV@@bVlUVVbXnWlXnml@XXWVXJmbUI@VllUVkn@@VWV@Vnb@VXUJVnn`lLVka»lVLnw@WV@lInw@WnU@U@mknUVóKwUmUXUU@@wVJVIl@XKVVVbVIJ@Un@lVLnmb@U@Ul@nU°VUVJnnVJV@@mVU@@wkUVwkKWkyUUkU@alkÈ@lJ@xIl@UUWVkUw@Kn@@kmaVUlUULÇUUKl@UUmL@aXU@mlUUwmKkUUVKVUaKUnK@U@Vl@XUWUKlwX@b@K@XkV@UwWJka@aUwmV@U@@U@wUm@»kLWVkIWXnmV@VkbmKLUbkVa@aa@@aVU@aVak£@±UkVU¯VUUJVUI@kxmUmWUbLw@K@aU@@aVU@Kma@aka@_VWkk@UWVUKULWKULU@KUnwVaUKxU@UmaLm@kVmVa@UkmI@@KmIkxU@@KU@mmakI@VLkmWkkJ_U@V@L@nxXbKVb@VVL@V@LUbUlmbU@UUWJUb@VV@@L¯K@LU@UVk@±z@kLUbVl@Xm@akm@U@UUJU_VWkn@`W@kw¯LmbU@UJUb@zmVJULmwk@mVUnlnb@LWkb¦@x°nXb@bUl@LVlUnlbUJUxWakLUVVb¯llkn@V@@nVbUlVbUnVUK@IW@L@bV@nxÆJnXVbUJm@@bnmJnkl@bnnK@Lm@Xx@VVbV@nb@UVV¯@bkV@Vmz@lnLl@kVbUVm@mI@WkJ@UWKkXkl"],
                        encodeOffsets: [[109126, 25684]]
                    }
                }, {
                    type: "Feature",
                    id: "4503",
                    properties: {
                        name: "桂林市",
                        cp: [110.5554, 25.318],
                        childNum: 13
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nU@JX@`XLm¦Vb`lVXXW@VblČnVlanLnmVLK@_Va¥@kUa@VmVbaV@XVVzlVVK@knKVmX£VKLlbn@b@llL@xĊôXaV@°È@¤bnV@@Wl_VU@WnVamwwVbn@KVLX@VmVUxlV@nVV_nK@mI@Wn@@IUĊ@@wVWX@@I°VVm@wmU@m@IUVklkUmmkÅV@@aV@@Wn_UKla@kaVlVanb@k@@KlVn@@aV@nIWWUUaVU@kKmwU@UImKk@UU@w@W@k@UkW@mk_W@Ua@a@¯mV£@mUUam@kWakVama@UUm@nw@alaUmnUlVlIVLVyk£Vm@k@UUJkK@kmKUwKkWK@UXImyVwnI@mkUlkUKkUVmw@kkJWUÈm@_k@@aaW@UUJUwU@@IWKkmUUV@nVl@bVb@bUUXakw@WUkbkKbm@xUlkLm@@wmKUX@UaVWXVmU@@UUUxkmWXkKkUWaUaUbL@`UL@LV`UXmK@VmakLVbkLxUJUIVbUVVb¯KV@Xnl@lVXbmÒnV@L@VWKkVUIWJkIUamUUbm@UkU@JUbW@XWxUam@kbVVUnUJmUUV@bU@UUV@Vk@bmULV¦U@VU`VLUL@xVbn@UJ@nWJXXVVV@bkxVbUxL@x¦@UlXUVVlULV@@nUb@xlnJVnlVknUlVUbmU@bVx"],
                        encodeOffsets: [[112399, 26500]]
                    }
                }, {
                    type: "Feature",
                    id: "4501",
                    properties: {
                        name: "南宁市",
                        cp: [108.479, 23.1152],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lKnbnU@Ua@KLlJVX@VnL@bW`Xxl@I@UJl@nV@XV@nXV@lK@UVL@JULVJ@nnJlVJ@VULaLUKnmKULVVU@nU`lIXllnK@UlJnb@nV@LV@lwnJ@L@nJl@VUbUn@lnKnbVV@wVLUbxVm@LVVKXLVKVLXU@VllUX@`lb@bnbL@UV@bV@@b@LxKVanXVUUmVUUUaVUkyUUaImK@mUUVUkKU_@W@UVVVIUWUVaVU@UUKn@k@al@ll@bnL@bVUVX@V@@bKnblmn@V_@aUalL@a@akK@kVKUKlwUUnV¥VmU_VWVIVaX@VaalÅK@LVJnalL@LnKwlVUwmX@VXlLUVnblaUmVUVwXU@Wm¯Va@ÞKnw@wmk»UVW²a@_mW@U@IyLVUUKW@@LX@VUV@@yVU@UV@nwUUmJka@IU@mVkaW@UwUX@`@kLWUk@mkUUm@kUUWkUkWxk@@VK@nV@UVaUUJmIkV@UamLUbkVmamLka@kmL¯WI@wJmwx@akU@aUKmbkaW_nW@_U@Wm@a@wkwUKmk@bkbw@mKUkkU@J@bW@kVWz@bVUaVUx@ULkJWbXVVX`@mJUVU@@Lk@WbU@UJlnXlmVx@Ln@b@KLXWJUUW@kaUVUbmV@nnV@n@lVLVmLXmXkV±@kxÅLUbJWIÅJ@ImXalkUamKkkL±aVwKUU@mÞnbWJXm@lbmKULWUUVkabnn@Vl@VVV@VbVbnLWLXJWxXLV@@VV"],
                        encodeOffsets: [[109958, 23806]]
                    }
                }, {
                    type: "Feature",
                    id: "4502",
                    properties: {
                        name: "柳州市",
                        cp: [109.3799, 24.9774],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@wUaV@nVaUVklmkUUmmIk@waVm@U@VKUkVUkWV@¥@wKVwUalw@aUUUWWXI@mVIm@Ua@wVKUKV_UV@U¥VKnal@U@VU@VV@aVUnVVIVmUUlan@VbXwWX@Va@IlVVn@VanVVblJXIVJlUXL@U@KmUnÑWakU@mkJUI@mk@wUmmUV@JXaWIXWmaUIJkk@WnJ@aUak@kkJ@kUKU_@myUóWUkm¥kUmL@KUKm@k_UmVa@k@@UmU@mm_JWIUVUWLUlbVUJÇVUIVwKUVk@mU@n@lUL@Km@@l@LVzJmUU¤m@UbV²U`U@@¼Vn@x@V@@VnUVx@blbXIVxU@Wl@@LaW@kxLXVWVk@@U@VmLVLbUVULVVlnLVxkV@nWV@bnKVVk@VLVÈVKVVkUnb@lm@@LVxUlVX@VkJ@wkIÇ@kl@blVVVzXllLUxlV@x@UV@nU@UImmUIUV¯mVk@@V@VamnUKkm@@VIUJUaUUWLk@UJUI@xV@VVWVnxLUômVV@VkVVVUnV@UVkL@VVV@bVxla@bkXVJVn`nU@bb@bVL@VnJ@l@VaU@@_lW@UUU@Unlll@XLl@@UX@°bVWVanLlknVV@VVX@VVnUVLmbXJ@nllXX@`VXlmaXVWk@WkwJ@VL@JbnU@bn@@bVKUnVJVIVVVL²a@bV@@Vl@nUVakalmUL@VUL@Va@mXl@nK@UlKL@Vl@@nkllb@Vnn@nVV°lVInwlKXxlU°n@@I@UnVlakUJWkUK@anUWK@_ÞJ@U"],
                        encodeOffsets: [[112399, 26500]]
                    }
                }, {
                    type: "Feature",
                    id: "4514",
                    properties: {
                        name: "崇左市",
                        cp: [107.3364, 22.4725],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@JVzl@V@Xn@ll@VlnX@@VWLnUVmUULVlUV@blnUlnXVVKxnLlb@lnbU@Vn°KVVI@WXUlI°VXbVVbnLVan@xJ@_nJa@wVwV@@a@IU@UU@WKXwWIXKmKUaa@UUUUk@@UmmalbVUXVVKnLa@knWXImanÝV@VLUx²blKlnLVbklWbn@JÆIXJIVaÆKlw²@lUnWWnKUUK@k@mmU@mnUVaVUb@lVXVXIWK@Lam@@KUwnWkkmVIV@Xal@@KV@VUnI@_UWWUkam@kkm@ka@mk@wkJWIUU@WXkWXkWWLUU@UakLWXV±VIVWUU@anUWaUK@IU@Vak@@UUKWa@m@ak@@wUkla@mUaUklakwV¯¯@WWUkLkKmakLUnV`UxWX@Jkn@bmlakkk@b@l¯bmbJb@VXnbVV@bJUkkKWVU@mÛVUUW@UVUJWXkVkKmUL@WW@UVl@XXKWXJ@XVlmbUxnnm@UlVnV@XVm¦VJb@mLkKÇbXblVkn@l@bWnX`V@@IVV@VV°n@@_naÆVVbUVVbUJnzlVUlXkV@Vlx@XVnxbKUK@b¯VVUVL"],
                        encodeOffsets: [[109227, 23440]]
                    }
                }, {
                    type: "Feature",
                    id: "4513",
                    properties: {
                        name: "来宾市",
                        cp: [109.7095, 23.8403],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nVlw@VJUIVVUV°lU²V@l¤Ub@bUV@b@b@bUblVaKnLla@UnUWmXlJXUlKV@V_U±Van@V£nVIyU@K@kn@@LVK@k@mnVl@VULUxVJÈUVIUaVkXKVVUXJIn`@nnV@Vl@@UbVnl`n@VL@LnKlVn¦VlôXVnz@V`VL@llIll@Vbb@mIXl@lIVJnbWXXJWb@IUnVVn@xl@nVJI@WU°LUaVUUaVJVIwlKUalKnb@UnLVWU_@KVK@_KVa@VKU¯VLVKn@laaUkU@maVUJ@k@Um@XmbkyVaUIUU@KV@laVn@KXKWUkUk@aWUUVw@aXKmVaUUkmIlUU@wUaxUmmU¯U@WLUmVIUym@UVmUa@wmw@çm@aWLUJUIUamKmL@ax¯¥kU¥U@±kUVmKU_mJUbkKmLÅÇ_@WWUXUmaVUkKUWW@nVxkUxmL@KkKmbUI@KLkÆbUbW@UbUJUXV`UnU¦mVVkxVLUL@llL@b@bkKVb@bU`m@knmaL@a@@UWVUU@amK@akkk@@b@lmVL@VUVUbVVXUJUU@V@XV`lLUVVV@nnLJVbVlzUVVbVVnUVVU"],
                        encodeOffsets: [[111083, 24599]]
                    }
                }, {
                    type: "Feature",
                    id: "4509",
                    properties: {
                        name: "玉林市",
                        cp: [110.2148, 22.3792],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VJUXVVXlWX@VxVnX@@`ULWUXÅbWK@mULUUmJ@n¯b@l@VULVxxXU`VXXJVIV@nm`@nUVXn@lWVn@b@Jn@nU@Lm`@Xn@WJ¦U@@VnLlV@@Xl`nIlJnkVLw@KVK@UaVL@bVKXlUUKVK@IVLa@U@WLUlVL@bU@@blb@VlbUxVbXUVJ@xVLUlV@VUbVLnKlXJ@Lb@an@VanL@`VLKV_UWl@U_a@WVInlVUUUVm@I@W@wVakIWm@U@XwlaVbnI@m»Va@aXaVLU»@aVa@kKkL@KmU@WzUK@wU@VWUUVUUKUa@mKmbUK@_nWVaUkVaUaVUVLXKVVUVmVI@UkKkLm`UkW@UwWW_UaU@WakXmK@xUXJkUUWUk@WlmJ@km@@aUKzmyVka@kkWVUU¯lmU@@wkkmV@Vk@mÅIUka@Ub@m@UUU`mUbWaWmbXXKWIXUWm@Å@y@UkIUJUUWLUWL@UkVUxW@kaWbKWnXxW¦nm`XLVlUbVbUxI@JmLUKUb@VW@@bkL@b@VlU@xk@L@lxXxWXX°V@VVVbUVV@UVVbULVnVJUb²baUb@VVVVInlV@VnXaVUlIVUb"],
                        encodeOffsets: [[112478, 22872]]
                    }
                }, {
                    type: "Feature",
                    id: "4504",
                    properties: {
                        name: "梧州市",
                        cp: [110.9949, 23.5052],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VbXblVlLXWlnwVV@VV@UnWUXVb@VWXa@kVKUaVaVkUlyX@VaVmUwUaVU@UÈymI@aU°@nWV@VaVaw@IV@VmnLVK@kmmna@VbVI@aV@XbW`ULUVVx@VbUV@bl@VLXblJn¦lL°°@n@K@UlLnKa°LWbnJ¦UÒVUllLlVnKnbWnnV`w@@Xa±nl@XKV_WVkVa@kVyUa@wU£UW@UIVW@@awWaX_WKkVmUULmak@UJUI@±m»k@m»VyUImnmmwnkUmVaVIUn_mW@»Vk@VwkmmUXa@IaVmm@Wm_U@mIUWóLmUk@laXmmkUK@UmKULUUmWUL@VakU@Ub@b¼VUKWb@bUbn¼@mJUakbWx@@VXnlJUb@x@X@JUnVVUVmkUJ@XbV`k@VXU`LUK@_mKUbm@@b@U`@nlV@bUnbVbn@@`VbUbVV¯bm@@mJXb@bVnUllVXUlbUl@LU¦VVmkLVb@bl@V@XlK@V@nUJUz°mwmLmlXbWVU@UUUlIU@VVmV@@¦bXbWxXWlXVWL@LUmkbU@@LVVVJUblzna@WVn@@lIUVnbV@Vlbkbm@ULUKV°UL@"],
                        encodeOffsets: [[112973, 24863]]
                    }
                }, {
                    type: "Feature",
                    id: "4511",
                    properties: {
                        name: "贺州市",
                        cp: [111.3135, 24.4006],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nL@xn@lKVkwn@alLlaXV@lxbVWV@aUa@aUk@mVUnVlXL@JV@VxVIVX@b@bl@@`ÇnXVlI@lxUnlVVLkllV@nmJUxnzWJ@VXLlLVxnL@lLlVI@V@lUnl¤UzK@Vl@LlLnb@VnVVU@kaKnxn@VkVJ@ÅUlakmWIUaVanm@_UK@UVWUa@klXamU@VmVIXW@lUVknVlKVLXVXW@b@VlnnVL@KXLKn@lb@UnW°@VaXWVb°aVa@I¯aUkUaVKVwaXk@aa@wkm@alanUVw@alK@Umkw@UaUmU@WXUaUK@UW@UaVWI@¥Xa@w@WWVXwU@mKUXUWVU@a¯kl@akU@UULmK¯VUVW@U_m`U@@xVbUz@lUbUlXU`WLk@m²Wb@@xU_mXmmamLkUkKVkUVÑ¥mIXa¯KbmLkK@V@Lm¯@¯kKm¥kIWaUKk@@aVUUa@UwVUKVX_WaU@@bUJUa@mbnn@lULmKUnU@@JxUbUbU@mX¯@V@bnJÇz@VUVVbVxUnUbW@kzVUlUbVbUL@lWb"],
                        encodeOffsets: [[113220, 24947]]
                    }
                }, {
                    type: "Feature",
                    id: "4507",
                    properties: {
                        name: "钦州市",
                        cp: [109.0283, 22.0935],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@IlVVlnL@xlaal@nVLlx@x@bXnV@@`mXX`lbnaVL@blV@bwnxI@xXJ°nKl@lbnKnblUVanKVb@lUnJVIVUb@VU@mL@Ul@XwllVVXV@lVnlVnl@XVlK@@_VWVxX@lbUnV@@JlbnIlmnVV@UwVK@U@k°a@mnIVVVK@nXLÆaVWXVK@_W@Umw@UXWWkUUVWUIVaUkJUVWbUmU@mkUJUU@UVab±aVaUIUmVKUaVUU@VUUaUUU@W¯XWWww@k@Kl@wkV@U@alK@aX@@UmIUWUI@mmkXU`U_WJUnUJmUk@@amLU@UVW@UkU@@VbUWVUk@@wmKkUWLUWX@JmIlUkkKWKkLWU@UKWa@bU@@a@_UKWUUUmJmw@nV_@ġğKóLmbU¼VÆ@xUX@Um@wklVnUnlkaUV@lV²WVklWXXbWlkVkIm`UULUU@UWx@XU@@lWLU@kbUbV`UXllUV@bmb@LnKVbULmnVVIV`X@"],
                        encodeOffsets: [[110881, 22742]]
                    }
                }, {
                    type: "Feature",
                    id: "4508",
                    properties: {
                        name: "贵港市",
                        cp: [109.9402, 23.3459],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@n@VzUJnVK@XV°nVVnwVb@xVVknJlVVUbnWL@bUxVVXbl@lVXkWXwWaa@¥@nUUUV@JVkVVV@XUWanknKxn¯VyVI@m@UkL@W@Uk@aUalKnUUV¥@KVkkaWVkUVkUm@aWanI@n@°aUUVaUa@_m@UamaV@akU@mV_@a@KWIkmLUKaUVU@kVUK@wUIWVUaVwka@Uka@aV@@aUKVkK@X@VbKU@JULVLkVWUL@aUKb@VUL@LxUKmlkImJk_@WU@kmK@UV@¥XIm@@Wn_@KmVm@@I@aUmkXm@UWV@mn_@mUUJWIUWV_WwU@mUknVVmxU@@VUV@zU@UVW@K@X@VLUVKz@J@VnX@`±bUXV¼ln@xmxÝL@Ubn°@XWVUxUVVnkbWVXV@X`ÆÈKnlLVanIV`nLVUl²V@V¦l°¦wb@nKnLVbVJIVXK@bn@ènx@xVbUnV"],
                        encodeOffsets: [[112568, 24255]]
                    }
                }, {
                    type: "Feature",
                    id: "4506",
                    properties: {
                        name: "防城港市",
                        cp: [108.0505, 21.9287],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XV@X°°UlxkbVlVb@nkbVl@xl@@b@nXbVL@Vl@UbV@@JVLXbmV@bVVUXUJU²WXlKVb@VVXKlXWlXXWV@VXJlI@xl@nlbn@lln@lbXalIVK@VwUVbU@aXylUX@@aW@U_UJmUnVKUamL@Kna@aVUkkVWU_ValaV@XK@kV@@WwVXV@VKVVn_lJlUXkWaXWlkXU±kU@VUlbkVmUmlk¯ÝW@mb@¦VxULmkJUU@ma¯wmkX@VóJ±bUVUXÝWklWXXlxUabIğÇ@U@mVUKkkm@UJm@XnWV@x"],
                        encodeOffsets: [[110070, 22174]]
                    }
                }, {
                    type: "Feature",
                    id: "4505",
                    properties: {
                        name: "北海市",
                        cp: [109.314, 21.6211],
                        childNum: 2
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VaVLnK@IJVwUaVaUkWKn_mX¥WwXmLXalbU£UyVÅ@Ýwm@°lLÅUmkmwÛaƑLÝUUm@ȣÆV_Ó@£UUV¼U°W̄ÞVbXbôx@b@bmV@ÇUÝ@@ĢU`m@nxnIVVVXVL@`@bV@@aXbVL@XVlKXLlLVlknJ@IWVXXKlVnL@xl@UVVXa@UV@VlX@VUV@nK@bl@nVVIVmXIV`V_lWnn@VJVXnJ"],
                        encodeOffsets: [[112242, 22444]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/gui_zhou_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "5203",
                    properties: {
                        name: "遵义市",
                        cp: [106.908, 28.1744],
                        childNum: 14
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@@UnUlJnwJU°VL@bnVUwlJ@XXVlU@klVUJknlUllL@bUJ@xULUlUblVkblbnwUXmla@wV@VK@L@UXaVKVLXWUVa@U@Im@@W@£UKUakKWIXU@al@@llUnL@W@Un@@VlUV@VIUanKl@Xb@lmxVb@b°bb@nlJVVnnJ@b@LV@ln@LmV@Vx@blnVKnlJXIlwJ@Òb@nlK@Un@UL@VVVVUUUVKl@VUVLJ@UVUUw@Wm@UVÈVlbUb@JLlX@@xLmk@@nlx@bUJUzVJ@@LVxUV@bWxnLnVVK@_K²xVbV@n¥@aVI@b@l@VaKnb@n`nmmýW@U_wV@VlVV@Vn@n@nI@Jn@°¦VaUU@mVVWVaUÅU@aVKnVbVUmmU@a@kUwm@aUUmUUJ¯lakUaXaWUUaVkkamkmUnVlULVlJ@XU@UJWUUwk@aU@WbkWL@U@WU@@XUKmV@aUVwUĕUJUamUUVUÑmnIVJ@kl@XalJVn@KVL¥@UWIXWmU@mVUKnUWLUKUaWUUKVU@U@anUny@UlUkK@w@a@aVU»UkVw@WmkJÅmUUVmwXalLXWWUnam@XkJ@UVU@U@W@@U@I@Wl@Ènlw@KXLWblVUkalKUUVVaV@@wnIlaUmkUKWU@KkUkLWaKUUWUn@VK@LnnWJUIVkUWVnV@V@@XK@VUIUJ@IWJkX@VVJIVkK@I@UVaUWk@m@wnUWKk@mxk@@lV@bxmb@x@VUmLkUJ@nVV@b@VkLVbU`¯Il@U_UW@UU@K¯wm@xL¯¥kI@bkb@Ua@m@kkW@XVbmV@kV@bWbUbV@¦xXlmVk@¦bkaWL@KUImK@wUK@VUIb@bmK@LÅy@akXW@kbWlXblL@ULUb`@UkUymX¯@mUJUUJL@Lm@@WX@lUVlXll@l@Èk°V°X@VU@UVll@XUJVXUVm@@VXLWlnV@Xk@mVULnxV@@bmkL@VWLUbU@UVm@b@ķ¥UnmJ@UUVkkJUlÔU`UIW@°kLUlUI@WVIU@mWKkXk@WU@bXW@J@xX@l@LVl@xLVxXX@xKnxVknbKVV@ULWlXU`@nUlX@llVXVUKlkUKlI@anKVLXKVaUIVWV_VK@VnLlU»VKVLm"], ["@@@KlKkUUVVX"]],
                        encodeOffsets: [[[108799, 29239]], [[110532, 27822]]]
                    }
                }, {
                    type: "Feature",
                    id: "5226",
                    properties: {
                        name: "黔东南苗族侗族自治州",
                        cp: [108.4241, 26.4166],
                        childNum: 17
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@VV@XkV@bUbWJU¼Vb@Vnb@b@J@bL@LV@UVlUI@aKULVb@bkJmxlLVxknVJkxnKmnnL@bn`WIXlWLU@UxVbUVmKVXI@JVIVJ@UL@W@@UmUXUlVUVJXImm@KL@UVmVXVLXblKlV@LXVLlVVnkbmJ@xnXl@bXa@VanaÒLmVnIlÞ¦°k@b@@lVnJlUnVX_@lVlKVUUxVLVWVIXJUlnnWlI@KUaUUVKn@VaVXV@na@mw¯@mUkJUamI@lk@@am@@IUmVImUUw@anUVaUU@LU@WaWUXWWwV@VwnU@L@ynbl@@X@aJ@nW@@Vn@lVLlxnIl@@UWKUnIlJXIVllIVV¼XK@aVIV@@bn@VKXLVKVVVInwJ@UWI@mX@WKnI@KmUUVJUL@VKW@@k@aU@@W@InJWUXwWI@W@¯wkaVaUIl@nValIXWWI@UUm@anwWkXWWIUbk@UJmIUamKVUUUVVama¯VkIVVUlKnXVwX@@WVaUUVa@IlaVmknawkUU@U@mUVUVwl°LVbnJVU¯la@mX@@UWKXU@aV_V@@JlkU¯@VnK@km¯kU@WUW@mmU@kmlU@wkL@WUkL@VmLJ@b@V@bknUUVK@UVKUK@Uk@Wa@LUVVnUbmVk@@UU@@aV¯K@U@UU@WmUL@aU@WVw@IxXll@UXK@KXXVJna@wWa£naUKVm@UU@mUmalm@@XkVm@U@VLmWU@kkWxU@@bVV@VkXVlV@UUk@@mI@KUwm@UmVUUwU@lwkV@IUa@mUaVIVKVa@w@U@UJkb@n@bmJ@XmlVUxWXkJmUkUUVWxUlU@aULUmbU@@WXkmL@xUV@nUxÇm@XLWbnlnVnnUVUnVVz@lbUVVlULVb@V@nUJkwm@Ux@bWbUK@UULkaJbUU@U@lUK@XUJmnJ@bU@UwWax@zkJWnUJUUVVV@bXn@xVb@JLm@Xw@`@bkb@VmXUV¯L@mW@@n@V@L@KIW@@aaUx¯@Um@XbW@@LV@bnVWVkKUzlV@bÆa@lnI@VV@@LnVVKUaV_VJVbnU@bn@nX@yVIVxXKVLlUVaXU°J", "@@@KlKkUUVVX"], ["@@UUVUkUmV@ln@VXVK@K"]],
                        encodeOffsets: [[[110318, 27214], [110532, 27822]], [[112219, 27394]]]
                    }
                }, {
                    type: "Feature",
                    id: "5224",
                    properties: {
                        name: "毕节地区",
                        cp: [105.1611, 27.0648],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@UkV@kW@Xn@@KKVIVVIn°@nWVzl@V_VaVK@kKWaXklaX@lW@bÆz@KnL@aaVJ@UVL@xnLVJ@LXKlba¥l@nUWkw¥U@VaXa@amLkUKm¯kmkIUaKUIWkKm@anw@mlwXImUk¯@a@amU`kkKWVkxmUUak_mJmw@wmXUW¯X_@WnI@aVwkWWýÅU@WLkUaUbVV@lUVVnm@kUmV¯kKLwmVUUaWVaaWw¯wÈ@VULUVUUK@nWJkIl@Umxnbm@kbUJa¯bUbVxmLUVaU@VUUWxkVVV@bUV@XWbnlUbbUJlbUV¯b@z`WbXnmbawUwVWUbUxmbU@Uam@VkVawVaUWI@mUKóz@lUlÅ@WIb@xXxml@XklULWKUmwUa¯KUXWJkaULmKkLWbkKUVImWa@kUaULW¯LK¯@kbL@bx@J@bmnnlUlzU`U@@Ub@mn¦°bUVx@bkVm¼mx@mkmVV@bkxVnaVV@bU@mL@b²`lIVV@lXLlbVxn@@bl@XllIVnbVn°°wlbXw@mVa°lVnU@mVLVbn@@b@@WVnUV@Xlxn`VznJVb@L@bV`V@UnwU@WUXKV@UUlmUUlaXalLmbIVbnJVIlVVaUUnWVXnVLk@nWnblnlb²xxVKVXlVXLVWLlUVJna@wVL¼@JVX@`@nnx@nWJU@Vx@XXKUblxU°LVKVVlL@KnbVUnJIlUnKl£VWxIlJ@nVÞUVVnbVX@V_°lnK", "@@@UmWUwkU@Um@@VkL@V@VVkV@nbVa@"],
                        encodeOffsets: [[108552, 28412], [107213, 27445]]
                    }
                }, {
                    type: "Feature",
                    id: "5227",
                    properties: {
                        name: "黔南布依族苗族自治州",
                        cp: [107.2485, 25.8398],
                        childNum: 12
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@V@IöalK@UV@@KUaVIVVLlaVbVWnX@@LnUlxl@naVLXVVaVUJ@lUUanWWI@VlV@Xbb@Vn@VmVVbk@kU@VV@XJ@zn`ULW@kK@_WVUK@LUb@Jlxn@nnWlU@@bx@XVVU@UbVb@n`VI@VVLUlUIUV@KmL@VV@XIV@@lVLVmXV@WLXLW@U`nkb@Vl@UL@VVVLllX@`lIXbJIXWLaVL@XXWĢb@bmK@L@°@VnxmxnK@xVn@VkL@VLakbl`VnnxVnUlV@@VVXV`@k°JV_UalK@U@aUU@mIlVnKV@U@wnaw@akU@l@nwl@XLmV@xnl@VXUb@V@JlLUJUI@UlWUnLVUUaVwV@XKWkXJm_@amKnmmLwlUIlmUwkKnwlI@aUaVKL@bVJkVUU@@KK@a@I@ama@UUaV»XIVa@alU@WUU¯IWVUbkVUKWLUwUJ@zmWm@@amVUaUIU`VbULmU@KU@@UmJ@kÅb@akUVylLXUmU@aU@KX@Wan@V°@Vwb@bX@J@LK@@U@mX@@n°KVUnW@Ula@a@_x@WnK@IUa@wWm@aUUUVVVIXmlI@ywXbVxV@@aInmVI@WVL@k@VVVaIlbVK@VVLXa@aVwn@lxVI@m@UUaVKUkVUka@UymUVVUmmUmmkXaWK@ÈnVw@mVU@wKlnXW@V@naVVKUk@KVIUW@mk@KXU@Um@@lVk@UVJna@UWaL@a@Xa@kmmVUUk@mkkamJImJUUmIm±aUUkambkamVUU@VlbUbVVxXWVUU@VUakU@UmUVU@mnUVVnUbVJ@bUW¥kLVamVkUaWJU_UVWKk@@nlUVVJUXm@Vm@UnVlmbnmJUbULU@@UUKWVIWxnJVb@xUL@bUJWIkxbkb@xVJbmU@kW±LkKUkVa@a¯am¥ULkalÑlKXUWXaVakImV@ka@UUJ¯aXmmbKWU@wUUaUaKmU@UXlWb¼WLUKUb°UlVbkbVL@VJ@nVlUbUXmJ@VX@lbUbU@@bWb@VnLVJ@bVVUzVL@lnL@bVVVULmKUkJkbm@xVb@VkKVnnV@b@WXUnVlVVXVJUXlVXbWV@VU@Ubk@@KWbUUmL@JnXV°XJ@_`UbkXVVlÆkb@VLXVV@V@kKXX@`V@@n"],
                        encodeOffsets: [[108912, 26905]]
                    }
                }, {
                    type: "Feature",
                    id: "5222",
                    properties: {
                        name: "铜仁地区",
                        cp: [108.6218, 28.0096],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°a@aÈbVUlU@aVKnVVVUlyX¹lWVa@UVnUVU@m@mUl@mÞw@xnIVbna@KVIJ@kwV¥UXÇVkVW@kkKWU@aXUWmnIVa°VXbmL@VVbnVVVUbVbJVbVKXkVKVanU@aWnWUWa@Unk@mVIVK@wXxlLXbVJVlKbl@VI@maXalVVVbX@@aalnkx@b@Vb@Vnx@bVVUXn¤WXn@Vl@Vlzn@`@I@KUU@V£namVkXa@aVKnnU@anVlKa@UUU@amk@»kU¯@aVWnkWmkImU@akaVm@»VUV@UKnkW¯XWlkUKnIWa@nmlIXmWUnwUwWm@wULmaUJkIUaaWaklwkwmJmU@bkJ@XUJ¯W@XbWbUKUkWJUUVKnn@UmmXUWa@mU@@UI@WmXVykwm@kaULWwU@¯lKUUVU@mU@UkmaUbmV@bxVnVUJVn@Jn@@bl@@knJVblInV°@nx@mbU@UWUbm@ULVVVb@LkJmXkmVWIUJUXUKVwVUkLkU@W`UmkVmIU@k@@a¯lÝ¥kmJUnKÑmbUb@Wbak@mWU@UbUVVkLlbUVkXaWK@LkxÇmk@@X@J@V@@X@VUV@VIWln@mbXVWXkKWbnxVUnVÆInl@XUxVl¼UV@b@b@xlLkV@VmzmV@b@VUVVLXVVbVLXKmVVLU@nnVWXXJ@V¦UK@LUmkIWbk@@lUImJnVÒVUnVVbVIVĖUxV@bnUVL@WV@@X@VKlXXaV@@blVxXVVIV@@WkIUVKUkVmlnnbllUVbXVWbblVkb°VInVVV@bnVx@l@bnVVnUUamUL@bVVÆUbUXUn@VVUb"],
                        encodeOffsets: [[110667, 29785]]
                    }
                }, {
                    type: "Feature",
                    id: "5223",
                    properties: {
                        name: "黔西南布依族苗族自治州",
                        cp: [105.5347, 25.3949],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VL@Vl@@IXW@kVUVbnW@XlKVVnUVlL@baVbb@xX°ÔUxV@kbm@VxkxWJV¦@ÈnVKxWXJmV@nÒ@xVbn@@blLk`VX@bla²JVUlnn@U±lw@wnw@mlwVIX@@m@klKnkaKnwmmXkÆVmU¥l@nb°n@aVwVmVIVnI@a¯@mU°l@@VnI@JV@UV@b@IUbVJmXöºzllUbVa@aXUl@U@llLnKVaUa@UmK@UwVbnKV@VwVK@UXV@Vbn@w@UWnX@a@mI@UUKlaUaVk¯VaVLXK»XaWk¯mkğwmW@mIVkwJUIÇVwUUkVKkm@UkmU@WÅwm£Vm¤¯IkJWa_lUbmJzÝJkUÇVU@bUÝnm¯LUb@`mL@VkL@VUmmk@UU±Umka@kU@ķymUkk@mmkÝmUaUakImV@V@VÅL¦JUXmJXWb@n°Æx¼nV@LlbUUbmL¯@ÞbV¤nbVx@bUVlblI@KVVUnVJUn@VlLUlmLUUUxmK@I@@VW@@bU@UJmUkLVVUl@b@V"],
                        encodeOffsets: [[107157, 25965]]
                    }
                }, {
                    type: "Feature",
                    id: "5202",
                    properties: {
                        name: "六盘水市",
                        cp: [104.7546, 26.0925],
                        childNum: 5
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ôyVL@nXJVUbxbUlU@nVbV@naVwaVUXVxxbnaWmXa_@y°aVUkaVIaVamkXa@WVU@aUUlUXwVV@UVbVUnKUwVa°abVIlan@manw@VklJXI@mLVVVUVK@UÇk@KUa@UkaVU@UVWV_XWVXVWlLXKlLXaÆKwVL@akKm@Uw@@XUVk@VUI@wWK@aUVI@UkK@mLW@kImJUÅVmkXUW@UJkx@nmx@xkxV²m@kmUV±Ikb@aUWl_kK@am@Ua@wÑ@mnUWIXwULm@ÇU¥XIlwUwn@laU@Vw¯ÓW@waUab@akKUmVUUkL@WmXUaUV@lWX@Jk@@UUKULmLUJmzkKmVX°VUnWKULL@mU@UnVJ@b@UV@X`m_@l@@bmbXJmnn@°wnn@VLX@V@nVl@nk@@bl@nn°WlXzW`XXVKnUlxVbUb@VXb@VxÈbVlnbmn@kVUL@mLUVVL"], ["@@@@UmWUwkU@Um@@VkL@V@@V@VkV@nbVa"]],
                        encodeOffsets: [[[107089, 27181]], [[107213, 27479]]]
                    }
                }, {
                    type: "Feature",
                    id: "5204",
                    properties: {
                        name: "安顺市",
                        cp: [105.9082, 25.9882],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lL@bUKxÅLWbkKWLkKUXUWWXU`UX@VUVlb@VVb@Ll°xXxbbXUVbVnUxKlL°nUlVn@UmVU@kUUVablVXKV@ÆXþlXUxnU@mVK@_@ml@UU@blU@KnLVyUw@@UmkWVw@UVK@VXzVK@nVVUUW@kVJnla@nKWkaWL@Uõb@JU@mU@@_WWL@lUU@WUUK@lakÅUUlWVa_@`WIU¯mW@InKVVXa@Ll@VaV@@UXUWakUVWUIUWUkUmVXW@@amUUmLl@UUawn@laIVlnLVKUUU@amK@kUKVyUU@aUImK@UXa@aV@VakaW@@UnIVWVaUkb@mWX@Vxm@UaU@W@VULUxU@mLaUx@VnL@VVbUbmLkK@kVk@WV@bUbVakkyõ¹nWUIVa@J@aVUU@@ImJ@Uk@¯V@n°@bmJUUJUnUxbm@¯mak@¦VUnÅWlnnmxLbmlkL@l@nWVnlÆUVnIlJ@XnK@lL@VJVU@bXL@xVJUl@VU@W@Vxn@"],
                        encodeOffsets: [[108237, 26792]]
                    }
                }, {
                    type: "Feature",
                    id: "5201",
                    properties: {
                        name: "贵阳市",
                        cp: [106.6992, 26.7682],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nlLXVJLVblJn°lnLlVnKlU@nUUa@WlX@ln@Vb@la@alJ°¦Kwn@°xLVkUmmwUmk_labK@UlK@UUm@wLmnwmw@U@¯@KnL@aaġXWW@UKbKWXJIWakJ@_kWkKUU@UVKk@@UlamV_X@WKXK@WUUnUK@kU@WJU@@UnK@LVUVJVkUK@UUJm_@UaVaV@UU@Ww@aV@Xkmmm@kw@IVa@KVLXU@`lLX@VKm_@yI@WU@UlVl@UanU@Um@UaWaU@Uk@XJmXVbkV@IUVUbWUUKmbk@kwmV@K@mWUXUakbKUUUJVb@LU@@VkL@VXKlbXmL@kbmUI@lVXUVU@mULWy@UUL@VUxXnl@V@VxUzmK@LkVa@VVk@@n@`UL@nmV@bmJ@X`WX°WVn@xnxnIl`VbnVlwXUlLl_nV@b@bl°VnWJkx@nmx@b"],
                        encodeOffsets: [[108945, 27760]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/hai_nan_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "469003",
                    properties: {
                        name: "儋州市",
                        cp: [109.3291, 19.5653],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@à®¼jpnr``pRVHÊÌ¤Zt^JÖA[CâlTébQhRPOhMBcRSQiROE[FYdGNOEIH]MgEAMLLIAG_WMCSL@ED]PCLYC[ZIHgjSxJTMbHNEFCMEE_HSDFHSLECRNSFDRICHNADGPI\\RZGIJTIAHLDQOHG`GTNCOIC@eIGDWHIS[kiE[FMbECZS@KKS[FDWsCeRuU_DUQNOE[LKGUBM¨EDQP@HWHGDImXCog_~I_fGDG|QDUWKBC\\ore|}[KLsISBHVXHCN`lNdQLOnFJSXcUEJMCKSHOUMDIm_DI`kNDIGEYFM\\YPEEIPMSGLIKOVAU_EBGQ@CIk`WGGDUM_XcIOLCJphHT_NCISG_R@V]\\OjSGAQSAKF]@q^mGFKSW^cQUC[]T}SGD@^_aRUTO@OHAT"],
                        encodeOffsets: [[111506, 20018]]
                    }
                }, {
                    type: "Feature",
                    id: "469005",
                    properties: {
                        name: "文昌市",
                        cp: [110.8905, 19.7823],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@hĲ¤Ī¯LQDaFßL[VQìwGF~Z^Ab[¹ZYöpFº lN®D´INQQk]U[GSU©S_c}aoSiA£cÅ¡©EiQeUqWoESKSSOmwćõWkàmJMAAMMCWHGoM]gA[FGZLZCTURFNBncVOXCdGB@TSbk\\gDOKMNKWQHIvXDJ\\VDTXPERHJMFNj@OwX@LOTGzL^GHN^@RPHPE^KTDhhtBjZL[Pg@MNGLEdHV[HbRb@JHEV_NKLBRTPZhERHJcH^HDRlZJOPGdDJPOpXTETaV[GOZXTARQTRLBLWDa^QAF`ENUPBP\\Eji`yºEvåà"],
                        encodeOffsets: [[113115, 20665]]
                    }
                }, {
                    type: "Feature",
                    id: "469033",
                    properties: {
                        name: "乐东黎族自治县",
                        cp: [109.0283, 18.6301],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ªVLP`@PEdNRAHOPEAKHEVL`GZBJfvdTAXNNTZJFPrHHNpKTD\\ILHbEVd^JOHLh@NNBnHP`\\xH@NBRLJTlNv_^CTLd@bNDVFbxdFVUPBTKOGEOUO@OEBXQP[H_EI\\EbeYa@UO_JMEJ_IEDKJUGMDcNUd_FMTEJSGoZ]EIYGO[YWgEQ]a@WHEDQKUSDUGAbYBUpSCYNiWqOSQEoF[UcQISWWNMSDe_cLQ_UBiKQOOASQAWgSā]ZaSPÝZ]XMXS[^oVËNgNKlE RôEø"],
                        encodeOffsets: [[111263, 19164]]
                    }
                }, {
                    type: "Feature",
                    id: "4602",
                    properties: {
                        name: "三亚市",
                        cp: [109.3716, 18.3698],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@®ĂhTBXTRPBRPjLVAR`dKf`TCNXMTXRJVdE\\FpTRrPjXZMTDVoZABaVHTCLVCRGF@X^bFRhZXP\\ZHHMA[^wBWXJlW¤EJ[bCTOFWWMm@ILMGWQ@DQ^QNWFSHEbF`OXNbOVNKTEPDTLTCCVTREfvfEHNbRAENH^RJXCFHNFRpVGHWISDOTMVCZeGamaLoLÛD¹¹ėgsia{OųETtlÉwr}jR±E{L}j]HąKÃT[P"],
                        encodeOffsets: [[111547, 18737]]
                    }
                }, {
                    type: "Feature",
                    id: "469036",
                    properties: {
                        name: "琼中黎族苗族自治县",
                        cp: [109.8413, 19.0736],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@bRFnHNbHgN@NPEnbXP@bND`NT\\@\\QZb@`@J]V@XhDpWnCJGHGXO@CR§FANHVKLF\\MPVR`CvVfQtDPKpGHG@S`WJP~^dSTHWX\\RHTFACQTIAUPOU@MG__IaYSFQKNSbORHXCZeTFJgB`YBMNMFi~IVDV[tGJWXGDQRGF]JrALgESLSAYDGIaFeXQLS\\MKSLSQYJY}eKO[EHiGSaK[Yw[bmdURgEK^_kcSGEOHKIAS]aFSU@Y]IWFUTYlkP_CUOUEkmYbSQK@EMWUuAU\\M@EpK^_ZMDQ^OXwC_ZODBrERURGVVZ\\DTXcFWNIAWJWAYUUFYEWLQQaCIZeDM`cLKRGpanJZQd"],
                        encodeOffsets: [[112153, 19488]]
                    }
                }, {
                    type: "Feature",
                    id: "469007",
                    properties: {
                        name: "东方市",
                        cp: [108.8498, 19.0414],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ºxJYZQIYXLl@dR\\WZEn]bA\\S~F`KXaDeTiNO^EEKWEDQXITBXaWaDQMUJOIaTWf@NJV@dSxGZFu_@WMKAU}AQ@MwG_[GOAmMMg@GKP]IUcaFKG[JSCoLGMqGEOYIMSWMSBucIeYA_HUKGFBLOFGPQBcMOF_@KO©UAtERadwZQ\\@ÊJÒgòUĪRlR°KĮVLJ"],
                        encodeOffsets: [[111208, 19833]]
                    }
                }, {
                    type: "Feature",
                    id: "4601",
                    properties: {
                        name: "海口市",
                        cp: [110.3893, 19.8516],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ńZƂtĢ¬æßFuz¹j_Fi[AOVOFME_RBb]XCAKQKRSBQWSPY\\HbUFSWSPoIOcCOHIPkYCQ]GdGGIFQYgSOAQLK`MFUIGa@aQ\\GGUFcHKNMh@\\OYKAigsCgLSF]GOQO]@GM]HyKSHKPW@Pxi@EMINYREXWRQ@MQcFGWIAwXGRH\\yDI`KJIdOCGRNPNtd\\UTMbQYi@]JeYOWaL[EcICMUJqWGDNZEXGJWFEXNbZRELFV]XQbAZFrYVUBCLNFCHmJaMIDDHXHEhQNXZ_TARFHVB@DTQIRR@YHAJVnAbKFUEMLd\\c^ÍÞ"],
                        encodeOffsets: [[112711, 20572]]
                    }
                }, {
                    type: "Feature",
                    id: "469006",
                    properties: {
                        name: "万宁市",
                        cp: [110.3137, 18.8388],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@^J@ZTVbET^JBGLFPTHld]`FLQhcVanx\\\\ZbLHTGj\\FLP~fIZRZPVTQFSVAFJE^NDLEE[~LjsxVTG\\NZZNGlLRRGLJTV@hPZANN^@T\\NEPPbDZXO`d^HSvcJDIV\\XZAJUFCLNP@PQ¤@[ïKLÑIÏ]ÇE±I{uYśUćFcYUmsVeBSVgB[RO@aYYPO^]@UVaNeDShMLG\\EfFVE\\F`"],
                        encodeOffsets: [[112657, 19182]]
                    }
                }, {
                    type: "Feature",
                    id: "469027",
                    properties: {
                        name: "澄迈县",
                        cp: [109.9937, 19.7314],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@T\\GJCXJH@fJDDPNCNJENN^NLHBNSx@DDYbBLLDRbjZTj@`XXTlG^Xr@PJLW\\WLTlWR@HDJTD@X_PO@STMDNTMVV@NLDM`M\\XM\\JNBH[PYZúYzŸ`Ċ\\ÎÝd]c[NKVFLEBaUmBIZGQ@JQSR@CUAEGBQ`SWYRMFgWGCGJCbNnIDGMEDKVAZUEqBYRa^WEUFKYQMaFWXEHIFWMYHCrXVIIiaK@aMCUYNSIISTwXALKH@XWXIEIJQCG[IEQDE_XSBaa[AIPW@]RS[FWS[CD]PEBYNGFSaSyJG]@ugEUDQlGHiBKHUIoNSKqHFaPMICK]UUHIPDJMuCA[SCPIDIOILGAEmU[POPBVSJDREBGS[QXWSGcT}]IO_X@TGHoHOLCX\\ELT@LYTDaFENF\\lj"],
                        encodeOffsets: [[112385, 19987]]
                    }
                }, {
                    type: "Feature",
                    id: "469030",
                    properties: {
                        name: "白沙黎族自治县",
                        cp: [109.3703, 19.211],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@D\\RV]dTXELnHr]^@LETBBRTHPi^[@U`QTHDJ`MGSogDIPKdJ`WVNHCXHl_DJR@AH`FBVPUJLHKNTJOFFZON[ZEHFCJlMJ_Cn`CJVNGPLTNDFIdVTWEIPmRKMc_kDMWGGUTAtJLK~\\f{pqD[LAVXRCH{HC`eJ`}@W^U@I@_Ya[R[@MSC_aMO@aWFmMOM@haGGMEmaQ[@MESHaIQJQMckBIw[AOSKKAMPSDSLOAV_@@`KJRbKRDfMdHZERgAWVsDMTUHqOUr@VQXTT@TfgL^NH\\@heTCZaESNObHPHeZF\\X^ElM^F^"],
                        encodeOffsets: [[111665, 19890]]
                    }
                }, {
                    type: "Feature",
                    id: "469002",
                    properties: {
                        name: "琼海市",
                        cp: [110.4208, 19.224],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@TP\\pATHTGlZDJGAQjE\\Rb@jVBDCN`JZ[NCNHNXbULPrP\\KNbMTLjJJRFP`pNLZz^FLRHjVPZ@hxVKbHBHMNNJFRlLzGPnNHhIrHHADcPWdUAmEMVQDSKYHY\\EhBN^HpXGNDBNNBnIßÅ_g{³So]Ã£@ORO@KMEDIVYB[WJUICudGTc]P_YWaCOOMFS[]@MMYBgOU@ISHKQQkKMHYY[MSHwUit}KF\\KFMCF]EIUBETSROUKTLT[NKTWREfJbCHBZKTFTKh"],
                        encodeOffsets: [[112763, 19595]]
                    }
                }, {
                    type: "Feature",
                    id: "469031",
                    properties: {
                        name: "昌江黎族自治县",
                        cp: [109.0407, 19.2137],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@`ZĤd`òü BSPGP@VSbQ`@]HC~T^SE]N]FkW]E[fYGGOPaTMbFDYfS@g[MGK]he@SSSRW@UVqrPVGNStCXUhBFQGYNcCeLQQaLI@_`@EUwcEaCUaMc@SK]Du`MSkKI~BVNL@X`EvYwHcTU@MIe@SXJbIPNVCRXbWbSAWJCRXFFL]FMPSjCfWb_L}E[TaBm^YF[XcQk@WKZJYRIZw¹ "],
                        encodeOffsets: [[111208, 19833]]
                    }
                }, {
                    type: "Feature",
                    id: "469028",
                    properties: {
                        name: "临高县",
                        cp: [109.6957, 19.8063],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@jD`hNd\\^dZädĒH´Op@ùZY\\OAGIMN[[W_NCNMKU@NUMSNCTSP@`O@WSCCI@GXQSkXKX[IK@OWqH]SkWW@_SiiYQaKCAKZaCCw@MTGAMKM]FMMIMDSM_HGHRPKCBGSJJIYH[QOJCHMBDGQJECMTDQKFGTCEGTF`NFEDMFaGSNwIiTGhYJD\\KZODC^@FTKND`XBHKJNKFBNhG^FJMPcHEZF\\QPRjQTAdgNOPgQaRSê"],
                        encodeOffsets: [[112122, 20431]]
                    }
                }, {
                    type: "Feature",
                    id: "469034",
                    properties: {
                        name: "陵水黎族自治县",
                        cp: [109.9924, 18.5415],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@R]NC`YL]FoN@V[vBXVFNL@TRZalnVFVP`DlOZkVSXEE_F[EUFeH[NKTgfCbMVU^@P]ZObZP@\\QhATUfAtUasñiāEoI]eYǯ@aKmaeWuCºKÜKpnbHbYfUDSNCPJTRAHJTDJSfDNLHXC``VBNGTYCQDIXMDSP@xLNEFRNXBIpVNLXah@RgF@`qOML@LJNSPLbaHAh@Jdj"],
                        encodeOffsets: [[112409, 19261]]
                    }
                }, {
                    type: "Feature",
                    id: "469026",
                    properties: {
                        name: "屯昌县",
                        cp: [110.0377, 19.362],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@\\OnVBFKHPJCJOJTDB\\vDINOCGJVVL^JDONEbrGTLpMVJLGjAHGRkVChF@vH^zIbTETMHAZOFC^\\DXT\\EffAP\\PdAV@UIYfS|S@YPICMeM@sC[_A]VQEwyHSMuNcAUlQJMVGMS@mVBZPFO\\CSFQK[LqDMACiUa@[QiFBRIHYCHkGSBS[oSOqBIE^QHCRWHIXsHU\\UC}JEjMNAN_ZAIhSEYfWDQGaPMTLERZTJb``NHV@"],
                        encodeOffsets: [[112513, 19852]]
                    }
                }, {
                    type: "Feature",
                    id: "469025",
                    properties: {
                        name: "定安县",
                        cp: [110.3384, 19.4698],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@JjDNdJ\\FbKPXfZ^Ij@RZNaVSc[MsMOHQPDJcLIJ_zCG[HQxWJBHXdENRR@XQFWZQQGOFSWUCI[WCJuRGLXNMPLhCl[Ta@SqGgJMGOmyHkKEQMINMAGaGULgwY@UOGiKQ]EYyMKoO_QEIIKiNSMa[LqOKOaVMWMGMDY\\_IKrL\\ERT[DEPYOUA@nNTUHINkRBVMdNvGTxzRF^U`BD\\@tfNDNOJ@Z{TeTJZ@VUcB[OBOeeQT@^OXBJb\\AbWTF`RCJFH\\RDJIJFXW@WLGBKxWTSJJMTVZND@bbL"],
                        encodeOffsets: [[112903, 20139]]
                    }
                }, {
                    type: "Feature",
                    id: "469035",
                    properties: {
                        name: "保亭黎族苗族自治县",
                        cp: [109.6284, 18.6108],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@FJp@fxpQ\\ApN\\GNPNBM`HLMrXLXj\\PEHnI@WUCEM\\GTc\\GZYHTPBHRCPTdH\\K\\@HXiBJILJJAVNTOZJNtFPC`YxDPWci@IBgbGKaTOIM@KNKrP@_hE@QbgKWUMJoWAQMFEKM@wTONCJWRCZDHSAM_UD_GWMKeCITSCGIQBGXUHQoMEEGWDQIG]FMQBMaFGueFeSQDUSDSKOCSFMLUaPWM_PaEGFETMX]RCRR@HXKN@JNnXXESPaDI\\£FkXWIAX]xB\\GN"],
                        encodeOffsets: [[112031, 19071]]
                    }
                }, {
                    type: "Feature",
                    id: "469001",
                    properties: {
                        name: "五指山市",
                        cp: [109.5282, 18.8299],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@TCNOLBTLBPx\\AJdlNRRIbJTGNF\\@RcIYbmHoLQdKN_fCJYbDRRXKZFVEZVXBXIJBXMdESW[CUYHUVQFQAqsEIMPYMSBUIIJKAIjGW[@[LGScDOGQOAGSYZ[HSd[HFNVD@XmJFG[OWiWKNqGKN_MAMO[HoM[BoRewo@Y^HpITSFENc`MVCdHNIVCLJFI`NFIP`@VZbaf[FFJG`O\\WRFA@PVPFPPH"],
                        encodeOffsets: [[111973, 19401]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/hei_long_jiang_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "2311",
                    properties: {
                        name: "黑河市",
                        cp: [127.1448, 49.2957],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VÈÞ@kxnX°VÈa°V@kôwbJVkXlVUx@lL@xkVV°VbxlVUnVxk@KkVbIl@°kVl@lÆnkll@@VVX@V²bUlVlVUVÇn@nkJlkVb@x²V@n°VUnlKUn`@n°bWLnVUblVUVVbknV`°kkl@@V°@nzJ@XxlWXb°n@bĠlbXbbVbJ@Vba@@lbUbVmn@lVmnIW@WbÞ@n@x°@ĢaƐéϚnlČ¯ĠŻÈwm@ôçUmm£Xy°UV@wÈ£Ǫ¯kõÝçUÑUķĢkVÑÆÞU°nŎ¥ČUĊx°m°¦żVƐx°Ç£@yUônÞÆ@Èĉ°Kô¦WkWUbÇ»@ÈĕWÇÈ£ŤU@n£ÆUUKVamanwÅmÝJ¯k@JIkaVaUUÇbkaÆÑkWmÝUÛÝ@wnU±@kkV¯KUkJ¼U¦Å@ówķaķůV¥Uaó@Åwm_kVwĉĉmmn_V»a@UVwķóU¦LǫéóXÇmōLǓÇķxÝkĉkmakbUĶ°@W¼@bÈÆ@ĖLl@°J¯mkl¯LÝ±LamJ@¼VƧUóUXċb¯ńVbkÆÝI@llxk°V²V@UxÞL@b@b`ÇzkókÝ¤@ğ¯WLĉÇLmmnċVkbUaL@¯bU°ğLÝÝ@"],
                        encodeOffsets: [[127744, 50102]]
                    }
                }, {
                    type: "Feature",
                    id: "2327",
                    properties: {
                        name: "大兴安岭地区",
                        cp: [124.1016, 52.2345],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@kϙmƏêġb¯@@wmÝ@XV@Ill@bUxl¯VlVbV@ULVlUV_kxVVVÈÝJ@¯Ulm¯x@xóÒĉ¼m¯Wxţ@Uz¯WwnUwť@knW£óVUUwğyó¦WIVmmI@±kwÇ@@b@ĉ¼ó@¯wó@¯aó¼KÅaUwmWUwÅI@aKó@UaLaVÅwō¼UUÝl±I¤VxÇx@zkJmnnmbnzxll¯ČkJl°@kbmx@x@kêmVnWxôXxU°bWLóJnÇWĵV¦UUbbÆġKk¯VU±aXmċÑUwĉKġkVxkÇKkbIÛXWl¯bX¯KbĊÞVÆnĸ²lxU°n°òÈb¦xVb@¯Vx@¯VķÞČlĊ°KĸȘI°¤ČIôò»ƨnȰKǬ¦ôWŎÈƨwlnKVXmbX`lbwkVWXXL°aƾaĊ£n°@°¥ŎzÞ¥»alwôkƒJa@ĶK£bU°ĊxźVÈUĠ¥ƨVI@XU°x°Ln¥w°UmwXmÝV¥Ģ°@nU@mÆ£¯lKÜw@aÅU¥UaÝIkmV²nn@Ķ»@Uk¥VKÞ@ÞÛ@kVmĢa@_Jómǖ¯ÆwóÇa@alUwwĢřk@wÆWXUWXWam@_ƒ»ÇéXaĸwVa@ÝKkUWkXkKXxn@lĊV@¯m¯nřÆw¥"],
                        encodeOffsets: [[130084, 52206]]
                    }
                }, {
                    type: "Feature",
                    id: "2301",
                    properties: {
                        name: "哈尔滨市",
                        cp: [127.9688, 45.368],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°`_JlU@@V¦°JUnLôlnŤ@@ÈaUÒVbkbl¤zk°ÇVÛô°IlVUVôUxÆU@bźĀº@¦b@l²UVl@°ÒĠxnXxÆVô¼Þ@Üx²KÞlVÑ°UȰôlwô@²ĸ°lanV@VŎUll@bÈnÜmwĢ@la@ÝÞb°UXblŎ²ÆkVI@nJnĠ°knÜbĢwna@akÞKƒĀaIVbU¥wĠwkôxnLċVçkaU±IUmnġW°WôĉalÞÅĵ¯@W¹XÝab¯a±X¯ºLaVmkLóbkaVUKVkkKV_@aÝykk±L@ÅU@yV_aU¥ówÇx@UkVn@lkÅlwWVwUkĉmkklW@abVwnWWwWL@UUÇLÇm@wJĉL¥@Ý_@a¯yUWw¯¯Uġx¯aÝXVmaU£ó±¯nwa¯óÅVXmanUlUXkWa@mkIğamIklÇUkĊzkKlUōĬl@nX°@llUxŹ²mKĉVWwk@UbUK@bmVmIVmwaWxXlWČmºÞÆbUxV@ĵńWÆĉLkWUbaWzkbĉ`U±LklōwUVÝ£UW`Uwk@mk¯VkaõVX@WbLK@XƧºWzxK@lmX@bkVVÆk¼Vbk@Vn"],
                        encodeOffsets: [[128712, 46604]]
                    }
                }, {
                    type: "Feature",
                    id: "2302",
                    properties: {
                        name: "齐齐哈尔市",
                        cp: [124.541, 47.5818],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Þ@ÞĠKV¯a°@KVblaČUmnnKĊÈKX°Ġ@Þ£ôllÈy_@a@aKÝVwU@±¯Ulkw@kÞJlÅUa°ŃČaWVôƨVU@»nIb²KÞ°Klkn°¯I@kK@ĕÇÅ@aX»¯@VĵlaÿVamI@aÅÝउýĊȗJôȁÅkmƑÛ@kxġ@@laVk¯»īŹak¥Å¯JUaWU@@wa»KUkÆkUmUmwÛ±±UUbUUXwWwÆÝklkUanaWwnKlkal¯kaƽakÅxa¯@amb¯VlÇwÛĀV@xmêVÆVVaôVwÈx@ˌx¦VÞ¯VlmX@L@¯Ua¯LmV@°XċKV@UÈ@¥@wġIUkm¥Źw¦¯lmn@°kxVV@¦óamn¦l@nxlĉVómxnÒĉĀĊ¼þǔêÞ°ˌĠÞÒ°ĀɲĀƨźˤȤƨĊ°w@£nymwnkUUV¥ôÑVmkÆmUUVamVIkmôlxkXÞþbll@kVƆVxV@¼VÒ@UnnÞJ"],
                        encodeOffsets: [[127744, 50102]]
                    }
                }, {
                    type: "Feature",
                    id: "2310",
                    properties: {
                        name: "牡丹江市",
                        cp: [129.7815, 44.7089],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@U`lLUlVLUlbaôlKnUbK°¹²W°baÞbknyUlUkamř²L@m°@lm²n`ôÅlKxÜKnxV@l@ÅXyW_k@wmŹĕmX»Ûl°ôÈ»ôô_WW@Ual»wU@@wUV@VXI@wĢ͑ÞȻaU_@mUkly@¯óV»XmWUXUWmnm¥nUUaWLk»Æ²IÇawÅaÝ°¯nUa±a@¦õÆğ@@ÅbxUÜnÇłlb¯¦ôó»m@±Uk@Wwa¯xUV°xXbÇÅUVK@¹KUaȯ@ōÝXallÛkalÇUǫÇÅÇakbÝƆ¯nl¯@¼VUx@x¯W¼Æ¯mĖĬ¯ČVkķÅmx°ô²V¤bUnÞW°bĢw°V°XxV°z@bÞ`@¦KĊI@xnÈÈKV@VXKxXmXUxab@kXllĊnVlUxXkxlÆkm@UVl@ÈwôxV¦bU`@zÆV@²KllÞz@b"],
                        encodeOffsets: [[132672, 46936]]
                    }
                }, {
                    type: "Feature",
                    id: "2312",
                    properties: {
                        name: "绥化市",
                        cp: [126.7163, 46.8018],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ऊþÆÞ@bnJUbĀnblĊÞlĸwǔÈŎKÈnôWǬêKV¥ĸôUx@VbU¼m`nnĊĊxlUmkaVÿLw@°»UmbKmÝUwUmVknKUUl¯KUUÈnK@ĠkX±lX°L@¯¥@wV_mĵ¯WwL¯UkōÇVUlwVó±¯aVka°wVk°mÞ¯ŦřÆl²ŎkU@mUkb¯ķ±ó@kxȯó¯VUÒkÝ±LÛwÝ@ó»ÅUWwmğw¯Ñ@UkV±@ka@¥¹Źÿ@aÅVwóVVUkU¯JÜóÈUl¯yk£laUaVÑÇb@ţ@kmómKV¯IU¥@@kVI`@ô¼blUlbÈb@xÇKkĢɳaÅɆō@VK@z@@¥ÆKnÜ@@aÛUwwnUķ@_V°@klVnULVVÞbVl@°@nxn°LÅÆlVÈmU²@VmĠLxn¯xkWzJwnLmbXbW°Æ²@x@JVxLĀ²Æ°I¯ºÈ@ÒnÈ"],
                        encodeOffsets: [[128352, 48421]]
                    }
                }, {
                    type: "Feature",
                    id: "2307",
                    properties: {
                        name: "伊春市",
                        cp: [129.1992, 47.9608],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@K¯kWW²ğl@mLÇVVLk°VVmLUlVnxVnÞLnaV¯¼@xKUĀlbn`nÆxô@VbU¦ĸŰĸbôxÆ@V¥»IVl°LUll@²mVx@ÞÜÞVnlXÅÒlbÈaVVUblbJ@I°lÞInÆmxnbUbVLÅVm¤@ţVÇ¤XÈÇĖ@È¼aXVÜaXbWnzŎařKôbUlw@¯naÆKnUU¯Üa@mkkVUĊmżÝǖK°L²lÆI@¯¥ĉƛVaÞk@ÝVaĠlnUVwóma@wĉ@aVxamX@a@UaÅLaVW_nWm£nWm_ÅV¯m@mó¤Ý¦¯ÅalmX£VWUÅwmÇ@@IVWUw@aI@k@wŎ»WÅVaKIka@¥lUkUlwÅwVyÈwWU@a¯U°mÇ@UçaVa¯mV»ÅwÝUlUkV@kmUkX£w°@@ÇaÝIamÛam¯lğmmI@JUl±ÅōkWa¯VÝa@Þkbġ@xÛnÇm@akkōVōl±kÅťŚÝ°¯nUl¯xlbU°b²ôUxkVÈUŎVl°KXxĶ°nU`@x°¦@"],
                        encodeOffsets: [[131637, 48556]]
                    }
                }, {
                    type: "Feature",
                    id: "2308",
                    properties: {
                        name: "佳木斯市",
                        cp: [133.0005, 47.5763],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nbÞJb@È¯@xW¤Vln@lUVlkÞVÆxU¼°nUbbVèÈ@nIn@ĢmlUw°żVUn@lnL@VôbwĊlJķĸĢlwôwƨxVVUŦxLźÈ°`nnĠwŎJÞĶwôJ@¤XnÜĸln°¼È°lUbx@l@ÞÞÈm°lôwL°¼ĸ°Þ²nĠ@ôwÞ`ŤIVÒĠU@VJĸbÆ²@°ĊKJĶaĢȰ@ô¥°n¤bČU@VxmUw@aÝţÇķ@ĕķīU¯²@ÆmVÑô¯X¥ċç@ĉ»U¥ÝţKWVÅkUVÝŎUmÇÝx¯aķxÛUóL¯a±óōb¯ÑÅVÿ_Åķa@UK@wm@Van@UmmLVa@VImmXUWÝUÅKUwÝUUkVk@l¯XÅ_J¯kJmÅLa@¥U@¯Vz¯@`@¼mxƥŏKÛk@±laÛ@@Xm@@xƽ@WŎnˣĕÅ@@aÅ@@nÝbÇ¯@_UkUWkbwÝU@çWlw@anI¯lyX°m°VaÛm@mVwÞK°XlaXmm_@UkwÝK@VIXmV»I@a¯ğWbġaU_¯JU¯ġĉkō`±nÝÆkbóĊ¯XĢXmVn²JVlbUèČmKwlóğxxV¦UaJbƑÿÝLl@bmbġx"],
                        encodeOffsets: [[132615, 47740]]
                    }
                }, {
                    type: "Feature",
                    id: "2303",
                    properties: {
                        name: "鸡西市",
                        cp: [132.7917, 45.7361],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@LKVVnkbVÈb²U°VnklVlaÈL@anU°ÜmXV`nôLèxlLXL²aVVmÈX@ķlnUÈl`È¹@Ť°U@xKnnVmlnnUllVnnaŎwlVÞÒ@n¦LV°lwVkLaÞlnÒ@xmLÞ¤Wn¼WÈLVVUxlÈôWVaU_VKKXUÆbnnôKbÞw°bÆWXamVwKUw¯WUkUlJUwVUa@@kmyzmĉw@kVwkW¯ÅKU_VmxU@aW@@kK@wa@K@@kVUaky°_Vmkna¯K@Lwġk@@IÇóXwVakmV@mwXUWanlĉ@ÇUwKóܛǊÛm°@wÅ@±b¯W¹WVwŹĕ¯kVmōb¯w@awmVUUbVIkaVwķxk¼b@VXXó`ó¼Çó¯kÜ¼WnźĖnxl@X`WzÆ"],
                        encodeOffsets: [[133921, 46716]]
                    }
                }, {
                    type: "Feature",
                    id: "2305",
                    properties: {
                        name: "双鸭山市",
                        cp: [133.5938, 46.7523],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@UUwómÑÞÑUÝÝUkmmÅyV¯ī¥Uÿĉ¯mÇkaWbÅX¯aÝxaóLmmÅaWVLULV`UbXókÇVwUUÇKX»XmÝ£nK@wmÑkÝbKUlx¯kUKm¥@ÝÑkUōxmbUmkVkmmnkUmmL@w¯Vţ@Çºk_ÇmVk@ĸVxVÈ°lLkllUbōwnVW¼nlUx¯XmWUnÝ@xÝUó¼¯J@LVbkJWnkbW¯ÝLUxn@nÜb¯U¯nWkz°mJ@bkxX@èÞVxlaXlVV`°@ÈÞa@mÆ@@bÆ@ˤĖmXōƾ@@wn@@WÜ@kb@²ÜlŐLƦnw@»_°@y°UV@@¦bÆKnI°lIÆ`°W@kllUVÞVVxLÆÞVXWVnnUJ@UbnKVnm@Ubn@@xL@VbÆĸ`UĀÆÒ°Ŏa²ô°bôKÜVĸw°bÞwÈVnÞōVUÆlXU"],
                        encodeOffsets: [[137577, 48578]]
                    }
                }, {
                    type: "Feature",
                    id: "2306",
                    properties: {
                        name: "大庆市",
                        cp: [124.7717, 46.4282],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@mÇ@ÑÇ°¹¯J±ÅÿKUwI@w@±ÅX¯WanamKxIylX°wmwğKUn±@nVÇUÅkÆ¯Kmmw@@¯UkÝaUUVKmUlk@¯U`ĸ@VmxVxÜ@bÛ@mÅL@¦@@yLUŎ@ÆɅɴblġÈL@wÇaakkVa»@ó¯_ÝJwÇaÅXnyU¯¥Å@wbÝaLmm@@VUlbğVm¯Xm_`¯_UxmLa¯b@maó¦Çk¤V@bóJknVxVXx±aLUbVxkLVlLWl@nX@VÅbWlÈnxbWÅbm@xbml°bXbWXVmnn`Lmnbmb@k@mwU@@¯Jlbk°lbkmLXxmbVbkllÅÞxXxVWVVa²VÜ²nxVVnÅlVlL¼b@xV@XVbIÆ°¦lźbĬ°¼Ulb@kĢ@lw@ƒÜlnȂÆóȘIĉ"],
                        encodeOffsets: [[128352, 48421]]
                    }
                }, {
                    type: "Feature",
                    id: "2304",
                    properties: {
                        name: "鹤岗市",
                        cp: [130.4407, 47.7081],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Þ¥ô£nn@°ÆUn`mXn¤mX`UXbÆKVb@@bnWbwUbĊ@x@nbWVm_mm@ó»UmÅWXkĠ»²¯¯nķwŎ@ĊŎK°bĸUnÑKČ¦ĠÈbÆknJÆUĢV°IVƾwaVkÇ¯¯»mķkÛWm@£óIĵxÝōIğxmm¯_ÇŹKwťUVUƧwóxxġkĸķIkĉxóa@UmK@kVmUŻ¯Vxkġn@mmJ¯n°V@bXVÇxUzÆxkxlVkV@¦lbJLUbÆXō¼@xl@J@bVxXU@JÈ@nxVÆUXW¤knÆb°"],
                        encodeOffsets: [[132998, 49478]]
                    }
                }, {
                    type: "Feature",
                    id: "2309",
                    properties: {
                        name: "七台河市",
                        cp: [131.2756, 45.9558],
                        childNum: 2
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@²mŎ_lĊĢV°°IV`ĢbaĠX°@bJU¼WnUJ@ÞLlxV@n`lIUa@K°Iô»ÞVwÞ@VmnX°WVwmkX»UmŎxVaklkkKÇ¯UUwÇWUnU±bKWKkwçóKmU_nW¯ÛmV@bÇKkbkUml¯U±VÇaUamlUULKk@U@mwÛLwkLóÆm_±nk¯@@n±KnŚlbkVVmzlWXº@Ķ°"],
                        encodeOffsets: [[133369, 47228]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/he_bei_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "1308",
                    properties: {
                        name: "承德市",
                        cp: [117.5757, 41.4075],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lLnlmxnIVVlUnb@VVxXJWL@LÞVnnVJ_@wkmKbxwXkWXXKlb²K@nVVVbL@WlU²lKVnUJVz@VVb@lÅ¼mVUVnbôaVX@°Ub@lWbX@b@bVb°x@VxÈLVlaÆ@Þb²k°@lVU@Xn@VWLXb@¤VXKVVVLnm°_ƨ¤@aUIVaalkX°kV@alwUVyU@kó°na°UVUUmUÆw@mkLVUWVIWLnn@xlVnKmyU@U°UXaV@U¥U@UÆ@aVUkWU¯aU@WLUV@bkbmKULmKkUVUkmVIUwlWV²Uml°U@WLUwVm@UUK@_KUUÜaXw@VKUU@mVIUUlmnIVVVbÈVlKnbVK@nI@nVnwVLVKKVnb@aUIVW@In°@lVnI@lWĢ@°UVL@b@VyUUa@w@WUnU@WÇ¯K@UkkJWaÛbmk@mVaÞU@amkW@mXUKkÿ£@akl@Um°UXwlaal@nmlXnW°znW@awV@akbĉ¥VmU@IVUJkUmWUKbmkUaKkUVU@KV@@klwWaU@kmXVènbmlUUKX¯JkbI@JmIUWU@Lml@XkJ@UkK@aVKwWaIWwmU@mU@J@UaċUaUUVkI±k@UU@UbVVm@UVKLlkIWaULUWXUJU@WbUb@lkXUxm@@JVn@J@bnb@Vkx@bLUÆnJaVXnKVVmzX°V@_lJXxWXK¯bÅamU@lUIbñJ@LÇKkIÇ`kxWL@@@bUVUb¯xWKkÅVlULW@n¦Ul@IlmUUUVm@kWnkKma¯XUKWmnwVwÝLmVUbUVWb@LnxmxVmbXx¦@nb@`V@kbLUmVUlkbVXkºmnm@@xk¦bĢÜl"],
                        encodeOffsets: [[118868, 42784]]
                    }
                }, {
                    type: "Feature",
                    id: "1307",
                    properties: {
                        name: "张家口市",
                        cp: [115.1477, 40.8527],
                        childNum: 15
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@kġÛal¥@wn@nml¹UWlaVknUVKla@U@_ma@¥WwnaUwnmw@KXaVUVaUnmWUk°lnUVUXWVwIWVóKUI@WXxUU@mma@kUKWLkw@yk@aVkUUċaUU@Wk@Unm@UVmLm±IUkJkW@aI@m@UVUla@VXVXmVwnkWKKU_k@m¥mX_JmnU@km@U@KmUVU@U@Umk@@LmW@Û£Wka@wk@aI@mmk@mUa@UmUIwW@aWUbU@kbÇ@kw@makVUkU@am@aU@mxkUbKUXU±KXVWLUK@wkU@V@WXUa@WbUxJI@¦VèVVX@±ê¯KUI`¯UULVx@V@UKIVkLmVkKm@nUJÝbkIUJVXVVxVbUVJUn°bVmlU°XnK@Ul@lVÈVUXx@W@VXVKÞbn@VnbVm`UxkW@UVkLKm¼@lUnUJVnVXV@Vm@@LVklIkl@VWlULWKUL@mJ@blbUVUlmzUJUxm@UUbċÜk@Ub@VLVV¦ôbVmUKUkU@m@VlVn¼WbUJ¯@@°nIllÈl@nXWlLkJ@bkxlxkxlXUlklJXL@bWn`@nÆXxlL@xl@XbLKlVlIXblVUbUJW@lX@VL@VVXJwn@WnL°KbVbl@VI@K@U@nmVmV@XUWI@aXm@VUUkWmn@lmUUk@mUmK@UnwVĉ@mU_V@XJôVVULVUn@llUnJl_n@ml@XlLlw²LVJUL@VmbVblVXmVnl@Ť¦nn@Ü@bl@@XV`Unb@VlLVb²JXn¥ÆÑ@¥Þ@"],
                        encodeOffsets: [[118868, 42784]]
                    }
                }, {
                    type: "Feature",
                    id: "1306",
                    properties: {
                        name: "保定市",
                        cp: [115.0488, 39.0948],
                        childNum: 23
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VbXW@@UlV@xVLXKWU²LVVWLalVnwV@@bn@bVVllUnb@lxÈ@laV@aXV@bXxJnV@VVb@nnl@nJ@bll@aU_VWUwVUkUmUkb±mVwU@VIUW@UWk@VU@ynLm@IV@bnKLVaVmnIlaXwV@@WVL°@@xnX@V`V@VbUVVLVKnwnL@ll@@_V@VVnaÆ@KVXÆ@n@wKmUWm@km@kÜKXU@ÑW±nIUwVKla@I°wU±kkmm¯m_JnawW@IVaUama@wUmU@mVw@aXk@mWa@£km@a_kVmUnWW@¯bkUmk@VÇm@@kUUKUU@UVUamVUaWIkb@xU@@amUkKVkam@@kVUkUWmKmUkLUb@xmJU@UImVÛVmnUwJU@VX@UWm@Ub°¦UmxklmX@`ULU@@UW@@xkn¯@makVUmxUb°lUbUbnUJUUVaLkbUUJUU@mUUUJka@xUIWJUnJ@Vz@kb@`@bln@lb@X@@@XlbnbVb@VJlInlbVw@UKl@lbnan@VbJôLnUzlV@lÈLVbVK@LVxVWXX`WxXzbV`UXV¤nx@bVlVnVlUL"],
                        encodeOffsets: [[117304, 40512]]
                    }
                }, {
                    type: "Feature",
                    id: "1302",
                    properties: {
                        name: "唐山市",
                        cp: [118.4766, 39.6826],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@VVl@²lJUVVbČVVb@@InV@VnXxJXbxUL@bLl@VlI@WnkKV@VXnJ@IJla°IWLVVnkmaUçWVkôaÜ¯@nV°wnJlaV@VUnUUaW¯wXWWwna@£UaWKU¯¯@aVUkKUamUUn»anIVwUWlk@LlWVakU@K_lbÞU°@y°n@KÈkWWţ¥ĉōkġWUw¯£¯Çwţw@kK@k¥ÝwÅbÇ¤ÛťVlW°@ĸx@VVVULVLkl@V@X`Ub@Xm@UWbk@ÆVbnLWV@lnXUbl@X¯lmUVkKWLkK@_UK@U@UmmUxmVXLWVULkU@`W@ULUK@XlJXzV@@xml@VU@UX@Kk@WbUK@Xn`XmJnmkxUVbUVlVVxUbV@nKlLkVKÞbVKXI°KVmVUIUKULVxVJVLkV@V@UbU@WUU@UbUK@b@nV@VkLmb@b"],
                        encodeOffsets: [[120398, 41159]]
                    }
                }, {
                    type: "Feature",
                    id: "1309",
                    properties: {
                        name: "沧州市",
                        cp: [116.8286, 38.2104],
                        childNum: 15
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@ln@UÈl@Vnl°aX@mXnVlU`@bln@¤Xb@nWl@bUx@nnVV@xnbVbUb@JXxbmXa@kUVwlWkKôVm@wkkK@kl»ÈmVKXkla°@XVV@VI@ml@@Vn@VX@V@J@VxUzVV²blVk¦@Ġ@@»@VK@VÈLlK@XnJ@alIUlaVVb@n@aU@WUIV@mUn@mKXml@lL@LnWb@XV@@aVVbV@VVIVWÈbIÈ»ƒǟlWaVUÅUUm@kVUWVkaUwmaóUJUU¯ÑU¥mk¯UaKÅnÇyóXmWÛX¯aċbÛaJWÝU¯»aóóUm@IVVl@bLUJWLX@@xXUxl¤V@VnVUVXVbV@@@VVn°V@ţU¯VUmUWV@mUXabUKUwUaÇKnVk¦Wb@VnLmV@bkV@nxW`Å_UVV@bUklVX@VmlUx@VVL@xVWVL@VW@UUm@"],
                        encodeOffsets: [[118485, 39280]]
                    }
                }, {
                    type: "Feature",
                    id: "1301",
                    properties: {
                        name: "石家庄市",
                        cp: [114.4995, 38.1006],
                        childNum: 19
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@la@y@UImVXIVJw@lbIVVnV@VVIVVlaKbVUVVImVaaVk¯VanwVlUnb°@lm@wX@@VV@VK@_nWlknwV¯¥Van@VX@W@UVIVxnmÜUnUVJV@nI@wValKnV@kmU£na@mVk°KLVa@UU@UmknWWkXU@aWW@@km@UaU@@klK@UkaWaUnamm@Ua¯wWU@UkL@Un@xVlUXVJUbLmU@aUWUkmKkLUUm@mWXammkkWUm@@U¯JUUmkU¯@mKĉxÝwÝ¥LUómwkUUUWVkKmkKmLXlxVLVxXJ@nVJnz@VWL@`nX@x@kVUUmJmIXxJVnUV@UVV@LU`UXVVlXL@l@b@VmX@bxn°UbkKWLXlW@@bKmKULmakLUlmb@Xb@xmXU`Vb@`lLx@nWVXL@°WlXnlbKVKXVb@X@l_lJ@V@XnI"],
                        encodeOffsets: [[116562, 39691]]
                    }
                }, {
                    type: "Feature",
                    id: "1305",
                    properties: {
                        name: "邢台市",
                        cp: [114.8071, 37.2821],
                        childNum: 18
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nKlLnlLXUVVlVnxôVKÞ¦ÞxĊwnL°@lVnVV°I@Vn@VlXnlnbWnXn@VVlKnLVlVX@bnVKVaUIVWkU@wVm@¯@U¥VmU_°lKkw@LXVaU@wUUUKlUóW@UVUUl°KwlKU_naKVnlKkkWWa@IJVa@IlJnU@KVUUmVlaXUl@lm@kXWÝÑnk±k@wğ@@U@mKĉLmVJ@zmlnWLUÝJU_@@mJkXUVlbklÝ@Ýab¯@¯±JÅwġaUU@kU@mVI±bUKLWUXJkaLóKULWbUVkKmnk@@bmLUl@b@mnmJkUULabnmn@lVV@¦n@l@bznx@`Vz@bxnV@xllbnKVx"],
                        encodeOffsets: [[116764, 38346]]
                    }
                }, {
                    type: "Feature",
                    id: "1304",
                    properties: {
                        name: "邯郸市",
                        cp: [114.4775, 36.535],
                        childNum: 18
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@bVKlVnInm@@akVnK@al@nmlLVUXaVKôLKlbIVWXKVL²aJnU@lV@VVĢbÆx²I°°@aÞbÞ@lkkaVUlWnI@@V`ÞIVXKmnk@yInUĊKÇkUUamUUk@aU@Uk@WUwVkVJVkkw°a@mK@UX@VVLVW@wwVa@¯Xm@@lUIWaU@UWkXWmU@UwmUkKmn@lkV²VaULUVmJUUUwLma@UmkIUmLmVmx@bLUamKÅL@VmbkU¯KÝamzkJUb±VkbL@lU@WIkJzkKmKnUalWkkKW@@nkbk@WW¯XUVUJ@XlJ@X@XlWLkU`VUnaWaUV@UVIaUxUUmVK@I@W@ÇU@@U@b@nmKXmx@UxkVWUX@`VLlL@`zXÝb@b@VUVkIUJVz°KVlnLlKnLxlLVVUVlXUJ@nnI@mVUlbn@@m@bVnV"],
                        encodeOffsets: [[116528, 37885]]
                    }
                }, {
                    type: "Feature",
                    id: "1303",
                    properties: {
                        name: "秦皇岛市",
                        cp: [119.2126, 40.0232],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lnV@Xbkx@lU@@LUVlVLVbnlaLXVVnlIVUJV@UnĊ¦lab@nJ°UmV@wn@VUJVI°bnWlXnWVLVK²bakklI@aUaVUwVUUalaVwnUVak¥X@WkLVÓmmUK@_lW@n_UK@alÅ@ğÅƑŃÝm@ÑţÇlL@¯mz¯@ÝVak`@LlVUbkXK@klVXUxJmbm¼VnVVblLUV@b°V°XLVb@¤mbXxWX°xXVbmVUVU@kbmI¯xmU@Û°óbUl"],
                        encodeOffsets: [[121411, 41254]]
                    }
                }, {
                    type: "Feature",
                    id: "1311",
                    properties: {
                        name: "衡水市",
                        cp: [115.8838, 37.7161],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@KVlV@X°xb@VnnmbVXblb@VkL@lV@Vbn@@l@XX@bWVXlmXnlVV@@VUbK¯LUl@nmbV¤n@lLXnlVUV@ln@lbUlLnV@bV@@wlaXJVbnUVbVU@VVLVVn@VVX@@UKXUU@wUK@UwVnk@UUWlkV@aUVUÆ`X_w@mlU@anUmK@UXal¥UmÈLVbVxVLabVW@nXUVnV°UŤV@U¯Um@U@@UUaWVUmUUU@k£VwW@wW@XKIUa@wU@@al@UK@_mKXKbUU@aVKm@Xm±@kbÇakLğVaUw@a@mkUJk@ykw@£WX@lknk@WVkbUVnUVL@mVkI@JUbI@JXbXllkLUmLmbV`kLx¯LkVUV@VôXkVVLVV@xVUbW@KxlL¯kV`UnV¦°@"],
                        encodeOffsets: [[118024, 38549]]
                    }
                }, {
                    type: "Feature",
                    id: "1310",
                    properties: {
                        name: "廊坊市",
                        cp: [116.521, 39.0509],
                        childNum: 9
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@laU@UnL@VWbklWxnIVVV@XJlbUlXVbn@@KmV@@X°WVInJmn²@lmVbnL@amKV_kwlmX@@LVamaXaaVU@UnJVanLlUkaW@UaVakK@IlKUU@an@ln@alKUkIVa@a@klaUKUV@UkUV¯KVV@kUmU@@a¯ImJUU@VV@UL@U@@WXUWa@Ukwm@X@@w@al@@aVIUmVUUUVWUknK@I@l¥kU±aUUVyUw@@I@UUWm@@Uk@@nUJU@WU¯@kbWlULnÇk¼@llLl@xUnóLlkXUxV@lWbI`°nnnllV²¯x@JkbLUVxmJX²@ÒWVÛL@lln@XnnVL"], ["@@@kX@Valaa@KWI@UXW@WanaUIW@UaUKķk_W@UVUKU@b@UamxVXnJUbWVXLVbn@W°kb@U@Wó¼mIU¼k`V@bVbl@lX@lUôVlUIV`lXVn@lUlVn@l@UVaIUWl£UmVWU@@UUKlUUUnVL@KUnLVWUa@U"]],
                        encodeOffsets: [[[119037, 40467]], [[119970, 40776]]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/he_nan_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "4113",
                    properties: {
                        name: "南阳市",
                        cp: [112.4011, 33.0359],
                        childNum: 12
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lKl@nVV@bn@VVnmnLLXx@VLlKVUIXWÜ@Člbl@XUĊUlwnWLÞwm@ÞUVmnVl@nXJXLm@VnnJlaI@VkxVb@VlnJ@knKVn@°aVanal@XK°b@¯VJXIVK@al@nVk@nKab@XL@blVVKVLXK@VaVI°mVaX@V_@a@yUkVwVIVaJ°@anIlaV@nKnXÆm@wUUV±UUWUKnaWwXUWmÅ¯Vam@kakImUK»lan@VXXaW@@UlUUa@a@UlwUV@Xal@@anIVaUK@VXmwVmUmVLXl@nalLnal@nKlkV@@UnJUXnl@nVl¦V@@VnJ@nUVVVVIn@VaJÆn@@K@mka@kmWVaUI@a@k@@aUL@mmaVIUKUV@@IU@mUmmL@K@UUUU@mW@@nU@ğ»mVmbk@klW@UXnV@LJmlUnUJUUUW@UnkKxmLa@@@lUUbmUVWk@@nkUmam@UakJU_Vm@ÅlÇLUVmVUwULKU@k@UVUlU@@U@UaUUWaÅzJaWLklb@bmL@kKabWUV_@mV@b¯JmXUbUK¤ÇLUU@b@JkLWmkUWIkJ@VmX@JUbVXU`¯VV¯blK@LXKlUV@Um@@Uk@kxWkbL@KkbmL@UXmaU@@l@x@blX@xUJ@bULUlULÇ@@VnU`W@@nÛ¼U@@VmKUkm@VVX@@xÇ@bUbVb@VX@@xLUb@l¼XLlbUlVVUUb@n"],
                        encodeOffsets: [[113671, 34364]]
                    }
                }, {
                    type: "Feature",
                    id: "4115",
                    properties: {
                        name: "信阳市",
                        cp: [114.8291, 32.0197],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VllInJlknJVkVU@mXlUÞ`VnVVU@U@y@nXlKVnJVkXKWaXIb@yVkVUkVwn@K@nW@kKlUXVVUlbnUV`n@V_V@llX@@Vb@bV@@nlVUb¯WLnbmb@nLnKbUbVWnLlaX@VVUX@Vln@`kL@ll@VXVJÈIVl@XÞJ°UnaLlylU@UXKlnn@lanLWWnbVI@KXKVL@LVWVL@UVKUIVWX@@XÆJ@In`@lJVI@aWÛnK@UlK@UU@VKnlmnXalUllLUbVVknJ@nV@Vm@al@@xnVlJVUU@w@ak@XW@_mWnUlŁUmVKV@VXwW»XWaUwnkWUkVUU@@@WlaUkkaIWVkm¯xmIUmLUVaUIó»m@mmwXk@amk¯¯l@wmkLmmU@UbkUWJ@XUbJ@b@l@znÆmK@Xk@Ub@lm@I@akmVKUUVUkU@U±JUbk@IWmkxa@UUVUWVkIUaW@UlLWn@VkJI@VkK@L@bmKkJmUUaUKWXk¼VxnJ@V@@VULV¼@@UkaUlWL@U@W@IkKmL@KULUWULWKUXUJmIbK²UWnWKUUkLUmUUam@UU@mUL@xkV@VV@bmV@Vk@mwkUVUx@mbXÇnVbUL¯WnUVLVb@xnlWnU@UVUVVUbVVlVkn@llVUXUWUXVbUJ@bmLUJnb@nVK@bl@@@bVJUbnX@lb"],
                        encodeOffsets: [[116551, 33385]]
                    }
                }, {
                    type: "Feature",
                    id: "4103",
                    properties: {
                        name: "洛阳市",
                        cp: [112.0605, 34.3158],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VVUllLXl@LWn@J@bKUVmnL@`VblLnbV@b@JmL@LnV@VV@¯VJVnXL@nm@aÞ@ak@mImVbXLynLk°@°aVJnUV@UVVXk@WJ@VXLlUnJVnn°U@»°Uwl@bWmUXÆ@VLXU@m@Ua@Imkba@naWW@_@WXUV@@U²@K@I±U@¥kKWLóLla@£Um@kWKXU@mlLXUVKUU±J¯_@`UL¯Wmk@WakklUnVUVaU@KUU@mmK@_a@KX@VaUIm±kaVKVUkw@kaW@kbkL±UUaK@UUKVak£@UmmL@lIkmU@Ualw@UJkbmIUmn@WKImWk@mUUnÝV@nÝxKmXkxĉVWVk@kaċÛ@WXJUV@zmVWnbUbVbLlUnlUÒnWVVWnk@@Vm@kxm@Unl@Ll@@V@XnkJVV@nlVXxU@ln@a@VLnWĊ¦nx@lbVKXLl@ÞVLXJl@XXl`lIXVl@XlXUVKwV@lanxzUbVJ@VVX@b"],
                        encodeOffsets: [[114683, 35551]]
                    }
                }, {
                    type: "Feature",
                    id: "4117",
                    properties: {
                        name: "驻马店市",
                        cp: [114.1589, 32.9041],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@n@b°UÆXnVlnLÜ@VLm@n@na@Jm@k@lVVxXX@V`lLVXVV@VVÞLVV°²@labnxV@@bLmlm_VWnIWUna@lLbnV°VL@KVLVUVaVLXK@mÆXna@wVma@Xw@KlL@a@Va@wUkaWnIVla@Kn@Vn@VUl@nKVnJ@LnK@aVkVUUW@VakUVanI²XW@UUU°KnUVLl@XaVK@aU@KUI@W@_lm@KkLUKV_U@»@UVJ@XV@@mVL@K@U@Kk@VwUUm@kmWL@VkVkzKmb¯VÝI@WUkÇJUIUWk@@klK@_km@UVWUUW@kbmKUXaVamLmK@namaXK°VakU@mU@@aa@UW@kkU@U`m@U_mVkaUVWUkVL@lmX@Lm@UxVlUUl@zaWJXbWLUlmIUkLmW@@z@VUVUUmÝ_kVW@nUVUlmIklmIkJUkl@n@Lm@ÅIUbm@UJUUVU@mmI@UU@k¥mUk@WmVmI@VU@klmLk@mbkKmb@WkKUVnUnnxW@UVLUbmJ@bk@WbU@Vkx@V@bVbkV@V@XWbUWm@kb¼VLnlJlb"],
                        encodeOffsets: [[115920, 33863]]
                    }
                }, {
                    type: "Feature",
                    id: "4116",
                    properties: {
                        name: "周口市",
                        cp: [114.873, 33.6951],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lnb@xlJ@UnLlKXUlJl_KnV@xVL@bkbVVUè@Wb@UbmkVmbXVJnUl@a°@@bLVblXxInmnLVwanJÆw²IlmnXVl°VVbÈaVb@lkn@VWnLlUVmÞUUklkVkUaVaVaUwK@kkaVWmw_l@nUVVb@baV@VV@zXJl@@kl@lk°WVnÆbnbUVJI@VKVm@kK@_kK@a@aU@@wW@@k@aUW@IUWVUnLlUlVXKVwmk@W@VWa¥@k@lnUIÇKUaU@UUVmIUVUk¥Vma@¯k@Wanwm@@n@@m@UIVkUVamUXWaVU_@mUVUImW@aUIĉK@VmIb@lU@@nJkU@KIUmmLk@UVm@Um@@LkbUmJXlbV@xUb@@bkK@LWx@bUn@xmbÅW@nWLUKUbUVKU@LUK¯mU@VV@xULUVL@bU`WUz¯aUamKUa@@xkX@x"],
                        encodeOffsets: [[116832, 34527]]
                    }
                }, {
                    type: "Feature",
                    id: "4114",
                    properties: {
                        name: "商丘市",
                        cp: [115.741, 34.2828],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XVl@lLÈ@VkV@V»UanWX@VaÆÇô@ÈaVX@xVJXUÞUaVLĸbXKlV@m°Vn_nyXX»mUk¥lK@a_@yInaVKVa°_@WXI@@KVnIlbnaV@l@a@_w@lwUKmXa@UV@»Vw@kUKVUUm@w±VUXUKUwmJUU@km@@±mXkmUI@mmKUwkbWakLWaUIkJmX@l@@VUX@JWbX@VbULWblUVULknlV@bVJkmb¯KknWmk@@nmVkx@VmU¯KUnUL@JUIVmaÅaUm¯Xlkk@@lk@WI@yUUU@b@aUaUmVk@`nxUXlb@lLVxUbUbVbUllkVlÝVUnkVmKUXm@kl@nUx@xnxn@`VX@V²x@V@b@Wl@zU`VUVVbL@VbW@bkXllkLWV@V@VVÈwlV@@XK²LlbWnnÆL@VnJWn"],
                        encodeOffsets: [[118024, 35680]]
                    }
                }, {
                    type: "Feature",
                    id: "4112",
                    properties: {
                        name: "三门峡市",
                        cp: [110.8301, 34.3158],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@WKUmUI°U@@UmU@KnK@IaU@makKUa@_KnmVUL@a@IXm@KWkkKVkUU@aUW@UUIVaymwkbU@xLVUWWkk@WUkJk_WWk@WIUKÝk@WKULka@mwĉ¥mXUK@@bm@kVWwkU@mUUlIWm@@Uk@@KkVmn@lwn@@Ul@XmUXUmVÑkmkVKUaVamaUXn@ykLUK@WwKmKnUm@UmaU@mUk@kL@lxċxUnkVmnXxWb@`kzWJ@VLmVUnlmUL@lW@Ub@VXUb`VLUbUJ@nmnUlUUm@@bUJlnUU@lxkb@@XJUn@kb¯VVVmlXXlJlzn@VlkVW@bkKbmkUbVblXVxKÈnwÞlĊKlVnKlwX@lL@xlUnVn@l@lmX@ÆÈb°¼ÈwVJlx_°xalUÈxlUnbVxnL@lllbmn@nb@@VL@V@@VLJnIVVlKnV_"],
                        encodeOffsets: [[114661, 35911]]
                    }
                }, {
                    type: "Feature",
                    id: "4107",
                    properties: {
                        name: "新乡市",
                        cp: [114.2029, 35.3595],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XVlLK°bUblbUbl@nX@WXVVKVk@@mb@UbnW`kLLV@VVLnKlVXIlV@@a@l£nWlkVa@°bnUlLVlnabnUVUXKlU@@lk@aI°y@ôkUU@wmônkWakmlUkVmkUlmUUm@nkUKWanamULXW@UVnUln`lblL°KXV@ĠJ@L°JUVwanK@UUImmkK@¯±Um@IVmUmmÅnWaUK¯aUkw@W±kVxUVwnÅJUIWaÝJóIbm`ÝbÅImJUI¯¥¯@mU¯UJmnUVóUkl±V@zXlbWVXL@bmmº@@XmJUXU°llk@nWJk@U@¦U`m¯Wx"],
                        encodeOffsets: [[116100, 36349]]
                    }
                }, {
                    type: "Feature",
                    id: "4104",
                    properties: {
                        name: "平顶山市",
                        cp: [112.9724, 33.739],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@l¤UbVL@VLVb²VlKlaX@lb@lxUVULbln²VJUbW@@Lb@`nL@nVV@LVUbUVmkVllXbl@Xn°VK@_°`²IVVV@VUVJnInaWK@U@KLÆ@nmlXXWVUUw@klKVa@knyVkVanIJXUl@XbVUl@@aa@mXkbnK@UlK@UUUVaXaWmkUm¥nWmXaWakl@VmÞbKVL@aVI@mUwVm@KÅméULKVaUk@kUK@UWXI@VlKXU@VVnInVV@VLlK@UUkKU_@WWUwU@kln@@Imb@@mnUKÛ@mKUkWVXxmbVLXVVU²VV@xÅnmWmLU@kbmJ@b¯IUbJUUxVl@z@bU`W@Ub¯nUJUb@WLUKULkU@aWK@abmL@lmUk@@bULWJUI°@¯aWLk@mbUb¯b"],
                        encodeOffsets: [[114942, 34527]]
                    }
                }, {
                    type: "Feature",
                    id: "4101",
                    properties: {
                        name: "郑州市",
                        cp: [113.4668, 34.6234],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@nWVUKÅ@WnVnIV@kÆwV@nn@lxÞlnôJzXJl@nalUČVll@²UlkôVVUnmI°VnV°@°¦VJnIÆJÞan_VmU@ama@kU¥kaUklw@UIV¥kVUI@mmUÅmUlwVU@amUJWbUakVVé¯Im`k@wVWmLkU¯XkWmLmx@UUbm@@xJ@LbW@UUVWUkVK@kaIUamKUkkmmLUkJUVWXkWmnÅ@KL@@VXLmbmJUIUVU@ULWVkK@nWVXL@lVn@¤bkôKXKlL@¦²V@JL±@@VU@WV@X@`XXmb@blan@Jb@V"],
                        encodeOffsets: [[115617, 35584]]
                    }
                }, {
                    type: "Feature",
                    id: "4105",
                    properties: {
                        name: "安阳市",
                        cp: [114.5325, 36.0022],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°kVaV¥kVmUkWkWVkVKUwkkmKUU@awWWXWakKWkXmlaIVmX¥U@a@WnK@kVI¯@KğI@WU¯LkKak_kmmVU@VWXKnVmbXbVLmln@VVknlVUnVlklnXbmlmlXblnÈlWbn@@nK@VLbVV°VVzln@VxIbU@WLUa¯VUkWõ@¯kkmxk¼lXUlVbVLnlULmU@lLkVUlX@xW@¯mU@UmIUWL@aXakU¯anWk°@kkKmmUIWaambUkkKmV¯a@UblkmXk¤@@b@UbULWVnb@lUVVnmnVVUJ@bWXX@WJkL@blVU°UV@XlWnXUbW@UVkVVWbnLUJWLUK@Lnn@blVUnUblxVUVJXUa@UbLnUVV@mVIVVn@UbV@XbmbUV_lVXUWanJVI@WkI@WVIVU°WXXl@la@mX@lLXlkVbmXylIXJV@@kKla²UVaIVyÞb°LlVna@UÆKnLVbK@anwU"],
                        encodeOffsets: [[117676, 36917]]
                    }
                }, {
                    type: "Feature",
                    id: "4102",
                    properties: {
                        name: "开封市",
                        cp: [114.5764, 34.6124],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lUVbXaInV@bUVxknVVÆnn@VJlUU¦VJ@kxVllb¦lV@nb@bVUnaôJÞIXbVJÆImxUVwU²l@XxVl°bVLXb`XklUnmVblL@lmx°LVK@UXIVaWlL@Uk°KkVaVUXmmI@UÅKmmXka±KL@W@kUÇxUU@@UXUlKkklW@aXa@UKUaVUUV_@yXk@@a@U±w@UUW@_mmw@wVwmUaÇbUa¯UUkmWkn±JÅxmIbUxmKmnJWwkUaK@a¯@bk@mVUIWLmwm@Ua@WJUb@LUl@UUmLUbWJ@VL@VmXWWzUJUê"],
                        encodeOffsets: [[116641, 35280]]
                    }
                }, {
                    type: "Feature",
                    id: "4108",
                    properties: {
                        name: "焦作市",
                        cp: [112.8406, 35.1508],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@V@VL@x@bXWV@XklUWX@J@nI@KlLKUVaV@JlL@KUk@KÞLl²_@nWlLUVV@nLWVUJVn@anV@awÞUVLVxb@lW@lbXnVn@@¼L°mKVn@bnl@nVK@blbLWU@VWLXV@nlKn@lVVbXw°nV_@¥Vl@XI@mlkkV¯VWnI@W@n¹n@aWKXUaWk@yk@kċUkVmbk@WIyóImÝkkwm@mU@xÅlU@mJXak@x¯V@¼¯VmUmmIkVWK@UXIl@UWVUU@mVUI¯b¯@lmKzWKUanJ@nlbÝ@@b"],
                        encodeOffsets: [[114728, 35888]]
                    }
                }, {
                    type: "Feature",
                    id: "4110",
                    properties: {
                        name: "许昌市",
                        cp: [113.6975, 34.0466],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lIVnKlnVlnLVbJlb@ULVlUXVVX@a@KI@wn@aVV@nwnKlXW°lVnKUXx@ln_°JVIXyXnW@UK@UXIVanKVV@Vk@KVaXI@Vbn@nxKnaUlnVa@Xa@VçUUla@aUK@wmULk`kIWVkLmK@V@XUln@JXV@nmbUóImUa±@@ÑóVUUk@UlKVU@akWVUUlUUaUK@UUKWbUkÅJ@XWa@XbmJ@nUJ@bUKLÝaUnk@lXbWbXnmn¦lVXnWbUbVV@VkL@VmLaWl@nb@bk@UVWak@WVImJUbUlmz@lUbkL@lVx"],
                        encodeOffsets: [[115797, 35089]]
                    }
                }, {
                    type: "Feature",
                    id: "4109",
                    properties: {
                        name: "濮阳市",
                        cp: [115.1917, 35.799],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lLXbWXXx@bVVnLllVxULUlXXlVlUnlU¦Ub¯lnK@VbVb@XbVLKVxVVnIlaba¥lU@wnalLnVVlVLXnlWVXn@@lVI@WnU@mÅW¥aW_k@WwXy@km@wUm¦lUxVLV@UwJ°x@VX@Vb@`VX@VX@llIVbnJlIbVlJ@mÑ¯Lóa@KUakX@UK@wU@lWUUÝ¯ImW¯aLUKU@k»k@mwa@UnKWI@UU@akVWKk@a±bóUWKXUmkKUmLbUx@lmLX@@bVW¦UnJkbWnXl"],
                        encodeOffsets: [[117642, 36501]]
                    }
                }, {
                    type: "Feature",
                    id: "4111",
                    properties: {
                        name: "漯河市",
                        cp: [113.8733, 33.6951],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@LUnVxnIWa@Xb@WÆIVlXaVL@VVLVbkVVUVlX@bUVkLVl@VVôU@Ò²@VbnôJVan@mWU@ImVk@WkI@wmak@wlW@w@VbnLVb°bVyXV_@aUKVVK@wUU@aK@kmbXVmJUX`knnK@aU@mwakb±@¯UUÝKUUU@WU@VkLUKU@mUmJUU@WVkL@UWJX@VVL@lVlUbLVKnêÆ"],
                        encodeOffsets: [[116348, 34431]]
                    }
                }, {
                    type: "Feature",
                    id: "4106",
                    properties: {
                        name: "鹤壁市",
                        cp: [114.3787, 35.744],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ón@xVVól@¯zJ@bkl@@kVWLUVmVXbVJnnlLl¯@Xlm°bVlWb@bKVXnJ@VV°nX@@wWVklUK@knVVKmkUKUaVkWkl»nwl°lö@lXV°UVbXKV@aJw@UmkUy¯UUUaK@UL@mm@XaÇkkmWank"],
                        encodeOffsets: [[117158, 36338]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/hu_bei_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "4228",
                    properties: {
                        name: "恩施土家族苗族自治州",
                        cp: [109.5007, 30.2563],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VKbX@lbUVnL°@VlVnUl@VUX@aVmaXlaUUU@wmaVUn@Vnmmk@mU@knaaU¥VamX_@WUmW@_kVaVKnLl@VVal@k¥@kUW@kUKVUlUVÑW@kÇaU»ValmkUVUVak@aV¯_@WUkmVUlU@aalI@akkVWUaWXUWwWVbÆ@lalIVK@Um@UUW@al²a¯UağÇm@bkk@w@@WaULmxIUb¯@U`UXJmL¯aKXWUL@aknmK@aWUXaWm@I@UÅmVU@aUV@bVI@WkUbXkm@VakwUKULWKXmJ@XUK@mL@KUwVaUI@KU@mmnmXka@»V@@UUaw¯yVk@UUVmmkÛÈU@mWUnmxmlUbV¦UlbWVUL@UUIUmÇKVVbUVVxknLUxV`VX@kJVVUXWaUVVlUnmKUbkI@WULmK@L@LVlLnmUIWV@akn`VXUJIVlUVVbUX@¤mbnLmm@UXk@mm@Uka¥@kV@@KkU@aUKWbkLWVkIVk@UbVlmX@bU@@mmL@bn`@Ln@llVLVk@XVVU@`VXU¼k`VULka@VllVIn¤VU@@blÜbkx@bkLkKn@bn@@b@JUnV`UnVbVKlVXUlbn@°Vx@@bnVbUllVn@VVK@UnW@UVUlnkVÈÞxVbVVIxVaÆ@@aka@UVaU@@ak@Wl@nbVIÆ@Jk@L@VlXnlla@VJnw@UmwXU@aVK°ÒnllnLlbxnKVaV@l¦²nVl@llLx@XVVĶ@nax@U@alXUVaLÈþV°XxWXkK@mLnlUb@bxnLVlVVkb@UJ@xWXX"],
                        encodeOffsets: [[112816, 32052]]
                    }
                }, {
                    type: "Feature",
                    id: "4203",
                    properties: {
                        name: "十堰市",
                        cp: [110.5115, 32.3877],
                        childNum: 9
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@@a@w@kV@nbVK@nUla@laÅl@nlVakwWX@WkLaVmwV@anK@UlIXmWkk@@mmLkWlwk@U_mKXwWK@U¯K@UU@VUakmkIyUUVUmanU@mlwk@_mWXaUWU@Ç@U@aUaVwUKUIVkK@UWIXmaV@k@Vm@UnwlUamk@V@ULUamxUJkU@I`WkkK¯XWak@@W@IUVLWJkXkaÇVUK@kUmbmUUUKbkKWUkI@kKÝ@@aUm»nI@mU@UnWV_@aUmWbkLUl¯b@akkk@WkkJm_k@UV±@J@bnU@@WÝIUJVbXL@nlJkx@Wn@VkJmbLmU`VbUL@xVn@XV@mVVnnJVbUx@VnVUbVVx@nbUK@b@bJm²VUlbXzVJVJVbn@@Xmb@V@bVJÈ@Vnkn@°aVVV@XKnalLVmUnnVKVlnLWlXXKlk°XWkLUVVV@nU@ml¯nmbk@W`Å@mbLWm¯UxnêVèk@mbVnUK@kKmXk@@JUIlÛLllnbVnlJ@LULnlÆaVLnV@nkVJ@lkô@²bÆm°wLWV@VXKVXI@W°ÆVKb°UJVIVV¦XKVL@lInaVÝnUl@@bX@nmVL@lVLlVLVUnbVW@xXnbU°¤V@a@kWKUUn@VlnL@UV@Ü»@mX@V_akaÞ@VK¯@kkW"], ["@@mUkUUm@nllVKXXVK"]],
                        encodeOffsets: [[[113918, 33739]], [[113817, 32811]]]
                    }
                }, {
                    type: "Feature",
                    id: "4205",
                    properties: {
                        name: "宜昌市",
                        cp: [111.1707, 30.7617],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°`U@blUbUVlVknUbV¼Èb@lXUÒkVUVVL@lVX@ll¦k@UbU@kmKULUbl@`nXV@XW`nUbV¦bmb@lV@nnlmnUm@UVnb@xVVVkbWnbVnVa@an@UaVUJXnWlXX@l¦@lKÆXbXV@VV@°¯°xXxXV@nV°UVWU_VWXkmaVnWVkn@lln@lb@UVLXWlnX@aXUmaVK@UXUU@WVIWXXVU@¥VK@UÞa²LlV@kV@UanKma@UVUnK@UVLXyVLknJ@UV@@UXKWUXaV@Vb@mVLnKWm@aUUm@@UkK@UlaLXKWaXI@alKlmUk@wVKXL@m@WWn@UVa@K@wna@aW_XWWkXbVW@k@U¯WWwka@UUaVIVkU@m±@U@@wVKka_@VV@XUVwU¥yUkm@V±ÈUKk»ÇLmmLk@ó£kmWwm@UIkWKXwWU@kLwkbmabkK@VLkmWIUKkUUÇIǫJXÅJULVÇLUV@UK@kI@WVI@UaWmXVVUL`±kÅLmKkkÅ@UaXXxWVXVbUXll@bkJb@bkVUVlnV@X"],
                        encodeOffsets: [[112906, 30961]]
                    }
                }, {
                    type: "Feature",
                    id: "4206",
                    properties: {
                        name: "襄樊市",
                        cp: [111.9397, 31.9263],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@Xl@Xb°WlLXl_@JlVVInwVbVK@@UnlVbkmx@VUnl@U@nbWXJ@VlLUVJVLUxVb@b@VÈ@XVVWbnX@`lkx@nmVnbUVVVzlJnlVbUV@@V°L@VXLWxnLV`l@kxlXnK@nl@XlWn`Xnl@@UVa@VÈK£VLVanW°U@UVU@`VInmV@nV@Xa@aVW@UalkXKblIyÆXnlJXbl@@VV@nklU@`nVKLVKVb@VU@UÈKUVKIlUX@V`lIVbn@nblVVmV@@XXJUVV@knKVn@`@XVnKwlLVmUUU@U@aXL@WlU@UUW@UmU@KkLWaXkWmXUWm@U@nk@UmK@U@UaUVUUKV_@al@namWUI@KUK@aV@WUIb¥ULUJkImK@U@KV@U@a@UkU@K@wVaUwlU@mUULmKUkV@@anIWmUK@I¯mKkl@LUb±lUakLmk@WwUKÝVUIm`¯n@Uk@makJU_@Jma¯ImwUVkKbaUÅ@wWaU@VU@mXIVmmUkJkwm@mIlUKWzUK@VmLUV@VnbmLVbU@@lkU±KbÝV@UL@¦VWUWXUJ@XVWV@VULnbWVbW@kmWXUK@Vkam@kkm@UlmXUnbWlUXV`UX¯VmUU@Ul@Lll@nnJ@LnWmbm@b`", "@@kUUm@nllVKXXVKmU"],
                        encodeOffsets: [[113423, 32597], [113794, 32800]]
                    }
                }, {
                    type: "Feature",
                    id: "4211",
                    properties: {
                        name: "黄冈市",
                        cp: [115.2686, 30.6628],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VVUnWVXnVJ@U@V@VXV@@IVJUn@V@L@KlIVlVanLVbnVlIn@@a@Kl@@IJlI@aXU@KlKkVblJXUVlU@VbVkVKXn@VlxVa²I@VlVUxln@bJXklaVWnLmÅ@y@k@aI@W@aXIlVVaV@nnlKnLVW@IUa@a@KUVVlI@wXKVV@IUla@lUXwWnnalLlxXLll°@XwVKVaXIlnb@nln@Va@U@k°UmÆUVaXIJV¯ÇUmmkU@WaKmakVm@U@aVKkkmKkVmIkÇ°£@aUUVaVVnKlkXmk@lUVaX@@Um@UmlUXVUVU@wK²¥Ua@I@UVl@UV±UIUÇ°»VkUmVI@a@Umĉ¯V±bŹĖğaÇL¯lmkX@óĀ@mÝêb±WkLn@xXx@@b@V@LW@UblţX`kxWnXô¯¦ÆV@L@JVLxkK@V@bkz°llXz@JUlVla@XUVbVKXnW`XXV@laVV@VX@V¯xx@xULVbUJ@n@LU@VmmakbUK@bIWWUUVkUmkLm@VJkb@nUJ@`V@kXaUaVmmLkUmJ@Uk@U±lkzmJUb@bVUxVXU¤L@JX@VlL@JkLUVU@mnUl¦@V"],
                        encodeOffsets: [[117181, 32063]]
                    }
                }, {
                    type: "Feature",
                    id: "4210",
                    properties: {
                        name: "荆州市",
                        cp: [113.291, 30.0092],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÈJVlVVLXJlnK@UlLanblaxlK@XVWxXLlJ@VnXxlnô¤l@nKnÈKl¼VL²ÇUn@VlzV¦UxWVU@@U`lbUL@xV@²@@nlVUUJVb@VlbXx°XVWX_VKUwVKVa@UVKUUVk@KnblaUU@wnWl@UX@lÆ@@aIVmUkxVJUbÜ@Uk@WWnk@VVm@I@m@Un@mXUlVlUnJ@knJVU°@@aÆLX@llL@¦nJV@XblLVa²U@UlW@VX@`@LV@@bXJlIXml_lJU°bKÆLnVVl@öVmXaVIĢllUlVnLVlX@@bannxVLbn@°ÆXmmkĉ¯w±Uċ@KÝÅƧŃÝçUw¯m¯k@WkV@¯UIUJW¼kbUwk@W`@¦Uônb@VÆlÈ@VU@£UWWnUÆUnmJkUÇ£VWUI@aUU@WkI@Ua@JW@k£kaWVUKmnkKbkkVWbVmUUmwU@kk@UakUUa@V@nlx@lUb±lUbnnWLUyk@UamUK@mlk@Wb@VXL@x@xWI@a¯¯V@bVn@LkKmL@`XmKmVU@@bkL@V±bk@UaaLKUVIWXamVVbUK@b@Lm@UWkxULWVUnm@UlUX"],
                        encodeOffsets: [[113918, 30764]]
                    }
                }, {
                    type: "Feature",
                    id: "4208",
                    properties: {
                        name: "荆门市",
                        cp: [112.6758, 30.9979],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@n@lxlInVUnWJ@nUVV@Xb@xVÆbalLVUnx°JnbI@V`lInbl@@V°mn_VJÞUVLXx@nllKVb²kVa@KlknL°@JVLXnmJ@bU@VlnLVKV@nX@lUKVaXal@VKn@¥°L@UnwbnaV@KV@VUX@lVXI@KW@@IXWV@laVLKlaXUVVnkVWV@lwXblIXWVkVmaU£VaUmVIkU@y@WakKUamU@UUK@kmK@w@@mK@LV¯U@WwkmULamVVUU@IbUKUakmm@UakLmxU@UÒWlULţÿmwkIUm@akÈblW@UVUUk@JW@XkWWUkUKUIlw@aUWknWUUmnIWaUwVaÛaVUIwVlUnJ@bÅ@@kVWk@mX@xVVkbma@LUlVVUL@VUbULVxULW`UX@V@lUXWaXlWXX`@bmb@x@LUb@VmXX@@nWKUL@xVlknkL@bWJXbWLKkb@VlL@Vn@VV@bnXmLUK@nUaU@WbXVWL@VU@@V"],
                        encodeOffsets: [[114548, 31984]]
                    }
                }, {
                    type: "Feature",
                    id: "4212",
                    properties: {
                        name: "咸宁市",
                        cp: [114.2578, 29.6631],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÞÆLČ@V²°xĊnlWnÅ¯m@aK@°nJwnVIUaÆJÅ@wwVXW@aV_l@²V°lĊwlaXLwlUkalVVaX@lVXI@aUXJ@U°UU¥VIVKVklanLVa@VÈIVV@nk@aVa@mV_@aK@klKUa@UnKWk@@lU@@UW@@nUWUwmaVIXlV@mLXblJ@kV@kk@KU@WkUWVÅwkLmW@UmL@lULKULak@maUUÝwUJIbKUU@aWK@kUWVkUwVw@mÝ@I@wkW@aww@LU¥kJ@nVJIkVVnkVUkyUIUl@xWUkaW@@°kzWxkLUWmzk@@bVVVb@@XlV@Vl@bVbUn`Wn@WbVVI@`LVbXLV`mnU@@lL@LUak@Lk@WbUJn¦@lVb@xVb@n"],
                        encodeOffsets: [[116303, 30567]]
                    }
                }, {
                    type: "Feature",
                    id: "4213",
                    properties: {
                        name: "随州市",
                        cp: [113.4338, 31.8768],
                        childNum: 2
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@n`lwkUmUVWX@lk@VanUĠ¼V@@mX@@nVVVXLmJVLnK@bV@@J@VUn@VaVUUUVWVLV@@Kk_@almaVkUU@WVVUVLXmmk@wUaUKUV@°@kmaUaÈmWmUVklaX@lVnxl@@UnaUk@VUVwVKn@VVn@VbVJUknUmmVmk_VwKUUmVak¥@UVKVIkW@UmIVWkIVkmmLkwmVU@LUU@VVXL@JmLUbmK@UUKmkKUUmVUaUnÇlk¯mJUnmLUaUJUaWL@UkJU@aklkU@¯@KWLUmUUWVkbLUKkbU@WX@JX@@LWJkUW@UVU@@LUmbamx@V¯K@¦mULk@WbUbLkVW@kVVxUb@x@LlV@V@b@VU@L@VLnlJVIVK¦aVJ@XU@bLV@LVJnXmbk@@bU`VLUVVb@V@VnL@Vml@@VXnWVXnWlXblK@LnV@VVX@VkV@XWK@bVV@VV"],
                        encodeOffsets: [[115830, 33154]]
                    }
                }, {
                    type: "Feature",
                    id: "4209",
                    properties: {
                        name: "孝感市",
                        cp: [113.9502, 31.1188],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VnXK@L@°lVlkb@VlI@VXKVbVIVbnKVmnI°lÈkVmVbnUVVlLnVL@VnLVanK@IWKUUV@V@KVnUlxnKlnUlJUXnJ@VlXUJUL@Vl¦UbnVVLUxl`UnnnmVVlnVKbmVX@a°Ý°LaXJV@VUnKVXVK@LnKlLUbVVX@VwVJVn@@UU¥V@@UUK@maUVUkkJ@L@K@UmVUI@JU@W@U@UV@UIWmXUVmUUÇ@UVmIlmnmakK@akaW@UwVUkKVnUlKVwkVU_WKUkVW@UXaWkUa@w@VU@XaW±@IkbKb¯L@WXkW@UakL@UV@UmVUmL@UXWVL@aUVUUUVU@yUUIUa@wUKWVU@kWk¯UkwVKLUxK@nVxUlUUWVUmw@wUUyXWlX¦WbUV@U@blbUVVbXXl@lVL@bk@lxkVVnVx¦`UnkL@V@L@@@xnL@lVL@VnVVblLXb@@zlVUJVnUbV¤bUnUlWXkJWakxU@UXml"],
                        encodeOffsets: [[116033, 32091]]
                    }
                }, {
                    type: "Feature",
                    id: "4201",
                    properties: {
                        name: "武汉市",
                        cp: [114.3896, 30.6628],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nbnmknJVUÈ@@U¥VknmV@VUlK@IkK@UW@IKV£UWVwU@aVanIly²kVl@@VnIlVnKUnVbblWU@@_VI@mlaUIn@lKVnUlVVXXJ@aVLlanbUnV@@K@mVIUaVK@ww°w@UW@UUUkbU@WWX_WmULaVU@WkbkUV@IWyk¯kly@a@UlLwUK@I@KÅUW@Å±Um@wl¥ka@@_Vw@ķa@akw@kKW£XVUVwVwUaU@VUUxWKkbĉx¯k±Uk@U`@bWXUx@xÆÅIVbUJmxIm¯@UmxnUVVbnJV@L@@kV@bVn@UVULlx°VXllV@XUVL@xVbJVV@zUVVVUVV@bUKWX@VnKUVVnU@@VlKVb@lXW@X°KaLla@JX²Wb@UV@@xVbXlWb@VUXVlXLV`UlUxkLmVUlLUVVxX@lb@blL"],
                        encodeOffsets: [[117000, 32097]]
                    }
                }, {
                    type: "Feature",
                    id: "4202",
                    properties: {
                        name: "黄石市",
                        cp: [115.0159, 29.9213],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VUVV@VbUxaWUblUVmnKlX@bXJVIlVUxVVVIUzlx¯@VbnL@xx@UVaXKb@XkWU_Vm²klWXVKl@nXV@@wmlK²XaÞén@ôÿ@lWn°kUKmmUÑUmm@wkImWU@UakL@bVLUVċ@bUK@alIXKWK@nXnKmkUVw@¯b@LlUL±Wn@KULUaW@kL@lL@bU`@nUb@bmlU@UÇJ@UUbmKkblUULUJV¦¯V@VWIV@bWJkUW@UbkUlbkV"],
                        encodeOffsets: [[117282, 30685]]
                    }
                }, {
                    type: "Feature",
                    id: "429021",
                    properties: {
                        name: "神农架林区",
                        cp: [110.4565, 31.5802],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@n`lIXll@ll@b°aVklKXaVn@bU`mX@VV@nmJn¼V@bÞ@lL@lJXVlLaVLVnVnalV@VLÈUlblWXIKVU@J_@annaXm@KmI@mkk@KVkWWw¯w¯°@UUU@WaÅWkL@¥@kWWXkWmIUVVbm@@bUbmUUbW@UVk@mVkU@U¯mKVUkaW@aULÆVbb@VÅ@Un@VLWl¯L"],
                        encodeOffsets: [[112624, 32266]]
                    }
                }, {
                    type: "Feature",
                    id: "429006",
                    properties: {
                        name: "天门市",
                        cp: [113.0273, 30.6409],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@K@UlKVm_¥UwUmlUkwl@@aUK@kkWWUaVUka@aV@VUXaW¥Xk@WWIklm@ÅxmIVÝUkxka@bWJaUL@W@l¯UULUbkVUa¯bm¤UnÇUkmUUxb@VkXÇal@bVnlJnxŤĀVKXkVÑV@nwlKVbn@nlVbVLaJ@VVUnUbVKlnXxV@°U@KnL"],
                        encodeOffsets: [[116056, 31636]]
                    }
                }, {
                    type: "Feature",
                    id: "429004",
                    properties: {
                        name: "仙桃市",
                        cp: [113.3789, 30.3003],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VK°VkX@@VKbXI@alblwÞVUnJÆwn@lkXJ@XWVzV@xnxVXUVVVkUw@mLVwKVU@Um@alU@@@KUmIUaVUmnwmwmb@aW@UkmKkUkVġkUJWbnUõ@UkmUÅKL¯aVkIk`WnkJ@xVLUVVbUbk@WlXbmVxnxUblbUV@@VUV@nVL"],
                        encodeOffsets: [[115662, 31259]]
                    }
                }, {
                    type: "Feature",
                    id: "429005",
                    properties: {
                        name: "潜江市",
                        cp: [112.7637, 30.3607],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@UbVxbXmJVnXVlmVX@bkxVJVLVlXXWlX@@IVlVUaVwVlnÈVVmn£°aVbUlaVUK@mVU@U@VUkaVamwUwnWaXkl@VaUaVUUK@wWI@aU@@K@_UW@kX@V±VUbkKWaU@mI@¥kKkW@ÅK@b¯@UVmI@lmIkVkUWVnm@@V@n@JUnU@mlXXl@@V"],
                        encodeOffsets: [[115234, 31118]]
                    }
                }, {
                    type: "Feature",
                    id: "4207",
                    properties: {
                        name: "鄂州市",
                        cp: [114.7302, 30.4102],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°¥WóXmlw_ŤWkVaX@@K@U@a@WwU@mWk@ULWkX±lUnV`XWl@aWLUb@Vw@wmKUa@°kwyVUJUUVwkUUJWI@akWmLUnkVaXVbUxUVWX¤lL@lx@bb@ĸUx@`@lbk¦@xn²VÆX@"],
                        encodeOffsets: [[117541, 31349]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/hu_nan_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "4312",
                    properties: {
                        name: "怀化市",
                        cp: [109.9512, 27.4438],
                        childNum: 12
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@n@b@XnJ@k°x@aVUnlUXnV@@VnJWUJVnIVV°UbVVVL@²LUVa°V@aV@nmUXblLXWVXVmVLVK@an_`@X@l°VlXXW`nX@Jmn@b@nV@Lm`bUbn@VUVl@nIVbUlV@LkJUnVV@xVblVUbU@zUKU@mx@xUnn@@WV@lbUb@nVWXXV@VIV@VUnJ@VUz@JWbXllI@VXVVL@Vn@Wlb@lXVlLaV@VJ@XX`kVwVl@bkbUlVXIlnLVamVwV@@nV@XaVJVbX@lwV@n@nV@VWnIVVUÆ@Xxa@IUUKmk@mVIXmWUVJnUVU@anaVwkU@UXa@W@m_@a¯@@K@UVbnK@blIlbXa@WW_n@VU@¯bmyUkUJÇÅ@WU@kWKÅwnm°KVkmankVWnXVWV@UwXkV@mUlLnaVaX@VUn@VnVK@xlnXWU@a@@klakVwmUaV@wmIÛ`m@mVUXmlIXVI@K@aU@UaV_UK@wkUmmUKWXmVkUL@mU_nK@aVU@Ukak»@U@ymU¯UUVKkam@nka@mwkLWb¯mka_VaVKUIUw@kKmU@WK@UnmaULkU@wUalWV¹U@@WUI@WU@_@W@U@mU@WbbUK@Um@@UmbUwWWkk@WUa@anUUwlWUwUU@wlJVUnnV@@mnI@mK@U@wa@wUm@_mVUUaVUk_kċUkVWL@mlU@kn¥W@UwUWV@VÝU@lXLWVUbVLXlVIlknmU@VUJk@@@kVmwmVkxU@@XmVUb@xnKVLl@VxUxkIU`@bWVXX@JWL@bkb¤@bmUUU¯Kkmb@VVUVVn@@Vb@`lnxmblUnbk@xUmV@bmWbUV@VJIl@nVUbK@nn@VbnJVIlJVkXJ@X@lmx@bnnWVXJWXU@UlU@mk@@llb°xIUbnJ@VWbXVmI@JVX@bk@bWL@JUXUK@U@U`n@@Xm@XVW@@nX@@`ImxU@@JUI@KLmK@UÅUUV@VW@¯kUU@UamVUUmJ@nxmLKkmJkwkKm_mKXU@aU@b@Wk@ma@zUJVUmbUlU@xnXlWlXXblK¤V@@nUVVLkVl@Xb@VVKnXKVx@znW@X@@lVK@X@JXbWbnn@JUamLVVXIVxnK@aWUX@x@VnI@WlI@anVIVxkl@lbXXxVVVJVInbV@@ln¦ml@XXVWbkJWb", "@@XLVKVXVKUa@UUUmV@l"],
                        encodeOffsets: [[112050, 28384], [112174, 27394]]
                    }
                }, {
                    type: "Feature",
                    id: "4311",
                    properties: {
                        name: "永州市",
                        cp: [111.709, 25.752],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lxUXVlXUVnlVĢJVbUXVJV@XUW¯VIUK@klW@Un@nl@V`XUVL@l@Vx@XXW`UnUbxUlVnUVlb@VnJUVVVInJlUVnwVklKnwLVJVV@nIV@nbVa@KVVVUUaKV_nVVJ@_VWnV@n¥lI@anl¥X_VKlwVlULUVVV@U@VXL@IUmn@VU@wmKXUWU@m²l@VIXWWkWUkWlkIVamUXamUnmWUU@@UnlK@XJl@kVUk@mWKXkl@@aVU@UVWUUVaIn`VUVLnw@U@K@U@w@UVmUU°K@UnV@bV@Xk@KVm@amkaU£VWUUmUUwm`UbULkaKXU@kVmU@aV_UWVIn@yXXK@klmVV_kWVUn@WUU@UmaU@wnwWanUmmXkam@UakLmK@bxUUUU@Km¥Va¯@kUaVUlmUU@mUUÇmUkUybbUaXUWWbÅLmL@VaL@WWXUKmmk@a@UUKXW¥kU@VUkxmVkUWbUJnVJ@nVJXzWxk@lVbUX@VVL@`mbUnUnVV¼k@Ulm@mwLb@lmLUK@UamWkK@£Ua@UkJkUmbVlkX@bWbUVnnUVl@bbVK@VX@lbV@nU¤x²Knblb@xVô@l@b@l@XWxnVl@VV@XLVlLUUXV`bXXmJU@@bm@UUkLW@UlUKWUUbwUmL@nklVVmVXXm@@bUKlÆnXkllVUVVL@nUbV@V@nnV@xUn¯U@JW@UX@xĉ@`m@@LV@b"],
                        encodeOffsets: [[113671, 26989]]
                    }
                }, {
                    type: "Feature",
                    id: "4305",
                    properties: {
                        name: "邵阳市",
                        cp: [110.9619, 26.8121],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XIlJIVVK@n@VVVKnLVwVmnLVK@U@wJ@wVIÆ°X@ÜÈUÈxll@kn@VwVaXJWXn@@WVL@UUKVKV_U@@aVKx@UaV@lk@XylbUaV_Vnal@WU@aI@aV@@aVUl@XmUXWaXml@@kk@ma@V_UnUVUUWJUa@kkaWLUmk@@LUVWUkJWkK@¼UnWJIkV@b@JUIm@UlVm@Uw@a@kWXWKUknW@WUU@kmxUkVmIUJUUVmI@UkaUVUmVkwVaVmX_WW@Uw@@kUKWVU_k@mm@@VkX@lVLUJX°WVU@UIVWUaIUġmkVUkWUVWkwWXk`mI@¥kUVUUn±@mXkWknVUVmmU@@XVUk`@Xk@¥¯»mbĉó@mkU@kUKmX@UnmL@lULkKUWUU@bUaUn@Vb@l¦Ub@l@UKmnKUnlUVVbUVn@`Vn@xb@x@VL@nmJ@nU@mmUVkI@xVVVxkXVxmV@bbXVl@XlXVxna@Vn@@VVLaXaV@n@@V@X`V@@XVJ@XV@UºkXVb@xlVVKnbm@VXLV@nlL@VxJVULUb`lb°nXalKnx@lbmn@lbULVV°nV@z@Vl¼lb@VUV@bmLV`@nKlVnUXWVLnnlV@xVLU`VbV@"],
                        encodeOffsets: [[113535, 28322]]
                    }
                }, {
                    type: "Feature",
                    id: "4310",
                    properties: {
                        name: "郴州市",
                        cp: [113.2361, 25.8673],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@²zVaVlnVl@nVkJl_XJlIVmnL@mV@VXn@lV@XzV@lyV¯²U@UlJ@XVKnVVIXl@UVLV`@n@JI@mlIKVLnUlVUVVLXaKVLl@nb@WXV°KUnVVL@xVJL@b@LUVVVUVXbmbVbn@@lUbm@x@XVVV@@@bkImx@Vm@Xbb@l°XU¤aLmnL@bl@@VUX@VxnVanLnW¥XKVwnUWXmVIUWÆLVxLw@wVmlU@¥XWUkwlÇn_UwWV@VU°wnUy@aVkVlnL@lVnw@VlJ@bXx@bVKnb@U@WVUl@@Vnbl@XLlK@aVLVKnxÞn@aLlmUaVUm@ÅknUmaUKmVk@mkk@UlWUkVm@w@kUU@WU¯¥@wÇ@aVIlUV@kUWU@UUm»@k@mKVkUKUwaUaUa@kkUWJkImaU@UK@maUzk`@zy@XmJkL@UUJmUkV@z@kkVmK@¦UbWL@a@UbmKmwUKXkVUUkmVkw@UUKmL@WUIWaJW_k@@WmI@mk@WkWULUUVKUUVm@Ub@nUÇ@U@wV@Ua@aL@akl@kUJwó@@L@V@`@J@xnnmV@bkJmUó@nJWUUmU@UV@LkWlnnmVXbmxxV@nbVV@XVm@UVlXU`Ukn@lWLWzm@UJVXU`@bVUn@lWVLlbVKVan_VxnVVVUXV¤bnl@bUn@LWlU@@amU@V¯LVVUn@V@x@V@L@VmxUKUVm_JUbVV"],
                        encodeOffsets: [[114930, 26747]]
                    }
                }, {
                    type: "Feature",
                    id: "4307",
                    properties: {
                        name: "常德市",
                        cp: [111.4014, 29.2676],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lUmkUwUyV@VW@¯VaVmUU@KVUVUVLnaWnkUÓV_@mVU@Ýw@ka@kVmUmK@IkaUamKkXWaUW@WUk@@KVU@aU@L@J@XÇVUKVak_mWkLWakVUbmLUUmlUVKUU@kUWW@UImJ@xkLkKm@@X@óÝ@UUk@UKVULKXkWWbkaIUWU@mUk@WLaUJġ@@XÈÆVIlVnz°aV@Um@X`@XWbkakJ@amLaU@V@L°@@bn`@@XWb@VVlUxmb@bUVmVUIXVWnJU@nnlVLV@JbWzk`m@UVK²VxkLVl@Vn@V°xVKVkVVlUblx@bUÆ@@nVnUllkx@VW@@VkLWxUL@bÝ@kKkVõV@bkXVVUV@VkUkVLkVa@@¯xUxmX@JVb°WXkK@Vm@kVbbn¤xUXkJblxnXÆK²l_@Wnan@UL@bJnIlV@lU@@¯ô@lWȂIVKVmU@aXaV@lwVXn@@K@UVKUUnUbn@lWXlJnULKV@l@²a@UlK@aV@naVXWV_nKlL@KUm@a°U°@VXL@a@wWmXal@k@VLnV@@bl@VnX@mwVa²aVU@mk@"],
                        encodeOffsets: [[114976, 30201]]
                    }
                }, {
                    type: "Feature",
                    id: "4331",
                    properties: {
                        name: "湘西土家族苗族自治州",
                        cp: [109.7864, 28.6743],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@KL@wnK±nnm@WUkÜÈn@n»@mVamkmUl@VnmmU@wUan¯VKLnVWlInyWUI@WWk@KXUn@mnUmU@WmkV@kXaaVaUmIk@kaX@Um@UKWU@UkJWkXa@IVy@UmIUVU@UJU@WXWmU@VakaU@@Xm@Vm@wnwV@VLyV@VakUUa@wUUVmlI@KUVkUamJk@VU@UmVaan_@KmU@@anm@ImWX_WWUk¯@k@W_m`@bULUKUnUWWXkKWaVmnU@@b¯UUbV±K@UKUUVa¯UUmJUVIXmI@UU@WmVmkUV@b¯w@lmI@W@a@m¯LXbmJVLklWL@V@XXmbVVU@@VU²Ul@VlX@b`XxzUmkUVÒl@bXLWxXVl@VbkLma@nmVmULVbmVUb@lnzmbUÒVl@°nLVlJkn@bmJk_VmmkblxÈx@LUbxVb@Vn@JmLVU@nV@¦VbnJ@lVVbkxbm@UxVLV@n`UnVVVkl°zxVb@VU@@ÆlXnWm¦nbVK@XVVUVVl@XKUV@nVL@WnIWXLVKVLlxUbVKXVWbn@@UnKVLVbJU@aVU°b"],
                        encodeOffsets: [[112354, 30325]]
                    }
                }, {
                    type: "Feature",
                    id: "4304",
                    properties: {
                        name: "衡阳市",
                        cp: [112.4121, 26.7902],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lV@XV@mXVlXLWX@l@bVxn@UVkn@VJ@I@alUJXIVm@»LXllIXVVU@Kl@VnXKlb@lVbXIVVUmVVU`@nbl@@lXLVVVKVbnXWJ@VXbWxXbUlVK¦nLVVUVVbbK@ULnK@Un@VxlUV`UnnL@VVL@JV@VUnxnKVbV@@VIVUnJUVUl@nWXllIUaKVbÞLV¼²`V@VIUwlaVmXa@IWanK@U@mkVVUVaX@lnaVLÈ@¥@kkJUWJUaXkaUmwVXJ@_lWUU@¥n_KkamUK@amKnKbV£¯W@kaWan@@UnwlJ@a@@UUU@Wwn@Va@km@UanaWaUVUUVU@K@aKUI@wKUUVm¯LWUX@mak@UKLWbUKVUkUmVUKLkJ@nJ@I@mU_UK@VWkUJmUUL@WkI@V±VU°kzU@Wy@kUm@UWU@@nmKUnkJWIk`IUlmk@mUUkUb±yUX@VUV@bk@WlXL@nVlUlk@WI@kLm@VV@XVmnnVWbnVUblJXkVlXXlWXUJk@±@nXVWVnL@xUVm@Vn@JWK@UV@UUVUVKUkkxULW`k¦m@bkJm¦U@mUX@`UImUU`LVbUVUU@LUbmaU@mJU@UUIKmxkLUl"],
                        encodeOffsets: [[114222, 27484]]
                    }
                }, {
                    type: "Feature",
                    id: "4306",
                    properties: {
                        name: "岳阳市",
                        cp: [113.2361, 29.1357],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@wUklmUUmU@@UVm@wUaV_mmUKmwkIkJmUUnm@@UUbUKUmÛamm¯xVLkbÇÆUVUzkVUlUUKWLX¦W@VUUUaKUbmLKm@akU@amVaUUVIVWkk@wk@@xmLlmÅwmbVlXlÝIWVkK@kkVL@VWKU@Ublnam@b@bnW`@XUJk@UUWKk@UKnn@xmLUVm@kbVbVnV@Vb@KnVLWXÆVĢ¦VblnUJWz@ÆVóUVbkVaÅx@¦lVUbVVknWKk@wKVUÅl@zkb@`m_mJ@xXmbVb@llV@n@llbXLUXalUlalVnwnLVKlVbX@@IV@blJ@bVL@VVVUXÈ¤VnkVÑXmlbnVKkÑÅ@UmaVç@±XUlIxlV@VaX¯lUVVUVJnV@°°n°Vxĸł°¦b²¦lJ@U@aUK@kUm@_m±VIXal@Kl@bV@KK@km@UmUUaK@_UJaXU@Xm_VmUk@WUk@kU@a@m@UaUUU@al@nyXXWWwkly@¯n@@bnV@k@mVIVlUUmlUJUwIbXVaUal@Kb@VKVkXVl@VkUU@ylUVVaVL"],
                        encodeOffsets: [[116888, 29526]]
                    }
                }, {
                    type: "Feature",
                    id: "4309",
                    properties: {
                        name: "益阳市",
                        cp: [111.731, 28.3832],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÆxXL@lV@ĢVIbXKl@nVV@XVJlbXalXWLVKUVLl@VV@ôÞ@@Wn@lLlK@wnIVJX@VX@lVVULVnkVVnKValUXblKnXl`UbVLÈU@W@IKV@@bUV@L@lXV@VXXblWnLVblb@JnLVUn@llb@x@ÞUV@nU`VÔmlXmbUKUVUV@LVVUnUb@°UX@UVzVxnlVkVnlVnaW@wnIn`@_la@ykÆVULxl@XLlmUUVakU@¥ÆwblUUaôVU@ÅXyVImkUaġ¥ÅUWXKmU@La@UmUUUalan@VUnK@wmmL@VlXLVVl@VI@WX_m@a¯mKUkwW¥UK@_UWWLUVkUWL@WUIkVU@JwkLUUmJVI@WkXm@VmkKUIU@mmm_@VUV@kJċwUU@KUWkkW@IWW@km@klwkWVkkUV¯m@kWLU`mIkmkXm@@`@L@xUKWkU@VL@JUU@mbUKVa¯WVnL@`lXUVkU@xW@UbUWVU@UJ@lnU@mnÈmVa@bULwUb@@VkxmUUUVK@IUmk@akm@wmIkK@bVWXkm@wULUmm@UVW@UbmbkKVnU@WlxVU@UXmWUXmlnbUl¯Lmn"],
                        encodeOffsets: [[113378, 28981]]
                    }
                }, {
                    type: "Feature",
                    id: "4301",
                    properties: {
                        name: "长沙市",
                        cp: [113.0823, 28.2568],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lVUllXkx@lln@XX@JlXXlV@LVVČxlI@VU@Un`nnV@VJlLUnn@lW@XUJnIVVlKx@IVlUVJ@XXKlVVUXKVX@`VLX¦lxVnL°an@bkmVaV@XL@UKlU@llLXUÞJWkUknaÆxnknK@w@l@xllUXUJVVUbn@blV@bnLnKVaLVbVVUX@W¥XKVLVVklUVyUVÈÅlaUK°wnnÜbnVVLaVV@n@VmnVlIlJna@Valkn@na@amwm@UXwK@aUUVUUaVawWK@kU@UaW@kKUU@kW¯XWan@kmmÅ@@I@U@KmLkaVUKkLWVUk@UVmU@am@kkk¥UVUKmaUb@UbI@aKkkWm@W¯K¯b@VmaULVxUXlVk@UxVJVbUb@xUL@ULWWLĕmxVVL@VbKUwaÅ²WwX@@WUWLU@VbkV@aU@@VUnmJ@VUn@VLUK@UmUIk@UÇmU@@UW@J@LbUmVI@aUmW@@bkXUx@lmLUbm@UbkJ@V@XmlUbkKm@ma@kUaVU@aUK@mImJUIkVUVUakbWwka@UWKkLUamKUXm`Å_UULmaU@@lUV@X"],
                        encodeOffsets: [[114582, 28694]]
                    }
                }, {
                    type: "Feature",
                    id: "4302",
                    properties: {
                        name: "株洲市",
                        cp: [113.5327, 27.0319],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XUnwĖKXXVK@VK@wVaUaUIVwl@kUVWUwVKnb@U°a°LX@XnllL@bJVa@VanbVLUV@al@@UV¯ÅÇ@Ummkw@¯yVwnUVVVUkmWVnKVUa@WXkVKn@lUVUVVVXIlV°VnI@VlKnV@mwVm@LXKWkU¥wWw@k@mX@KX¯V@VUVa@VnKWkV@VUkm@aWa@wkUWwkmV£VÿXUVL@mVIXaò@nW@aU@@am@aUUUmXmWUk@nUW@_maVmwUkamaUL@awW@akI@UxUm@kmKUklU@bzVm¯xUVU@XVxm`kÈlxXVW@¦kVUn@xxKUwÅKVXUJWnXmVUxWL¦XmmKbmUUwW@UV@k@VLnlbLm`@¦VVkX@`WIUxVnlbWVbXIVlI@l¦Ç@UKmbkW@UbUVUl@n@VmLXb@JWbUnkbVxUJUxWXXlWL@V@V@XXJWxzUVVVVKnXW`@bkIUlnLVJUbUIWVXlWV@XklVbnn@xl"],
                        encodeOffsets: [[115774, 28587]]
                    }
                }, {
                    type: "Feature",
                    id: "4308",
                    properties: {
                        name: "张家界市",
                        cp: [110.5115, 29.328],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@InWVw°w@@blUKlUlVU@VUUUlW@aöUlUlLÞ@@aVKXwlK@UX@@UlwkVkUm@m@ÅV@akwVaUkUUlUL¯w@UUm@UkKlw±UULVn@l_XyWwÅ@VUUmJUXU@@mmU@kxW@UaUIWbU@@mU@UxnUbmKkWJkUVal@aUkUxlW_@WUIU@bkKWUJVnUbbWblU@nl@XnVmV@nmWV@LXl@XJXVmzkJUXmKULm°Vb@xnVmnUk@VnnlUb@nm¼m@ÛÇVl@Xmnm²mL@xK@LUl@nULÆx@V@VXVWbXXl@nLlm@bVKXWL°bnU@VaVU@mVwJnwVK°zn@VVba@Ċ¼"],
                        encodeOffsets: [[113288, 30471]]
                    }
                }, {
                    type: "Feature",
                    id: "4313",
                    properties: {
                        name: "娄底市",
                        cp: [111.6431, 27.7185],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lLnJ@xln@bnlV@JLVUVnVlw@U@VaxVK@abnUmÇnV@km@I@VUVVXVaX@@wlVVUkW@_mKXU°UbVLnaV@V@IUKV@XlVL@w@K@_n@lWlnnJV_XK@l°nU@WVU@kV@nbVKVl@nLlLXU@lmkw@nW@UKVa¯IVn@@aVUUKl@nXVKVn²aXblKnLlmVI@KUU@akLUaVaUXm@a@wVUVKnLnWlXln@@U@anUVm@UInm@IUK@UmKVmU_kVUwm@@VmLK@VLaUaVUUUmK¥ULkVWaXwWa@UXImWUaULUUWKk@WnXbWVWnk@UV@bU@@bJ@bV@XkmbUU`VbkaWz@klU@b@VwUL@bV@U`ULVL@VUK@Xm@XWWIUbUxm@@lkkÇwVÛÇW@¯ÅUJ@xIx@@VULmKUnUxmKULUUm@@ULUJkIWJ@b@LJUWkJWnUV@nnÜ_nJxU@VbnUxlkb@l@"],
                        encodeOffsets: [[113682, 28699]]
                    }
                }, {
                    type: "Feature",
                    id: "4303",
                    properties: {
                        name: "湘潭市",
                        cp: [112.5439, 27.7075],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Æ`n_VWnLVblKXL@VlbXxlaVbUVlUVJnInJ@VL@bUVVb@lnbn@lLVank@W@UlIVan@VanK@kVwlW@aX@Vn@bUJVna@KIX@@VV@nVÈl@VJn@VVLK@UVm@UnIVm@UV@@blUUaV@XKV@XW@XxÆ±bVxLUa@UKWk@wmmUalk@WXUWkXUVJVaUImKVklJ@aX_mWULUUVUyXwWI@W@U@UXKWkXWVwU@±_U»ÝKUaLVbkJkWmXk@UVVmIUVJ@UU@UamLmwUVU@mnJ@VUnmV@b@Vm@kkWmXmKULUV@x@bWnVUbVblK@bVV@LUJknmKkLWa±bUmULmWk@VLUV@bm@U°JUbVLX@@mlxkn@WVKkmK@k"],
                        encodeOffsets: [[114683, 28576]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/jiang_su_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "3209",
                    properties: {
                        name: "盐城市",
                        cp: [120.2234, 33.5577],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@n@°ĀÞ°@¦ULWKkx@bkLWb@lUlVXXJVbnUKmxXV@bm@@XLÞÜ¦XlVnmzVJ@n@²ÞôkÆÞaȰĉwnǉÜóéVÛnĊīČǉĉ@ō@KÞUlU@kklÇÈÑÑlġXɛ@UġaU@U_W@n@kaUL@VW@kKmkUV@bkbWW@bkzma@JWI@KUKUL@U¦`@XUJU@KmXw¯KXkmy@aUIWJXXmV@K¯UU@@bVL@¤VLXbV@@JVXVK@JVn@bkKmakVVXUVVVlI@`U@nzVVb@¤n@@UlKXLVVI@V@nV@V@ÈUx@óVōkÅWó@mU@bk@Ýwk@WbXxm@@J@zV@kVbVnLWVUXWUXUWLU@Wl°z@VkxU@UVWIxWJkbĬnW@@bUl"],
                        encodeOffsets: [[122344, 34504]]
                    }
                }, {
                    type: "Feature",
                    id: "3203",
                    properties: {
                        name: "徐州市",
                        cp: [117.5208, 34.3268],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XKVX@WnIVx@K°Lnll@@I°KnVaU°x²mlx@VanU@ak@akmV@@w@Ua@aUwVwUw@w@UK@£kaĉlóIÇVk±@@kUKmVkIkxW@Ua¯UUm@UVI@WVIJV@@Um@UanaU@mI@J@XV@XaVlkXVaUUWLUyVIXmWak@XkJókJUL@KWkk@ULU@WalUIkJmImkVbV@lV°kXUKWKULUmb@VUlVnb@VV@IVKUUmU@ak@@bmV@xklUU@UKmV@nJVbkXKUamLUJ¯UUVmIbVVLl`@LLU`m@kXUVU@VlxUK@xkIWbUKx@VkVVnb¯@@U@xkmbkLÇKb@@XnJ@LmVkl@@XlUVkxakVVb@bVnUbU@@xVUVb@nIĊ`XVVôJ_K@xlU²KlkU@VaVVÈm@kVUVmnamUUaVXIVJ@ç@¥nkVLn@@XVK@VUX@JVUV@UnVJVLUJVLUVlnIbKnU@m°VanI@anVKVLanlKblKÞk@¦@¤@VKnLVKLKVzlWLX@VmV@VbnU°@UalkWXLVUKWkUUW@£Wa"],
                        encodeOffsets: [[121005, 35213]]
                    }
                }, {
                    type: "Feature",
                    id: "3206",
                    properties: {
                        name: "南通市",
                        cp: [121.1023, 32.1625],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VJ@bnzWl°LxnW@LVVI@W_V¥@VKVL@LXJI@nbly@aXXla@aVUnllLX@@UVKlb@@mXV`V@bĢlkČÇÆȘ¯wnĕVĉVÿUƒUĠŦğlXÑVǵ@±ōLʵĖ¯lÇbÝÞ¯xk@Çkķén¯@ğġƴǫ@kVVlUbL@xULÇóLUl¤@nkVV°VLkxVb@laUXUKWĖklVX@¤UUkb"],
                        encodeOffsets: [[123087, 33385]]
                    }
                }, {
                    type: "Feature",
                    id: "3208",
                    properties: {
                        name: "淮安市",
                        cp: [118.927, 33.4039],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nźUôÒɴèl¦nĖVkbmX@xVlVL@xUb@bUJVnUxlKVLÈxmzXV@lW@XVb@bÈVxnbVIXa°LaÆVVaXUlK@aXIÆVlXKVUlIXalK@alwXLVK@¥Ý¯¯ÿ@mVk@aX@mīlaXIwXJVUV@lw@U¯ybUaUġUÅaUKVknaġm@kUm@wÆIV±nLÆwÇnUUk@ƅÝU¯JÝI¯¦Ul@b@@VVL@l@LLÅmL@b@UaVaUWmLUKV¹KLWKX¥WI@mXk@UmaUVUU@VmL@WbkIUWUmVóIkbmm@UbVLUxmJkU@bkJWbnXU`WzKUÞÈlVbLmx@kè@Æ"],
                        encodeOffsets: [[121062, 33975]]
                    }
                }, {
                    type: "Feature",
                    id: "3205",
                    properties: {
                        name: "苏州市",
                        cp: [120.6519, 31.3989],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ôèĊVnX°¤²lxƒÈÜ@²x@J@b@X`nIUÆUUV@bl@VVnL@L@xJ@X@blJXnW@@`XbWkV@UbVxXUxkV@LóxVbUVW²VJĸklUǬ@ĢƳĠ°@mƒī°»ÈÇ¥ULUU±a@bU@¯U@KnImUVWUkmXUVU@lIVaUUVWKUbUkWKU¥n£WakJUkULK¯LKkVIn@VaUVUUUkVk@U@amUkJ@UUlwX¥W@@UkVmk@JUakL@kk¯ÝmJUn@nmVXlmbVVkn@UJ@±WUxV¯a¯KōbÅ¼ÇxUxUUlWL"],
                        encodeOffsets: [[122794, 31917]]
                    }
                }, {
                    type: "Feature",
                    id: "3213",
                    properties: {
                        name: "宿迁市",
                        cp: [118.5535, 33.7775],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XbWnUJVzXKVVUbWklUWbU@@W@IJ@nVmbVbn@@V@UIUJ@XUJ@VVn°VVbX@lwlJnUVL@l²@lÈUôJĊklb@¤VL@@xVxUxVx@bVb@@xU@lnmnXmXLVmV@X@lxVnVJôLLXax@b@@KVL@bn@@m@@alLUUVaU¥nIV±I@mXI@aWWXU@LlUXWW_XWmaUwÇ@aaWUX@@kWUynÇwUKkLVwUmVI@aVa@wUKUk@wWnlaUmĕk¥ɳçóÑŹVmmzkVmm@a@Iók@@LWU@`WbXLWlkImJVn@`nXVbXmL@Vn@l@nUVl°Xx°U@LVĠ@z°@¦UV@Xn@VJmV"],
                        encodeOffsets: [[121005, 34560]]
                    }
                }, {
                    type: "Feature",
                    id: "3207",
                    properties: {
                        name: "连云港市",
                        cp: [119.1248, 34.552],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@lzXxmÆV@@¦@l`XnlKXXmKnLlab@xmbm@kL@V@Vl@@VUXJXmb@@°Æ@èÈzlW°XĢJlÈ`lInbWV_@m@UUķnôw°ÆmnaVVÛVmĸ»Ģw±Ý@@mUInyUmWkÛ¥ÝK@Wn@@aWUnwVLmUaWIUWVk@kkJUVWLUkÅWJ@bkLWVUbÅUb¯KWbUJWXX`WXkV@KWVXX@bWJ@nJU²mJV¦UbVVkK@b@@nm@@aUK@L@@awWbKóKUIUmkwW@U@UnWKnmWn@bl@bmVUb@kw±n¯wVUb"],
                        encodeOffsets: [[121253, 35264]]
                    }
                }, {
                    type: "Feature",
                    id: "3210",
                    properties: {
                        name: "扬州市",
                        cp: [119.4653, 32.8162],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VUXblVVVb@xV@kzV@lwVLUbVV@VU@VbUblb@nkĶ°IÞV@ƆVlmVÈÅxmKU²ÅJ@xVn@lĢnmbUlVLÆbĢVVbVaXk@VXKVVWXVWXUmKUaWaU@¥@£XWUUV@@ynam_VWkUVUna@ÆV@mnkWmXkWUW@k@@akkllWUI@UnKl¥I@VVma@a@I@U@a@anK@UmK@ÅVUnJlkI@aVwka@mVIUW@UWL@WÅbmIULkaUWUxkLUKWlXL@VImÅVUmĉLUól¯I±l@ÒUbVbUVVXUJUnVV@lnbl@"],
                        encodeOffsets: [[121928, 33244]]
                    }
                }, {
                    type: "Feature",
                    id: "3201",
                    properties: {
                        name: "南京市",
                        cp: [118.8062, 31.9208],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@k@ma@kUUVmVIUWVUUaVa@Ñ²k°Jôk@Wmk¯KmX¯aUakKWU@XULXaV@@mUaVUUl@VmkaUXm@WUUna°IlmVmIUW@Uk@@aV@VVX@VI°»nmU@VKVan@m»UaU@U_@WlIUaaVaUala@¯n@kaUkUUWKU@mwkUUmmL@K@LmUUVKVÅImUJVkVVLèVLVU@WLV@nVÜULVUL@bW@XbWbkJUUVUxVXmVk@WUUkVmIV@nbnVWbJUkUULa@Jma@XkK@VVL@L@JLUVU@V¼nXlbm@kbUKmn@lVb@VXXVUV@b@LVbÆxXbl@@lV@UVV@XVK²VlI`UbVbUlVVn@WXn@@VUV@@KmbVLXÒLkKV@nX@VVUV@bnVllbmnbIWVXU@`lLlknVnmlLlbUmVInK°nUU@l@VU@Vn@@alI`VIXaVaVa"],
                        encodeOffsets: [[121928, 33244]]
                    }
                }, {
                    type: "Feature",
                    id: "3212",
                    properties: {
                        name: "泰州市",
                        cp: [120.0586, 32.5525],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lUU@@y@In@WwXal@Þxl@@anVô@ÆXlŎôU@Vw@ÇUU@@m@UJUUWKkL@Vm@@£aUUmyV@@_kJUUVUUWlUnblL@aUmI@ULUW@IU@WaUK@£UK@aV@°V@LnUWWXIlaVV@£UWlkXĕVLVWb@kUalwUKU¯lU@mk£VôKÈVK@wKVaUkķlUI±ğ¥ÝUŹ¯ôm¦ĸ@XXK@VVXUJ@nlbUx@blJkmIUV@ÆnL@VmL@b@b@V@J@bnbU@UJk¦mL@VVJkXkll@b@@lXXVWlXnml@nÅU@mbUVlVUXn`mb@zU@VVWX@¤¦V@Xb"],
                        encodeOffsets: [[122592, 34015]]
                    }
                }, {
                    type: "Feature",
                    id: "3202",
                    properties: {
                        name: "无锡市",
                        cp: [120.3442, 31.5527],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nLÒlxUVkLam@kVWUULUxVVVbUV@bVLUnnźÞVĠ¦XVUUaôw@KlUVwWUwVa@lUXWa@_X@WmkI@a@WI@w@KmKUUk@@aVUVVÅmJ_@W@a@I±wÛ@ƑÇkw±¯£mWĉUóçK¯VkUWK@XkV¯UWabmUaUUblln@b@xbXWX`@VxUblL@bn@Vb@`m@XbWnn@l¤n@xnVlUVLÆWkV@VbÞJ_nl@nKVU@aUU@mVk°WVLUV¯bVXbXlVn@VmL@xV@bl@nW@X@VVJ@²VJVU"],
                        encodeOffsets: [[123064, 32513]]
                    }
                }, {
                    type: "Feature",
                    id: "3204",
                    properties: {
                        name: "常州市",
                        cp: [119.4543, 31.5582],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@LnxUbVVL@xnnWnn@VVXn@yImx°La¥n@VkKVwW@nXVJ@b@UVn@UnUV@Lb@`VLklVÞnÆ@VaXLlÈJmmVUK@aVUUaUUVwVKXVlUn@blKVUkwÑmKUVUI@±UI@U@WmX@k@aU@wnK@UUmWkaWU°aVUUK¯XUl@nVV@bUVmLk@m`ÝIUaU@lÅXUKkVmU@wmk£m@XmWan@@_Uam@@akKVaUw@W_XWa@w@akmm@mL@UJmnUK@@XnJWLkKUb@VxkWLaWVUImVULUK@L@lkLVVVllbm@@°kbVbUbbVbkJ@XV`V@Vbn¼"],
                        encodeOffsets: [[122097, 32389]]
                    }
                }, {
                    type: "Feature",
                    id: "3211",
                    properties: {
                        name: "镇江市",
                        cp: [119.4763, 31.9702],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VĊKnVÆUnJ@UWKXkVLlKVwXVlbVKnJÆaķn¥°óÇIkWKUbÅ@mUÝlkUK@_a@KVUVm@mVU@@aUIW@mXUxLUlm@¦bK¯nwJzm@UW@UmmXmm@wKUUVamwKm@UbUL@Vmn¯¼JUW@UUU@@bl@@VVXJnnUk¯JmbVVXn@VWlbUnk@VVUVb@nU@WbKWV@XVlLVb°bnW°Lnl@X"],
                        encodeOffsets: [[122097, 32997]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/jiang_xi_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "3607",
                    properties: {
                        name: "赣州市",
                        cp: [115.2795, 25.8124],
                        childNum: 18
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@`l@Èbln@KVLl@V@bÈlnKXkVlVL@lJnb¦VKVVnXW@w°@VUmlnUV`UbVUV@xnKVI°KXKVkVL@al@XaLVlULWVVVL@bx@VXVmb@x@VVV@nn¤lb°b°KXXWbX`lbXxz@x`VIVUnKLxWXLVKVbVLVU@wnW°b@nalXmXVJn@U²mKkVlU@@xlnaVmlKn@JVLlnVl@XXÆèVlUX@xVLXVb°W@wnUWmXk@KLVwUmUkUKUw@wVaVK@k@WnkUKWkwlmXL@KVUlLVKXmWUL@aL@malaVk@aaanX@VVUblbJnXaVwn£K@UWmUk@UaWIV@bJW@KmmU@aUUUkmKkVKlUUnKVUlVaV£Å¥WUUK@UkUUw@m@mIkUUWLK¯Uw°¯@wUKUbKm@kkKUL@UUKV¥U@manw@k@U@Wm@@U@WwkmwWaUU@UUmV¯kw@@kmkKkUW@UK@ÅV@XWWkXa@Ul@Va@KVaUUU@aXwla@UkVWaXk@K@lmkUmV@Vmbk@»XI¥VUkVUVU@anKVUKUalU@wX@@a@K@ÝwL@UnÇlUIkJmn@bVVb@VmnkLV¯U@±lIWm@kaUI@aÇU@K@KUIkbWbJUIUyX¯UbU@méUUmUkWKxWIkJm@V¥U_UJUwmVkUU@@knwm@UmkWJkL@n@VW@@U@knm@kUml@xÅx@@XUJlb@VXJVxn@lbV@lULnV@VlnV@bWV@bXL@lVLVbV@blLn@VlK@xln@bX@laLVbnKUVVbKlXVVkxV@nnVUblV@@z°WWkbIkWL@LUJ@bUI@b`@UmI@mkK¯XWmUV¯@UUVUUam@@VULWUJIm`IUJKUkW@UxnWbnnmlXbmIUVmV@Vnb@VLUKWLnÒVVV@VUL@kJUV@bÈ@V°@XVV@l@xUz"],
                        encodeOffsets: [[116753, 26596]]
                    }
                }, {
                    type: "Feature",
                    id: "3608",
                    properties: {
                        name: "吉安市",
                        cp: [114.884, 26.9659],
                        childNum: 12
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lxnb@V@bV@ln@nlIn@blVXKnk¼@VUKWL@bL@`UXU`@V¦XLĠ@lJ¦@nV@l°nn@mVXna@nbKn@lIV@VanJ@_lKVVnL@LK@Vn@VbUVanKlLnbnJVbnWVnVVanI@Vb@LbVKVanXVbVJVU@aXLllbôlÆ¼XxVLVK@Xn@xnVVVmb@LnVVKVXV@@mnaVXUVnVK@_UaUmwnKV_anKVL»K@¯ÝU@U@kWlUnlknKVnaUkma@UIUwl»Åw@VwV@nn@ÈXlKVmna@kVw@anm@n_WWk@mUkUK@ImkLUnbkm@wV@klUnLV±m@UInWkWmb@¯amX@xUVUKUaULWKXwKmLUVUJ_@wyWwkaW_XaWW¯L¯akam£@mUU@U@wnaWU@Uw@aUKUXUVKUkKWbk@@bUKUlWL¯LUJmLwU@UVaVU_VkmnUV¯@@xXmWUUUL¥makI@UKUkWlLkmÇ@aUk@UKL@kmÇak@_VlkL@`lbnlLVanLnbmVÆln@kJlbknmKUbÝmmwULUK@bkLWKULUUma@Kk@UV@L@llbVzxUxnl@bVLm@IVJXVlLV`@bn²@J@V@Xmbñ@WbUJ@bm@@LUĬU¦lV@xXb@blnUV"],
                        encodeOffsets: [[116652, 27608]]
                    }
                }, {
                    type: "Feature",
                    id: "3611",
                    properties: {
                        name: "上饶市",
                        cp: [117.8613, 28.7292],
                        childNum: 12
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@VI°`nm¤²@bVJUVVXUl@Vmb@xV@XbmVV@lkLmbn`VbnU@VaUnbVllUXVa@w°VW@_VWLnVlbLVbnlKnVK@IUW@_@am@ÑUólK@U@WU@VwU@UI@aUUaX@kwmJV@yX@kan@mkwVmmI@aUU@aUUW@kVkV@@anK»XVWnIVUl`@_W@wlUV@UWKnUbn°InJlUV@VnIbWn@VklL@l@Vn²m@U`kI@bWJnV@°VXnJmXVmx@VVL@bkLmWULUmU@bWXb@llnX@xkxVVnVV@¤nLnVxnJVXX@bn`VIb@blmlLnaV@blWXnlUnbl@KVanUVmm_XK@kWWnaU@UnaWUXaXamUkKmXUWLX¯WakKmnUWwXa@KW_aXWW_@WnIVl@XULnWVknK@ImyUUÆbXKÛ@W@IÆUnVÝlkVK@mUIVwkUVaUm@aVIVyXIaÈwmmk@UnanVUmÅaó»lwW@kkUVmUK@WKLUmWULkamKLk@Wa@wk@UU@U@mbUIWVKUXWmkUmVmU@LkakKw@w@U¯UUn¯l@bmn@xkJWxkL@VkI@mkmJUI@V@b@VVxnbWlkÈkVLbkKmVL@V@²nxWkLUL@xlKVxbXmVnWJ@Þ°@nxUKUw±`UImVmnU@kalm@akwU@UUJmxU@@U@kU@Um@@KnVm@kKmkU@@WUnkLWxkVUwmKmLkUbmKUbV@xUnkJ@n±UxVXUWJ@LUblUnm@W@nknUJUVm@kXllknVbÆKVVb¼V@Ul"],
                        encodeOffsets: [[119194, 29751]]
                    }
                }, {
                    type: "Feature",
                    id: "3604",
                    properties: {
                        name: "九江市",
                        cp: [115.4224, 29.3774],
                        childNum: 12
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@WUkVUkmaVUb@mVUam_nalK@kUnUWaU@@wna@UVkUWVUUI@a±n£m¯_JU@ĉ¦Ul@UVKmmLlm@ğ¹m`Uk¯@@UVK¯@UUK@amkmKkVVUa@UkUKUaL@VVXUJ@n@WUbnVb¯V@LÅlÝIJÅkÝm@UaWUU@UmUXmmwVUUKWUX±mUam@kWzUaVmÇw@aÅLmKXUWKkL@W¯IwVwlkUJ@Um@ÛÈWKUxWkaUU@KkLVl@UKUX±KUb@nVVUbUVmaUlUL@aUL@@nUlWzX`@V@lx²@Vlb@bVÞ@°nl@UxVL@lUbVV@n²xVUVmnUÞbaJ@IV°xnbl@nbÆ@VwnK@VnXlK°xnUlVXV@Vl@L@lk@W_XK@KkWxUL@JnVx@aX@VVUaIXlmL@bVVX@VbnKa²XVWk°a@UnV¤nbmLmW@XbmJUbVLaÞKL@K@U@aVKlbV@nXlJxV@VnVÈÞKôbźĕČmV@Ċ²xÆIV@Þ¦ĸ¼ÞVlVÞnxln°JkLXWVUVUVwnJVI@yn@lXlaXmWI@w»ma@UmK@akKkXmW@_kaWakKWk@@K@IWkUa"],
                        encodeOffsets: [[119487, 30319]]
                    }
                }, {
                    type: "Feature",
                    id: "3610",
                    properties: {
                        name: "抚州市",
                        cp: [116.4441, 27.4933],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°V°UnÜ@n@lnLlV@bV°LlnLllVzVVXlVV@@L@xX@WlXm@UVL@V@n°kVmVUnKlaXxVbnlU@lVVnaVI@aX@VJ@V@bb@Vb@X@lUL@@VlIVm@wUVanLalVnKnLVxlUXwlKVm@k@Una@mWIXKWUÛVk@a@UVWn@@kl@@WXlW@_Um@UVK@aLnalInWV@@xnI@¥Km@kKmnk@mlI¤laXbVblknV@UKXVlUXa@@Unw@±mU@ak_±a@UJUIVKW_Xa@aWUK@mmUVa@IXa@UWmannlmX¯WKXwVUVw@XUlK@klJXa@kkmm@Uww@¯W¯kw@WmbULaUUU@mVUUWmkUbKmkkK@akU¯¥Ulm@akU@m@KVIVV@KUkUVUkaUWbmIkaVaUU@mWbb@bUlkbb@nK@bKXVWnULkKUV@LWKknlxXVLml@X@lULUb@xVxVLVlVnUxK@LWlXnmV@x¯XaWUUK@wVWUkÅçm`@mn@bUx@lmbUnkLÇWm@mU@Ux@Æxk¼VxVJ@nbVlmbUmLklmkVlX@VV@°Þ"],
                        encodeOffsets: [[118508, 28396]]
                    }
                }, {
                    type: "Feature",
                    id: "3609",
                    properties: {
                        name: "宜春市",
                        cp: [115.0159, 28.3228],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@VlbnK@b@JLlUnx±ĀXxÆWX@l@V@@blJ@nX@xUbVVUbVV@bVmnmJ@bmbm@klUbLmb@lVb@xUX@bVVVbV¤@LVVbXlVwLXÜÇn@@VIlVkUxx°J@XlKXLVWnLÆK@bÈxUnVbylXn@VbnW²XVLVVUnxWnnV@VVVXVbn@ÞÆlIÞJÆk@K°UUamVa@UUU»@wV@VkkUKUVW£U@UmW@@aXkVUnVlKVVUUkVmU@kWaUanUVVamIX¥W@@aUaUVW@_mW@UnIVVn@VbVm@bVL@anKVUkWKUXVIkx@nabVKb@nVJ_V@VwVUVVXUlUUaV@X@VblabnKlkVaXa¯@m@UKVUn@WXkW@@w@KU@UWkUUUykkmKk¯KU@akUmK@k@mmÛ¯V¯U@L¼UKmLbU`mLxVnVb@`LmUVUUWmb@nU@UWULmU@KnaUUmUwmJ¯IUJWIkVkaWVUIUlWaUIUVkKmbUIÒlVUnn@VlLUJ@bUX¯@aWVUKUXKUbm@UwKWa@a@VkUWn@Uak@mbXWJXbm@mLaWVk@wL@WmanU@knwWmkaWLKWUXaU@¥lUVVVbnw¥nKV»@aUk@a@UJ@kmLma@mbUWnm@ULÇº@LXnmxUm@UbkbW@@akLmWk@UXmJmUkV@VUXVlULmKUxkL@lmXnJ@Xl°Vnb@bU@WbKUX@VmKUX"],
                        encodeOffsets: [[116652, 28666]]
                    }
                }, {
                    type: "Feature",
                    id: "3601",
                    properties: {
                        name: "南昌市",
                        cp: [116.0046, 28.6633],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@X@m@VIUW@UKVbLlV@VVbUlUnLnl@bVL@V°UL@V°@Vln_Ġºn@knKnLVU@VkĊ¥Vk@U»UaUÅLUalmkklWn@VUVIlm@mXn@VmkVa@KXIVUWVw²@m@U@VK@k@WUa@a@aU@IUW@@bUJmbUU@kkVmUaWwkbmLUVUnlWbUbklmLakbUaW@U@VbkVWVUUUVUx@U`UI@maULamb@lwJWUVXLlUVmL@bUK@aUnUam@UUmJ@VnX@`UXVVb@bX@W¦nJUbUmVVbXb@lVUnVlVUUkLmUUVWl@bX@VnV@X¤VUVLllUU@@x¼VV@V"],
                        encodeOffsets: [[118249, 29700]]
                    }
                }, {
                    type: "Feature",
                    id: "3602",
                    properties: {
                        name: "景德镇市",
                        cp: [117.334, 29.3225],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VVX@VbmzxUlU@mbmL@V²xVbUVVblbX@VkVykValKVI@bn@n`lVWnX@lL@WKnVIVa@¯nK@alIXJVIVWUwn@nUnK@alI@a@anKm_aW@UWmIUwmmK@£UUmUUlwwW@km@kWaXaV@VnVKnXlK@aUK@UnwWUnmIUW@¯mUXI@alJV_n@m±@U@kkKUlm@XamJ@UVUkmI¯JmamVXL@VUkV@xX@`k_UVmJUXW¼mL@bU@UllX@VV@bVV@bnJUnlx@nmb@lW@zUnIlx@WbVV@bVJV@UxV@@X@VkLVôÒn@@b@`VX@J"],
                        encodeOffsets: [[119903, 30409]]
                    }
                }, {
                    type: "Feature",
                    id: "3603",
                    properties: {
                        name: "萍乡市",
                        cp: [113.9282, 27.4823],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VWnL@UVWLXaV@@ama¯Uk@WmInW@klKVwnLVKUkVW@UlUnVnIVWl@nXlK@bX@laVan@VnwWm@KÈ¹VK¯m@kmU@¥kIğ@WKU¥@V_VW@_K@aXKVL@Ul»mWLkU@amkJm@kmU@@a@UmakwU@Xl@VXk`UIW¼kWWX@@lxV¦XlW@Ubn@mUkL@UmJ¯UkUWVUaUlm@UXWlnUJ@LmLUnXll@bUVUUmVUn@¦xlnn@VÆÈU°kbVVxllnL@VnVVUl@VanL"],
                        encodeOffsets: [[116652, 28666]]
                    }
                }, {
                    type: "Feature",
                    id: "3606",
                    properties: {
                        name: "鹰潭市",
                        cp: [117.0813, 28.2349],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@XV@nlL@lUnm@Ln@@VlV@@VV@nwVI@VVlx@bknlbV@nmnUVJ_²VxVLw@m¯@ÝXImnUWaUwkL@wVKlKXmw@±@UKnUlLaKlUlÇXkmaUw@U@a@UUkwUJ@zWJw@WbkVWUL@VmUklUaWakb£kJ@nmlnlL@nL@¦mJ@wU@mXkJmbK@bUL@VVn@`kXW@Xk@@lm@UX@V@blÜUXVWLXJ@nmb@V@l"],
                        encodeOffsets: [[119599, 29025]]
                    }
                }, {
                    type: "Feature",
                    id: "3605",
                    properties: {
                        name: "新余市",
                        cp: [114.95, 27.8174],
                        childNum: 2
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@m@@WULUKWwÅ»ókakkWK@bUVUIUamWUbULa@KUa@mJUbmUXUmUamImakKmLUbVUam@@UL@KKmUUkL@`mIUb@U@V@bVl@b¼UmL¦mxUaUUVk@¦VWbXVLXKlbXnmx@lmVnb@XKxl@XUbnKn@WaXIWnal@Vb@XmlV@U@bXbLVxn@VaLVWVLXUb°@VW@aVIkK@UmVmkUÑVJnalLVUVJXbVkVJXUlblUXJVI°JnI"],
                        encodeOffsets: [[118182, 28542]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/ji_lin_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "2224",
                    properties: {
                        name: "延边朝鲜族自治州",
                        cp: [129.397, 43.2587],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Wxĵm@ó¤VX@@xÜ¼ƨ²xWxVV@XVbWXllaÞU°Ċ@ô¼LôÝWanV¥Ñnĉ°¥ÅX¥°¯@w°w@»°k£°mÈŹmÈbÆŎ¦K°z@kxl¦UbU¤klVKŤÞȰ@@bV@nVVUlÞ¦lUllVlU°ÑU¯V°wbXxl@V²@nô¼ó°kmVk²ĕw@wVÞÞ@@Ġö»¯@bnb°mÞ¯°V°ÈJmX¥mamUÅUlaU¯@wKkl±n@@wkÝVUUl±¯I¯bal@kLmakb@ġŹé°Þb°ékLmwXaÅb@bVlbVbÒVbUbUUanwakbVUVak¯ULmxV°UxnôŻX@JXklbkbĉabWU@kWUU¯@@klm@@Å@awWXlKkI@WbUaVIUanU@ĕ¯KmUnWUwm@£ċèkUmbUmm@@nkJUalwk@@nmWUan_óaWmnw±KIwl@UmI@an@@mlUÅmV_KUk@U`@_KUmU@U¯mmb¯@kbImV¯LkbKÛ@ÇnɱJóaÝĢkb@xÒÇll@²VÆUVVUÇ°XóxlV¯lV@bV@nx@¤@șŎnxV¼knJnKX°¦UlnVbUbÆVnÞWVX¦llb@l°VJôÒnLVbbX"],
                        encodeOffsets: [[131086, 44798]]
                    }
                }, {
                    type: "Feature",
                    id: "2202",
                    properties: {
                        name: "吉林市",
                        cp: [126.8372, 43.6047],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ôlzaÈV°K@mLWlnVxUVÈ@ÝĬUÈnôLa²VmĀkV@ĠĊnU@bV@b@nl°UVnÞaôJ@bV¦mlkbmVXx¯@VxmnbbÈKV@bÈLwĠyônmnbÜ@nnVx@n²KJ@kal@nxÞULź±Vwkw¯LWWUkŎīVww°yVĕ°wÈVlkÛ»@wW@Uô£@nĶXwWaUamKóÑUI¯@kakkW¥XUmÝÅUVaUamVk¥W¯LmIlmU»mwȚō@£kJUÇk@am¯y¯UVwa@wġx¦K¯X°Ċ¯¦U°ċWULÅa±b¯@UkÅWmVkIUlóċ¹`óIlXWXxmbULÝbƧ@x¯bÈl@x¯zaÝ¤@nmVWb²bmn¯J¯Ò@n"],
                        encodeOffsets: [[128701, 44303]]
                    }
                }, {
                    type: "Feature",
                    id: "2208",
                    properties: {
                        name: "白城市",
                        cp: [123.0029, 45.2637],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@óǩŁ@WlwUaƑwÛÅÇéĉamKōÇ@IôġVȁÑŹçÝUƧċĉwóóÝ@Ƒ»ğL¯ll²@ƆÅV@¦mÅb@nmlU²VxlUn@VbnWbÇbkÒn@èlnlUÒ°Lx@¼ĉb@ÒUċxÅènLVxÒbÅJ±a@_ÅJÅnVbKlnUÜĊ@UxXVÆnmVJÞ¯VĠwXw°xWLxKV¦ôUwVÝǬóÞÞ¼ÞkVôȘxÞUlVn¦ÞĊa°wb°@bÆwlŤL²`z°@V@@nJVnl@@¥nUmmn@mwnmmUnk@mlwUaLnwn¯°anWakIÇmXwÆamUXUlJXaUUklKUknmÞV@K@VWÞ@VkUwV"],
                        encodeOffsets: [[127350, 46553]]
                    }
                }, {
                    type: "Feature",
                    id: "2207",
                    properties: {
                        name: "松原市",
                        cp: [124.0906, 44.7198],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@źèȂÒUóĢ@JŎÈLnĊbÈêÜÆƒxVbkx@XǪłôkÞ`Wb@n°abKnVw°`_X`W¦ĊIkmVakwKx°UÞbU@ll@°¦VWaÞbxÞI@mVI@VkÅUWK¥nLa@@È@°Æ@nU@KÞalkUwVékUWwkUVkkJk¯@»ókV¯ÆÇI@bĉô¯@ķw¯nmmÅL¯wVUÞy@UówÇLkmm@@UóxkkĉmL¯wVwkWWXmLõm@kÅ±V_ô»ÛÆ¯@VaVaĠVlmğwķUóÝƽ£ÇJkbǫaƽLW@nxÝ¤kzy¯XɅm@VôÇX¯Ė¯ºÝnUnLVlUÔmV"],
                        encodeOffsets: [[126068, 45580]]
                    }
                }, {
                    type: "Feature",
                    id: "2201",
                    properties: {
                        name: "长春市",
                        cp: [125.8154, 44.2584],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@U°xÆKnn°mĸx°@Ċó@aÈJ°ÅUôl@¼l°IllUlVXxlVUêVxkllnÈUVll@Vx²IÞ¤VUlVnIôlÞlwô_bVaĶLXÅÞÇ@K¯@wÛaçn¥¯WXyW¯XwUmmÛ@manómğzxÇK@aUÇLamanUw°@WwnUalnk¥U@aóIÝbUm¯Vmk@@aU@amVğĉ@lUnÿ±UbóKmVÇÞī@ÇVUUwmXkKn@L¯ÇUbyókōè@bn@lÝX@x¯ô@ÆUV_maXm@aóJWxnX@VVnĖVnUJ@nōÆÇ¼V¼kxLklÝw@xx@zV`ÅbmxU±xUnnmknğUbUUb@Å°Üó¼U`Æ²@lönKnXWlXUx°xnKĊllôw@Vn@lnÈKôx@VÝzV"],
                        encodeOffsets: [[128262, 45940]]
                    }
                }, {
                    type: "Feature",
                    id: "2206",
                    properties: {
                        name: "白山市",
                        cp: [127.2217, 42.0941],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ul¦kÒÆ°IlÒU¤ôz¼lJUnÆXVl°@²aÆbVKČXV¯°¥¯ĉ°WL¥Ģw@xbUx°V°znb@ÈlVlI@w@mU@akU°kUôwWÈ¯VUVUÅ±U@kÈkÑw@laÞġUÞ£@ƅKnÑĢ¯@WaUaVUVkkw@a¯@¯ÝVXnW@@WkXmK@xkKUb@bW@Uw¯mmb@WKUbmUbUaWbJĉIVW@Il±LkmUbUm@nkKWa¯n@`UbmaĉL@bÆ@W`L@n¯Xb@kb@xL@VkL±mlUIU¥mL@lÅx@_la@UaV@kmmK£LmKUnÅKVbmXVlèĉUUbmlĢÅ¤Il¯bÇ¦l@ô¼Ģ@x°l¤nal@xb"],
                        encodeOffsets: [[129567, 43262]]
                    }
                }, {
                    type: "Feature",
                    id: "2205",
                    properties: {
                        name: "通化市",
                        cp: [125.9583, 41.8579],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÆlXnĠxĢ°lÈ°K°kXm@¦VbkŤJnÝ¤kVÞVVkÈb°y@wkÇ°awƨ@aÞKVnaWwXWkôJ_ČºôVk»óyV£kÑJÅ¯lÑk¥Va@wkbmk£¯@wġó»@kÈ¥°akJÆ£ġnkVaĊVkçWUnUaÆLVmnLKU±@m@a¯UbmV¯m@_KUaÅWó¹@UanmWak@@wmI@y@mkJVa@UaIkJ@n@Um±kkxmIkbÇm@°bXnV@°ÈmlÞ¼¯XVº¯LmkWWXLmVVlkn@@lnWÆVxbmnm¯lÝaVÈè@¼VbÆ°ÞUVJkxIxIV¤ÒXxmn"],
                        encodeOffsets: [[128273, 43330]]
                    }
                }, {
                    type: "Feature",
                    id: "2203",
                    properties: {
                        name: "四平市",
                        cp: [124.541, 43.4894],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ɇn°WzlyÞ£mwX@ƾKǬblaÈIƾ¤ôÞĸVĠxnmmV²wVnwÆaU_@yw@wÞxlkKlwU»È»ŎÅ@mVIUmmĕUU@mWXwIô@bWnnbU`V@Å°ó@wÞW@km@aŎç@m°Ñ°Inm±aXaUn@mƑU¦@Ç¯aU£aUġ¦ÅÒJōUŻókUÇ@¥¯ak¯mUVak@@aċçÅaUm¦Ý`XbÆ@n`IxĊÞōÞml@Ub@Wl_¯JkÇUÝÆÅb@nllUb¯±a@WĉJġĀ¯Unóm¤xôaVnxôI@xV@bmÆ@lnLmÞ¯ÞxVb¯þ"],
                        encodeOffsets: [[126293, 45124]]
                    }
                }, {
                    type: "Feature",
                    id: "2204",
                    properties: {
                        name: "辽源市",
                        cp: [125.343, 42.7643],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@żôŎVIÆÑĢ¥VbV¤°bÈ@V¥ƒÞ£lÇUUUÝlÞ£mţIlUa@¥nlW¯L¯kÇġ¯ğwWmÅk¯UVUbWlXlmnbUx¯xVVknlUbVÇKUb@VnbmlnzUº±bmJUbWÈnèmÒ@X`WL"],
                        encodeOffsets: [[127879, 44168]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/liao_ning_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "2102",
                    properties: {
                        name: "大连市",
                        cp: [122.2229, 39.4409],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@IÞmVk@wXWÜbnwlLnU@nLlbXW@awnbl@XLa@Ċ¥@LULnJ@xVnmV@VXXV@VJkn@VÜKXXôJlbxl@IVbnJVLUbnlnVwJVU@XUaUUlwn@°nVKnV°_VJwl@nwlVIXWlIVVnK@IWmkIVaVU@WÈUlmU@UWUalkXġŻ@kI»mmakUmĉUŁV»²ġVĕ@aUU؍IɃ`ȃ@kw@Umwĉ@WķÑIĉÇbÝLkymbIwÇmÛbmbU¯ÜõÈkÆVbŎxnXVÆnǪ¦b¤UxÝnĉÒmĊVÈ¤ÈbÆ¼ĀÆÆÞźbVVbX°²¤"],
                        encodeOffsets: [[124786, 41102]]
                    }
                }, {
                    type: "Feature",
                    id: "2113",
                    properties: {
                        name: "朝阳市",
                        cp: [120.0696, 41.4899],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@na@UVI@mÑWkaV¥UI@wl@aÈbm@wVak@@K@k@a@UUmUUalmU@KÇUÅ±¯@±kUKVkUaaU@¥m@@¯k@WLUmkn@mmIkm@amU@wVmkU@Klk@UmaXIWWULaULVbmk@UUmUk±_Uym@mbkImaX¯WWxWKzU@WkJWwkV@Um@UbVVVVXb@VWX@W@Vkb@VnUK±aUUlwXÇWKknU@mmUkLUVVUUVUawbkKmwnIkJ@nmb`kmVkLWwUm@UUUK@UmaUa@UUaWK@mU¯Wkk¯VmUUxVXUVmL¯ymXkWUbmXUKVknWx¯JVnkLl@VVxnxlĀVL²WlXl@bÝVUn@bnlÜaXblIVl@@È¦@VmbXV@@xVVnUn@`°@VnXU@K@VV@VmbnVn@ln@bx°Ub@bLV`ÅnW@@lUnnWVU@Vbkl@Xl`XxVUblkX@°¦VUVVbUlkV@UbVbkLUxmJkX@bbxVKÆlXXbnnala@Uk@UVVklKVUXKVU°KVan@VUnLKVLWVaU_@mmUXa@mwXwVkVWXkk@k@klm@wXKl@U@KVUUUVaUV@alLxUx@b°°VnnVxlIXJmxLUVlV@bnX@VbaVx@XJ@bn@VVXÈl@llX@lUVô°°@ÞVbn@Vk@VW"],
                        encodeOffsets: [[123919, 43262]]
                    }
                }, {
                    type: "Feature",
                    id: "2106",
                    properties: {
                        name: "丹东市",
                        cp: [124.541, 40.4242],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lzXJU@²x@@V@bUVmKUn°n@lnVKnV@n@VlV°WbXn@VzJ@¦@bkbbUl@bkbJ¯zWULWbklVnb¦VJ@K°Ukl@@WbVn°@Vm²UnX`UÜLXmVXlKVbUVVnUbnX@VUL@lUbWx@²kl`n@Vlb@nUVWVLVU@aV@²bl@ÈmxWXVÈUJVl@laWnXKÈkÈ@Va°bÆm@XV°IVV°UnalVUn@UwVU@@VVJI@bl@XK@wWmXUUVbkJVXnJVI@mknwlKXL@`l@VI@UUaVKÞnaVm@aÇ£XWU@aÇUU@mbkKm£@WWL@@Kk@klUbWKUkUU¯UõÛmUUaVUU@WU_W@kVkJ_WKkV@bUL¯¯±mk¯ġğÑ@UmwKUaka@am¥ÝIUWmk@wmţLKʝbȗKWĢklVbX@VVknÇV@XUVUblJXn@J"],
                        encodeOffsets: [[126372, 40967]]
                    }
                }, {
                    type: "Feature",
                    id: "2112",
                    properties: {
                        name: "铁岭市",
                        cp: [124.2773, 42.7423],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XJm@¯mXUlnVbUJU@bV@UJWL@VXLmJVbkXlJXxVL@b@V@n@b@`Vbk@lxknV@VVV@bUL@bV@@bVK@VXLWLXJ@LV@nbWJ@IUVx@LVJUXVxVx@VV@@LXJWL@VU@@L@VnL@bVVmVX@@VVInJmbnLWVnVULVVU@VVmX@@JVzl@nVVKVXÞ@mk_lmUUWV_nJlUÞÑÞVVUVVLUVJ@IVna@@KV@XwWknwnKlalUwaĉÝwJl_@aUaKUUU@WU@WXUÆ@@UVK@n@UnVVblK@bllb@bbW@Xbl@UlnLl°°b¦nKlVnIV@UWU@WXkw@am@nm@aVw@I@KUaVIm±XÑlknJVnVJaX_VaUaVKmwnkmmn@lU@U@mnaXlKUmUIVmklaUK@UlUVUW@UkVma@UUU@JmUU@@bmbKWV¯XUKm@ka@UVKVk@aUKmLkKUUÝUmbXbÇJ@k@WU_@m@klm@UXKVaUI@KWUXaÇWkaWUkWUL±U@lUU@UJI@V¯JmIm@@aU@Uwa@UV@VkIV¯aUkWkb@bVL@@VVVUXW@Ua@@bÝbUVÝ@LmUkVUbVllLUV@LXWbUXm@U`@kxlnnJlbnIllLXlVlUXmVKnV@L"],
                        encodeOffsets: [[126720, 43572]]
                    }
                }, {
                    type: "Feature",
                    id: "2101",
                    properties: {
                        name: "沈阳市",
                        cp: [123.1238, 42.1216],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ȚĊÜ°bLlÞxUbUn±@ÈnVÆL@xnLlUVbxkImJkn@V±LUxkV@bbKVKnzVl@L°@VaxÞUlbôxVV@@V±bn@llXLöXĶnal@nkVJVI@aU@@aVK@aUUUU@lmkwl@Ua@_@a@m@U@aUKWwkIlWUanIWK@UXKVIU@@aVVIUamVknW°n@WI@KUmULWnkVkUWKkkmJkamIkmlw@V_n@VWXaW@KVUkKUkValUnVK@ÞVUÞa@a@VbX@VWUU@U@UK@ala@IkKmUUa@U@VkkWVwU_@KÜUXbl@V¥XUVmXakÅlUUkIm`UIUJW@UIKmkm@UUJImmU@VUXU`mIUbUK@LJUUl@X@UbJkU@nm@Uam@@aUmLKwmWXUK@kUaÇa@JUIUa@aKVUUXmUy_@lmbkLUKWLX`n@bVL@JXLWX@Vnb@Vm@UbnVmL@V@x@LUbVV@V@LUVl@mb¯U@xU@UVVV@X@VVblJ@bnVKUnx@llnL±¤b@k`VXÆK@kV@¼kl@bWIUl@VmLnbm@@JXXmb"],
                        encodeOffsets: [[125359, 43139]]
                    }
                }, {
                    type: "Feature",
                    id: "2104",
                    properties: {
                        name: "抚顺市",
                        cp: [124.585, 41.8579],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XVl°bUlJ@UVU@bVxV@@bn@nJ°I@UJIVV@V@k²VVKlXXVblÈXWbXV@LVJUbWL@Vkn@l@nV`@X@lÈIWanaÞVVVlLnKVL@bUlUL@Vlbn@VL°WXULna@aV@nV@IVV@VbUnl@VXnKVa@UUnyWkXaaVk@aabnm@_WKXmWanU@alaUl@XJVLVxX@wnKnVlw@V_@a¯¥@UkKWUaUUanK@IaU@WUaVw@klUVyUUVUUÇ@Iôba@mnUma@kXa@UWak@Wal@a@WULmU@U`mIUU`mUk@@UUK±nkJbUam@kwm@@a@UU@Ua@@K@VK@kmKU_UKUUaĉWmkkL@`LnmlkLkbmK@k@Ulmb@b@xUVIUlmVXXxm@JUUk@WUk@akx±@¯x¯UmbKUUVmUU¯UmVVnWkÆlWbUnWVU¦k@WaÛV@LV`UxXllU@@VVbnVlL@J"],
                        encodeOffsets: [[126754, 42992]]
                    }
                }, {
                    type: "Feature",
                    id: "2114",
                    properties: {
                        name: "葫芦岛市",
                        cp: [120.1575, 40.578],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ll°XnV@XLVb@VVbnb@VLVV@VVnXxlKnUl_na@mlImJnxlLaxVbUVVUVUKVlnnV@lmXLÈWkxVV²bVLm@Ula@UX@XW@UWaUUUUVan@V@lUXxlIXV@yXLwXXW°nblJnan@Vz`l²nVVVl@nUaVKbVKnXVaUaVUynXK@kVK@X@m@mLXaLWU¯w@a@UVw¥°ó¯¯y¯UÇ¯»w¯Im¯ÇUUl¯»ţKċÑţķm¯w@mU_ómk¼VnU`±IkbVlnnU¼±Lk`@XWl¦UbmVUxkXVlkbllUVb@bkVmx@XVV@Jb±aULkKWXkWmX¯aUJmIkVm@xU@n"],
                        encodeOffsets: [[122097, 41575]]
                    }
                }, {
                    type: "Feature",
                    id: "2109",
                    properties: {
                        name: "阜新市",
                        cp: [122.0032, 42.2699],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Xnb°lVlnXVJLlVnl@zÆxnK@bblKVLn@@VaVLVK@L@Vl@XVVInVVKVwlUXwlKLVVb@aV@XlUXbVW@nlWnXKV@@V@XUVVLUVV@@bVVV@@ln@VbVUXVIxVanJ@UIVWL@UV@@¤V@nInwWklnIVxlnzUVÇJ¦VVÜLĸUnW@aV_WĊXXaKnkl@nmLa@alUVw²K@UlmnIlJwaVUkmK@wÅKmU@Ç²VmVaÝwkKaÛ¯șĉķ¥ğ¥@kUWkƏīÝ@@akUK@KWIUm¯nU¯JmwUVmIkJÇLm@UImJUU@aW@U@@nUbJabXVWn@UVmX@V@b@l@L@lUb@xnÇabk@@xVJU¦lbXÒ@nUJ@Vmb"],
                        encodeOffsets: [[123919, 43262]]
                    }
                }, {
                    type: "Feature",
                    id: "2107",
                    properties: {
                        name: "锦州市",
                        cp: [121.6626, 41.4294],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nJ@nlmVnXKl@@°n@@¦VbVbUlVL²l°@Æ²ÈV@LVknVbVVnnWVU@XmWUabIVa@mV@X@@bVVnIVJ@nÈKlInJVUnx°IV°mVnXJ@LLlV@b@ÞƐĬXllV@Ġ¦ĸ¦naWW@In@manK@UVkXJ@alk@»lU@ÅLUWl_@a²£Kkm@kwVmULm@akIUa@U@WUUVUaÝ@ğwkmĉ£UW@@bÇL@ma@_mKlXUwKLţÓ@UWw@K@UI@mU@UV¥@°UnJ°@@_KUwW@UnaWUmmI@mķwUaÇLóVĵwÝUUW¯¦Ux@Vb@xV°XKWbK@n@nW@UL@lWLmzUVVbUbmWXXWJbn@Vkl@LlVUn@xnV@bln"],
                        encodeOffsets: [[123694, 42391]]
                    }
                }, {
                    type: "Feature",
                    id: "2103",
                    properties: {
                        name: "鞍山市",
                        cp: [123.0798, 40.6055],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lxĠÞ@bV@@w°Vna@UkV@K@UUUVa@K@w@UnKmUVan@@Uma@UXWWK@IUK@amW_XKVLlKna@kmKVak@VU@VmU@anIÆan@aUVnb@blLV`ÞLlUbnaKn@naVU@¥°IVK@anUUKVaUVak@mJkXUVwkVUUa°U@W@WlkXWlIXUlJlaxIVVXLll@nLV@lLXlKĊz¥maUlkXaVKX°yIla@aVkala@a@¥IUy@WmXa¯kU@U@mmUULkmm@¯VmnLVU@a@U@±w@VWIkymLUUkJWXJkUmxk@xUI¯`mUULm¯m@kxVVbWV@UVIUx@bkVVVxUbVV@V@zJVXUlnk@@lkLlLUU±Jkm@UIUVLUVU@K@UnnV@l@LlaUJ@zn`@nWlIUVUUUV±Ln@nmL@VUVkLVlUxVLVlÅXma@@akLmWUX@JUnVJVkXJ@X@`WXVUVUIlbW@bVUVL@`Un@¦U`@bUV@z@Jm@@XV`LUL¯J@IVKmKÅI@JnWVnLnVxV¤z@bmV@VUV@bUL"],
                        encodeOffsets: [[125123, 42447]]
                    }
                }, {
                    type: "Feature",
                    id: "2105",
                    properties: {
                        name: "本溪市",
                        cp: [124.1455, 41.1987],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lb@VnlnVVUb@VJ@nnJ@bmXUx@xVbkbkWLUxnl@Ul@xWx@nUV@¼UllknkK@bmbnlLVJX@VIVJn_lJVVXUmnU°VVVUnVVLna°V°w²@lwbl@XVl@VVIn@wWWnUVkJVUw@@anaVk@@lnLlalKnkmK@_lKnlĊXVbVVLV`nL@lUL@@L@VbV@@V@bn@lxn@VbalI²mVL@Vl@nV_VVnJV_@nVKV@X@bkXbl@XblylUUk@Xa@UVIlK@UUWVULlm@UUUnKWU@K@UXmXVa@U°KVUUWUk@aUVKkaWkKUknaWa@U@m@mk@aUJk@@_WKkLmxl@nUJmIUWlIUaVWVXn@xWLk@@aJUI@U@UVVxm@UVkmb¯VUU¯JWU@Ån¯aUbÇ@ÇlLmWXkbk@UIÇVUXWwÇnk@±aU@@bUVUKUXmV@kaUm@k_±l@XwVa@kVK@UWmVaUmVUUakLUWWnÛKVW_m±VnU¯@Uma@Xk@l¯V"],
                        encodeOffsets: [[126552, 41839]]
                    }
                }, {
                    type: "Feature",
                    id: "2108",
                    properties: {
                        name: "营口市",
                        cp: [122.4316, 40.4297],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ĊĖÆn¤°Ċ¯ŎWô@xXbwnKl@nX@VUVKmL@VU@UxÝ@VlbxU@VUb@bk`IUlVUnV@@UV@@JnXlK@b@nbÆWUkUKVwUklKVU@UnK@mm²KVUVVVUJXk@mm_@yVIbk@K@kmUm@VLV@VUKVUVJn@l²IVVKklK@kl@kmVUWI@y@UUUVawUUUl@akmmVaUKmIUaJk@wkaóIWWÛL@UlmUIU@WW@UnUUm@wmIVK@Kĉ¦@bWKk@max@bWXkamK@mVkKmxÛaWX@xUlÝnJ"],
                        encodeOffsets: [[124786, 41102]]
                    }
                }, {
                    type: "Feature",
                    id: "2110",
                    properties: {
                        name: "辽阳市",
                        cp: [123.4094, 41.1383],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@`VzWnVUVL@bVbVJ@IÈbVb@lVLXWnxLnKVb@n@Vbn@mV@lIVa@@WkVVI@KVLVanJV_VWUV@nnJVIVn@na@alLlmkVk@»VU@mXwwk@@VmkVwXKllaUa@wVwnW@amI@mUI@VaUUkmm@UkaL@UIĉyLWkkKU@mKk@kWKUUJwkbkIWVkJWXkl@X@X¯VVbUVlUxVWlnI@lUbVUbVLmV@bUL¯J@¦UVmbm@LmbakVÝKU_kK@amaVUbm@ÅbmJ@bVUn@UVl@UbnL"],
                        encodeOffsets: [[125562, 42194]]
                    }
                }, {
                    type: "Feature",
                    id: "2111",
                    properties: {
                        name: "盘锦市",
                        cp: [121.9482, 41.0449],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Vbĸx@nnJVnXmb@VXVxL@`¯@mI¯V@U¦@VV@nJ@V@LXx@VŤÔKLVxWknL@`b@nÈK@a@VXĊ¤nVK@aVU@UnU@ayU£UwmmKXUm@IÆJnLUL@J°IVKKU_@Wn@@I@yVU@aV_@¥Vm@_UKUV@aXkaVJVUUXW@_@WWIUlUIVm@IVW@IU@@VU@mUVVkJ_l@aVa@UVwka@UÞVwV@@UnKLVU@UmWk@mLxWa@wóUVUIÇÆĉ¦¯¦¯xʟJ"],
                        encodeOffsets: [[124392, 41822]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/nei_meng_gu_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "1507",
                    properties: {
                        name: "呼伦贝尔市",
                        cp: [120.8057, 50.2185],
                        childNum: 13
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@m@Łkklô@£kJ°ýɅķÑó¤ğLĉÅlÇğŁW¯¯ƥóÿlwkţÈéÝƛó°ÞÅxV¤ĉĖWƒ¯lȭţυ̃ɱÿķƅˋğɱřÝţϙȍƧĊţ@¯kWKUKm¹Å@ķJU@ƧÑƧō¥˹Ɔ@L@ÞVLn@VōČWJX¦@JŻbU@ţÞmVU@ȁýóbkWWLÅ¯UWġkmó±UŹôV¼ƽ¼ł̥ĖƽǬʉxĉŻȗKΕ̛ʵƨʟÞ˹»Ƨţ»Ǖō˷Ȍ±ȚʊĠUɾɜɨmÜ֞߼˸ƅȂ¯ǖKˢğÈÒǔnƾŎŐ@Ċbôô̐¼ƒ@ĊôĊÞĀxĖƧL±U°U°ĬƒČ°ÜêɴȂVł°@nxŎèbÈÞȌ΀Ǹl²IlxĊl²ÒmôĖÈlĵºmÈêVþxɛČʉÇĵVmÒÈɆôƐŰǀĊ°ÆǬĮƾbyĊ@ĠƒXǀċm»ôw°Ûk¥Çm¯çkkÇǫţǕéX_ĶWǖīŎaÆĵĸĊ@ȚȘĊLĢĉVÆĉʊÇĕóaU¥ĉ°mkÅ°ġUĠřk°mÑČÿÛƒWĸ£ʠÆxÈÞŎÞ»ʈ²ĊÇČalÒ°Ť±ĸzĊKÈ²m¤Ŏ@Ò°¼nyȂUźīǖƳÈē°@ÝĶ@Èkl¥ÇçkxkJXÇUÅ@£k»óƿīÛ@lÅJl¥óý@¯ƽġÆÅanċ°é¯¹"],
                        encodeOffsets: [[128194, 51014]]
                    }
                }, {
                    type: "Feature",
                    id: "1529",
                    properties: {
                        name: "阿拉善盟",
                        cp: [102.019, 40.1001],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ƏnǟƨʫŹɆÿ°¯ÆV²ˢżÿ@ÝÆŁȰ¯ȀƳĉó@ğky¹@īwl£Ź¯Ŧé@ÇÇxŋĉƩUUŃōLÇĵóÝnóç@ó@ġƱ¥çWUçÆō@éçťKçȭVһƽ̻aW¥ȁ£ʵǊǓƲɳÞǔlżÞmĠóĬȂɲȮ@ÈĢŮźÔnĶŻǠŎȭгŃċóȭţΗÆƑÞƧÅΫóȘǫɱȁġlÛkÇ°ȁÈnõl¯ôÞɛÝkĢóWĊzÇɼʝ@ÇÈķlUČÅÜķnέƒǓKȮŎŎb°ĢǀŌ@ȼôĬmĠğŰōĖƧbЇƧōx@ķó£Ål±ĀƧīXÝġÆêĉK°Ýʇƅ@ΌʉżÅÒϱʈ@˺ƾ֛।࡬ţશóЈèʞU¤Ґ_޸Ƒʠɽ̦ÝɜL׈ɛϜóȂJϚÈ@ǟͪaÞ»Ȯź"],
                        encodeOffsets: [[107764, 42750]]
                    }
                }, {
                    type: "Feature",
                    id: "1525",
                    properties: {
                        name: "锡林郭勒盟",
                        cp: [115.6421, 44.176],
                        childNum: 12
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ʶĬĊIȘƨƨ@ĬÛĢșŤĉĬĀóUÈŚÜènŦƐȤȄłϰUƨťƾÑ܆ğɲƜǔÈèʈƲĊƞƒɆ¯̼V˺Ò˺ȂŤVĢêUÜxĀˌ˘ƨÆ°ѢmÞżU¼ÆlŎ@ĊçŎnÈÒͪŎźĸU°lżwUb°°°V£ÞlĠĉĊLÞɆnźÞn¦ĊaȂīġŃ¯Iĉůl»kÇý¥Ŏ¯én£ġÑÝȭxÇ@Åçķ»óƱŎ¥çWÿmlóa£ÇbyVÅČÇV»ÝU¯KĉýǕċţnġ¯»ÇōUm»ğÑwƏbċÇÅċwˋÈÛÿʉÑ°Łkw@óÇ»ĉw¥VÑŹUmW»ğğǉVÿŤÅźī@ř¯ğnõƐ@ÞÅnŁVǉóJwĊÑkĕÝw¯nk¥ŏaó¦ĉV¦Å`ğÑÑÝ@mwn¯m±@óƒÛKˍƏǓ±UÝa¯lōșkèĬÞn@ŤġŰk°ċx@ĉ`Ƨĕ°@ţÒĉwmĉ@na¥ķnÞĉVóÆókĉķ@ÝkƧƧÛa°Ç@ÝÈUóbÝ¼@ÛÒV°@V¼ˋLÞɅŤŹǠVÞȗŤÇĖÅōbȁƜ"],
                        encodeOffsets: [[113817, 44421]]
                    }
                }, {
                    type: "Feature",
                    id: "1506",
                    properties: {
                        name: "鄂尔多斯市",
                        cp: [108.9734, 39.2487],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ĶL²ĬVłƑkkl@ȎŘWńÈĬȗ¯ºlz@ĠĊôŦôÒĠ°kÞÜn@¤UĸèĸbŌÈXĸLlÒĢxɲÆ¤ÈÛƾJÈÝ°UÅĶ»²VW¯ĸJôbkV@ôlbnĊyÈzVôab@ĸÞUl°yǬ²Ǭm°k±lbn°@È»JXVŎÑÆJ@kLÆl²Ġ²ʊůĊġřóƛÞÅ@mmLUÿóĉƧ@»L@`ČĸmȗÑţů±ĉğl¯ĀwÇçƧŤÛI@±ÜĉǓçō°UwôǫůķƳÅ±bÅ£ÓÇwnÑó@ȁƽ@ÇƧĢón»ŏĕóĊ¯bÅVȯÅImōKULǓ±ÝxċŋV±Āȗ°Źl±Û@WÒȁŚŹНŚÅèŌô¼°ȰɞȂVĊ"],
                        encodeOffsets: [[109542, 39983]]
                    }
                }, {
                    type: "Feature",
                    id: "1504",
                    properties: {
                        name: "赤峰市",
                        cp: [118.6743, 43.2642],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ɲŁĢǉĊwƾōÞĭ°_ŎŃźȹƒUČÿl»¯ôķVÿǬƽɅġÅÑǫ»̐ʟȣU¯wVWÝÈġW»Þ¹mÝƒɛŎÿŎōͩůV¹ōéċóŹÅVVĢǩʈ@Ėċ@ķÛV°¯xÇÅţ¥»°Ûôĉʟ¥WýČ¥wç»±mnÅķ¥ˋVbUÒġ»ÅxğLƧbWĖÅx¦U°ÝVóŰlô²@¥ÜÞÛôV@²±`¦¯Ý@ÅVÒō¼ô¤V²ŹĬÇĊƑţxç¯Lk»ʟlƽýmłÝÆƏ@mö°Ġ@ŚŹĬţÆUĀĠǊĠX¼nźVUÒ¦ĊxÈ¼@ôlx¯łʊÒÜĀˌÇČxÆČÈƐaxÒĠn¼ŎVÈ¼Ģ°ŤmǖČĊþLV°ÞU¼ċÈUÆzÈa¤ôbknXĀè"],
                        encodeOffsets: [[122232, 46328]]
                    }
                }, {
                    type: "Feature",
                    id: "1508",
                    properties: {
                        name: "巴彦淖尔市",
                        cp: [107.5562, 41.3196],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@²@Ζǀݴʶհĸƒ¦Ķ̒Uˌ¼ӾÇƾ¼̨UÞĉƧéÝ»ĕĉƐȍōǪakóó¯a@ôţaV¯Þ¯°@²él¥ĵğťwōxó¯k±Vó@aóbUÇyĉzmkaóU@laóķIX°±Uĵ¼Æ¯VÇÞƽIÇÜÅ£ɱġwkÑķKWŋÇķaķçV@£mÛlÝğ¯Ñťóǿƴȯ°Åł@ÞŻĀˡ±ÅU¯°ɅĀźƧʬmǠƐ"],
                        encodeOffsets: [[107764, 42750]]
                    }
                }, {
                    type: "Feature",
                    id: "1505",
                    properties: {
                        name: "通辽市",
                        cp: [121.4758, 43.9673],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ôƲĸ¼Æè@ÈȮwƾ»ʠĢ¥VÆ@²¥@»ŎÑ¯ĊJŤ£k»ÆÇX¯̼ōī°aX£ôƾȁź¥aôŤĢL°ĸ@Ȯ¼ÈÒʈŚôVXůÆaĠƛÈKķĉôÿ@ğÈĉ»ÇVnĉVwXĠÝ°ČÿĸwV¯¯ǵ±ĉǫÅÅm»²Ż±ƽIm¥ţÈķ@¯ƧJV»ÞUÝç¯UġºU£ţóaÅÅlƧī¯K¯ÞÝğL̑ȍƽ@ōŎōĀƑɜnÞÝºX¼ÇĢÞUX°xVʠȤ̏Ǭ¼ÆÒɆĢǫƾUĀóĸ°k¼ċĀƑVŹȺōń¯`ÝĮƽŎĉxġǊɱłō¦"],
                        encodeOffsets: [[122097, 46379]]
                    }
                }, {
                    type: "Feature",
                    id: "1509",
                    properties: {
                        name: "乌兰察布市",
                        cp: [112.5769, 41.77],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ʠǠÞĸɲȺƒÒȂƛŎaÆÈĕȘţUÝźǟɆţÝˌKU»@U¯ÜÑ@Þ»ôaVÞÇÈ@¯ÜbƨƨÞlĸ@ĊôlôÅĊUÝĸm¦bmĊ@nĊxŤÑ@¯ƨĖĊ_@Čwl¯ȭLÝ»ƽ¯ķůǓ@ÇǓbċÅÅÆwÿĠÇU£óa¥¯aŎğĠţkw°»¯ůlÝĵkÇ»Ý°ɱƧǫaóôɱ»Çk¯ŃóʇŐŻĉǊŻĢ¯ÒÈUl°x°nÒĬónĊğ°ÇŚĉ¦ʵV°°ĬÛżÇJȁńʇʹó˂ƽŎÆţ¦"],
                        encodeOffsets: [[112984, 43763]]
                    }
                }, {
                    type: "Feature",
                    id: "1522",
                    properties: {
                        name: "兴安盟",
                        cp: [121.3879, 46.1426],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÆXnlŎ°@LVLĠþxĊUȮĊnUĠV@żaW¯XIŎġ¥Ý@K@w@K@I˺ŻŎ¦ƨƨÒŎIÆ@X@VºnX°lŎ@ƾĉˤƒȘǷȘÑÝÝÞbVţĸÿŤxÈĖƐêÇKnĸ¥ô@ķÞUnÒl@UÅaīˋ¯ÑƧx@±kXřƐƏÛéVˋ»lō¯ĉÅÇÓǫÞĖġV@ğ»°ĵÇÞǓ¼¯mÛÅŃĉĠÇƾb²çéż¯VğÞml»ōÑVç»V¯¯ĕÆU¯y°k¯¯V»ôÇÑ°a@ŹkġKţóbŹ¦ƽȂóW¤¯bĬ̻ŎW°ÅÈl¼ţ¤ĉI°ōÒ@¼±¦Å@Uġ¦ʟƽ¼ÞĢÒm¤êō°¦Èþlk¼ĊŰ°JĢńȁĬ°żnÇbVÝ¼@¼óĸţ¤@°Ånl"],
                        encodeOffsets: [[122412, 48482]]
                    }
                }, {
                    type: "Feature",
                    id: "1502",
                    properties: {
                        name: "包头市",
                        cp: [110.3467, 41.4899],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@źxżĀǔÆǬVȘĀŤ¥ÅƾōôˁʈͳȂŃÈIÜŻ¯ī¯ōm¯ɱĖ¯ķÒÝIÝ»ÅVlÅôÑġğVmÞnnWçkWÜXƝÆwU»Șĕ£ĉÑğ±±ÅkK@lÅIōÒUWIÇ¼¯@mka²l¯ǫnǫ±¯zkÝVķUôl²ô°ŎwŦxĶĠk¦±ê¯@Ý°U°bóŤ@°bôlôǩbŎƏȎĊĖÞ¼êƨÝĊ"],
                        encodeOffsets: [[112017, 43465]]
                    }
                }, {
                    type: "Feature",
                    id: "1501",
                    properties: {
                        name: "呼和浩特市",
                        cp: [111.4124, 40.4901],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ʶUĊ¥ÈřĠ¯ĉômīÑ¯mwk¯ÇV°ÑżġĊǉǓɱţǓƝóX¯ɛÒóa@nÝÆôƜŚĉĢʉŰĊÒ¤ȗĖV¼ÅxWƞÛlXXèmÝmUnĠĢóÒkÆÆUÞ¼ÞJĸÑ°ɲĕ°Ŏn"],
                        encodeOffsets: [[114098, 42312]]
                    }
                }, {
                    type: "Feature",
                    id: "1503",
                    properties: {
                        name: "乌海市",
                        cp: [106.886, 39.4739],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ș°ÇīXŃŗ@ȍlkƒlUŁ±īĵKō¼VÇôXĸ¯@ťê°źk¤x@Ĭ"],
                        encodeOffsets: [[109317, 40799]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/ning_xia_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "6403",
                    properties: {
                        name: "吴忠市",
                        cp: [106.853, 37.3755],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nLV@VLaÞbn@@l@bUVlUVzVx¤kÞVèXn@nm°a@UÑ@VXnV@VaUVKUUU@@U@@KVa@U²@wXkWnk±lLnU@UmmVKnIVWnI@UK@UK@@UVKXkmWLWUXmlkVwUyVa@ww@aVIK@aVÈwKlLVV@LnVVVnUÜ²°WÈIUÆ@nÞ¼@¦@UÞUVW@UxUxVnbKb¯ÞU`VbǬV@XXÆVVl°InmnUô°¯anam£WVXKXmkôaVU@Vak@@wman@K@UÛUWKXUÇ@UIb@alW@akLUKV@@Ukw±InL@kmwkWmk@JUIůVmnnU@m@UKVKlkUwknVUKmbkI±KkmVkKb@U@aVkUmn`kIlaUK@UUKmbUIÝUa@mUa@am@UUULUK@bmKkbWI@WXwlkXWa@k@kKLVkkK@L@JUVmzUKlwUUnW£XVlKUwVU@aXI@aWaUw@W@_nam@¯UkWVkUWaU@nwmJkUVkWVUmUkJ@ImbUa@@WÅ_mJknmak@@mXaUV@xU@@VUnkV@Vn@`ULUbWLXVW@kbUJ@XW`@nÅĖWJ@m°@xxbnUaw²lÞ°xŤIVVULÛWbbkVVXÆ`UbVL@kx°LlV@VWbJn@bl¤ULV°@lmL@£U@@aUwmKULVxUVVx@@kU@mK¯LÇa¯@"],
                        encodeOffsets: [[108124, 38605]]
                    }
                }, {
                    type: "Feature",
                    id: "6405",
                    properties: {
                        name: "中卫市",
                        cp: [105.4028, 36.9525],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°@Èb°KnL@lV@@UwVUUwVKnLVx@bV@¤@nK@k¯UVKk£@amIXa@UkU¯Klw@UKVaÅ_UWlUaXaÜVKUUţJ¯wÝ±kxVbmaw@wn¯@XIÆĕm@X_@WVIlaX@WUXKVaVK@_Um@lUVm@U@Vw@VUÛwm@@W@ImKUkU@UaaX@wWaUKkw@UVaUamLUnk@»±`¯@kW@UaykbI@VWJkLWUkJwU@n¤mL¯wm@Um²XVWbnV@bmxVkxUblLUV@kVWKU¼kU@mn@JnV@bUnmJUn@k@XlxLVVnKlLVV@@LkKULVbk`WL@lkXW@kV@UÞUlÇXlkaUbmV¯@@L@V@bkb@xlWbbW@±@UJ@IU@mVkVxV@@lIlln@Vm@VUbl@JLmKÛXmVkUKULU`@LĉwKUXlVUl@VbJX¦̼bÞxŎxɜĖĠŎaô@"],
                        encodeOffsets: [[108124, 38605]]
                    }
                }, {
                    type: "Feature",
                    id: "6404",
                    properties: {
                        name: "固原市",
                        cp: [106.1389, 35.9363],
                        childNum: 6
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@Vnn@°xnK£mV@xlIXVlKXI@UJlazVbX@l°@²_@¼mlVnKVbUb@VlxVLXb@xWbVbV@VlnL@J@Xn@ÜxbW@nl@nblmnIÆ`@X@Vbna@aVUUWVk@kbWakbU@VwW@_l@nmn@@alVlk@UkmVak@@aUXaL@¯@KVa@axWI@KnkVaVJn_lJ@X@m@nVanUVb@mXLlJVWnLlaVVaVX@KXVVkVKlknKVa@aVU@KXb@klJUknUm@K@_UW@alIUamaU¯kJma@IUK@U@@UW@@aXLVVJVaXIKlaUkUV@ambUUJkIWJ@wUIV@JU@UwV@@Um@nU`@UkUmVUxWUUV@aÅb@aWXkKUUUUaWK@wnm@IVU@aXwm@UmVaUalk@anKUwlUwlkK@wmaUkmmIk@VmkUUbW@UVUnW@kV@xkVmbVnU@UbUV@ak@kkW@kLW¤@nV@VU@W_UVUU`VLUV@IUVõVULU@UUUJ@wmkUJ@WI@l@bkKkbVVbVbUL@UUJ@Vm@@L@xbVVVLVlVwX@Vb@bmUkbk@@JWIUVÅw@Km@UkWKXxWLÅ@UVUnWK@xkVW@KULwWVXVWzXVVKVXkVV@VUbV@UVV@@LXxVL@VbLnKVLVxXVmb@l"], ["@@@J@aU@LWK¯UUxVVn@ĠLUW@UbUUUa@KUX"]],
                        encodeOffsets: [[[108023, 37052]], [[108541, 36299]]]
                    }
                }, {
                    type: "Feature",
                    id: "6401",
                    properties: {
                        name: "银川市",
                        cp: [106.3586, 38.1775],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@UwVK@UVWÞUbwV@knV@@KU_VK@Kn@W_XWlL@Vn@Ċw@Ula@Wanamī@a»ŋó@aÆÅɲÿUaV_°ÝaLaUmVwVwX@VUVÝ@@¥Ý»@mVÅÇJ¯XÛ±VUmUmU@KUUkKLÇxU@bLUJ@bx@xUbVzUxklWnXVKnXWlUL@V@VL@VL@mJUXmJULnn@VmVkK²mlXWlx±@@VUb@L@@VV@VVULVUbU@WmU@Ò@V¯bmn@V@lVnUnVWXVl@¦VVUn@x@XL@¦lXxVb"],
                        encodeOffsets: [[108563, 39803]]
                    }
                }, {
                    type: "Feature",
                    id: "6402",
                    properties: {
                        name: "石嘴山市",
                        cp: [106.4795, 39.0015],
                        childNum: 2
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@U¯ķó±ÇÛ¯ķmbXb@kb@Vĉxm@@UkKWXX`m@@LULV`@L@mU@lUxaÝVUX@VULxVkLWV@JnVLXVlUV@zlVL@V@bn@lU²WVLlLVbUVxUx@xǀLxôÒkK²VaU@wXa@WÈĉUa@bÈkm@¯"],
                        encodeOffsets: [[109542, 39938]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/qing_hai_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "6328",
                    properties: {
                        name: "海西蒙古族藏族自治州",
                        cp: [94.9768, 37.1118],
                        childNum: 7
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@V£°@laXô±źwô@UlżaÜnKw@Uaa²LmÈLÆÈxlaUawÞmÜbÞUnJ°akôÑkwÝVğwÇ@ÝkkV¯¥@ò»nŤ¥XImw@mVwa@ÅwmLkaWw¥l»kçó»@WÑĉğ@ĉŃUwóřVómĵ»Ý@VǕ¯kÝĊÅk°ÓUklkU±IÇÞk±@ƽJ@UġIk@W¦VÑșÓÅnťKULn¯X@¯mUÛ@WÅmóKknōbxÝ@U@kw@ÿÇLţÝUkmwklċVÅU¦LkUWlÅÑ@a@ÅÑ±UóġŹ¼ÈĉmŻ@@wkwKl¯Uġ@lÇUÓ¯_Waĉ²Åló¼VbknKÇÅ@ƧĢō°Ý@ğWÅxUUm@ÝXÛWULUè¯@mbUaLbUWġxIUJWza¯by@ōÈóLU`ÇXUlUĉV¯nmÛbǕLklUĉVóaġƏbġKţnkbÝmmnÝWȭÈÝXţWókUÇl¯U¯ġUɅĀ@°¯¯VÆnmJ@ĊķnóJUbÝXUlVkL@lVxnnmb@¤Vz`ÞÞŤ@VnÆJV°bUôJkzlkl@²ó@ÆÇ°kĖÇbÛU@lmbXVkzVɅĀXˢlńĬŹ@éÅ@ĉńÆ°ğbUlɜ_°@xŦkbVbƒKĢŤVŎ°@żÈźlĊôKôb@nôxŦÆ@ôŎL@þÆb@nnWˌbÈxInaŎxlU@Ñ²±ğVUĢƨbɲ@Þ¥ôUUķWVô¯ĊWʶnôaŤˁ@£nmnIôǪK°xUXô@Ŧa°mkXÆÞVŎkĊ°ÞLÈôyVaIlwX°UVwĢÑÜKôw@nV@m°nmnÜɞ£VbmXn°ÜÒ@xx@Vb²UlbkxVnJUnVVĊ°KČm°nxÇnn¤±¦@UXVV@lVbmVVÈVxÒ°IbźaČbVw@VLƾÑ@Ŧô¯ĊkôÑ"], ["@@@@nòVaw²bVxxÜaČVô_ĊJIVmLa°@Ŏ¥XlK@klKVbUb@nUĢnaÈ@lmǬ»Ġ¯nmnƨVyÑǖĠ»ɲIn@@ÅĢƳ@¯°ôVKÈbVIÇ¥¯@Ýó@ÑnīWKkk@¥¯ÅaX±VÅw@±Ġ¯@»nWmw@@¯VUUWçKĉa±VkkV¯wx@UJx@bknÇbmÅ@Uw±U¯¦UKm¯I¯ť¼ğĊ@ÇŹÈ¯@Ý»ÇnˡJbÛèÇnÅK¯ġĠŹW¼Ålm@¤n²Ýb@b¯l¯@Å¤W¼nV@x°@Vx@lbUblbX¼WÇ²lU@¼V¦@bÇlVxUbVxÞbVbm¦VV"]],
                        encodeOffsets: [[[100452, 39719]], [[91980, 35742]]]
                    }
                }, {
                    type: "Feature",
                    id: "6327",
                    properties: {
                        name: "玉树藏族自治州",
                        cp: [93.5925, 33.9368],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ɆÿĢV°°VÈklVôŤXÞWȮÇÞXnmÞnlaŤmĢLƐaĢôbĊUVlkǖKÜan°mĊUVVkÈWV_ôKŎÇ@z°abXyVIJĢwVXaKVbna°@VçVKXÜÞWn@VVÆwXĠÞ@Ŏ¯ƨġÆ@ÈLlmUaô»ÆkĊ±Xb°`ÔVkÈĢ@Vk°Llx@xż@ĊnÇź»ôĢ²VÆÒ@@bÆÒXklVKV¥ÆČUklnxlç¥ċç@±m¥wÅJ@VmÈIléÈa°U¥@kÞVK²ÑW°w²ÑK²ñyÆÝVmw»kkWĉJWUVÅwLmÅ@@mwkn¥VÑ»°°@@»¯LlaJônVUÅ¯U@W¯UmÑ¯¯k@WykU@¯wV¥kVwţk»wWÇĉĶçKÞÇaĉbIlU@kwWXU°w±@UKn£WĉKWxkĕVamwXw@Wmnk@aVkbĉLlImmwUÇWxnÝJn@¥ÆkwaXÜĉ¯ÅV¯¤mkx¯kķÜ²VWôŹVU@V£¥@°wn@m@¯@UbUôķmn@ÆÛ@ÇýVaUÇĊV@Çlğ¯xÝŤlVÈÈVx¤VxkK@@x@kVĖġ¥kIWbXŎx@nxÅUW`_@±UaLUxK¯WbkVlbbmLÛÆWIUwWkwÝV@kIéUbUUkV¯Km¯k@UmÝ¯m¯mLÞĉÛUmġ£UxkKm°Lwk@kVmKVUk@¯a¯ĢmóKUUxImlÅnÇbXèVVU°@@xXnm@¼ğ°@²ÆxU²WÆb°@¦llXLmĬ@ÒÞô°@È¦UJÇaLóU¯@°ġƴ@Æ@mɱJğ¼ǕÒUzƧmnmğ°ǫ¼knÇ@bġmmV@VaUaLkl@kLWō¦¯@bKUnJĉIó`ċUÛbwUw±axbñUm@@babÇÅXmƒÝÅôVbÞblUÞVÞU°VUx@UV@l`¼nL@ĊLW¤kXķWġXUVVVķUbVb@°kVVxÈa@Č¦ĊbaźJU@ÈVl@XkôaWĢÞ@laĸUÆb²mÞLĠÞÑôbÒĊaJVbm¦"],
                        encodeOffsets: [[93285, 37030]]
                    }
                }, {
                    type: "Feature",
                    id: "6326",
                    properties: {
                        name: "果洛藏族自治州",
                        cp: [99.3823, 34.0466],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÞVŤÈK@ĀlxV@Þ@wŎalmôLnXÆÜ@nV°@°WmVKŦLÆmȚÔÒUX¥l@ĢJV@ƾI@wW°Ån¥kÅÝVwôÈç@lÑĊĕaJnaÆLVw°kny°UnkÆVČĊll¦Vƾ@@nUźÈÇIn°XwÞKô¦VWV£@£°ókċ±Iam¯Va»ČĉV¥°@mk¥l@Ċm@aUmwX@wÆxmĢ_`VnÆbKVw@@nUVğVmVVöIll@@çÛm£UÇw°@VU¯»m¯JōĖÅLa@»ĉĢ±`U_k`ÇçókXlK@akÝÞ£WċkÝkxJÝ¯ÅwxķxmIÅx@k±J@ýŋ¤UkmV°ÅÝxkwmġnÝVU¦ŤlmóXk¤UKç@mVkK@klī£m¯VUbW¯¼ċb¯ĵam¼mVXm@k¤ÇXÇbU¯J¯¯È@bVXVÒ¤V¼kxÝV@lVWxÛ¦W¯mKnlkU@nƑUĉÝ@ÇºÛċUĉ¥UÞÅz±òL±Ò¯xX±ÒLÝU@lV¦¯ÇbkêÇJnU@ÆIxn¦@²Čè¦è"],
                        encodeOffsets: [[99709, 36130]]
                    }
                }, {
                    type: "Feature",
                    id: "6325",
                    properties: {
                        name: "海南藏族自治州",
                        cp: [100.3711, 35.9418],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Vxń@ĊĠĊXÒ°UƾĕÞm°£nb@@LUUWÛº@nlÆǬĠ£ÞV°UXbVȂǵé@kWanm°@xzK°¯ĠVVkwLnm°kÞxÆa¥@wnĉÆ@_l_VwmĸèŤÅČU@Wn@ÑmKUnğK@°¯UÿV£nmLlUUÛé±óókkmnakV@Ç°óÝXWəÞťIţxmmVÛUVȂÓnWyȁĉkV°WnkĊa¥_K°ÿWna@mU¯wlÝIU¤UXó¥ÝLx¯WmJÇÈŹmV@ƽ@Uk¥ĉkċÅUml¯Vmz¯lUxÅKmbIbĉĖkÒ@ÇèóUxÆÞlm¦Æ¯X@x@²ÝlÈJV²klVl¯ÔlĉÆÞ°lUǖÞ@Ķ¼nUôôŚ"],
                        encodeOffsets: [[101712, 37632]]
                    }
                }, {
                    type: "Feature",
                    id: "6322",
                    properties: {
                        name: "海北藏族自治州",
                        cp: [100.3711, 37.9138],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ōmġxƽUm±LǿþġÔ@kxmWb¯I¯mIUx@bbŹVÇkĵblĉI¯¥Um@Æ¯È@aóUlČ»@w»wXaó°ţçÝkUaV¥ÅbÝw¯lmnKlxUğU¯°Lyw¯@mnXbl@êȁǶUWa¯VÝUğ¤ǫkÅ@mÜ¹XVV@K@ma¯¤ÝnƽĖ¯V@¼ôlèk¼¦xXlbnKÆx@bUx@nnxWJţ¦m¼ñ@°¦lUÞlÈ@ĠxÞUlxÒól¯bmIÝVÛaÝnxVbkbÇwÅÇKn±Kbb@VxLmÛŻbkVó@Źxó²Wkb@¯U¤źĊ@lUX°lÆôUlLXaV°wxUb°xÜôÈKVkÈmlwkÈKwKVUŤĉŎ»»Il¥na°LV»²¯Üy@wĢ°ĸwlwĢw°±_lVk@°bÆ¯z@l_@Ģ±lÅVlUaÞLVnKlnÈ°IllČawÞÑ°xUU@wVkmĠLô»KÞýôaÞ¥ôĀÞmÆmUŎV¥Èl°²°a²¥V@@wamm@Ñn@Æ£żVĠ£@W¯Þl@»@Uk@"],
                        encodeOffsets: [[105087, 37992]]
                    }
                }, {
                    type: "Feature",
                    id: "6323",
                    properties: {
                        name: "黄南藏族自治州",
                        cp: [101.5686, 35.1178],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ôl²ôÜêVVkKmnU¤VĀ¯°@LmĠVnLÈL@alb@al@n°V_XmWUÈamaVIn@naV£óVWU£°axÈ¥@aĊwÈ¹@óağbm@kw@maÆw@In¯mm@UkkWÑÅ@@kċÅçVkÝJÅkVykŹl¥@¯ĢUÜX¥òýmmXÝÅlmU@£WlyXW»Åbl@aI»k@klm@UxUUV¼¯XlaUnķI@x@¯KĉUU`ólČ¯ô@¤ÞJk°xVn@mbX¯ĀL`¦ĉbml¯XUlȂĊXzmȁÔUÜVUnnŤwŦJɚÝXÞW¯ô@ÈlUbmln"],
                        encodeOffsets: [[103984, 36344]]
                    }
                }, {
                    type: "Feature",
                    id: "6321",
                    properties: {
                        name: "海东地区",
                        cp: [102.3706, 36.2988],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@Òb¤ÆI°ôU¼°UnnWx@b¯L@lUUWbXxWlƨnxVUllXVUnL@lȀý²KVnƾĢwV»@mÞ£nÆÞÑmLKUaVżĕWVk²ÆÝ@Xw°@ô@a°wóUUmIkaVmÞwmkny¹VÿƧnÅm£X»naV±Ýw@ab@am¯ĉVó¦kÝWKUU@WanUb@ôÇºĉxb@Ç¦w¯bV¤UXôU¤bmm@UJnbÇbXVWn`¯Umk@@bka@bÇK"],
                        encodeOffsets: [[104108, 37030]]
                    }
                }, {
                    type: "Feature",
                    id: "6301",
                    properties: {
                        name: "西宁市",
                        cp: [101.4038, 36.8207],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@kmKVUWkVkUmwƧXkWwXaVV@k°K@aXwmmV¯V»¯óÅJ£amX@ċVţÆķçnUx`k`@ÅmĊx@¦U¦blVÞŤèô¯Wbx¼@xċ¼kVôbÇ@Å°@nV°¦ĊJkĶalÈźUa@aVwnJ°°JanXlw@ĢÓ"],
                        encodeOffsets: [[104356, 38042]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/shang_hai_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "310230",
                    properties: {
                        name: "崇明县",
                        cp: [121.5637, 31.5383],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@uŏu»GPIV±ÐɃŜ{\\qJmC[W\\t¾ÕjÕpnÃ±Â|ěÔe`² nZzZ~V|B^IpUbU{bs\\a\\OvQKªsMň£RAhQĤlA`GĂA@ĥWĝO"],
                        encodeOffsets: [[124908, 32105]]
                    }
                }, {
                    type: "Feature",
                    id: "310119",
                    properties: {
                        name: "南汇区",
                        cp: [121.8755, 30.954],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@`yĉNǕDwǏ»ÖLxCdJ`HB@LBTD@CPFXANC@@PGBKNECCBB@EBFHEDDDSNKAUNBDMNqf[HcDCCcF@EFGLEBa@ACoCCDDD@LGHD@DJFBBJED@BGAEGGFKIGDBDLBAD@FHBEF@RFDMLE@SGANFFJBANPH@@E@FJjRIACDMDOEKLFD@DbDAJI@AP@BGHFBCBGDCC@DCA@CECGH@FKCEHFJGBFDIHACEDNJDCVFBDCRKRLDLITB@CjNJI^DBCfNVDHDFKHAFGDIICDWBIF@@CFAjFJNJBBHD@CJ@AEFJ@@DH@BFBCPDBMFEQGDIFCNDHIP@HDABFACBJFHEBSZC@DP@@JDBƤ~"],
                        encodeOffsets: [[124854, 31907]]
                    }
                }, {
                    type: "Feature",
                    id: "310120",
                    properties: {
                        name: "奉贤区",
                        cp: [121.5747, 30.8475],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@~T~JjZdDbLXDLCB_J@@FHFZJJIAGH@HGR@BENBLID@@LFCDF\\FpDBDb@FAHKFE@dEDDdC\\GreNMACVMLBTMCCFCEGFAA@DAFDLMHA@OD@BMEWDOC@AS@KGAI_DcKwÕísƝåĆctKbMBQ@EGEBEJ@@MBKL@BJB@FIBGKE@ABG@@FMFCPL@AjCD@ZOFCJIDICIlKJHNGJALH@@FPDCTJDGDBNCn"],
                        encodeOffsets: [[124274, 31722]]
                    }
                }, {
                    type: "Feature",
                    id: "310115",
                    properties: {
                        name: "浦东新区",
                        cp: [121.6928, 31.2561],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@EN@JJLNHjLJNR^GRYVBNZJRBV@PDvbLNDN@LGNER@nCNQNuT_TIVFV\\Z\\XnDrI|[Ʉś²ÏJUHOƣ}CA@IO@@CYDATGFIEDAEBBAGCO@GJMCEDCJRHEFANOCADAEG@@CI@FE@BDIC@AGIAIMiEEB@DE@AJCXJDCJEHGBELGCUCeMAD]CIJiM@DSAKJKCLQDQACUECDMIFCBDJGECHAEIWCK@GLMCCGEACNKCEJG@MMBMC@@CIJUINT@JAJSTEPZZCP"],
                        encodeOffsets: [[124383, 31915]]
                    }
                }, {
                    type: "Feature",
                    id: "310116",
                    properties: {
                        name: "金山区",
                        cp: [121.2657, 30.8112],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@L@BIHFN@@EE@@EFBDGDAADVDD@@EF@CA@IIsRE@GDAF@BF@CV@|FBCHBLCNHAFCADBMDCFZXHILBVEEQA@MWFARJJ@DCX@@TEFBLHAAERE@AJABRPBNK\\BrJ\\VHGND@CNADKDADQjGAGNC@GJ@FCFFHC@JF@@dLBDSFADHVG\\DTEPDDHJALIJkJDJCDIPE@YDCBiK@DONE@EH@BAF@HLJA@EIA@ALKNA@@FIFAFHR@NALadsæąyQY@A±DŉXUVI^BF@FFF@HBJEDFFGFEBSRkVEXGHFBMFIVW@GAEEFOIAIPKABGWEKFSCQLQBSEIBC\\FdBLRR@JGACFDDEF@AWB@LJJYNABBA@CUEGPaO_AIE@MYMFIGAEFECHSAAKAO\\[JEDB@E@MMA@@AGBKMGDFFCDDFEDFJF@NPBAFLHFH@EDDHBADDC@DDCDHHCDDFDABDAD@FEFOBCJ[D@HEDDNJBDDHABJIBBvGLBJAH"],
                        encodeOffsets: [[123901, 31695]]
                    }
                }, {
                    type: "Feature",
                    id: "310118",
                    properties: {
                        name: "青浦区",
                        cp: [121.1751, 31.1909],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@RUNKdOFDJCbRFMLAHPLDN@JGL@@APBWYCKN@TU@SHGCEJIDIJKVIZVNM`iNY@CIE@CA@KBOEGEUFCCSADEIEFCDDDIDDHC@CKIeDCG@IG@DHWFEEGCH@@GO@@O]CNpeEQDBFME[JC]DGF@CKOA@QSB@GB@@GW@@ED@AQIJIAAFE@@DO@CFI@KNG@CDACAFEGKGBEGBDCCAIFCCLIECFI@MBCLDHGNAHSF@DMB@EEKBA@@C]DEICFG@ADBHGFKCDAKKHKD@@FHGAANGEEFCHKCECBCKG@ADKCNE\\[A[I@@mGBDQQEO@BCE@AI[AML@JGACLOAFKEMM@EQKC@CUCBCCBCHEA@FF@@FM@GEAJK@GNF@EXPH@FD@M^@HIADJCFDBER@DK@@DE@CAKFOCCBDHIBCNSB@GFC@GQEEOWFICGDUAEJIDBTAHJHEB@DIF@NE@H|HBDBEH@DKBAHEF@HEEUB@FGFGCCCE@AHOB@NH@PRLVNNFBX@RCPbAvMtBfH@DJF@ELBFA@EH@HNED@FFB@HLC@CJ@@DJ@PIRf@HE@CFF@GPHD@DKE@FFBEFFD@DEFCA@DD@IjCRFBAHFDKD@HF@@PM@H@BlbDJDBFEF@DLXB@HCD@@IFCBIFEJD@FDC@FBALLF@PAACJERACAJCBD@EL@JD"],
                        encodeOffsets: [[124061, 32028]]
                    }
                }, {
                    type: "Feature",
                    id: "310117",
                    properties: {
                        name: "松江区",
                        cp: [121.1984, 31.0268],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@DLDFRN@FNELPBDKHB@INK\\BBJF@ADP@RFCRHA@nJ@B\\[\\MFLDBCH@DLDADFGLEDFFMHBBGH@EC@GLLLCBLDHEAGBCH@DEFJ^C@DB@LAFFA@CNE@GTMBGHKCAD@NEJFDKJDDJEDBCDHAAFLHFHBEBDDCH@LMJ@DEP@@CF@BEJBJIBRC@@FX@@HA@@HTA@RPBDLE@CHD^\\INFAERCfFMo^D@PP@@HG@HDFFXECGH@@JDHfCLJ@DGDCCCJCCEDJFCFTBDDVEHFPFLAB@NBFCFKFC@CHIACNOHWHCAAFIDD@CDAGEI@ACFMF@R@R_@GQED@EGFEQEDE_IAHKAEXCQUOQCUDEN@ZI\\DDmAMHCICDSOC@EG@BKHIGMIBCGOCSF[CUHCGEBCTKA@cE@@IGDEEEDI@@HMDBHiHCRCBCLMB@DMCGH[UqI[AMLOAAQIB@BQFBFGBAKFE@SW@CDI@QIEBNXB@FRUFKAGJYWDENCCADBBEMGKDGAAD{EU@@DAEE@CB@HQFJt@JDBE@@FC@"],
                        encodeOffsets: [[123933, 31687]]
                    }
                }, {
                    type: "Feature",
                    id: "310114",
                    properties: {
                        name: "嘉定区",
                        cp: [121.2437, 31.3625],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@F@LI@IDKJADKIEJICADGACFECCJ@HKCAFOHAJI@aCBEE@ICAEB[GFGCKL@FGEIFADMLCAEJM@ELQECEIG@BE^QKKLQCA@EHBIGQ[GEHOMGGDHKH@JOECFCjCBEFDNCACMBCILGTABDLEEOEIG@GFIMM@CGKFBFCDE@@GEAGEEACIcGaHMFITIHDN[AKF@FS@OA@BK@IHM@KCGOKBENaQIDECcPMLQVFHFB@BFBKLGD@FAJOVGIACQ@A`LPCB@JEF@RU@ANS@@RCL\\HIFpRBFRBBDKLLDADJDGBFDABHBEDNF@DGBBBADKDAHC@\\JJFBDEH[DEFDH\\LX@XLBLbT@DNJLDCEL@VJABJNDHB@HBHYFBAA@GNFB@@AFB@AFABFLFBHFCL@HJBAFBLC@DN@HN"],
                        encodeOffsets: [[124213, 32254]]
                    }
                }, {
                    type: "Feature",
                    id: "310113",
                    properties: {
                        name: "宝山区",
                        cp: [121.4346, 31.4051],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@mÖoÖi½[s[YEUJU`SCIEBCCWJY_LIICDWU@@FaBCJIB[ICH[@@CDKEE@MK@@IMCAEBCH@AMFI@SMGEFGB@FK@BHCAIFJNQD@FEBDFMBKGACG@ECWH@@CDDTOEEBGEK@GC@EE@GPHFR\\JHGA@FDBKRLL]RAFH@FJFDKR@FINBFKDCNEBFJEHK@DLEH\\HFADB@JFFDA@bIJGBEPDBGLI@DDEFBDCHDBIJJFCLIBCL@JKJE@ADHDBHJ@HIBBDFHBBAEIJ@BJFAVL¢"],
                        encodeOffsets: [[124300, 32302]]
                    }
                }, {
                    type: "Feature",
                    id: "310112",
                    properties: {
                        name: "闵行区",
                        cp: [121.4992, 31.0838],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@T@@ELE\\BCMJGJSNEbGdHDJFBJAFIEIFCEWG@@gMENSFCVJFAxR~B@IH@AIiI@GE@FGEAFQPDRiV[\\DFSGMHAXHDOMCJCDETBBNVJJI@DD@ANNNH@FILDDMFBDHNDHKL@XDFGLD@EHGFD@DDB@CDDHCDAEAHG@ABOJ@BIaC@CECLKPFNCDCJBiQEIF@@@OGBMIAEEBMTHF@NKEC@QFEGA@EBCKAACHCLJHEFHHB@AFCAIEACIC@HG@KCCDC[ECEED@KC@KJMAAFQ@GHG@BHIJYIGE@EI@A`KDWCaKcCiY}I}S[CYJM@CFDVPRRVWDFLBBG`JCFRFEFFHC@RF@HQ`Q@E@ENBDJ@HFCB@DCCEJBBGDGXMPBDGJ@DEDELEDMA@DJF@DMZ_jMNYUUJILCJIJDFGH@TSVM@DLXZ"],
                        encodeOffsets: [[124165, 32010]]
                    }
                }, {
                    type: "Feature",
                    id: "310110",
                    properties: {
                        name: "杨浦区",
                        cp: [121.528, 31.2966],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@V@CXJDKJZ`XIDDFADJvSRMDM@mFQHM@KCMKMuaOCU@BDAJSX@HKJGD@PNJCJWAGT@R"],
                        encodeOffsets: [[124402, 32064]]
                    }
                }, {
                    type: "Feature",
                    id: "310107",
                    properties: {
                        name: "普陀区",
                        cp: [121.3879, 31.2602],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@F@@FHDL@HFFAPFCSDC@@XGFDH@BDLHNACEFA@ERCIMJEDBAGL@@EHAFENHHJ\\ONQBQCIBC[MKACKI@GGGH@I_G@CW@[DMHCDIBMTDHN@JNHEH@FJFPKFACSBKHDJNABDMDECAFiDEDFDIPG@GLHCNH"],
                        encodeOffsets: [[124248, 32045]]
                    }
                }, {
                    type: "Feature",
                    id: "310104",
                    properties: {
                        name: "徐汇区",
                        cp: [121.4333, 31.1607],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@RADL\\NCPHFfLJaJ@FWLGMGIK@IFMDOYYFOTSBI@IMSAMSACFIDNDCPWGGBHNET[CU\\QjOCERFBEHF@@HjJBJG@@J"],
                        encodeOffsets: [[124327, 31941]]
                    }
                }, {
                    type: "Feature",
                    id: "310105",
                    properties: {
                        name: "长宁区",
                        cp: [121.3852, 31.2115],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@HFFB@HF@DCAELENSJADCNG\\CX@@D`H@JHGHHJ@BINBFUGEDO[MCKQB}AwQEBUIEDMTNF@hH@FXEDFJEJIB"],
                        encodeOffsets: [[124250, 31987]]
                    }
                }, {
                    type: "Feature",
                    id: "310108",
                    properties: {
                        name: "闸北区",
                        cp: [121.4511, 31.2794],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@CSG@BQGODUPWTOBQAAFMECKBGEMFKEOHADDJARMR[PGI@TEJBNG@ADBFND@JL@@NFFCL@D\\@DG\\JJADI"],
                        encodeOffsets: [[124385, 32068]]
                    }
                }, {
                    type: "Feature",
                    id: "310109",
                    properties: {
                        name: "虹口区",
                        cp: [121.4882, 31.2788],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@bA@E@QHSXBDIMI@OHCLI@GTWBIACQAYIOFGCENBBARSPOXCVHPARH@DT"],
                        encodeOffsets: [[124385, 32068]]
                    }
                }, {
                    type: "Feature",
                    id: "310101",
                    properties: {
                        name: "黄浦区",
                        cp: [121.4868, 31.219],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@NEHFLAFDHDPEAMZUHQQ]IMKJG@EPERABHBGRUCCNGV"],
                        encodeOffsets: [[124379, 31992]]
                    }
                }, {
                    type: "Feature",
                    id: "310103",
                    properties: {
                        name: "卢湾区",
                        cp: [121.4758, 31.2074],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VDHQGABAFQFOH@LIiKKHEXI@IbAFZB"],
                        encodeOffsets: [[124385, 31974]]
                    }
                }, {
                    type: "Feature",
                    id: "310106",
                    properties: {
                        name: "静安区",
                        cp: [121.4484, 31.2286],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@DLLB\\NPGLFHUDMYABEeKEVMAAJ"],
                        encodeOffsets: [[124343, 31979]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/shan_dong_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "3706",
                    properties: {
                        name: "烟台市",
                        cp: [120.7397, 37.5128],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ŤLLllVń²è°xżĢĠÆlÒŤbV¤ĊXnlĢVĊÒÈ°ĊŰÞèL±@џn»VUźċ²»ÆkôVɆkĊŃ²kŤVVwUUVmUa@KkU@mUmmk@UwUkmW@UVIXa@mw@aKULax@Uk@UbWU@yULmK¯@kXVUwm@@JUUknWKUVLUbU@wWykIa@w@mUI@aUVynIWak@@Wbl@@knmK@wnIl°Kna@V¥ğ@ġUķ»¥@UōJX¯¤k@wmI¯k@mwak@@lX@bUJ@VbknWxkLkxlLVlkLmb@bU@bU@VbU`Vb@nL@mbU@VnUVmnU@mm@kIUWVIUKVkkUJUnmL@VmLUaVWaXamU@U@KUUmVUJUVÇwğnm@mXĉV@l¯xnô"],
                        encodeOffsets: [[122446, 38042]]
                    }
                }, {
                    type: "Feature",
                    id: "3713",
                    properties: {
                        name: "临沂市",
                        cp: [118.3118, 35.2936],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@bXll@zlV@lXXmkbVVlU@Vn@@Vmb@XKVXWJ@XXl@ÈbVLUl`@XXV@VVUxVbUxVb¦@WnXVJ@bnVUzl@°ÆxUKlU@mUUnUlUVWVUnVV@XX°V@Vll@VkaXVl@Ux@bmbXLlKlb@b@bUJn@@b@n°x°K@an@@UlLVKVbXb@bVVnK°LVa@UVa@XwKVxnLU°@naV@UWUkWULmVwÝKUUla@aó_@mK@aUU@WUkwVm@aVI°W@@IUw@a±¯@¥kUVUm@awkw@K@kVKk@maXalI@alLWXblaVLVUV@LnK@l@waXaLlnUlLmV@n°J@_VmnIVym£UKmI@WnIVm@anUVmÇ_kġIÅWUXÇm@U@Ý¯Å@@naWIVW@IkK@klKn@naWImk@abkKkLWnWkLWmk_@UaVUKmLUw@mn£WwUmUaóV@UkUm@UKULUwmJUX@WW@XÒzVblJXWXk@UVWKX¤UL@xU@@VUaU@@XmVkLmWkXUyÝLmKXnV@n@lx@bWLnVVn`knULmxUlWLXVb@VK@z¯x¯¼WxKUn@bk@lVVVz"],
                        encodeOffsets: [[120241, 36119]]
                    }
                }, {
                    type: "Feature",
                    id: "3707",
                    properties: {
                        name: "潍坊市",
                        cp: [119.0918, 36.524],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@l@@UK@@L@bX@@VlL@JLUVnX@`ÜXn`V²mJ@bU@@nb@l°xnnĸVÆ°@Ċ£Þ@lWnÑnkʶJmó°w@kk»V@»¥k@V@kw@wVmaÅmaô£ŎXI@mlnKla@mV_UK@kUkw@alWIU»m@WUIl±UUÅUbkJ@a@wUKUaVIÆmXIWaka@m@Ul£XKVw@UIJUkmJVkU@aWKImV@UxmL@bX`WXU@U`ÇkUak@@°UblXkmLUKmL@VULóVk@@Vlbn@Ub@ċaUJUbIUlVLUVVbVKXVlVXU@mb¯@VmKUwLWx@Ub@VUb¯KmLUU@aWaUaULkK@Vm@@b¯L¯w@ma@m@UUU@U¦lJUXVmkb@nmXVWkbIVxUV@VUbWLXVLW`Ux@nk@Vn@x@VkJ@V`mXk@VxV@lVI@VULVUIV`°bVXXxV@VWVnL@xVUb"],
                        encodeOffsets: [[121332, 37840]]
                    }
                }, {
                    type: "Feature",
                    id: "3702",
                    properties: {
                        name: "青岛市",
                        cp: [120.4651, 36.3373],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@nUJXL@blVUnIVlIVJ@UxWLk¤@V@nlbXbWJÅnUJVbVL@x@blIaÆVVVk²VJ@XnV¼JkX@blxlV@VLU`@nkbLkm@nWJōó¤bnÆbUn@xlxU@l@¦@¼Ul¼ĊUnW@nĠmÈxUVIVnUVV@LV@nVWbXbUVbnK@UnKVmVIllUVLUJVXlJ@nnV@nmVUUm@Vna@K@mUaV_UaV@aV@@aanlKUkKklwlKXwlma@UVI@akW@l@bnxl@°nJxl@°£WŎIUÑn»lamô¹Ŏ¥VaUUkmkġWɱIUUŹ`@kk@ĉƨřV¥_Ç@Ĭ¤ÝL¯m¯£ƽóķwUW±ī¯kōaĉĕkğmó°bW@UKkLUaVmz@V@UxVn"],
                        encodeOffsets: [[122389, 36580]]
                    }
                }, {
                    type: "Feature",
                    id: "3717",
                    properties: {
                        name: "菏泽市",
                        cp: [115.6201, 35.2057],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@¥IVUÈmÞ»@UlU@Un@VW@UVmkk@aVUUKVÝ@UVknK@UV@VVnIV@wnmwmKXaWaXI@UV@Vy²blkVKkamU@kb@Um@VmUkmKmkXKWwkU@Ul@UnK@UVUUmKXwUVLwKU@@Wl@@wUkV¥@@I@W@_V@VWUw@UUa@aaWa@@_mKUwl¯amzmV@WKnU@kWLķaUKbÝVmV@UWÇbÛ@X°UbW@XmVlk²UJUbmLÇxÅWUzl¯Ll@VkKXUbWJ@bU@¯@kbLmKka@l_WXºVbUz@Jn²V@¤lXnV°Ln`WbXLôVlKVUxXnlXLlU@bVV@XJWLUVnVV@@nl°nnVKÈbVXÆJU°VnXVkV@@xVL@Wlb"],
                        encodeOffsets: [[118654, 36726]]
                    }
                }, {
                    type: "Feature",
                    id: "3708",
                    properties: {
                        name: "济宁市",
                        cp: [116.8286, 35.3375],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nam_nKlVLXaIl`_@KVVXI@m@w@@k@Knô@n`VbV@@LL@KVVn@VX@VLJl@VUUU@Uam@UkwKWaXamkJmIUVUÈblaUnV@kVKl@@lXL°kVJ@VÈnVJUX@VLXl@xVLnU@VKV@aIUaV@bĊUxKkVJXUlVUVaI@WUI@KlUnwmWk@WXIWUL@Wna@Um@@UVkUUlanWW@kkU@ykWkaWVUlÝbUU@kJUIU@@JmaókLKÇUUkKWLk@WbkUUabmKn¯°¥V@XwV@VanaVaU_@Wlk@WÈ@VUÈVVÛmaklKÈ¯lLVUX@lK@aX@@kV@VmV@VwnJV_UWUwXam@kW@wVUkKVIUUVmU@UV@IVK@aUL@aV@LmUKmx@ômLkUWJ@nXmlUxUL@VknVUU@VL`Ub±LkV@kUKÇbÛ@UWó_mJ@Wk@@X@VLxUKVWxLVnUV@VmL@Vk@VlVXxWLnlLnVlUnn@@VlaV@nlbULkl±aUzU@@VWJXbWbnLnxm@xUmJUUU@@VmLUl@VUÞVLUV@bllUn@VUXm@@VkV@VÝ¼ÇnUVJ@¦nnlnVlL@Þb°KVV"],
                        encodeOffsets: [[118834, 36844]]
                    }
                }, {
                    type: "Feature",
                    id: "3714",
                    properties: {
                        name: "德州市",
                        cp: [116.6858, 37.2107],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@¤@VmbVXnVVbVJX@ll@zlVInl@@bVxUbĠl@ÈblaIxXVWb@L@nULWVXXWWLnL@`@LUVVL@lVnJU@UUkanVôôb°¼VÞXIÜbČabôWXÞWÈzÆmnLVJ°ÈnlV²lbnW@@UUVmnwmkkKWkla@mVIUKUaaUwmnJU@@amIk@@bVlkX@mmUklUUa@_UaUUV@wwWkXmW@I@WUaÝU@UXaWUU@UUVW@UUUWUn¥nUVa@m@k@alU@wkLWa@UUm@@wnmUwla@anKn_@alK@Ý_@@WUUUmlkaIyU@UwU_Wa¯yU_mWUwkImm@InWWUk@@UVWVkW¯U@VL@b¯b@l±¦@VV@lUbV@kxVnUl¼XV@b@lV@nIWxnb@UULxÅxm¯aUwU@mUÅVÝKULm@bmKUXó@"],
                        encodeOffsets: [[118542, 37801]]
                    }
                }, {
                    type: "Feature",
                    id: "3716",
                    properties: {
                        name: "滨州市",
                        cp: [117.8174, 37.4963],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Vb@`bVkVlnV@nlWUk@al@nJ@bV@InmVxbVbVLUJ@nkblXlLnlmxnUV@V@mXnlbĸ@nnVxb@lnXV@UJ@nVxxnxVbÆVn¯ƒĕ@@wÈçUÇlķVIb@Çmk@¥k@UkUK@aWakUóJW_UW@wkkWK@U@K@XUUkmUUalKXala@U@kkWlkÈl@kVmVIVmU_awnwVW@wwU@wU£wkJWIyUI±bkVUJ@nmVUklXmx@lnbWkVUkLWxkKUUmUkbJ±LÇxUKmkUmkkWamUaVkJÆ_²KĠ@UW@wU¥nUWwK@aÝUkÅVaVK@akLW¯I@bnbVx¯JWñWbUL@nV@VmbkUUV@IÇak@@bWak@WJUJWL@bXV@@VJlb@zUlUUImnbVmz@°UV@VbV@@V@L@xLmKUnmJVXJ@VkLW@UVUL@b"],
                        encodeOffsets: [[120083, 38442]]
                    }
                }, {
                    type: "Feature",
                    id: "3715",
                    properties: {
                        name: "聊城市",
                        cp: [115.9167, 36.4032],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ô@VWnLan@VKÞLÆUnVV@xVbn°ÆwwKVV@maXwmJU@@k@aWUk»VUmlw@UVa@kUU@²¥@k°a@aK@UU@mmm@ówÑ±¥¯@@wKmwI¥kU¯UmakJmIUaVkKUkm@VUUaU@UaKUK¯@wUVUIUKVwk¥wbV@xn@lWnXxlL@`XlJX¦l°XxW¦@¦Uln@@@Um@@VXVmx@¯bllUnUJ@VULVn@bxVVL@bVlnVVblVÈnVlIVJLôlJ@xl²"],
                        encodeOffsets: [[118542, 37801]]
                    }
                }, {
                    type: "Feature",
                    id: "3705",
                    properties: {
                        name: "东营市",
                        cp: [118.7073, 37.5513],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ͬUǪlô@°Uw°ōĠ¯»Ģç»XÇ@wwƑaÇkwVƑ¯@ÅķUmm¯w@ka@mV@@anIU±m_ÛW@_mWVUK@IkK@UW@@a@K@L@Vk@±U@UV@lm@mUU@kLmxV¤@xVx@xUXmxxbV`UnUJnU@lÇkkllX@l@VkbWbkLVbnVVlWV@@L@VXLll@xVXX`ôIlVXb@bVLVll@@¦nlÈ@aUJkĸVÈÇè@x"],
                        encodeOffsets: [[121005, 39066]]
                    }
                }, {
                    type: "Feature",
                    id: "3701",
                    properties: {
                        name: "济南市",
                        cp: [117.1582, 36.8701],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@²¦Òôxn@nn@V°VlXUUX@Vl@XVmX@JnnlJVxnXV`°zXbV`VxV@zJlbkVnVV@X@`@ÞkL@bm`mL@bkbxnVm@xn@VV@XbKl@xkV@b@l@nUbmVm¦XVVV@VUXVVV@XVWb@VÞVVb@X@JnXlWXx@xUVV@aVKVUX@lK@UIUWnIVmnLK@w@K@UU@a@UVU@¯nyUmanVJVVk@ykaIU@@WU@aXKIVXIl@Xb@al@Èb@JVUlVna@UmU@VKXaòX°IUwma@aU@UU@wVW@Ñw@aI±`kbUkwUmJ@UkmÇUUkmKknUV@mJUkaWka@KmKkULmyXa¯_@WmImmbLmUkVUbUVJbUkkWJkUlIUmkLlK@knaVmkI@mWaLUKUU@@VmLUVLWK@UUUWUkkVmx@Vl¦"],
                        encodeOffsets: [[119014, 37041]]
                    }
                }, {
                    type: "Feature",
                    id: "3709",
                    properties: {
                        name: "泰安市",
                        cp: [117.0264, 36.0516],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@n¼WnxL@x°@¥Uk@nwlUVlXVV@VXLKVUnK@UV@VVLKXb@nlJUnmb@lkLKlVnJklVXIllVaIVUValUnVKannnJ@X°`WbnzKlVnL@LbXlbVlnI@VUU@UmV@U@U¥@VmV@@_Ua@m°@@kmUUm@UVmn@nX@@aanJVUVLmlIVJn@nkVLVa@KVmVLXVVL@@U°bn@VaV@@K@aVkbWaXUVymU@aUImWX@¥UaVwUaVwUUU@WW@k_VUKÇa@nmxkV@LVJ@XJUbVkUWVUIlLwĉVaU@VbJ@bUUL@mVUK@wWkK@UVWUIÇm@UUI¯lWK@kk@UL@lmUVkbÇaUVVnJlInWbXbLxVln@VbV@VUV@kIUK@UWm@UU@LK@KU@Uam_ó@m@L@l@@x@nWJUU@L`k_JWbUKkmLn`mb"],
                        encodeOffsets: [[118834, 36844]]
                    }
                }, {
                    type: "Feature",
                    id: "3710",
                    properties: {
                        name: "威海市",
                        cp: [121.9482, 37.1393],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VbUnVVUxĊ¼¼ô@ÞÑ¯WǬLŎUÆW¹UÇō¯ÑÝkţţóġóLł̥Uwm¥kÝmkkKóbÝ@U¦@mb¯LkmJ@xLmn@lk@a@X@lXbmJUzV@bVJ@n@xblJXzxV@VaKVUXLlmVV@In@VxUlW°@nLVK@zXVVal@@VwbVKL@bnx@WbUJ@VnXVlVxl@nnnV@lV@L"],
                        encodeOffsets: [[124842, 38312]]
                    }
                }, {
                    type: "Feature",
                    id: "3711",
                    properties: {
                        name: "日照市",
                        cp: [119.2786, 35.5023],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@UaVUUKVkJVaVIČb@Vam@ka@Ul@UôVK@UnKVLnKlkWVa@¯l@VbÈlV_V@XWW_@anKVwUmVw@@UnyUVblKVLX@aô¯ó¥mÛĊÿÈ¥Þ¹lUī¯Kĉ¼ʟbÇVUUXmakJUnmV@bUnmJ@XnJVLn¤UzmJUn@`¯ImU@nKVkkmKWbb@xk@mL@KUUVUKkbWaXkK@bkJWbnbl@UL@lL@lxx@bnUVlV@¦²°@bVx@J@¯XUJ@bUnlxVX@VV@bL@nô`@bkbVVÞLxnU"],
                        encodeOffsets: [[121883, 36895]]
                    }
                }, {
                    type: "Feature",
                    id: "3703",
                    properties: {
                        name: "淄博市",
                        cp: [118.0371, 36.6064],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nlKV@nVn@@kVU@²VVaU@wmKXU@UUWwUW¯aU_JUVVK@UJU@kUw@UlnWU_@lI@U@wUml@@mVwX_KWUXKVa@UVUUwJlaXWUn@mlanUVWkIV¥V@VVVI@a@akakLWKna@aVwk@WUbUlk@k@U¯UWWU@mUUVUXkVmVVV@nkVLVÅw¯k@WVXbaUl@bV@@b@xkVVXVxkJ@nk@@VLUlVbVXUVVUzVLVbUbVVWVkLmkJ@n±@UxUVVkV@bx@ÒUX@xVVV@°JXlK@bULUblÆÞV@bLXxmV¦V@xXVğ@±LÅ`IUlVbnbXllVnnlVLÈwK²IlanVVVlLwXlKVlUXma@knwWlkVnU@mVIUl²aVJzXJlI"],
                        encodeOffsets: [[121129, 37891]]
                    }
                }, {
                    type: "Feature",
                    id: "3704",
                    properties: {
                        name: "枣庄市",
                        cp: [117.323, 34.8926],
                        childNum: 2
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@yUUUkl@@aVmLXw°»°w@yL@UUaWXKVknwVKlm_UmmUXK@aw@k@mUWmUL@@@£@KbÝV@akwaULmbUKLUU@lm@°mL@nUJVxVXU`mIUxU@UnU@@lW@@bkLW@UVkKÇ°kLlbnUÜÇUUVÇ@@Xkl@XV`UbmbUbU@WxU@¯¦m°nLaVblVXal@XKlLVVÈLKôlnbI@V@VJI@lVVÞaVkXU"],
                        encodeOffsets: [[120241, 36119]]
                    }
                }, {
                    type: "Feature",
                    id: "3712",
                    properties: {
                        name: "莱芜市",
                        cp: [117.6526, 36.2714],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lmnLVlÈVln@VnIVlxVla²_JlUUUVVw²@@mlInlKXUUUVaUaKUVyUUWVUUaVkUK@l@@mlIUwUWlU@w@aU@@LU@Ubm@¯a@V@UKWUUKUn@LUbUKmlm@UIkJnUKUVmIb@b@mWm@Un@VVnnVl@¯@@nVb@`U@Un@¦@V@VUVnV@"],
                        encodeOffsets: [[120173, 37334]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/shan_xi_1_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "6108",
                    properties: {
                        name: "榆林市",
                        cp: [109.8743, 38.205],
                        childNum: 12
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ýVnIW»W@»kUÇLÝU¯¥ÇIUWWÑUWwX¯m@»n@ÜÈķô@a±kČ±wÑmwçċmU»ÆkkVyImĉÿ@Ý¹WnwÇVÅazmmĉ¦ókVmxxU¼VkVm_UlVlk°IVkmJa¦kLmmV@XmKnlUôVXbb@UaÇLğÜÅw£mKnmċwÅ@UkbmaVn@m¯aUJm_k@kWXyl@@kÅamwLUÞmWÅzUKUk±@b@nnKbX¤mzVVxÇn¯@ÒknWVUbkķÈÑWkk@VaU@mUkbÝÅ@Ý¥ÇbkĬXV`kLÇVmalUUanV±nwmkJ@In°KVw¯UnÅ@¥U±bUU±mWbÛKWnUm`UƒVK@bmnmÈÅ¼@VL@xxmŤ°n@VmK²VllKkô@êÜV@VXLlm¦UV°Ș¯²ÿ@¥@ÆĊ²ImĶnnb°bKVĸLlÞ@UȮÜ°IVÞÝÞlx@ķĀWUxèÆ@°XnlĊĖ°mnV²V°ÒÆ¦aÞ@zll@bÞĀl¼nKĊ¼óÈb²±IǪÒ¯ĖV@lxnVlkJlaXwŌĉ@VnlÆĕUÆLèŌŤôxÈlU@xlaUċĕXmIWmnkVVVW_@aÈWUUmk@¯çVm»±W¯n¥VmkXw±ÇVw"],
                        encodeOffsets: [[113592, 39645]]
                    }
                }, {
                    type: "Feature",
                    id: "6106",
                    properties: {
                        name: "延安市",
                        cp: [109.1052, 36.4252],
                        childNum: 13
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@kkÇmImUwVkUU²WmVkm@m`mIĢĕUVa@mXÿVVkyUýĕ@l_UmnWKVkţ¥awğ@@aôWakUma¯¯a±£kxmmxUwÝ@xmUb¯KwóÝ@kmm¹Ub@lklVbmnnVUV@xUknƧJUX@LÇWkwLķƧÅwWJkLkþĉxWzJUnÇk@Ɛk¼ÜÔÈKè@°lÈÆk¦ln@l¼@l¯L°UUVÇ°¹`m¼mXkbUaV@U¯x@¦ÇUUmlmUVmnnmlkw@@¦ÅÇLmx¯Ikl@¦mÆ°VUx¯Lm@JInlmxU²mVbkVbUnÈlKU_WlīÈaÞ¦Æ@ÞlanV@VUbl@XlÇÒĸlVaUXlm@Ñ°ÈmUwUnyW£amL@ma²@lVVLÆynXÝVKnxÆb@lk@WzX@lln`IV°b@nmUnbaVlÆ@ČxmnnL¤ÆxĠÛÈKVb@aWaUókVmnL@WUnnKl¥bnIlU¯JlUkVkn`lUUV»wnwlUôĊ¥nnyÆb"],
                        encodeOffsets: [[113074, 37862]]
                    }
                }, {
                    type: "Feature",
                    id: "6107",
                    properties: {
                        name: "汉中市",
                        cp: [106.886, 33.0139],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lKnb@nlWb°bkxĸwVb@łnlĊ¥L@XlÈVblÈKbakVwôml²`n@nVKlk²xŎ°¦VUJĊw@çnWçÞVkUóÛ@¥kwUmX¯WÑk@UymIUwlUn¥mUk²a°¯V»@ÝVÈÝċÅÅVl»@l@a°±@_kammÅba@m@Å¼KknõĠ@m¯LÅwLVxmb@¼kV@mw¯wVakKW»X±¼¯Vkxb¼W@nx@x±bóakb@ÝmU@ķÓÛLkVUmk¯¤ÝLUlÝ@Ýzx@x°bmX¯aUJW¯k@bÇWwÛwWx@XWlb@VÈUlwLnl°VlUô¦U°¤VUxVXUxlbkVVlI°ÅVlU°m@kÇU¯xUlLUlVL@b°ĠInĠ°ÈnK@xÞa²naUyXUKVkWô¼Èaz°JXUVÇV_JVz@nb"],
                        encodeOffsets: [[109137, 34392]]
                    }
                }, {
                    type: "Feature",
                    id: "6109",
                    properties: {
                        name: "安康市",
                        cp: [109.1162, 32.7722],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@bĊaƨèwôô¼b°aXVÞVUÞ@aXm¥kImx¯¯V@anU@UÇéğL@¯¥V£m@ÝÈbKX°wČÿb@xÈblxÈ¯ĊmÆUVnÈ@ƨÜLĢ¥Źn°VnnKaô_ÈwUaXmnW¯klLXÇō¦ÝaÅVmbğUn¥±wÅéVan¥U»°am¥£Ý@wVw¥nUÑUmmVwmķIÅaóVWxkblb@ból@ğÒĉ¤ċX¯XxkÇ@óÆÅx@xķ_kmÝÇ£kblb@`¯²@bk@k¼ÆUČÆÞÇÞU@U¼¯°±bVlnm¦kVVxnJVz@lÒXW°nVlx@¦ôÜVUlÝXèm@è"],
                        encodeOffsets: [[110644, 34521]]
                    }
                }, {
                    type: "Feature",
                    id: "6110",
                    properties: {
                        name: "商洛市",
                        cp: [109.8083, 33.761],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@²nlôb°aVwnKÞI`°wXôw°VĊ°@ÅÞÆVzÞK@x@aLÅ@b@nLl@lnmnLVwabVVnbU¼V°blbÈ@ĶŦb@nÇ@amIyUI@ĠVmôUVwkwlanJ¯lwó¥@an°J_@nóƒó@£l¥UwmaÑ@Um±V_J£JUW¥¯@_k¯¼mUVUè¯b@wmL»ğVmağI¯¤ċIUWXKĵ¦ķaJUbIlUóVmk@WÅÅÇ@mUÅVnĉÇ°kwÇa@waċĀ¯xWLÇa@ÞnU¤°¦@ĠKÈê@VmV@bU°°nwlJn¦WbÝ@V"],
                        encodeOffsets: [[111454, 34628]]
                    }
                }, {
                    type: "Feature",
                    id: "6103",
                    properties: {
                        name: "宝鸡市",
                        cp: [107.1826, 34.3433],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@£@°Ib@¯°ynŹaUlU£Umĵĉ@@ylUÞ@@£kWU¯WaU£¯ÇV¥@kb¯wn¥ÇkUÇnU@¯±kULm@m±_kónUxlbaÇLkUaÇkW@Kĉ¦km@ŁUaķxlw¯aXak@mmakL@mÛ@¼m@lXV`nKU°°@²¤UÈ@VxmôxKlVV²aVwXlaVlx@UVnÇnk°VVLlkIJÇk¯V@knÆn@lznmlVkzVVVx@Uxz@x±¼VxxUlkb@¼ČkVXlĠkôV²wLUKlwJ@aIV¥Þn¯Ün@nkl²kÆ@°aVbnI@Ťn"],
                        encodeOffsets: [[110408, 35815]]
                    }
                }, {
                    type: "Feature",
                    id: "6105",
                    properties: {
                        name: "渭南市",
                        cp: [109.7864, 35.0299],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@ÈôLxU°Þ@mÈnl¤nUôLwX`@ÞÝLUmLôôbVbnºlnÞ@ôx°LanVwÞ@Vxnwnlw²¤b°°bVnlXbó@bĠ@xb¦ŤVXġ£W¥ƽɽó@ýóƝÝ»£XmƅĊkU@ókťaĵÇ@aka¯UV»maUUabUxmKnkm@kmK@xó@¯n¯KÇ¦@ôÅèlxkx°nƾ¯KU¯WķL@VÝIUbyWbX¼Ç°"],
                        encodeOffsets: [[111589, 35657]]
                    }
                }, {
                    type: "Feature",
                    id: "6104",
                    properties: {
                        name: "咸阳市",
                        cp: [108.4131, 34.8706],
                        childNum: 14
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@IXyĊwlýKlXIVaķ»a£¯aVU@awÈōaL²»VUln°WÈ¯W»XazVaÞJ@U»@¯Ýbğwly@£kÑţ±WÑ@kaIUn@¯ómţUbU¯lÇIÝb@¤Ý@kV@zĊ@ĶnVV¤kVbmź¯z@°a¯J@¤@bUxb@`xUÔ±ºVXWUnUJLĢ¯ÈKlblmÈXŎ°U°LlkÞK@Èxl_°ĶUÒkbl"],
                        encodeOffsets: [[111229, 36394]]
                    }
                }, {
                    type: "Feature",
                    id: "6101",
                    properties: {
                        name: "西安市",
                        cp: [109.1162, 34.2004],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°²@mVVÈÈl¦m°xla@U¦°ÈV¤XbV°lXÞaÈJ°kVaŤVôn°@mVJlb@XÒŤ²lÒ@¤kzĠxÞa@°¼ĸK°XV°Lƽ¯mlwkwÆç@óÈ¥°L°mô@w@aÆK@b@wÝLyÅUÝÆ@ĉ¯¯UóxW¯x_ÝJmLUx¯bóak±mÝUUW¯ba»óóxƧçĉbaĉxIUV¯¥ō±wl"],
                        encodeOffsets: [[110206, 34532]]
                    }
                }, {
                    type: "Feature",
                    id: "6102",
                    properties: {
                        name: "铜川市",
                        cp: [109.0393, 35.1947],
                        childNum: 2
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÆxĸƨKlxÈXK@VWƨIlmV@wVUmUnmUalk@kVaUaóaónKVÞK@ÝW_xóKmVk£ÇmnÝ@¯VwóK@Ç¯XkmVU±¼KbÇŎx@bUV°b¤b¼ĸUb"],
                        encodeOffsets: [[111477, 36192]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/shan_xi_2_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "1409",
                    properties: {
                        name: "忻州市",
                        cp: [112.4561, 38.8971],
                        childNum: 14
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Vx@lnbn¦WlnnUm°²VVVVVnUnºlz@l@J@kXWVXl@La@KULlbnKlLnKLnKÆXn°bVV@bUVl°Un@LnaVJUbW@UX²l@ČwlVVIWnkÆa°anVKn°UW¯@aVUVk@Un@aV@ValwUanmWUk@WVUUanaVwnLVl°@nk@mVU@UVK@wLVKVU@K@UUKVUV@@bnLaVaôlIXmlKX_°KVV@bVV@zV`kblIVUlL@bnV@VĊllVlIXW@kaU²blKVnIlJalbXXlWVn°JnnL@l@XlJlaX@XW²@l_VmnKUblU@mnkVK¯@U@ma@kX¥VmakkLa@a@WIUUVXWWnk@a°a@kkm@kUUmJm@WUUUIk`m@VkaWWkXKmXk¯@WKLkak@±bw@aa@aka@ma¯@LKÇÅkKWbkmġ±ÅULUKVVkm¯LUVVbUwUW¯bmULxWJ@klmkUm@@KnwVkVK@akw@@a¯bKknVUIb¯mmbk@UbmKUL@xUU@klmLUlVXIVVVUVUU`mLXVWbXnW`Å²°xmxU@mĉwU@mbU@UmbkVW¦kJ@X@`¯Im@UlUVVnb@bWJXnmbJUUUUa@UamIkax@@x@b"],
                        encodeOffsets: [[113614, 39657]]
                    }
                }, {
                    type: "Feature",
                    id: "1411",
                    properties: {
                        name: "吕梁市",
                        cp: [111.3574, 37.7325],
                        childNum: 13
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@a@w@wlbnJVb@VbVVVInaWmXI@aaUmVUVkn@°J@_W@lIX¥lUnaVV@naV@xĊnV@wn¯wÆ±X_WmXaWUnKV_VVUUUUWJkUVnKlk¯@@kmKUaÅ±KkU@WmI@WUIlUUmVwXw@UlUVwV@LnbW@anU@UaVkô@l»n@naJnUÈLVaÆUUVmVKV²L@mU_lK@UVWkUa@a@U¯aUaÑóÑUbKk@@ak¯mVaUwVÑkWUmK@UUKmXUWÝwUaLUU@aWJUUU@UaÝU@WL@VKVaVI@WnU@alIVK@kImIkJ@m@@@_K@x@kaW@U@Vmn@UK@mIJUXV¤XXWlkKkkK@XmJVakImJU@ó¯LWKUV@nUVLkxmKkLma@kXKmmLabLmK@V@mXVÆUxX@`nLaV@@VmLUVnLlLb@°²nx@bVUxlb@V¯bUV@zVXVĊXVx@lVn@VnnmU@LlJXVz¯VWVXbV@bmnVUVkÇþÅ@XVxmbUlVUlnW@Xl@VLXÒ@bÞJ°¦Lò@nUb@°X@XbmVUVnb@xx"],
                        encodeOffsets: [[113614, 39657]]
                    }
                }, {
                    type: "Feature",
                    id: "1410",
                    properties: {
                        name: "临汾市",
                        cp: [111.4783, 36.1615],
                        childNum: 17
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nW@@UnLKabKnnWL@lnblKnLlwKVU@mVUXL°KôV@nIlJUbnI@WlLllLXkWWU£VWInJ@VL@nm@UVX@lb@@wL@`@n@V@lw@nVmVXWmwnUla@_lKwVlUn°xVKVXXWlUVVI@K@Kn°KwlVlU@kna@V_WnmUVm@kXml_@mLlKXw°m@_ôJVUV@Xl@UaV@Va°Ilk»VwUkVmwUmmVn@V¯@KUwmK@U¯wUVÝ@mJUnWK@@UnKVa_lykUmKÛnm@x@UUlwVkXW@a@U@@K@kIVnammVakUl@wX@@k¯@VVbml@°UbULmlVbnbÅK±VKVXUJWa@ULWaUU@@U@aWK@UkxUKLUUUJ±UkL@V±kk@kam@UV@l@LWl@n@VVUxLlUUx@VUVU@aIUlL@°mLUbkUUaWUUaUU@aWKLWJ@bUL@VUVVbU@m@a@kmKmnĉlUKXWUblbxmIkU@xWb@lkVxLXmzVV@bklVVUzm@bk@Vx@xlU@lUbVnl@Wxnl@n@UbVmLmb@`X@lUX@@xlnkLWaUJnnWVVn@l@bULVV@lV@XnJVX"],
                        encodeOffsets: [[113063, 37784]]
                    }
                }, {
                    type: "Feature",
                    id: "1407",
                    properties: {
                        name: "晋中市",
                        cp: [112.7747, 37.37],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@lInJlJ@ULkJ@bmV@XUJUbL@UXKV@ÞVbV@VVXI@bVVKVbÞxVXnWVL@VnLVlXÒUVxUb°nl@bl@LVaôÒÒVb°b@VnLnnV@lmn@lbUV@JUVVXkl@lUzmJ@xXklbUnJVUbnUlbV@nlLX@lakV`Ub°@XVJnUL²KlxnI@KV@lbUbVVKnVl@zlm@U@nI@WUaVl@@mVU@XkW@nkVKV_Vwy@knwVa@XalU@Vnml@X@VLKVaÞbnnlJImVKnVVVInVlU@m@mXK@UmyUI@mWUUakamw@wUwmLkakwVmKw@wUam£y@am_W@UU@knmmamU@WUa@knw@UUUUV@nJm@mVUkKVUUUkKmwKULKUImV@lUnnm@mbUK@°bUnmbUmkkWUb@am@UXkK@a±@V@ĉÅVUXVxUVkLWl¯@@bULUlm@@nm`XlWakIkmVUbUL@Vm@kI@@Km@VaXI@W@aU@kUVU_KbJkkÇb@nkKmLwÅW@kVUUVU@WUIJmIXmma@_kyVaUUlkUm@kUx¯Lm@L@LUJUkVWXUWUL¯wVmUkxkL@`bkmVnxXUWUnm@kxU@"],
                        encodeOffsets: [[114087, 37682]]
                    }
                }, {
                    type: "Feature",
                    id: "1408",
                    properties: {
                        name: "运城市",
                        cp: [111.1487, 35.2002],
                        childNum: 13
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VlnJwkaVaXWVLĊknmnLl@@bnV@UaVU@UVK@aXIKXL@bVVVbXVVblVaVnK@¯KVkJ@bVVU@UVwkVKVwUUm@@Xk@K@kVUn@lbl@²l@UlK²VVIVVKVLlw@VXL@b@VV@VXbVK@XbVIUWLU²ÆLmaUankVKVa¯@nkUaU°@n@@kWaUVaXUW@IXKVw@UWU@W@@UUU@mn@`m@UUULkUmJIU@@UK@U@anak_@wmKUwmakVkmKVk¯bw`kwUIÇx¯»ÇaÅmn@@mmUkV@wkKW@kxmLUkĉLÝkxÝw¯lóVUmV@ĀVVX¦W¤kz@`Vx°²ĸ@Ul@xêĸǊ°¤VVlXLWnXxmV@nUl@"],
                        encodeOffsets: [[113232, 36597]]
                    }
                }, {
                    type: "Feature",
                    id: "1402",
                    properties: {
                        name: "大同市",
                        cp: [113.7854, 39.8035],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@²£yl@ČĖ@bĸĢbĸXaKŤnn@ŎôllÈxnVnÞÇV@bnXllL°KbVb@J@b@UxlKXLlKlXk@UlkJlkUVKXUÇVIVm@_nÇLalwVnU@UUwma@aaÝaLmUk@@W@U@@XwVWÝUUUk@@VmLKV»nwUwaUL@`mzJUIVUaUwKUaVIlJôanÑlLVUn@a@VV@@UUwVK°Vn_lJÆLéW@UUUÅ@»lm@aÞIVwXWUUkkm@U@aU@mwU£VWU_kWmXwW_°yUkkK@UÇK@kkUVymóKU@KWIbUak@mJ@bkbmLkUmkVUW¦@lnb@@V°ULml@nkVaVmLUnk`±@XWW@kbÇ¦X¯WxI@xmbmxXlWV@bÅUz@Jb@bÞbU@Wbk@xk@WX¯VÛWÝbÝUkVUU@alI@a@akLWam@U¯UUmÇL@K@aU@¯VUkKmX@`@kJ@nVUb@lbVÆXVWULU`VbkLUV@XWl@bXJ@VbV@Vl"],
                        encodeOffsets: [[115335, 41209]]
                    }
                }, {
                    type: "Feature",
                    id: "1404",
                    properties: {
                        name: "长治市",
                        cp: [112.8625, 36.4746],
                        childNum: 12
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@UkLky@IJVa@mÞaWy@_W@_WXVlUVw@nw°K@mUVamVkU@mmmnLVUmKXaU@IlKVUnK@UmWkX@WV_V@akU@aKWIXyIUVmUnUa@WaXUVKVmkUWVkULU@@VbKbIUm@mbVLxWUUkn±V¯wbÅJUbmLkbmKÅKbVnUbVKUbKUbmLKmbaKkUm@UnnVnxUVlUxl¼k¯JUbU@Vbk@WU@UVóI@`¯nWxkLK@nk`Wn@lUnVnmXU`@mb@lkV@VnklVVUblz@`nbWnnJIVJ@XUVVUV@lÆXxnKlL@maÈllIaLV`UlVV@@b@XJWUb@n@L@lJn@@UVKVaUlnlJXbkWn_@mn@VkVK@a°@XklKVUUwVWUĊÆ@U²@@blLVWn@@bVaXllVnnaVma@¯VLnan@mVm@knUVJ"],
                        encodeOffsets: [[116269, 37637]]
                    }
                }, {
                    type: "Feature",
                    id: "1406",
                    properties: {
                        name: "朔州市",
                        cp: [113.0713, 39.6991],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XXWVXVWnnlnn@èÆ¼@xlVnblVÈUVl@blnLÜĊmUkU@Ua@WI@aXk@WVUlKUaV_VKXWUUÅka@VaU@mlI@@_nWLVl°UV@@b@LÈKVn°V@VnXblK@b@bkJ@bVVlUÞVÞaXÜ°UXWl@wl@XaV@Ýa@aa@IVyÆ@aXUWknwna@wJXw°WÈ¥kI@W@kmKm¯IUmkXWWkabkImJUkL±aVb@lWXkJUkĉk@UmU@aKkVUkJlaU_y@UU@aUU¯LW`kLWnkJóbUbmK@aU@UVVL@VL@UVULK@xUL@VUV@nml¯@UkmKUxmbVbUV@XlXVmnVbkxUbU@bm@@VUlUVb°@VX¯m"],
                        encodeOffsets: [[114615, 40562]]
                    }
                }, {
                    type: "Feature",
                    id: "1405",
                    properties: {
                        name: "晋城市",
                        cp: [112.7856, 35.6342],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lVLbanLnKVaLVaLUVaUmaÆLnLlanKVaÆIa°x²UlmVVXwUKna@VnJaLa@UV@@alUkKVKnkmmVwUkw@@kxWUXW@@mk@aUa@a¯aLkKmwkUm@kL@K@aWIXmVXWkUVakL@UVKw@aUK@UUKmLU@¯nKUwVUIWJUWmka@UXJk@UkmW@kLWKVx@bmI@VUaVU@a¯@UUmVKmX@±`kÝKVxUL±akL@VbLkKmV@XWVUbVXb@lm@@lW@@xklVUbnnmbUlJ@@L@@Vb@WXUlkxVV@wn@ÜmnLlVkz`UbmL@V@XLmVnIÞ@VU°x@VnLxV@LU°"],
                        encodeOffsets: [[115223, 36895]]
                    }
                }, {
                    type: "Feature",
                    id: "1401",
                    properties: {
                        name: "太原市",
                        cp: [112.3352, 37.9413],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@VV@wVKnLVal@na°naVJUlmL°a@b@lx@bULUlmx@Ln@lVknl@XIwKVn°aVXVxUaVU°KnUlUVLKÆV²ĢlnXalLÈÆLKUaVkUanmWUa@WwkUWU¯y¯Ñ@anIl@@aVUmIymULUUVakaU@@LmJkw±LKmVUI@W¯VaU_lkbW@kK@mUkaVmVaUIVmalkW@wnIVy@klkWUUVI@UVkam@knU@mmmK@bblVUX@VkLV`@n±KUULUnVVÅUbÇKmVImbm@k¼ó@Ulb@VmV@bXmaK@UUxkVV@xWUxVnkVVJ@XnJ@XlV²LÆVbnL@l@°"],
                        encodeOffsets: [[114503, 39134]]
                    }
                }, {
                    type: "Feature",
                    id: "1403",
                    properties: {
                        name: "阳泉市",
                        cp: [113.4778, 38.0951],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°@nb@lb@bbb@x²al@lbKXU@mkUWkkmUUVwV@XUW@naVklKXblKnLnLVanImaXKlLaV@U@KUKWalXK@£WKXUV@VUUUVW_V@W@@K@UIWmXUmULnJkImmÝaUbLK@UWk@mnU@kVWb@Ubmx@lzUx`UULml@XWl@UV@nk@UVb@XJm@@Vknyk@zJnUV@bk@mJ@b°Ò°zXVlVXx@bXVmnVbUlVb"],
                        encodeOffsets: [[115864, 39336]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/si_chuan_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "5133",
                    properties: {
                        name: "甘孜藏族自治州",
                        cp: [99.9207, 31.0803],
                        childNum: 18
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@aXam¯wm@±°wUwV@UaVw²KU@UU¥a@£ÞôxKnkmX¥IUÝUwlk°V@ÈKUwlkUyV¹mx²XllÑW»lw°UŎnJl¯°V@wôIVÇnnUllLVÇLô¼XW£@±@¥k_ÇJkUékwXa@Llw²Vxbm¼ÈxlLÈVWÞn¯mÇÑUÝlÛkwlĉmULmwUJç@wkm@ÑlUXÑôġVaUÑ¯@wķÓkbVmnU@@y¯IķKV@¹aé@kmÞU°¥@a¯@anKlblU¥@óğç@Çw@wklaçÝ±k¯±@ğÝUÛmÝ¯w@kb±¯akXWÜkXUÆÇU¤X_ƐwV@¤XUbUIUlÇUkġ@aXČmlUlèUV@mVk¦Vx@¦±¯¯¯anlW¯nÅw@w°KVak£m@klKknÇU»óKīlaUaV£@¯@ÆUVÛÝÇXÇlÓlŹ»WUğJ¯£mxLĵôºXVlUll²bllxónn°ÝU¼mJU¯nV@êĉ°Uĸw@m@¯kmXamÑ¯aUwÝKU¥mÅn¥Wmn¹n±ƑƆÇôXê±ǊnUôlĖkȂVÒ¯¼VnȮ¯ĀnƆĢ@k°V°¯ĢVlkVxm¼X²Ŏ@VxknWÜ°U¯nÆÝ@`ôÝ²ÒÇznmX@xè°K°ÅUČĬóĖÝó¼ÅêÒbmk@V@Òl@nĉÜêx@ĖmlÅJ¯¦óxȭ°Ým¯LĵèĀ@Æl°żX@xmkV@z@°blnÞ°J@bn@Æ¼UVUóóL°X°ÝLxUn°Ĭn@lnL@Æ@nKÆxnUnVInĬmÆnxŎ¼ĊIĢóÞ@ĊƨbUmV¥lkwnLmÅÆ¥XwU@wwUÞ@alUUÅUVkkm°aU°Ó°w°Ub°a²K¯ĕ@ÈbÞĊa»XVm°InĬk¼VbaJô£VĊankůnÜU@anKnĮbÈmÆ»nIé£Ġ"],
                        encodeOffsets: [[103073, 33295]]
                    }
                }, {
                    type: "Feature",
                    id: "5132",
                    properties: {
                        name: "阿坝藏族羌族自治州",
                        cp: [102.4805, 32.4536],
                        childNum: 13
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@l@@þ²I@lVL°wnJ°UĸŎèIlwV°¤nĮ¤ÝlèL@@xlè²ôĊ_ĊġVÈôJżīlbXÆÈVkxÇVn°¦Üb@è@nn@@°UÈ¥WÇ_Uala¯¯UÇk»mVwk»k²°VxlL@¤_@x`ÈĖöb@l²alXa@bnK°¦VK@nnWmx@nUnl@@llĉk°l°UXkmW@Un`kÇLWÛÈVxVVlVk@lIXb@ylXÈWĮWŤzy@mI²J@n°@VJ°aÅ@ŎkVÇkaUwKVwV@nkm@±ôkôĊJ¼InÑm±nIÞXÈĊxĊUÈbÜyÈ£Vkw@kVUVm@a»ÜbÈmUXwÝxUn¥@°ġÅaJVkaW¯Û@W¥UŏĶ@¯kUŃ@aI@mmanwÞW@mw°»Uřk¹±WxVx¯¦U°zţWw@°ÇVÑk¯@y°a£@mnl¼aÝÝakwU±aĉImlĵn@m@kkV¯Ñmĸ°xl@XVÞmlÛÝĉUÅ¥mwÅ¥VaUwXġċaVůÛŹlwU¯Uó±xÛV±¯¯n¯mċLmnĊm@_kJWaXmwUĉK»@mwXÝUÇkKÇw»naUw±kxK@WbxlVêlÈIl`@¦@²X¤Wó»KUÈKkkmVmUÈóJ@x¯Uk°Imō¯VxkX¼Òkk±WwnUºVzklVxLÇ@¯UklVxÞVJW¦nmlLówÝ@¤b¦V@VV±LUxVbU@Vx¯x@²n°xnWbb"],
                        encodeOffsets: [[103073, 33295]]
                    }
                }, {
                    type: "Feature",
                    id: "5134",
                    properties: {
                        name: "凉山彝族自治州",
                        cp: [101.9641, 27.6746],
                        childNum: 17
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ĶóKnw°¤ĠIXV¼kźÔkÈWÞÈÜUVÅ°@@U¤VbkbĬôL¼ÈVlmLlkn@l¤Ub¯L@xÆx°mXmk°b°°²@¥Uwl¥nU@VUkçVnkWċbĢ@lÈVVkJVaVW@£UƏxW`£ÈVVÅlWXÛlW°b²la@°xnÞVÜĠÞ²@l°Þ²èkbl@xÈx@Ġènal£nUÇ²@ÞKnn¤@¼°U¼nVXUbnĠUVbUlV°LX@lVèÜUnK@_yXVyUwmIU»VkÇ¥ÿkkV¯m±n@n¯ÜanVVÆz@bwÜbm@wa@kmk»@a@VUUów@nb°mXmnVbÞVôanwJak£lwLÅnÝ@wl¥IÇÓ@UL¼kVÇÅó¯kVmmw@n_Vn»°LÅ»@éÇçŹīVÇÝ@ÝğUaVÝ¯ķlŭġl@óÞÛċ@¯nkUÓm±IVġUwóKUn±¯Kw»KÝVnl@óxUwţ£ĉUmÅÇÝKÝUlmK£UV@ÞÈW¦Ò@Ĭnny@nÒmV¼@°Vbl@VlnUUwl°a@@llnk°lbnKWĀnUVxU²Åm¦ÛÇÅaUVb@¦m`móXUmmxÅ@±Þnè²U¯»mVm@wU@wÝÝmLa@VÇUkl°¯VlkV¦UmxaULUèVx@kIUxmWV¼¯VmÈ¯UnlÈ@m»ÅVWxÅbÅğW@km@kVV¦mlnn@ōl¦ÅÆxk"],
                        encodeOffsets: [[102466, 28756]]
                    }
                }, {
                    type: "Feature",
                    id: "5107",
                    properties: {
                        name: "绵阳市",
                        cp: [104.7327, 31.8713],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ńlV°@ŐĵVX»ÆUĊÑJw@È»m»£°Kk@ÇnÑÆ@w°JUwnw@wbVb@VlźLUwa»aUklyUUVakwWXwWUxkLmn¥mwkUXlJw@aIk°X¥W²l¥aUIlmkklÈL@m°nlWUaW@V@UaV¥@ak@Çk¹K@aK@kKkÇX@VU@kx±VèkIWwUVUkkKÇ@a@wkml¯@kUWn£WaaVwnaVÝw¯@UaWxnJÅUxUma@L@mbUU±VVnkxUÆVm@kkKW°X@¤ÇUkÆÇnU¦¯kmLVwÅK@UóbÇÆV¦L@±êX¦mVÞkÜÝnWU@k¯wķn°ÒUlln@@ĶmnkĊJ²bVlxÞbÞbk»mn@¤¯bz@l°UÒ¯È@xŤXyV¯°¥Uww²XlºVŚ¯¼nx@XÝmxnb@nJ@b"],
                        encodeOffsets: [[106448, 33694]]
                    }
                }, {
                    type: "Feature",
                    id: "5117",
                    properties: {
                        name: "达州市",
                        cp: [107.6111, 31.333],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Uxn°bnlUnÒÆnn@n¤LnxlUV@Ælx°XXxl`XVWLè±nÈb°b@²x°KÜ¼°ĉV¦lJnU@¦ÞJÞğmLÞ»xUlbVÆannalVÆX@lnŎVmUmaÅXa@aWm@£@wĉJVkkkkmnk@mna@alKJ@ÞwmÅÅ@ambkU@KUġKU@mak¯±a@aĉÑÅaVwXlw±V¥l@@ak@@£mĉÝónWV@nÝÇÇxUmbaVkkk@m@m°ÝýXmakÅī@@mb@@xmnb@mxkWL@¯b@WUXmWWKkbm@kxXmm@LUlxlêóKnUallLlLó°m¯JVUK@xK²Āô¦l°"],
                        encodeOffsets: [[109519, 31917]]
                    }
                }, {
                    type: "Feature",
                    id: "5108",
                    properties: {
                        name: "广元市",
                        cp: [105.6885, 32.2284],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÆLĊx°»Ŧ¦WLÈ@xÞKÜ°ÞnVxÅĀlÒnJ°a@wV¯l@XWknKnwVÈ°XXalX°VI°bWna¥@w°n@yÆ@nkÞ@°¯lJn°IÈlUlXÅ@ķlUV¥VUUÝÞUU@UwJUkĉm@ýlkWUwVwWJk@VUKlUkaVUmLkm@@UIk`@UmlUkV¯ÇXKÝ_mm¯@U`kwml¼±KV¯¯Vk±Vk±kzmaKUnÇ±bk¦±X¦¯WlJ@bxkIWVlxnm¦nlKVwXWxXlxUbVVkzVlb¼bVxŹKUk@Uaa@xmxVx¯Ix@ÅmÒ@Èl¯L¤n¼"],
                        encodeOffsets: [[107146, 33452]]
                    }
                }, {
                    type: "Feature",
                    id: "5118",
                    properties: {
                        name: "雅安市",
                        cp: [102.6672, 29.8938],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ln@xèVInxVKnĊklxkÜVÞÒnÈm°nx@¼ĊLVnxWXblI`@nmĉnKČôÅlUÑmUK²¹@ÇÅVÓÅ¯VýÞWUVmXÆbnwKUÿ@UmmIUb¯¥Uw¯ÇmçmanUm»UUlk¤a¯bVU_WĕmÇÅ±ĢUlUlÛVçkU@W¯KUVkUağVmaVWUmV»¯@»m£mÝL±@ÈmVk¤mb@ô¦kVkamL@b°@b¯¦ÝVn@lêb@ºUĸL°J@zV@nmUlaĸÔ@x°VÒUbóĢÒWkV@Ò"],
                        encodeOffsets: [[104727, 30797]]
                    }
                }, {
                    type: "Feature",
                    id: "5115",
                    properties: {
                        name: "宜宾市",
                        cp: [104.6558, 28.548],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VlÈnlXnWLX`m²nV@b°xĢçlnVmnn@@°UzlV°nÞÒkxlw`UnVbmL@albÞKÈÛmÜ¼°@XÇ@wmW@ÅKĊLlVLVŎçÞL²±ğkw@Uy@¹lKXlKVa@wČ@w@aÇU¯n@@wġakaōK@Å»VakUWmķwkbğ¥mLak@ġÞ°¯xVVÞ@VxVVWxXlxU@k²WVÅULmèULVĊklĠVJVx±nÅ¯¦mwğ@mlğkkl±@kUk@¯±ÇKkxl¤bImx"],
                        encodeOffsets: [[106099, 29279]]
                    }
                }, {
                    type: "Feature",
                    id: "5111",
                    properties: {
                        name: "乐山市",
                        cp: [103.5791, 29.1742],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@kVkÆkV²UlºÈIlxLXèÜlUXUmkbVèx°@@¼°Knnn@mÆIUbnJ@bVI°b°±@nK@mVakkKl¯nbmĸèl@VnÈlUUwwmwnm°¥LlLnU@VaImbkmKnk@mbLVJVUUVnkVmb@a¯JUaÆkk¥IW¥KlwÑmÝU¯kVy¯@@mmnUkmġè¯w@aU±mnW_XKWmkÇmUkóbUÝUanmW¯nma@xVôUV@b@l¼n@lb@xnÛaxa@yUÅmUÛbm°@mn²U°llĀÈ¦lUV¼nJVxUzWz@`mL"],
                        encodeOffsets: [[105480, 29993]]
                    }
                }, {
                    type: "Feature",
                    id: "5113",
                    properties: {
                        name: "南充市",
                        cp: [106.2048, 31.1517],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@È²VmLnblyl²²UUl°U°²L»knlx_V°@nnÞ`WL°ÈUVlnkV@l_JV@n@lnKV£ÇUV¯m@laXUUbVx@VkôJU°Jn@wUk°wnUV_nJmknmm¯Vwk¯ó¥±ÿL@wLVUkUbX¯mykI@a±Kk¦ULmaXVm¯Kz±klUIVbÇJkL¯lUÿUlUkJUmUUkVVklKk@@aU@J²x¦kĬ@¼±ºXnWbxU@xx@lL@bLlº@Èl@bU¦Vb@U@XbVkX¯m@nÇKkllknJV"],
                        encodeOffsets: [[107989, 32282]]
                    }
                }, {
                    type: "Feature",
                    id: "5119",
                    properties: {
                        name: "巴中市",
                        cp: [107.0618, 31.9977],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VUlbkVVLUl@XIUxVxXkl@þĊnVlIVx@VVÝVÞUVU¦kV@ĸWÆô²@VÞn@Vaôb²W@K@XUmÑUW°¯°Ina@y_lWn¼lLUbô¼Kla@nkUyôÆx°@n£Ý@¥mVkIU¥Ċ¯Û»¯L±w@¯aÇa²mçKXUWk_Ww¯WwÅk@UkVmwK£@mmmÅmÑkVmamnnlmIU`Vm¯xVlx@m¯IVóIUl@UwVaVWkb@nU°VÈU¤"],
                        encodeOffsets: [[108957, 32569]]
                    }
                }, {
                    type: "Feature",
                    id: "5105",
                    properties: {
                        name: "泸州市",
                        cp: [105.4578, 28.493],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VVXwVKnwnVnl@b¯xmKUbVn°°X°@blLènV@Vnl@ULnmmUnaVV_ĶV@wnJl@@kkKVólaUwnJmwUlm@aUaôKVnJWbÞ@VwVLX¥VV_Þ`wWÞŹmmnIn¥W@kWV¯@°kILk¼Ç@k¤±XknmÝ¯UlÅÛKWV¯klUwkLÓ@U@w@ġXVWX@UbVbV_kÇVlU°lnwŎ¦ÞaÆ¯nmm¯Um¥nkVmkl_ó¥¯UÇl¯@Lk`¯ķLUy¯@mw¼ķ°ġ_ÅU°mlnÇVUÞ@_JUnVUXblĢb@x@mV°Èb@xċ@@xUbkLWkL@ºzV@lxĠ±²"],
                        encodeOffsets: [[107674, 29639]]
                    }
                }, {
                    type: "Feature",
                    id: "5101",
                    properties: {
                        name: "成都市",
                        cp: [103.9526, 30.7617],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°n°m²°ÜUw²ôV°VkxÜźUŰČbĢlaÈL»@kwVÇ@nÛÆ»ÈUÝ°Kl_V°U`Vbn@VbÈLaVU@ƨ»VnIlUUa±lIk±@VnKmÅ@WaK¦lVōkKÝ@maXÇmw¯IU@kVwUmVIçÿU±Å@¯È@xK@wLUbÇKÅ@mÝ£@yóUóóUxkI@WlIUabaVĀLmxÅaWUnVÝXUþÆ°UÔÈÆ@±ºLnVVÒkóÆ"],
                        encodeOffsets: [[105492, 31534]]
                    }
                }, {
                    type: "Feature",
                    id: "5120",
                    properties: {
                        name: "资阳市",
                        cp: [104.9744, 30.1575],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@èUJVnxU@lV°JnxWÈnbÞ@lLŎUk¥LXbÆ@nmLU@zlbXmlnVynLçJVbUnómUnamUan¥lKV_²aValWôn@nbVK°¯VblW@kklUnlV£°W@wUXk°KVwmVkwVyVI@wkmVÅ_Umm@Uÿmbk£xUaVw±V¼V¤kLWxU@UkbyXóm°V@@zÝÒkKn±U@@_VVkÇaVwnLWalm@@kkVVl¦kIV`±n@wKk²aVUUV¤nkxmUkVWVnLUbVb`kUUmLUmX@`ÅbÇXbWLXn"],
                        encodeOffsets: [[106695, 31062]]
                    }
                }, {
                    type: "Feature",
                    id: "5104",
                    properties: {
                        name: "攀枝花市",
                        cp: [101.6895, 26.7133],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@bKÞnÞ@xV@xnUn°¼V±mç²ÝÆ@wnnVWnôn_@¥UaVbÆÈÜn¥Æ±VUwVmXÿmLkal¯km@k@¯bkVxmVUkk@Ua@¯»UnmÑ@mzm@īÑX¥Ç@ÝxU¦ÅÇUkx@lbUWVXmV@xĵĖ±@@¯xUÆLnÆmx@nXL±lUUVwKWak@WxkbÞĉbUn@@@xó¦Ŏ"],
                        encodeOffsets: [[103602, 27816]]
                    }
                }, {
                    type: "Feature",
                    id: "5114",
                    properties: {
                        name: "眉山市",
                        cp: [103.8098, 30.0146],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Vx°¦VanJVn@baVbkJ@XlJVwôôôV@zÞ¤@nÆÈLVaK@xL@w°ÇÆ@²VĀmWXKWaÈÆa@_nWVnKVlV_UaVamKXUWwnmmwÑm£@ynUkWĉUkWVkkV±çkJmkKK¯¦mnnxxVxVÇkUmk@çķnmak°LllUb@nmL@¯²¯aUJ@amIVaÅJnm@mm¯L@»¯@wUçanlVWVÛkWçKkwÇJk¹±VUÅlġV²ÈÆnXĖV`U°ab£lkVVn¼mVnbèÈn°"],
                        encodeOffsets: [[105683, 30685]]
                    }
                }, {
                    type: "Feature",
                    id: "5116",
                    properties: {
                        name: "广安市",
                        cp: [106.6333, 30.4376],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VlIVkVĀVk°lKÈIUaVJlk²yLn°UWnbVKl¥²L@blJnzW°alV°Inô¯KkKkkbVmôLkéwVk@KnnWlwn@laXLnXVW@X°a@XKlnw@man@w@na@@wĕġġwUkUWb@mk@¦¥mUÛb±yÅn@bml@kV@lknVbmVnlmbÇk¯bWyk@V_UamJ@I@WaVXamIVWkUkbVaUUx@VnkVU¼bkKUxmK@WxnV@n"],
                        encodeOffsets: [[108518, 31208]]
                    }
                }, {
                    type: "Feature",
                    id: "5106",
                    properties: {
                        name: "德阳市",
                        cp: [104.48, 31.1133],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nUW¥²é@K¥UÈÅôa@VÆLUxnKl°V¥ÈmlÅÈV@£WX¯lLln@UVÅlwUm²UVVna@@KnbVVwÆImXwWkIVwÝĕVUaIèmKUzkmWnka@y@l²kJ²VbVkmJUƧ¼@UVbÇKUam@Ua_¯VUk`¯LVÞÇÅ¼mÜ@UÈx@l¼ÇKkbWVxUbÆ¦nxÆ¦ĊV"],
                        encodeOffsets: [[106594, 32457]]
                    }
                }, {
                    type: "Feature",
                    id: "5110",
                    properties: {
                        name: "内江市",
                        cp: [104.8535, 29.6136],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@²èlUUllXĊVXlmV@zn¤ÒnxmnXxlUnVlwmU£VVUbl±L@x²mU_lJ¥UklU@ln@kXbmKUxÈblUU@`V@²mlLÞÑ@yU@¯ônWzaVlV@XwlKU£»aVaUwm@mwUVUwklVÇ²LlKVm_@ykUm@mUçkKmxkIUÝ@LUJ@n±kºLXb¼@mmIXa@mamnkWKUx_U`UklwUwmUbV²akbmkn@`UmÒVxUbI`UaÝÈ"],
                        encodeOffsets: [[106774, 30342]]
                    }
                }, {
                    type: "Feature",
                    id: "5109",
                    properties: {
                        name: "遂宁市",
                        cp: [105.5347, 30.6683],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÞĖUxlJXVb°@xUÞmbUxbXbm¤VX@lk°ln@xbÈ@lLVlVUXxlJç²UlwV@@UÈWlLw@wVwXaWm²¹@»lī¥w±I@V@bl@kLUllUVVn@mmUwXċbVb@VUkbmamW@ka@k@laUa@¯b@mmwó@@lkXUa¯°LUamm@ókXUb±bU`kLm¦bnVmbnVmô"],
                        encodeOffsets: [[107595, 31270]]
                    }
                }, {
                    type: "Feature",
                    id: "5103",
                    properties: {
                        name: "自贡市",
                        cp: [104.6667, 29.2786],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lIÞÇbV_JVaUwnÑV@_lmnlab±UVanVxkxVlV_`wVLlXnmnb@WbnJ@n»WaKl¹²@mVI@KÞVlJnw@aW¯¯¯UmVanL°w@akmmUxmULWxUUÝKōèUKUkĉKL@ÆnX@xWÈ¯@Û»nÇÜÝLka@bKnUaVm_xkLX¦Jl¦ÅlVb°I@bnaUmlUVUVIUKa@nmlnLlnaJUbV@"],
                        encodeOffsets: [[106752, 30347]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/tai_wan_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "7100",
                    properties: {
                        name: "台湾",
                        cp: [121.0295, 23.6082],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@\\s@pS}aekgKSuSsMß`¡CqZ·be@Q^o@gieMp]}}Ľc_Kk{ùA¡r[uom@ÑĥJiq©mŉq¯Bq]ÙYgSåk_gwUisTEĕiqiUEkue_OSsZaWKo¡qycY£w}ĩĕS§Z©SN¥SyLÑ¡±Ks^IYPdY[UoFp}´\\¬\\j]eÜò¤¡ā a\\bnUãº¹Ìs¼j®[cíȈEĝĆ`ļf¶®K|VØDdKGpVnUFjpHF`B[pMºxÖjbpÎxp¬|ÎŸÜÒC²®ÜApZG~dÞàV¨|¸`|²tx~\\~|dFf^zGĄŚhdL\\hĸ¼OªP®lV`p\\]Xpllæ¤CpQ|oF}fMRiNSon_²qämMNM\\"],
                        encodeOffsets: [[124853, 25650]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/tian_jin_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "120225",
                    properties: {
                        name: "蓟县",
                        cp: [117.4672, 40.004],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@EUDAEI@WNMNCBFAHFFNACDJDPBD@@GD@DIFFHEFGDBDEQOFG@EI_KG@OcJQM]RMEKBGPG@[LaCIICBWKCEEG@WBQHCDFD@HSLEJI@IHWECFGAAEKCGDBFCBSBIDCKKHEADMJMFABKOKEQAA@IEEG@GIQAEK@OZEESMOLlu@SLUTYFQCMG@@SQUAYKAACA@IB@BDB@B@DC@@BGAEFAA@BEGKJCC@AGAIHA@@JC@QEIP@@A@EGIDC@O@C@@@@CJCWKABFLBBEBSQGBAAMIEM@AKBcJEN@BEBCFMAEFEF@J@BG@BFABECKFG@AFQ@@F@BEB@@A@@AAAKAE@GFGDECEFEECBKIKDELDFEDYH@EIACDCHKBEB@BAAC@ADBHABKJIAIJICEDGDCD@@A@A@DHCHJHDFEFGBKRKBGIK@GIMHSBCH_BOJECCJCFKKMD@DNJEDEGC@OJCJHRUL@HRJ@H[DCNKDZHCTFDHCFFKR`TANVDFZRDLFARB@HPAPG`ILAR@TERNDFNHDLCLDDCXDYbHF@FEB@LDDVE@JPNfXPINCVDJJD@NJPAJHLXHDNANHhB@DPNLRMTBFRBHHr@`NBFEBOCCBIAQJDHCHLHFA@HSDCRLFTB@HEFLNF@PELBDJALFLTC@EPFLLP@tUHQJDfIHGTB^JTCPDLKAIBATFPADIEGECEMJ@JIAIHGECFEAGDI\\SPOXAFCL@BQTQBBTMZECYGAHA@GJAE@HCAEME@IECFKJADDBABLTHHG@ILEAMNDJCDHEBF@@JNFJELDFKTOT@JETBFFHBHEHKI@@IJEJ@XKEOUMS@AF@CEB"],
                        encodeOffsets: [[120575, 41009]]
                    }
                }, {
                    type: "Feature",
                    id: "120114",
                    properties: {
                        name: "武清区",
                        cp: [117.0621, 39.4121],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@FWôµ@IFCLIB@EHNBp]AGEAKAEDMGZKFGBGME@ILGP@HEFB@BXMEAHUGC@IHCLOD@X[NWHWPKAEF[@EKIOL@EKGBNMJ@EIEHKBIC@BAKMIACCFQZCF]DB@ERAKADIHGEIBCGIIECFaGLZO@EFCNGAGDGAKL@BMG@IE@ADSDEH[JGC@CGA@BMDeK@EIACFE@@GG@FIAMM@CCGC@EM@ADE@CFMAAGHBDKIEAJG@DOGCDEKAGIS@KFCHKAEHIE]BeKNO[IFIOELC@A]GMBKVYCDDgGAICARc@MW@AQE@DGI@@AQ@@BKBAIQQYEFW@CEADIGGBCEIiMEMF_LGEKMBBDWEBGRC@E_CHYGCH_IAED@FFBQh@FGJaJ}AHRAREF@bE\\C@CT`FHC@\\BBF@BID@HGDDJ@@FAHKBARECKDAZBJIVNHCTA@EREAMLHDAFFBVFFC@RNRETHD@FOJMACH@CAB@P@DF@@FGDWE@FFSIEMKQDYCCHKb^JADOCIDGNDBdBCFJB@EC\\A@BJEA@JAAAD@HHD@LFBCFF@BERDHNhZQHMBGHOACCEBWEGD@PSJKCGEUD@CINLFGHE@AJK@HDABBHTB@F`DBFLBBHEDARCFG@ABJBAPVFE^FBGLGCFG_BMLEXGAAFE@@JNRVJHFALFBEHQJCTbNDHCF@PlFLJSXCHFHfVBTNJ\\BPJXC^FAVNFCHFB@FFH@JF@\\ABCFD\\BDMCAAJKQBGAILOEGHILECQLWFENJHADC@QxNHFJNLDFA@CBA@DUÂmR@FBL@BD"],
                        encodeOffsets: [[119959, 40574]]
                    }
                }, {
                    type: "Feature",
                    id: "120115",
                    properties: {
                        name: "宝坻区",
                        cp: [117.4274, 39.5913],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@TZbB@JHD@DODCLM@AP@LL@BNH@ETFN@`E@DNG@CHLBCJA@AICFKDDBKA@\\N@AFNAGRBFjFFFL@DHLBLFQPcXAZMJ]GAVHAIZJFNE@JpDRRDCLFDGXA@EFF@CFFPDfEBDB@DCHCFCJDJIJBLI@I@CB@@ADBB@FALADGDC@@H@BB@FZGFCCE@@FMLALJDAFFFEFDFCB@@AHCF@L@@BBB@BB@FC@E@@R@BEL@HEFD@G@AH@AIB@@@FEFEBALDDEFAFO^IF@JCBBFPNJJ@D@PRDCEKBAXL@BIFD@T@JE@BHHJORFDI@@B@JGH@@B@BDDLIFFHCD@D@DEE@BAAAB@DAF@B@H@NGLJLMRDNMfGIEPMI@GDAKK@KIDIJ@GE@CFDN@FE@GFEPGV@TCDFKHBBF@RW@DD@@ID@TJFKIKLI@EP@IGBCLAEKLEN@KSHIGYACSD@SEAMBBMGEBMQBCMIGKFB[D@HDLPHDBC@IFITDLG@IIIFGVBNJDLN@VIRI@YIAIHIC@CLKZCBEE@JECEIHEAKGDGECBGEEM@@DA@CCCBBEGA[GEDBBoNAAH]MKiIAWKQoIIPMFQAEEDMH@FMSUYIeF@EK@BIOEKJEBICFKaKPFAFSE@LWCCFMHDDEKESBOGBKIEIODLG@CCDEQCEDWEMDIEIB@EHGEEDAEAa@@HqDEJGF[AECCFa@WCEIKAAEQB@FCAE^YDERDDJBLNABD@AJGLJF@FNIAMLH@FPKLJ@FE\\BFOLGXMXW\\C@KPGD@JHDGVFBWN@AEAGFO@KH@JNFAHEHYLNHFCLBFBBHo^MAFGA@KJED@Jó¶EX"],
                        encodeOffsets: [[119959, 40574]]
                    }
                }, {
                    type: "Feature",
                    id: "120223",
                    properties: {
                        name: "静海县",
                        cp: [116.9824, 38.8312],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@NGFMDATCNDR@CCbINEHNJA@C\\EEGVE@IhE[wepc¢·²^QEKIEKIgiQDkehY£uSDBMkUDOJDHC@GF@CAFBFEN@CQ@BeP@@G@HD@@MHQKi@[IGCOCESE@GMA_OcCGDu`a@VZzKDkJBLNXGDqKEWE@cFEFA@ISIi@@KMABJGBcMuFEzGVH\\ATSEUBeALCEMG@CEBUHUCGXaBPtUBBFIBFTDFF@DDKBFNGBJPHXDDMDCLJ^mBIHIL@LR\\@LCR[@@z@NFD@LLBNb@RHDBNTPT\\F@BJF@BXCFBHHBDLFB@HODADE@@JHVXCPDHCFTLBBFNCDCCCU@@GAABEHHZHBCAEdEjFDD@GfD@DXFCHF@ERFDLBH@"],
                        encodeOffsets: [[119688, 40010]]
                    }
                }, {
                    type: "Feature",
                    id: "120221",
                    properties: {
                        name: "宁河县",
                        cp: [117.6801, 39.3853],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@BFLBFJXDb@DEFD\\BHEFIrC@Gb@FBCBFFGH@FJAJFNCXFFCRDCFDDH@CKJPJFALPHTALFCFGCENDDKXF@ETEBObLELJDFALIPFAJL@@FfEZJTVENG@CNFFRBNEJOpJLRBXjJNLG^BBpMAAFC\\HHBAFDADDB@@CN@FFAHFDCHLHFBJGFCFUNKJJTD\\XUXF\\^F@DDDQXXBRLRCBDFEVCDLVDpUl@LEDJHAPRFGL@CETGPBTCDDVI@CFF@GFDCCVGLKEK[Y@MECISG@BKNSCGCKWEAaEBEKNGFSECO@GGM@GYI@DÅCMLHPTF@DJHAVVNKEGDETJ^[TJNNd@NOAMFYJ@@GFANDPEJB^aOadSTQSI@MHBDIEOKCG@EEFCKCqXO@@DMFENCDDHCCGJ]AKFoDaGGHYFDHKJiCMFGC@EQ@AEHGAC@IEAATKOHGIC@IXIFEoGE[JCFCDHNmRADFZMF[EEBMO{GU@AOW@@]ZeHBDEHBKEfQkuIWBs@EC@d[@[^EDMTKCEEcI@cDAB@FCBCACmOCG{PYHeBgPwPFDDALFFFCHQGSD@BHFAR[TaFYXMASUiGFL@DQNCJI@@D@PLDN`ETEFIGMCGBCE~CAIFDPEHGEQPHJADFJGHCJLB"],
                        encodeOffsets: [[120145, 40295]]
                    }
                }, {
                    type: "Feature",
                    id: "120109",
                    properties: {
                        name: "大港区",
                        cp: [117.3875, 38.757],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@JFFL°_`ONJKDDFIFZN xlb~yFVNRrdJGzDPVFBCTNND\\UR@E`F@@Ip@IWGUoawOEE@ÏDgK{İEEMFëCb@KwOCDHHKBDJCDEEEAGHOABFABMCgDLSQ@CFEBMgYIDQINE@AUSwSAdYEHQMEyK[KI@GRMLE@@OqOoBOnpJ@BmEAFHL^FDB[C@BBDVFAHFJENB@sNEjQAMYsUgCSBGDJH@\\LjGR@NC@@G@HO@AfR@DM@EFEADBE@@HGDICCPlVANTC¤vgZlfRChjLJ"],
                        encodeOffsets: [[120065, 39771]]
                    }
                }, {
                    type: "Feature",
                    id: "120107",
                    properties: {
                        name: "塘沽区",
                        cp: [117.6801, 38.9987],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@|ODHnPBDADEDA@CB@ddJFFLDNSFC\\]\\@@cFD@nACOMW@M@ITURBRZNHNWRQoOj½fcqAqeiDÿÍyÓįFL|Ch@ÐFFxPpbHVJXo@@JCTR^BPABQA]^MB@bE@@FQBFVJRH@FXtPNZSBAja@@NDTLJrQTHFXZFB`"],
                        encodeOffsets: [[120391, 40118]]
                    }
                }, {
                    type: "Feature",
                    id: "120111",
                    properties: {
                        name: "西青区",
                        cp: [117.1829, 39.0022],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@LHAHRHATh`LHNHDG`HDGZ`D@FQDAHXFACNAFLVRTBFOfHDCVBFQH@HSXHEPFB@LDBF[bDbLFKJBFLADBDjLvCPEI]FGEIGCBEUSjcFiBIVWfaHCjN^HtwBBFGPBJGjFBEGECGDONMFAP]TDHQOWCMGAMHKIJEIGQ]aDlUG]VGEGDC{PEbBZmE@@GH@BCA@FMQCFMYMJECELCMI_P¯`]R±¡¸odfx\\gF@JUFFH[F@DIBGMMFaJDDQ@MCSDCBENMH"],
                        encodeOffsets: [[119688, 40010]]
                    }
                }, {
                    type: "Feature",
                    id: "120113",
                    properties: {
                        name: "北辰区",
                        cp: [117.1761, 39.2548],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ROHFFGCOJEDB}DFHANDJHFEFSM_KC@O@CJ@DIRM@CEKKALFKACHoLSJSIBETDJaEIIE]E]K[MYUYQILC@GF[MGNKEK@A@BCWECAIFEFYAGFOMI[OFuDiKACBCEKIAELaKaCE\\CA@KEAFOWGGTG@ERUACDeGEPSAUQKHE`FNjNFJADHHCJFB@DEXZFRRBJLA@AR@@BJ@CHF@BRX@@NQdDBBJhHCCZDLUNA^H@BKDPFEJ\\JMPfL^AJFFGLBDGLET@HJLBCFHDCPH@BIJFCLGABHNBDEF@BCN@@FHDDDN@BNEJH@@HF@DEJB@FfLNC@AHB@DHD\\IFGTCBCF@@JNH@ALKHBHCHBDMFEP@KYbHDEJF"],
                        encodeOffsets: [[120139, 40273]]
                    }
                }, {
                    type: "Feature",
                    id: "120110",
                    properties: {
                        name: "东丽区",
                        cp: [117.4013, 39.1223],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ZV\\N^L^FJFFJIbSCAFTJTIpKDGLBEKLBjHTVNBZWbE\\SBQGE@ATCRHDGEEKECBECxOhOfAZGA_YEEWSGqRKISC@Mb@BiTAMYsOEWG@IQEURA@EF@@acUOXQRYCUDCHDTEF[SUEgAYDcVGJM`iAWDWLQRMHUHgDsDBLHJFCFDFGHBFFVEAGHCJN@RJFPIhBD\\FENCPWA@LFBAFHBEJUEARCDIAEDQBRNa^"],
                        encodeOffsets: [[120048, 40134]]
                    }
                }, {
                    type: "Feature",
                    id: "120108",
                    properties: {
                        name: "汉沽区",
                        cp: [117.8888, 39.2191],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@LMEI\\MTABKN@FCDMH@COAcH[AoēAM¡Wa[MeqpQRMXMGQYQASV@J@NNXDPmBAtJXlveRLFGACFGAYf@^X@BPV@|HNPFA\\FNEEYBCnQGMDCDE\\IHFpEFWJ@JJDGHLPBSFB@JBDGHBFR@@FHDNEjDLICGZEHGbHpCLE^BHIDDCGDCFMNE@CP@rWLDEDFFH@"],
                        encodeOffsets: [[120859, 40235]]
                    }
                }, {
                    type: "Feature",
                    id: "120112",
                    properties: {
                        name: "津南区",
                        cp: [117.3958, 38.9603],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@TLv@CNHFFBHGZFETNPhCVGNGRQXKXCjBN_HIdUZChBVF\\TFECSDGVCZDRQPWdVNA^]RBBAAOQ]DSE@F_Q@[VMCSMADUECOHycIqMQEU}zkawENRDENB@ADG@@HF@YnaAOF|CDFHUHH^kVbCR^JHIFLJNGHBDNPXGRSCO^EBMNCPDHHFAFiEIHOAEH"],
                        encodeOffsets: [[120045, 39982]]
                    }
                }, {
                    type: "Feature",
                    id: "120103",
                    properties: {
                        name: "河西区",
                        cp: [117.2365, 39.0804],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@d@hZNFdcLYXKRCtCMOFSYEGHEAGEDMu@SKAAsx]GMTGt"],
                        encodeOffsets: [[119992, 40041]]
                    }
                }, {
                    type: "Feature",
                    id: "120102",
                    properties: {
                        name: "河东区",
                        cp: [117.2571, 39.1209],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ZBVFFIGABEEA@KXBDOFM[EACJgOIE@QIMGDBHUFEEGAEHECEDGIAKQDWLKZcdQPEP@FOFBJTJ@HNORJf@DBCN"],
                        encodeOffsets: [[120063, 40098]]
                    }
                }, {
                    type: "Feature",
                    id: "120104",
                    properties: {
                        name: "南开区",
                        cp: [117.1527, 39.1065],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@NMVDCG\\E^B@HlB@YEDS@CHsNSiMGDebUXAJEjidVTAFHDFJ"],
                        encodeOffsets: [[119940, 40093]]
                    }
                }, {
                    type: "Feature",
                    id: "120105",
                    properties: {
                        name: "河北区",
                        cp: [117.2145, 39.1615],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@DBXFADB@L@LFHM\\NHED@JKZRb]QMRAFCJBDCBQYADMCAe@QIMP@GSIAIPE@E[EGH@ZEF]^HJAXK@KF"],
                        encodeOffsets: [[119980, 40125]]
                    }
                }, {
                    type: "Feature",
                    id: "120106",
                    properties: {
                        name: "红桥区",
                        cp: [117.1596, 39.1663],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@J\\PNHEZBFEJELEL@BWGI^]FEkA@G]A[FDHUCMNEHJ^"],
                        encodeOffsets: [[119942, 40112]]
                    }
                }, {
                    type: "Feature",
                    id: "120101",
                    properties: {
                        name: "和平区",
                        cp: [117.2008, 39.1189],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@DT@FCHG\\FFOROMEgYc@"],
                        encodeOffsets: [[119992, 40041]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/world_geo", [], function() {
            return {
                type: "FeatureCollection",
                offset: {
                    x: 170,
                    y: 90
                },
                features: [{
                    type: "Feature",
                    id: "AFG",
                    properties: {
                        name: "Afghanistan"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ࡪ͇وŐǬϠڐŶӂʮǚڦ۾ǌƀ̚ІɣʪҴMوǯʲĹ،˒˰ǋ˖ϪԈiżŬĘͺβ̈Ҕȏĝʱʪ¡ý۷ͪ˟̊ǰώĊԼϖׂ×ࢀAƬʋӧĥяƹ७ĭࣗǭӫλȤΣĪллΛ͑ɳ̡ߛͦ։՗ɅΥԕ²ԋ͡ɿ̳þٝŋğɻسDҵӇ܍થΓבôǝȁԇņ࠿űටіހހåզُƚßՔ˟ڢάҢιŮɲؒ΂ਸ"],
                        encodeOffsets: [[62680, 36506]]
                    }
                }, {
                    type: "Feature",
                    id: "AGO",
                    properties: {
                        name: "Angola"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ȸصʌԋȘ˕͐ѯ֊æˤŠҬşŲɀɂӨԶ®ƤіHñ̡৴RfՉǞ͕ūԑÖԫ˪̷ৃȼüκsԴŴϦ¹ĘʹĩСƨϿů̿î́ყZᦵ֤ۋպԽ໳΁᎝Š׋Ж₭ŵÏԃϞկ~ԉƝЙǅÿՈŜ݊̂ޒªΰ˚ݶȨΆӘռːϐĘج«ӊʣ̜ɡԚȵԎ®Ǩʶͬʭ߼ǣ֚сՐĄǎΌŔʒg̎ĸៜ["], ["@@ɉėɣلͼδʪƘ̀˽̩ǯƍɍλ"]],
                        encodeOffsets: [[[16719, -6018]], [[12736, -5820]]]
                    }
                }, {
                    type: "Feature",
                    id: "ALB",
                    properties: {
                        name: "Albania"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ń˷ŢέΒȳiə˗ŧ»˙ϷСƛÐgȂү˰ñАîֶŖʼƗƂÉˌθаÂƿɨôǴɥȪďȨ̂"],
                        encodeOffsets: [[21085, 42860]]
                    }
                }, {
                    type: "Feature",
                    id: "ARE",
                    properties: {
                        name: "United Arab Emirates"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ƭ¤ɱڂƂ۞uԖ{ֺ֪ظՠՎԮǆ˹ŖڑѕGçճƪŝϝǑE΅ʓΏuͷǝǱᡋъ͏࡚Ț"],
                        encodeOffsets: [[52818, 24828]]
                    }
                }, {
                    type: "Feature",
                    id: "ARG",
                    properties: {
                        name: "Argentina"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ߗ§ѓ̔ԑx࣑@Aሞ͒ϵрؿનԋ୲ȿϙп"], ["@@Ӵ؇͠ڰॠƊǷ໶ോۊŷਆاࡾ͡Ŧχࠡ౧ࡒɭ़ŷڔƈނ٢Ǝݐжǈфӝiڣۻҩ֟΁ॅࠃ૭ଧȽڥɣࡹT࠷ǽȇÝիËѫ੨ܙŗ׃Հν§Ч߯ઁఛ҉။ǩउĎǰԅǣػƺщԋ̏ࡱř̪͕߱ɗŜ࠳֨ʧҠˆʢѧޛʻڭԹūࡋȣ҇ߏEڃљʋؿؙࠞߦǝ˿ݭ঳Ӄձটލͧ΅Ͽ˔ࢍ֔ӡΟ¨ީƀ᎓ŒΑӪhؾ֓Ą̃̏óࢺ٤φˈՒĭьѾܔ̬૘ěӲξǄę̈́ϵǚˢΜϛ͈ȝॺ͸Ǣƙ਀ȠࡲɤݢԊ̨ʭࠐEޚَոo۰ӒࠎDޜɓƶϭฐԬࡺÿࠀ̜ބռ߂צԺʥ͢Ǭ˔ඔࣶд̀ࢎĹɂ۬ݺશȱ"]],
                        encodeOffsets: [[[-67072, -56524]], [[-66524, -22605]]]
                    }
                }, {
                    type: "Feature",
                    id: "ARM",
                    properties: {
                        name: "Armenia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@୞ƀǨə͌ƣǛɁ҄˽ʁˋΦɫϘƏl׋̣}΃ӢHżχCʝɤǩuͧʖرȼĄФƛ̒"],
                        encodeOffsets: [[44629, 42079]]
                    }
                }, {
                    type: "Feature",
                    id: "ATF",
                    properties: {
                        name: "French Southern and Antarctic Lands"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ը˃ߐĿǅɽϣಇÃq҂ŮΎÊǢ"],
                        encodeOffsets: [[70590, -49792]]
                    }
                }, {
                    type: "Feature",
                    id: "AUS",
                    properties: {
                        name: "Australia"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ߺ́ҜŘپǊԎÉÐঽ˽́ēگ̉ɰ׍בǧ®ԫԭܘŗֈӝܸtϬռõ"], ["@@̢ڇբ̈́˦ΡЖ͟đϋǴܛŸнɄĹɬܕąѥ˖֭࣬ѭצЋ֞λŋȯӔՃࣧ͜ͲȂ;ηȴźƢࢹ׬ԩϸ͋ڀڹʀڭtӏËԳА܋µݓơϵɩݡjӕǕ׻χއثЭ̫ٱ˫гʝܧ͕нɅػŉׁªˇӕ̇वޡ·ϫ͙ԕέ۟ψԥƪżѬҝǃ݁؉ܩɪӉƄӑÔ߿ʐիԮƻْțьЭ;߱ĸˢРȯزЧ׉ݝƷѮҬŶӞ͘ЬãجہܑԿ˽͏ڛٽΊ~ҀԿ،ѹ̀ǂȘઃԚןz߯Цຓāછ̝ख़˫ߡÈࢻљܯȗǉѱ̳Ϳ܉qՅõݑƶ׿ğֽԁ҃ʕуʁЗˋؕ֛Bࢽ՜ҋǄlӖкŘƚȒ̠ĺאģӼѻࡖƏӒӎͭնsʚϋͰĽڄӓڔřΪτε˳ެиʑʞ͗aјеڎă˄țʦĠӠǢȸŘрęӮΎÚٕ΢׀ۀˬЦΪٜ̰ϤàɴĻڎ̺ԚĤŶȀɞüҬoࢨʖҚώɊ҆ӲѐͲvҘט܎ΠܩΦǚ̗Ј˂ТψǻĸٖҠаȮͨцƜ`ɼτĭdɂτŦОŔبϫҲӽՂMՖÿǱҦДڪϜɘſȾκӒԘ̒јıۺǂeі؛ˢ҂Ū֎ȻҀ·ۼɋʈĐԶʵӬʊ͂ñȠǊϬеɡ͉҇ͻ˿Įͱʙп̗ЭÔʁڜҫ٨ˏѠ́؈ӻʂBѰɍŶʷߤ˵ֈ˼ǐҊǠόľҤʰڞŝОÔʔīӔŌنǈǠŽˬȮѾǆҦtʈ̸̾ʂЩÎՃȾķΛ̨ёÚӇ̥"]],
                        encodeOffsets: [[[148888, -41771]], [[147008, -14093]]]
                    }
                }, {
                    type: "Feature",
                    id: "AUT",
                    properties: {
                        name: "Austria"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Û΃ӁCǎǻ˧էǇƗܽsщȏۛÞயɐȉ̊ࠧƣĭǅԗŢѕxϝƶźȴƬʪ²ьɹŤɜݎ׸ƮЖ}ˀǣþƜšո̠ń̒ϰز˓ӀΆ̐ÚٶʱЂªϰǁãŃČ̅"],
                        encodeOffsets: [[17388, 49279]]
                    }
                }, {
                    type: "Feature",
                    id: "AZE",
                    properties: {
                        name: "Azerbaijan"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ʞɣψDGŻ΄ӡֽŒщϰƃ͆Ǫv"], ["@@ϊËƞɈԈͺѴѵђ׭ϺʸɧۗãƣٵƟ̭̍ȝvзȽ¥ԻѲ̂дʝʚ̿×যإk׌ϗƐΥɬʂˌ҃˾ǜɂ͋ƤǧɚȶƎضʍҐ¹ŘĲбҔɔŚʀ׀ԙ"]],
                        encodeOffsets: [[[46083, 40694]], [[48511, 42210]]]
                    }
                }, {
                    type: "Feature",
                    id: "BDI",
                    properties: {
                        name: "Burundi"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Á০ɃϢԜßʲӎҀÅ¸ͧǸȏT˗ȹǭ͛ѫ̧̥΍"],
                        encodeOffsets: [[30045, -4607]]
                    }
                }, {
                    type: "Feature",
                    id: "BEL",
                    properties: {
                        name: "Belgium"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@؜áުǪՐοҦȝħ֧ɕĝһܿϦћßדІϷͶϷ`ũ̒ڪǔ"],
                        encodeOffsets: [[3395, 52579]]
                    }
                }, {
                    type: "Feature",
                    id: "BEN",
                    properties: {
                        name: "Benin"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ۛįȹ׆ኞǛǦЮ̇̌ʱʞņѶ̀ĨǠξЪĀȀʤˮʘ̠F٘ә˩ȎӽǓͷĘɧСԳʵʳǁՉt՗µണ"],
                        encodeOffsets: [[2757, 6410]]
                    }
                }, {
                    type: "Feature",
                    id: "BFA",
                    properties: {
                        name: "Burkina Faso"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ֹɐϽ̍Ƀϗǰƥ˦ϙǾÅӦɮΤo˴ښۢŬּɲȴОœΚǢŘɎٴϖǆˀ޼ΒҦŢɀǇՠJáСŔϣӀչНॺȏmֻǿʣЩÿǟν˿ħ݁lϳâ˓ƉωÖร¡qӉŘم"],
                        encodeOffsets: [[-2895, 9874]]
                    }
                }, {
                    type: "Feature",
                    id: "BGD",
                    properties: {
                        name: "Bangladesh"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@i׽̉ŶÆگʉѬµєǅКΕӨޟü΋˃ҳΧǠũƵʃĠ͗øŽۖ̅لƜԒԫɤȆ̪Հ̼؅Ѽ֮̔ږεВ£ô׏ߞřު^Ӟƛϯ܅ϕµʷӍҢѥƎ՞ɶFѶ೯"],
                        encodeOffsets: [[94897, 22571]]
                    }
                }, {
                    type: "Feature",
                    id: "BGR",
                    properties: {
                        name: "Bulgaria"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ʎΉ͚Ö٦ſ௾«иɌবȜ̩ؒӴĕѥΏ̫׹˔ӏܣŒࡥ˃Uлޅÿס̊ڧɱة|Ñ֊сːƒŢĝĴƘˌ͌ˀСδ÷̬ȸȐ"],
                        encodeOffsets: [[23201, 45297]]
                    }
                }, {
                    type: "Feature",
                    id: "BHS",
                    properties: {
                        name: "The Bahamas"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ȵ£ɇӜ̿ʐǾՔʨۣ̎Jӥ"], ["@@ࣷƅÏ̴Ђäֈ{~ɕ"], ["@@ƟׯƷņ`ѮϓͪCĪڐϗ"]],
                        encodeOffsets: [[[-79395, 24330]], [[-79687, 27218]], [[-78848, 27229]]]
                    }
                }, {
                    type: "Feature",
                    id: "BIH",
                    properties: {
                        name: "Bosnia and Herzegovina"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@̦FȿσМ͓ūЃȡƽû˙țūҥݓ͈ͅΘ͋Ȅϭ̾ǻʺЩϾǬΒ̞ȕǼǨϾnܠƓ׈\\Ϟȅ"],
                        encodeOffsets: [[19462, 45937]]
                    }
                }, {
                    type: "Feature",
                    id: "BLR",
                    properties: {
                        name: "Belarus"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@߼Mࣰ̈́ȚӄېːÿϔԜƚ͖ࣘࢮɁŢȻѲĴࠒȧĊЁǷɧՄս΂Ƴ»Ʊ֦Ʃʎɡ͝ǿڳǉÿȠ˧ȸ՝ܝ¹ʵȁÃхͭĆݷ¡əȞ̿ƥ́ŨڍjफȬࡕàٱmҡɩГeϐʷϴԌǢLͰɷ͌ϊ"],
                        encodeOffsets: [[24048, 55207]]
                    }
                }, {
                    type: "Feature",
                    id: "BLZ",
                    properties: {
                        name: "Belize"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@OŮĸƴı̞ԔǄZHūǄGaɭƋεôŻĕ̝ÀăīщǓɟƱǓ̅ʣ@àॆPژ"],
                        encodeOffsets: [[-91282, 18236]]
                    }
                }, {
                    type: "Feature",
                    id: "BMU",
                    properties: {
                        name: "Bermuda"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@OEMA]NOGNG\\Q^McMOI_OK@CQSGa@WNLVWHFLJXVFGJ`ZRTDLeeWKIHGIK@@[MQNi`]VDTBHCJAPBJLVFjT^LV\\RJZRn^RH`TfJjZHHOTTFJP_NOX[EYQQKMEJOLANJH@HQHAARF@ZEPS[U_IcRQXE@EEKKOCGGCQCOGISKYGUC"],
                        encodeOffsets: [[-66334, 33083]]
                    }
                }, {
                    type: "Feature",
                    id: "BOL",
                    properties: {
                        name: "Bolivia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@य़͟گӳ؈વȲ۫ݹ؅ŗ͡୆ҋऺˆ߾ѳ΢ŏ؆ЫֲՌ࣢αۺȖ˰ƭ̶͠рh܎¤נǸ˶ܩഠزíѠnȈʪ݀;Ѷ͂સƚęؽļ͓ãࣰ֛ݫऴƑ̻ͦ֨ǕΐʑՈTӦʟӟǐʕZγʓa͒এྖūӟĜͧҞɽȤԹƫڋɯρĄӏʿǥaʶ޳јޭ^ัʓЕ݋sҋͥ৕ƉǸ"],
                        encodeOffsets: [[-64354, -22563]]
                    }
                }, {
                    type: "Feature",
                    id: "BRA",
                    properties: {
                        name: "Brazil"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@૮ନॆࠄ֠΂ۼҪjڤуӞеǇǒӜŖӼBҦ̡ƴ̿Ƌ̻į͔ýޔƿʤ֥ɪ΃ǏࢱǈÈଜʝҴˀǦăӐɰςƬڌȣԺҝɾěͨŬӠྕ͑ঐʔbYδǏʖӠӥʠՇSΏʒ֧ǖ̼ͥळƒ࣯ݬä֜Ļ͔Ěؾષƙѵ́ܿͽȇʩџmرîӃƟϡĪÈ౨ۏӷݏv҄ͅ֏¶ǲΰұԞΓݴɜƶA΢ԖʎċҔɊ̈Ôϼ०ֲێǊŔŴݴϚᘰpθſӔύ̬LؐӀƒǚē͐ӯĔYՀ࿖k˦̂ɸˉǐӷǂļҨѻٸÆǌʲشȞΊƐĮΤ׸ʆ¯Ǯ܅ðśՊ֞ϓɒǀþجŅڜȿʐȤžल̮͎̾ŏʂѪȜȗŉσ̀ŵȖϷɷ̏ƅɌыÔϳԬϿЮ¥ĢǒˆϠƦ˚ɢҬíȲҚçøǢƗǘĎʐͺõЈĒӔǱξǥʺɪȊŘɿДÒ͒͊ʴؤӼޒ˺¢ȺҫҼ฽҈Ƒxׅمەʾʩ๤Ɓࡃٔր੐̟ඊԡШӱƏҫ঎ʶ࿐ѹఴఔ੸व٪ʏܖ̦˅˸੭Ɣԗͯ൹ёշஅୡՙोثܯȿgɻءÒ༽ɹಓęօˇͧƫ૱࡛઱ƛࢁڹηȟԋ࣯Fೕ͓סύवʗ঩ڝ܅࠯ũطƔҫƽࡓȏЧחҥट๕݉ڗ֯Ͻϥߛ։ӑɷӈψЊӟֲڇҬࡹՠ̹{ࡅٰձę"],
                        encodeOffsets: [[-59008, -30941]]
                    }
                }, {
                    type: "Feature",
                    id: "BRN",
                    properties: {
                        name: "Brunei"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ͬ̾܎ҢЯ·՛Бǭ˹ϥѦ"],
                        encodeOffsets: [[116945, 4635]]
                    }
                }, {
                    type: "Feature",
                    id: "BTN",
                    properties: {
                        name: "Bhutan"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@΂ˍÏԩۇ{ۿÈՇſޅ͊kǚ֌زҒɈ׸șѺqπɥ"],
                        encodeOffsets: [[93898, 28439]]
                    }
                }, {
                    type: "Feature",
                    id: "BWA",
                    properties: {
                        name: "Botswana"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ǜƭ˄ӡॎइήĝD̑ʚՑٰŹ՚ϝ஑أݭع˩֓ʧ́ҙãƧГďʽ՝țہ¤БɾΟĸХșȵГЉʧпϑ׻đȇ̐üԠӽߚɧŲAរࠤ|Ჾشಖ͎̎΍՜ͤʮDӂȎưÙ͔ڣ"],
                        encodeOffsets: [[26265, -18980]]
                    }
                }, {
                    type: "Feature",
                    id: "CAF",
                    properties: {
                        name: "Central African Republic"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ۜÚƺɎƔgȾȏ੔͐Τ͠Ѭ̌ĉ̐ʂüߺ½߆ϴ؊ࣺю;ՐƜĪΫӜԿF΃ƋΓÄʻ̆ʍٖοҢͻT˗֠ѫΖεɆԋغͩƊˉˣęաpكĘ̹ïųȱ˕}ͧǲधнϥĎŗÝʥԕطǐؙĊ՗̴ۓ˸҉˓͛яùדգ²֩ƘԅѻѯޱėʐϦϧ˔̳Ѡï̠ЇѮæʢċΞÞٴȬƴц࡜"],
                        encodeOffsets: [[15647, 7601]]
                    }
                }, {
                    type: "Feature",
                    id: "CAN",
                    properties: {
                        name: "Canada"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@؎œުxЯ΅̵Å੥Φȿˬ͆ʸ̎С"], ["@@Хcઝ˂ޯІ̄î૆Ɂ࡮Η|Ʒ"], ["@@хŝൡϢʥ̘ݩ̌Ưʈࡻư͕ҜðȚࢨǿԨŵ߄ė˺̃дЋ࠼΍Όҩ"], ["@@։ܿո˴֠ǵ̏̉ݚɱϰȴ࠼ʵʹ؛טƞņѿʼԷΝ݉ϝփǂǾیɻńইܯԅצЂ߫Ȳࣙ¹࿅~ŹʠԼ̐λɬ۸Ԓࢄ೾Զӎܲ̂϶ǋɫ҅Չ"], ["@@@@@@@@߰äʥ॓ܶگͯDԑϪ̵ϮчʾƻτºˎЂŋ"], ["@@͡ѳχîəʢ Î͖ʦΆkɈǣ"], ["@@ঝҧץnǿɪزϲ଼SiǍ"], ["@@ƼυјżӨɗं˽४ʽöЍؤÞ׶˥ݙ˃ಳȬҽϚ࠭ҁ஡ѣ˿Ӯଗăܴдņڌ˺ޔ؈å"], ["@@ष¥ȿЪΦҼޖŜپɷXέħřձʛ"], ["@@Է̍ଉʬۃğଫϘ݊ʼטζࢼʃԎƯʦǅԠ͍"], ["@@G࡭૰ڄ৐եʡح߾֥࢚؈ؖܨ°ईஞÝఔūૼй¼зس҃פ҇ŃУ࿩חୡŻࢃʨʣуߵ۽ʓοই֩ளÇڏΡÇձ঍Ŀਉڻ࣭ु͙ڏ±উంƕϜ޻ϼّ୲ǔ༞εࡀ͋׺Ѕ੆ɳࢸΟ൶µࣴąƍܫʼࡋ،ळనߗ٨˚ҔࡺѭೢףѶഎЀ॒לҮהç֭֘܌৷لলࢤνݾ˫ಾגȘ෸ɫࡸć۠ɚ޴˵ਚӣʮ͙ຄÛ}۷˪ਜ਼ގſ،ӵ௖Ұߦऔ֌ϸٺݣબੳघ৙͵Յ૤Ӂݰӓംɏբˍͬ܃ټŏͶͅÖऻ؍́׽̏൯̗੏ۑ෇ƋᅛǮుPࢇÍ۱׽ੳω௉૗ॵޡ܌Ɛഘૄᄈ۪సČݔЫߍ֟ˊࣟ˜هતп൸ŨࡆीÎ؍ժ̥ਣսᇷԁ࠯ͽयٓÖ܆ฤ۞഍णĹջӆBନύʐ֛ƛ˧ɚٙىʱٹ̕ϡΥŽˏ¥čȹ໽A౥MϛƷࢵĿßˍ͝ޗBࠛGϛƅƊǑøʯeďષлࡽſউ҅Ɂ@˷ƂĥŦnĔȂ̎ЂҦʘӺǙܴǵނ࢕ЂľƬūĺɳ@ǛƆ¥ȤǍēɥ¾ĊȡĊćɚٵːڹ˪ࠑ͘߁̨ݧʃ˝Sਕɔڻŉࠁʺ࡫Ɔו¾ʻƜƫҤ˳IE͓჏BᮝA᭯@ᡃ@ᠿ@៙@ᢡ@ࠛ@᠁@ᛷ@őF྽ࠜ׵δຽΐҳݖŤԨ੻ΨƧڴ৭؎iѠҲКwՌෙ՘࡭ॠՁ׾ޑϚ֣ΈѿѢࡇ˕ࠇҹݛւדπࠋɸࠟ|JⷎNᷲ༬ȭ೘Й࢘û݆ΖৰˀఢĹ఼τ൘Ⱦ־ΑظȠȊЄ׈ęෆݫ૦֬ŖّਔƐ͆ʖৰ·౼Λዸ̭ୄƛࠖÄଊэ஁зຶǷᗘĲܒƦࣆԋࣴьࡩΦժ˼৾ڦĎڴȩࡊҗरä๢ϛಬƄ௬oĭԺݞƦದ˵KߑՖڠڰuϞࡊ࣑԰কͺäघশ؎ૌƇࡘχଞॅݗЭ༠ǝ"], ["@@нϿሎʬୠщॊіސ˟یࠛфΒ׭ࡰ݊Ŭ࠲Ƈश͹ՆࠉʼץථеະЉĝσൡã՚͓˱ູ̯Ƃฃɪঋ»ཅ˷ᒃű๻āҕІଫɮݙģਛږ֔ĚಘƜஈરƦྷȞᅗã஗jѷ̴ዎͲಗ[ืɚ۶ـגͮᖬԠ࡬ǋ"], ["@@݉ևಹך˸Ş૸ٔȁ"], ["@@öɵࢿ|ࣟjࣿőʑ¼ऍѾ̠ИÈነěชң"], ["@@ڎԽޤڴᒆΈ෺ࢅůջဒʒߒͮሀыୄЏŊν༚Ȑ࢘՗᎐ܸͩ͹ߐ޻໯ϹጘչೲȁீޙೖÇʽכ้ঋਗά೓߲ઙĿŁӕࢪӥଜϯΌɟմࠩ́׿੕ɪᑏڨஎܣ࢔ԕƎ̉ᗱͲᅩӤ৳Ц̌ʂయќ௥Т`ʑᝡƅ܃˾ֆؤ཈dႸņ˫̜̊оચࠊɳϊ͕˾౿Рၳ˺՞ɆࢷԺ݋´ڏ˸҇ʛ຿ŅᵝȈᄫʚഹŴۥ̐࢞Ϧ஝Hˉ࡚٦ݨࡺ΄ᓪɢأի"], ["@@৊ǯຄńɖʑ޷Е౜αƱݳ൝͗߳ê׉͎ᐡٮjˎ႖ĽएռসР"], ["@@࣓عय़Խ݆`кѮΨ࠰ɮცྈȱళݟ৉Ǎ"], ["@@ᕍЙѷςኹѺήΤ׌ؘܰւࠑԦᭊƀ஬ǧᒰ±ࠄʑࣖΝ੍ɃᏝןਫי@ν"], ["@@ҙ͙௝Øৱɖ҂Ϛீɨܼ̬̍ˇ"], ["@@ٞϵљϣس൱đࣗƈjӬ൝ÝÁٮࣜౌ˺ஂµÜŎ"], ["@@̙͢ݠƘࢢƪЩԝЋ᭗Žᑯη౩mŅ˜პϊ④ĳ୯Ʈପࠐ߈ɾᛄ˳๶ӻฺÛறߨޔ̪ࢄĭ˲Џ"], ["@@ढ˓ကFܨˡȑ́८ȍՔȧଊ௬ë೸ǼႊðീÏ࣒ͅȊ΍ԽɟభǷ੽ĸᜱŻႫcഫļᖁ˔̃ҦĹжࡇξ჋ĺঅʼ͂ΈႾÁ"], ["@@ŗ٣٩̇޹£༝Ϋ഍ŹଗǼ@@ුؼႮծಆ[ସŬ"], ["@@ϣy༽Âɡɼၜ]מƻĵĩ"], ["@@༩ʋఝ˔ڼˎ௮Đஈſ˩ʥ"], ["@@৽ǏඉBbŤࡴʦҌદǝ"], ["@@కǥۃȚέ͂áΎજӪÅ৐̇ɫ̣"], ["@@͜Ε൏Ĥ൩˘ሏߺʠ৫ȮÕ͐࿶ŕᗢ̫ٞЍ"], ["@@০˕ଽʟ༇ك๥Óდņࣗ΄^̦ڔɢ໡Oए˨ՑϠ׌ώ׊ʲࡴÎοȖዜ¨੶҅මǵ൞ǃڒև"], ["@@ᖢßᅮŅ໤ɫɡᏅη᎙ǟݻȉᆬJጡԙേʃ෯ۇႿƓՙǡᡷěୈĿׇƭ۞бߙ˽ಛʃЋ͡୫ʣŞȏ෬lȳᖟԋᔧɴឿŻధĸཟªĿЖ༊Ȑб؆ԢÐᖤγ଩բഹǈڼ͘๰Ȩʄ̊஋͠ΥѠᘞڒĝ಼̪ቃĬ᰽Á๣˸۩ͼগʘȁ˺దǈঘ࿲ƌం̺ਬ©ࣤɽٔҒૐƈບĢᢲҀĝ᝚ƚᆔÁᆒÁ"]],
                        encodeOffsets: [[[-65192, 47668]], [[-63289, 50284]], [[-126474, 49675]], [[-57481, 51904]], [[-135895, 55337]], [[-81168, 63651]], [[-83863, 64216]], [[-87205, 67234]], [[-77686, 68761]], [[-97943, 70767]], [[-92720, 71166]], [[-116907, 74877]], [[-107008, 75183]], [[-78172, 74858]], [[-88639, 74914]], [[-102764, 75617]], [[-95433, 74519]], [[-123351, 73097]], [[-95859, 76780]], [[-100864, 78562]], [[-110808, 78031]], [[-96956, 78949]], [[-118987, 79509]], [[-96092, 79381]], [[-112831, 79562]], [[-112295, 80489]], [[-98130, 79931]], [[-102461, 80205]], [[-89108, 81572]], [[-70144, 85101]]]
                    }
                }, {
                    type: "Feature",
                    id: "CHE",
                    properties: {
                        name: "Switzerland"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ƫŹȳϞƵіwá΅χƙةŀǻ͹ЏơƄһ˵Л¡αǶ˽ςБſ^ϠؚҾɈϤûɲƞ܎MǦǼ࣒ʱ"],
                        encodeOffsets: [[9825, 48666]]
                    }
                }, {
                    type: "Feature",
                    id: "CHL",
                    properties: {
                        name: "Chile"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@Bም࣒@Ԓw˧ͻܛʻЭӻä؏ʨ࢟ŨੑҸ࡫Ҏୃशۘǭ୼֗૜̟ѢϬ˘ֺޠΎװı"], ["@@͢୅؆ŘĺɁ˿ࢍࣵгඓǫ˓ʦ͡ץԹջ߁̛ރĀ߿ԫࡹϮฏɔƵCޛӑࠍpۯٍշFޙʮࠏԉ̧ɣݡȟࡱƚ৿ͷǡȞॹϜ͇ˡΛ϶ǙĚ̓νǃĜӱ̫૗ѽܓĮыˇՑ٣υôࢹ̧̐֔ÄgؽΒө᎔őުſݝPЙȷݷ̣Ɖ޹Σoॅ˚१ג@@ਲ਼ӔˁՒʄӰх֒Ņ෤Φ߰ࢴٰౣʔߞݒ˸ඊत̏Ѯგ֝ɠʿ਻ՉŠ˂ல˺༒ϮָʍࠎéूΠԨപ׈എΤబȗ఼ʤۚĵਞӮਆưྺ˒ნˀሤÕ൘ǩ஄ќɌɦњЬֱŐ؅ѴΡ˅߽Ҍह"]],
                        encodeOffsets: [[[-70281, -53899]], [[-69857, -22010]]]
                    }
                }, {
                    type: "Feature",
                    id: "CHN",
                    properties: {
                        name: "China"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ԑഓΫۏѷ܂ĩخӶࠜڦَϨʡƣԓ", "@@ܩЗۏʺyܢаϠࣾɾӚoȊ͍σσșӟ"], ["@@ฬˍ঺ׯͼ߃౨Cܰͨ൸ʜѳݱ͙̭˽ः֡ࠇ৵ƪܝ̑ɜܙť঳ѕwLяթӺͯһಙαƀѹܩЍ˂ֽ׭ऑҋۃա୭ʑأϽࣝɭ҂ϴǭ͞ږ֠ѹѲܷ̓ॉ׏ԫթ࠙¡ѓϻѸ֩یƏϕڔʕस׶ݚ͝լuƌѱஓɻϻҏࠇућיࣜҥͦࠝԞޓ֮٥_دՅɯȪ҃ӶʻŻۃɇڗҷ÷ؗࣧڹિޭোିޡୟۻृĩԣύ̃˘Ӈй୭сࢵŹ˻ࢱҭ·ə؎Ȧ͘ૻːЇƍࡍɔЏ΀ƄӜޏƶЙܑ̀҃ࠇīڡJ҉ȳѥūŶ॥҃x÷Ȣ}Ύ؝ʓεƸر͂ʔۤՏǎȧޜࢱƓĴাߔۮۚ{٠νȨ˭ӶӭÙࣟŲ˴ΜϿԺ׳Ν۵ȸॷ՗އسڳĿοɦѹr׷Țґɇ֋رëڌԟǭওĈोȖڿτٵǔ˯ЖҽŦࡓոکʴΑȩଢ଼טࠛՒɽऐ׾őіͭјĐۆࣙঠ൧ͼʝ٦ةϼƫʌųӎ͜ԛȔ˟ďɇިʈȔśȠߤЈ׈ǐࢸő͆՜ંĲͮ̚೜ҔŠȐãӐּɔݱฦဘͲјȈ؆ຒဠˡҲϞ¢ࡆۦĀٖ֔͢èɚו۸ѽப̿׆ڱ͕ঙ̢ηূƝଆŝ৪ԻԲġϤޟӲӿऒnჄȉ૤Ŝࠦůఔԛ৮BόʽঐҌബ̈ాঘ̒׾҈ך˰Ƌˤˍ͔ѴըӀùࡺǝ࠸Ѿ౲͚؞֊נʆ௠ŐڐĥĠ̘ݿזګː٥̳ࠣžӇŃɏΆר࠾Цو৚̓ஆՎQτݸࢾҲːWҪңȦۜмਰƲ૜vసʡ݈̱԰ࡏ̀α̊ԩ̶ࠕ"]],
                        encodeOffsets: [[[124701, 24980], [112988, 19127]], [[130722, 50955]]]
                    }
                }, {
                    type: "Feature",
                    id: "CIV",
                    properties: {
                        name: "Ivory Coast"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ϣUוǒ՟Wহƥ׍ʍ̯ࠫǋvÞۖĄŀ}ͨΣΚˉÈʕɲǾώčО ʔƄB¸ξÝǌĄŜ̸ĶȹڨȗΎæ˸ǘÞŊúɸųٮOƸʖƢgʎĦžΫȞłΌŰϚǽƦ˥Ϙǯ̎ɄϾֺɏɠ஡Ο۷ɕेθܣͧ"],
                        encodeOffsets: [[-2924, 5115]]
                    }
                }, {
                    type: "Feature",
                    id: "CMR",
                    properties: {
                        name: "Cameroon"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ľ°ӻŇԝŒЋÅ൅nŬڒ͟֊ϧƚǟϖɋŦXɶɎתЎ߸ʒRԄӮ͈bҾΉ־˲ĀΔȌͺžь҆ΊǞךǲȊŢѨɜ՚۾ٲ¬˨ĠƲͫͰˌʂ¶ͮ՟Ê֏֏ҜޅҷTʁÏϥČǻЅӸөμƛŠΏˆ׃ſɩх࡛ȫƳÝٳČΝåʡЈѭð̴̟џϨ˓ϥĘʏÓґڛȤڷɜ੗"],
                        encodeOffsets: [[13390, 2322]]
                    }
                }, {
                    type: "Feature",
                    id: "COD",
                    properties: {
                        name: "Democratic Republic of the Congo"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@»ঙͶŕˑ̗͓ɟ͍ѫǯϷ±ګț͍OهʍɹԃŗÝýҟɄϡÂ৥ưޝċѧǘӣӤҹҒ੕ͥĒ૿ƙɣĵʇՙȊχƫষĻࡇɨƫט͝ɲƴìٟࣟR·Ҧ̳ΨٟŠȋѰԣ˅ڧŞ˫ϢՕüϽqµʾ́rϥºԳųιtȻû®ৄ˩̸ÕԬŬԒǝ͖eՊ৳Qò̢ѕGƣԵɁӧűȿҫŠˣş։å͏Ѱȗ˖ʋԌȷض៛\\̍ķʑh΋œşʼɊĘμƎɎ̪ǰɚđ˼͐ҜSÄʃ̼ƩӶՄӨШɆː۔θࠆϬўքМĪˌt̰Ǝ̆«ӊŀݖǐԾʦ҈¸Ԕúה͜ѐҊ˔۔˷՘ؚ̳ĉظǏʦԖŘÞϦčनоͨǱ˖~ŴȲ̺ðلėբoˤĚԘۙϘķɤƖϲÅҶǲȦΫ݊֏"],
                        encodeOffsets: [[31574, 3594]]
                    }
                }, {
                    type: "Feature",
                    id: "COG",
                    properties: {
                        name: "Republic of the Congo"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@̿˾ʩƗͻγۏࢸٖҪ̓֌˾ɂ֦ĺäό҆ЗݐʴЈł֒ĝڀЉӺζ঄ȽǘسçɻѢÔξ੘ڸɛڜȣÔҒѰ޲ԆѼ֪Ɨդ±·ԓʥ҇ǏԽĿݕ¬Ӊƍ̅s̯ĩˋփЛϫѝηࠅۓɅˏӧЧӵՃ̻ƪÃʄқT˻͏əĒ"],
                        encodeOffsets: [[13308, -4895]]
                    }
                }, {
                    type: "Feature",
                    id: "COL",
                    properties: {
                        name: "Colombia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ΫȤЭ˨ʅƅ܉Ŝȱΰƽ_࠿Ӓŕʺ̼ÚтȢ̦иÊΞՆ͐Ѵ̳ȦǄӦȏސǸɚƃ܄ͻ҄ņТ˔ÑǂʠțӶĺŬѢـהΌĚT˦ƺ܂ӖϸՊfäǪڂéڌъ͞ȊОК̖»ɚɛǍ˱գƕɇп͗ʋʓ̷Ĺ׵ɷӭѢÇņϭȄȁâ͹ĳ̵ǫȸéȨ̉ઊĄӦŃעܡͼĚӐĪ̔ƟƱҍȇ˯ß׻ǜ֑ʆʟȉэл̨ȃɠ̋ʰ࠹ǁĻǏӸɷˊ˥́࿕lZԿӰē͏ǙĔҿƑK؏ώ̫ƀӓoηϙᘯп҂ʣpժࡤٟϾԍị̈ƤҧɝصŀӵࢤϳɐˍІ֑Њɡā"],
                        encodeOffsets: [[-77182, -155]]
                    }
                }, {
                    type: "Feature",
                    id: "CRI",
                    properties: {
                        name: "Costa Rica"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@җȆǟǮĬƤȄɷȪͥǔ́ņÅʖəƮÄʑǗȩȓɸˑĊŗǞLʮŎˆʁŠȖǌŴňֆɝȖŊˊéƔǥʜÇȪǲɈҙ͖ͷЂΩ͗õLͷǪűűıƱëǟ©Ǖ"],
                        encodeOffsets: [[-84956, 8423]]
                    }
                }, {
                    type: "Feature",
                    id: "CUB",
                    properties: {
                        name: "Cuba"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ܨÑڊW߄˹̭ͮ޺Ĩ̔ȡ܈ԳԺϛˢ\\ԆǟÕʁئٌ΅ıȟ֑Ń֡¥׃âளą֜Ҷ΁ɔէÈ̃ʐȥӎӃ޵ɦʥǬભž̋ǐ̀ɀࠗ¨׿ѧΏ[ťȳеğΫĂѺʸǼ̤ϞȈіǎَĄȰĢ"],
                        encodeOffsets: [[-84242, 23746]]
                    }
                }, {
                    type: "Feature",
                    id: "-99",
                    properties: {
                        name: "Northern Cyprus"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÐJŨȮ؄Yކʢ֧ΧÔƿęǇÙűj¥iĎÑ¾ǋVɫïƿ¬"],
                        encodeOffsets: [[33518, 35984]]
                    }
                }, {
                    type: "Feature",
                    id: "CYP",
                    properties: {
                        name: "Cyprus"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ãࡱͿЩŊȟͶЎǀ«ɬðǌUÒ½jč¦ŲiǈÚĚ"],
                        encodeOffsets: [[34789, 35900]]
                    }
                }, {
                    type: "Feature",
                    id: "CZE",
                    properties: {
                        name: "Czech Republic"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ϯǂЁ©ٵʲ̏Ùҿ΅ر˔ӃΰѕȬėΠƧʠؒǾ̸Ⱦ׾ǎɂǆɜīϒĖЊ˓ؼñ¿ɳҘǧŲɒּĥĄʿز»ϮЯʡCŽƯȕÅȑǇ¡wý˹ēϋbšȁ"],
                        encodeOffsets: [[17368, 49764]]
                    }
                }, {
                    type: "Feature",
                    id: "DEU",
                    properties: {
                        name: "Germany"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@d͗ࡔțS̗ࡢǂҾɰॊͧІˋȞёɹɣ̨̙Ⱥ҅ß́Έ՛ϑĕɛĬɁǅ׽Ǎ̷ȽؑǽƨʟĘΟіȫӄί̑ϯ̟ŃŢշýƛʿǤЕ~׷ƭݍţɛыɺʩ±࣑ʲǥǻ܍Nń״ьֺ௅ƸЇɘ´ςǗȐĨ֨ƗࢢԎ@Ɉ͂Ⱦޔƿ˴ǐǲ۰°Ƽȃ֮вȓ̀ӈٌōՠŸ"],
                        encodeOffsets: [[10161, 56303]]
                    }
                }, {
                    type: "Feature",
                    id: "DJI",
                    properties: {
                        name: "Djibouti"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ȤʹΑӏȩήɯ̱҇ȅƬȭÏҷb_ʮßɶ˴Ѐ̐ϊήñʪȴ"],
                        encodeOffsets: [[44116, 13005]]
                    }
                }, {
                    type: "Feature",
                    id: "DNK",
                    properties: {
                        name: "Denmark"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ԋڹ࢟ӄŝΒ௼˨ˎу"], ["@@ȵ̓ʡĞɮХ՟ŷًŎͽҲ}࡬Ɣɪʌʦ݌À̐ɴڮʂѝʟ˙ĶɽҘŵ"]],
                        encodeOffsets: [[[12995, 56945]], [[11175, 57814]]]
                    }
                }, {
                    type: "Feature",
                    id: "DOM",
                    properties: {
                        name: "Dominican Republic"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ŀƞپIӾɏɜtƴ̕ҠhʡϐЮ̷̯ͿЍǼϫˡ¢ƱƵ͑½ŷȲˣťͳֻɏƆ§ʎjɬɍʦȲƚÞ͒óҜ"],
                        encodeOffsets: [[-73433, 20188]]
                    }
                }, {
                    type: "Feature",
                    id: "DZA",
                    properties: {
                        name: "Algeria"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ᮩཽᝩ࿷இϑटćU՘ϵƌԹʊȧЀᬻᆴᬻᆴṕᎠfǌ@ÊQ঺ബب࠼Ÿێɦ͎тচͪجӢòϞ̶સƚƸ͜ɛǲ̃ࢲ¹Ԟ́ՠ߰ҠࣦƢՌΎ߶ʰ෎Ƭർæшůߊͨ࣌P΀ȝֺ¾ǟћƄߟȡۙԭҵôمۊԃRȯԮ͹Ϊຝ˖ݏ°ϵƧۇÔϥŃҟòՇͫΗӺؓέ̘ҵϼƸڒϷςՃ"],
                        encodeOffsets: [[12288, 24035]]
                    }
                }, {
                    type: "Feature",
                    id: "ECU",
                    properties: {
                        name: "Ecuador"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@҂غǻξ͍ϵԉςǞʀƙބ̎ŴƺԼ͆զÍ΄ҢǸ׀Ͱࡀӑƾ`Ȳί܊śʆƆЮ˧άȣŞٓʽճࣷ࢟য়ͧԥܵǃ֣Ӆ΋ΙъͻĞ΍áw̮ʈȨıΔ"],
                        encodeOffsets: [[-82229, -3486]]
                    }
                }, {
                    type: "Feature",
                    id: "EGY",
                    properties: {
                        name: "Egypt"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ɽͷǹىɫѩȝƥ˩˔ϛϒ׵ஸđùΐࢯԪࡋٌವ̴ҙ˒ӃݮछǗƣճ঒ݭƨǣΏ@Ὁ@⁩@@ᶶ@Ჴʥڲɐ԰Żά̤Ж૦b߲ɝ࠲ʛϴſ٨ˊΌʊݎêװŃɮеȜ˜ڨȣټ³аɄւ෽"],
                        encodeOffsets: [[35761, 30210]]
                    }
                }, {
                    type: "Feature",
                    id: "ERI",
                    properties: {
                        name: "Eritrea"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@˻˖ΉӰϋ˒ɏܷ̄ͶֻXȭǬӯȡԛϢʽط঑ǬęʹβఀĊ֒ˆʴؤƐьӒӦঃɴޗҢУବߏҲӍҖӝˀ˿аʧʩȳέò"],
                        encodeOffsets: [[43368, 12844]]
                    }
                }, {
                    type: "Feature",
                    id: "ESP",
                    properties: {
                        name: "Spain"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@¦״΃θஒ؆ਊƱ૾NࣂƝۦªമͰ͛໺ϡ̨ǺीϝআŊ®ӥߓ֓ઁǯõ˱ԩү͕ہ͞ӑӟϑǹճىǗש٥੧_ߟhՃ͍̓ͅЩê̵˴ʃӚ޷žé˦̶̀Śɬ̃ʢɶրͳԌδèЈƎŬZپϲɪɻфөƝŁӹCɁЬ΃ū̥ɇ"],
                        encodeOffsets: [[-9251, 42886]]
                    }
                }, {
                    type: "Feature",
                    id: "EST",
                    properties: {
                        name: "Estonia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ĮӸ̱ŁՓ̘ñӘਫ਼ɼ੔Ũ࣮Ƒࢂ|Ŵƣׯӝʞ޵ΫˉۙDܡ̸ρļƩ"],
                        encodeOffsets: [[24897, 59181]]
                    }
                }, {
                    type: "Feature",
                    id: "ETH",
                    properties: {
                        name: "Ethiopia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ԜϡӰȢȮǫּWܸ͵ɐ̃όˑΊӯ˼˕̏ω˳Ͽàɵ`ʭҸaȮÐȆƫǽ̴̕ҧ̴Й̛͎ᩨঽۺNᛛᡃફݟףաeɯ˅ַB͹˴ލΙʝΓ֕àȃĬȟwˇT੟܌ב@˹ˢ@ҾѧƘӻࣴϥȚƧʹэЦԧÒ˸ӐҀrŲʰ[ݲʞࢠЊɾĎ΄ήٜԔи΀ࠠƆܠ঒ǫʾظ"],
                        encodeOffsets: [[38816, 15319]]
                    }
                }, {
                    type: "Feature",
                    id: "FIN",
                    properties: {
                        name: "Finland"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ūיಀ֓ޡى঎ख़֡ܛݴس΅յఘֻ́ѓޭӟᅡੵໃá๑̯ൃǯӡҞ߿ˠȈࠢСݶАӪނՆ኎࣮֖Ǭē΢ୟЈ˳͜uಒ಻ֲ૩ЪԊɞतѻલ¦ࣘȭߠϊЬ؞ಬ˶઄ͯΡכ"],
                        encodeOffsets: [[29279, 70723]]
                    }
                }, {
                    type: "Feature",
                    id: "FJI",
                    properties: {
                        name: "Fiji"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@̂ʍƓѭԳŗҩļąτ͖̀ϤĻȼƐ"], ["@@՛ǯŅ̼оǤˊ°Ӱˀ@ЧՕȷ"], ["@@é@ШǨĽЗ"]],
                        encodeOffsets: [[[182655, -17756]], [[183669, -17204]], [[-184235, -16897]]]
                    }
                }, {
                    type: "Feature",
                    id: "FLK",
                    properties: {
                        name: "Falkland Islands"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@৘Ԍ܎ȿԌʹڦϙʥ̋ଋʥϙ̌܋ϙпϚ"],
                        encodeOffsets: [[-62668, -53094]]
                    }
                }, {
                    type: "Feature",
                    id: "FRA",
                    properties: {
                        name: "France"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ˣ٭ϡǠș֢ǜ̺ը͎Ɯܛ"], ["@@הЅќà݀ϥȊñʎjЈɗெƷыֹŃ׳ɱƝϣüɇؙҽ]ϟВƀ˾ρʁʚ̿̅ʯɐٱҖŃĩηݿӅစɬ௧˗ĩԑঅŉिϞ̧ǹ໹Ϣͯ͜ѢԎǆူࢁࢤإю౹͒čؖઠǾථɏˇॎߌέዠپʨێܾǞŪ̑ϸ_ϸ͵"]],
                        encodeOffsets: [[[9790, 43165]], [[3675, 51589]]]
                    }
                }, {
                    type: "Feature",
                    id: "GAB",
                    properties: {
                        name: "Gabon"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ࡹࡔ։ۚԙࢄ˨ǾˎȲؔǜخ˴¶௢SOৠЌÆԞőӼňľ¯ÓνɼѡشèȾǗεঃЊӹĞٿŁ֑ʳЇݏ҅Иãϋ֥Ĺ˽Ɂ̈́֋ٕҩ"],
                        encodeOffsets: [[11361, -4074]]
                    }
                }, {
                    type: "Feature",
                    id: "GBR",
                    properties: {
                        name: "United Kingdom"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@҉ֽًǦԱ[ǦҊǥ҈۴ࣔԳ"], ["@@࣋ࣧࡦŘऄIɕۅݯݩࢄÃäĕݠ঱ֺƇԬढ़ʈͧৰǅķ՝ѓʗͲѣݱѯ૳Rෝɱϻǒ։ϿޥĪם͍ҁǘ௼ࢨݪǺOBಽƔʃͰ࢜ʺҡҐǆռఢ÷D@ŮӤ֛Ԯ_\\৵ƨȧɬ̨ϒˡɴҍЇ·߶щє̨ࢆٶھڤá০ì"]],
                        encodeOffsets: [[[-5797, 55864]], [[-3077, 60043]]]
                    }
                }, {
                    type: "Feature",
                    id: "GEO",
                    properties: {
                        name: "Georgia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ųάȿִӟ̲ҭĬ̯ʴĺĲ܄ƝఆƋଦЕƦƻԚƂ޶ǭʴ·Նșɓřвғŗıҏºصʎȵƍଢ଼ſ߳Юࣅ¡"],
                        encodeOffsets: [[42552, 42533]]
                    }
                }, {
                    type: "Feature",
                    id: "GHA",
                    properties: {
                        name: "Ghana"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@೉ӯҳ˽ݳʑݡʆͨηܤɖैΠ۸ɟ஢ŗنrӊฤ¢ϊÕ˔ƊϴáÕʿΖџC؍Ąڍɂ̫ȅݳäйɢՓȈ̍"],
                        encodeOffsets: [[1086, 6072]]
                    }
                }, {
                    type: "Feature",
                    id: "GIN",
                    properties: {
                        name: "Guinea"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ʃtǡͷʁJǏǴÈͶΗԨɕħǵmɳ³V̮ƇɘʔǻΜɹ̜ڥDțǁɵoƝǷīɹ҅σρӼ͛͢ɋŊȿǖħϊūȂʓƐώЦʮeɖƘȄDƄŎï˨ĢĖd˶МUȱȄlÚĤҜáŨ´¶̭ƆBɖŒƔɸɇάãɲǺ˖ŒȬŠǚuȈȁĴɳΆΙǣɏ˙ǴĊŀį«ʡʲʍǗÝå˷Ș΍Ⱥڧ̷ĵăśÞǋ·νƃA"],
                        encodeOffsets: [[-8641, 7871]]
                    }
                }, {
                    type: "Feature",
                    id: "GMB",
                    properties: {
                        name: "Gambia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ņόࣶzȎȦˊ`ͨȷʼIˢƚǞʏεȋιdέǰ̷ȗƭQȫŝއl"],
                        encodeOffsets: [[-17245, 13468]]
                    }
                }, {
                    type: "Feature",
                    id: "GNB",
                    properties: {
                        name: "Guinea Bissau"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@҅ΘΝÈȕʀLŸʯǴÁǶѼƌ˦ɦĨ༈c˵ġĕð˧ƃōȃCɕƗʭfύХ"],
                        encodeOffsets: [[-15493, 11306]]
                    }
                }, {
                    type: "Feature",
                    id: "GNQ",
                    properties: {
                        name: "Equatorial Guinea"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ƿŴ़̀െmPয়௡T˳µ"],
                        encodeOffsets: [[9721, 1035]]
                    }
                }, {
                    type: "Feature",
                    id: "GRC",
                    properties: {
                        name: "Greece"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@Ҡ˱ٺ¶شÑqƣҜĶĿʛ௃íTƒਁǎƺΦ"], ["@@ʹՁȥĥԟ|ѫĀৱɓ׌ҿяƋҳAѻўƿȁȊԅрЁ̓ǿҴϯжʑ^ӅޥɠʜѕՓĕ͈ݏ֏Yۍμ̿ڦƧ֒͝ϮљӐÉʆϸТ¼˚˘Ũjɚռö͌ȀҖgƒƦǆت{ڨɲע̉ކĀVмЦɝ"]],
                        encodeOffsets: [[[24269, 36562]], [[27243, 42560]]]
                    }
                }, {
                    type: "Feature",
                    id: "GRL",
                    properties: {
                        name: "Greenland"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ᬜԆ᱒ੴ̴ᲈĄ䀦Ŀ㉊ڗ༅͕ộ⭏ćшƫᲐĠᡚ́࿈ʴۦ̝इӧᒞ̺✘͚ᠼǋҾΫ⃝ױӃȕ᧑ơወ¡ছؕگկध৚շಽ൧ˇ༂ѽȢ܋࣍ýઞܡህÑঈ΁˟̑இŽ୥E੆֩\\Ϗပΐћɣଌȿ઼ԣ͈ڱກǉ٫͖ਣӘ˼֭উѵᕖ୆¯ᖯܵᗿڏឧ́ओIࢅ͓ୟࢱᅵכׅ૧ȷ஽ȝܛԱ[כыտോڧͺٿϗљࠍஅ½఍ۈဿLࠁҢ֕ࠐฝਲэոŗݮ୓ޢ̢ئ֗̒ࠪচొ̺ͨΘǬڀॡ̕қůݯţਏ˜Éְ͢҂ެ\\႔ɟ෿Քݩ˾࠷ş۫ȼम޴ԝ̺ڗ׈ৡࢼ੯͚XΚᖷӮᄻÖᖟᏅ×ইˌวՈᕂ˄ၚ¬≹ɖ቉΄Ś͜ẊИᶎИ̪͘ᗗ̠ܺͰ᯲ז௢ĚΓϘጲɜᣚƂᣖRࣺʽᕺҨፘ̽୺áპ˙ፅҐŘή"],
                        encodeOffsets: [[-47886, 84612]]
                    }
                }, {
                    type: "Feature",
                    id: "GTM",
                    properties: {
                        name: "Guatemala"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ћƦԻfϩǖҍΌrʖĮȠšƾКۆ઄Ft˸Ƌ¾ġǺ̵Ț̹ˬϜDBӂ޸BަUOڗßॅʤ@˚ƱòŰʘŃϥ͍ЉɻÏǉâǑǧɇȟ½¬ıƿġ˽Ƀ}ŭ"],
                        encodeOffsets: [[-92257, 14065]]
                    }
                }, {
                    type: "Feature",
                    id: "GUF",
                    properties: {
                        name: "French Guiana"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@͉͑ГÑŗʀȉʹɩνǦɈΪòϤƢή͛ӸáֺѪܠ˸ğؤȥࢸۿƔ·ӻޑʳأ"],
                        encodeOffsets: [[-53817, 2565]]
                    }
                }, {
                    type: "Feature",
                    id: "GUY",
                    properties: {
                        name: "Guyana"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ր̯Դյzџ̈́o҈Чͪ̇Ƈݱԛɕ°ȣƹџϊ؏ːAŎӃԢܳȱҫî˙ɡϟƥ˅ġǑЭ¦ԫЀÓϴɋьƆܐɸ̐ȕϸ˿ŶŊτțȘѩْ֩ɬɲiϲԬƊȾƾ˽̸ô̬ږӲ"],
                        encodeOffsets: [[-61192, 8568]]
                    }
                }, {
                    type: "Feature",
                    id: "HND",
                    properties: {
                        name: "Honduras"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ơˀʭòÐʹŗĞǣÒσĳŔʩƈǷǚʛìǨɈáǒÐǊЊɼϦ͎ĔȂƨʊ\\þåž¦ϸùϲv˒ĢİĦˎ©ȪÉɘnǖòϨśƄkʲƿʐį̏Źɜɳ˽jśŕ̇ŋɃAȅŃǙƛźĕ{ŇȩăRaǥ̉ɳƹıđĽʛǞǹɣǫPȟqlЭūQĿȓʽ"],
                        encodeOffsets: [[-89412, 13297]]
                    }
                }, {
                    type: "Feature",
                    id: "HRV",
                    properties: {
                        name: "Croatia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ȳ͗ˊʇ͓̓ϝȆׇ[ܟƔϽmǻǧ̝ȖǫΑЪϽǼʹϮ̽͌ȃ͆Ηݔ͇ġƛ߃̶ӣ̢ޑʠ۹ؤǞØϥΞe˲եƄʱγʝˮn̆bגƸƚ˸ƍͤgGɼ̈ĒĈͺڞɠˊĻؼέۜǉ̼Ų"],
                        encodeOffsets: [[19282, 47011]]
                    }
                }, {
                    type: "Feature",
                    id: "HTI",
                    properties: {
                        name: "Haiti"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ԢܰƁôқÝ͑ȱƙɎʥiɫ֏ƜЅÍԡÔϽƿ҉ʾö˔ޜśيã̢ȈϧθP͎ՋžȌɶ"],
                        encodeOffsets: [[-74946, 20394]]
                    }
                }, {
                    type: "Feature",
                    id: "HUN",
                    properties: {
                        name: "Hungary"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@˨ըǍǼӂDÜ΄ђɋ̲ğ۸ļäǚͮ~ЦžĜÃЂŀȠȢˠ¼࣒ʭǴĒҲɭÎɣԡǭЉ֫ԕ֭کǁԽ١ə̻űۛǊػήˉļǍ˴ƗV"],
                        encodeOffsets: [[16592, 47977]]
                    }
                }, {
                    type: "Feature",
                    id: "IDN",
                    properties: {
                        name: "Indonesia"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@Λe૝ך޴ǒѴʭ̎ʭ»ɩ"], ["@@ܙȁĳĶø˸ΰԢࠨͬĐǓfʫշع"], ["@@̢ɣԲèȼΥॿǛ׉őҍP̀ӚҤPɤ̖"], ["@@ūұ౅ʅૣľE̬ښǪՂʥ֔Üݬ̮"], ["@@ྔċȂΌ༘З̪կీƵਐӿय़͋ऍ͸ݻwࢍØ޻ưঅ͎؝ČΓŁ໕ΌƣΰޑØּߤ৶·ڴ͡ΒÛŘ̗"], ["@@ѝֱćنƬ̠Ǭ˴ȒʗCЏ"], ["@@̿˥ׅƸǏΰࡘ¢Ⱦˣ"], ["@@̨ٝۿΌۯìӃÅׇȦҦਠऎʕ"], ["@@ɼയ࢈ԉ۰ࢼ८ԔݜBܘ̉خ̛ࣘǇbᩑbᩑݟې࡟ǜȷʇ੡}ΦۂՈɺɕࣲЕ۸࿃܆ۗêృަʛУ͑óȏ̮GκٛЮ̢ࣞ״gëɠ௵DͩԄݥƺΡдଈȰњ˜ഘ·Ƃ̹"], ["@@ڭ࠭كǉ߱ǐඓ¥ܽŧţٍݪݛҒϠ༪˸çϯλŪιӯ͙݉ߒ੿Ƶ˿ݲॻQտ҅ʙ̐͡Мی࠙͗ȻɶŊ͖؅ӲØࠌ֕ʭîওறՓũίʚʌޜŽ߸ΛPʻֺΎվŤښф౎ǮΎ܎ذپʛ੖śॴࠨ؎Ʀȉ"], ["@@©ܽџĈŷԝΌѷɽĵ͹Ւʟ੺ǚڤ˨̨ÔҝӸóĀ΃"], ["@@सާহį˫ֵݿַ߱u࠷͕౻ŭ̚ॕϙͫԤ׳´лːৃ̟̩Оս¯ۗĬŹૺнɺЕܘŝ݀ĮުԂ֐Ɩָ֗ӅըǠ՜ÑӪъЖôߒɽۆǶњୠ͔̈̆क़ॲ@ܰƙӍݷآߓơϭ"], ["@@छkۻ۰અۊέԚٍۄзؾٕ୴۪݅ʙܠ̳ڀݵՊѭܘمҺࢗऒóђզಢǋݔࠓٮ֫ҪΓߔࣙࡢ_ۺֹӠ۳٘ϥͳۉӖ̞̅sƜו̊ҵؠõФՏɁ਱ಟ"]],
                        encodeOffsets: [[[123613, -10485]], [[127423, -10383]], [[120730, -8289]], [[125854, -8288]], [[111231, -6940]], [[137959, -6363]], [[130304, -3542]], [[133603, -3168]], [[137363, -1179]], [[128247, 1454]], [[131777, 1160]], [[120705, 1872]], [[108358, -5992]]]
                    }
                }, {
                    type: "Feature",
                    id: "IND",
                    properties: {
                        name: "India"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ࣚটďۅͮїѕ׽ŒɾएࠜՑ୞חՑϟ͛޻ࠀͅߊЭરһସŉӜёٮāৠȝ۪bĪͪŋՖÞβԠǮìڋlǙކ͉Ոƀ܀Çۈ|ÐԪ΁ˎڴŀވشॸ՘۶ȷ״ΞЀԹ˳Λ࣠űÜ͇̍Ʒèԫ׷Ʋછׅ~ӓҩ۵§ХϏۗځȒࢇȏ˹ĚΣгȥѵ೰ɵEƍ՝ҡѦʸӎϖ¶ϰ܆ӝƜީ]ߝŚóאБ¤ڕζ֭̓؆ѻԿ̻ȅ̩Ԭɣƛԑ̆كžەţֱ̫Zਛǩ´ك҃ӻ௃֡ळ঩كՋ࠷ջCϭлȹݳ̝Ͻ«ʥٙǪધ®ۡΣߙI෗ѣ¡ϣٙʰˣދʃ˱֯͵ʍߑ޸ϳ୴͑ࡒ̍Јѿ߰ȻੂơՀޅ଼Α࿀ʣ੾HৰǍ޾௣ԉףĶ઱৲И̤ʝͤড܊֖֔ᇜCǗܞҽюĩ٨ջϘऒࢢঊÙ࢞ࢢՄ࡞ࠄࡈ_״ܒӠڳд֪݂̇̕Ьβ౤ȱपŰߺ۸"],
                        encodeOffsets: [[79706, 36346]]
                    }
                }, {
                    type: "Feature",
                    id: "IRL",
                    properties: {
                        name: "Ireland"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ƒ׷ًݣ๯ӹ஑Ŷڼ࢚ѭࡢତڄٌϼǦ҇ǥ҉Բ\\ٌǥ"],
                        encodeOffsets: [[-6346, 55161]]
                    }
                }, {
                    type: "Feature",
                    id: "IRN",
                    properties: {
                        name: "Iran"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@݈ǌװӔ֚{τƾװýघэڤğ।ݓظòۻ΁਷ɱؑκŭΫҡˠڡàՓِƙæեݿݿжѵ͸ԓߦυx݉ДƋêϯ௉ѡ̓উཌྷʪࣷȖेŊΧਐЕƪ٣ƭࡑНਇ˦ࡑ٦߳ʈ֗ߘا૪ҍƋՕ˦̻͝ҭѴS҂ˍ@Ɛ،ѝٔ਍Ң׉ߜȜپц̂ÙӬտʨխ৊ҟڨǐʼʿ६ּʈƄͅъϯ־ő̤~রئ̀Øʞʙ́гԼѱȾ¦ˈإߖǩ׎у஠ƟಾɞĄȞ"],
                        encodeOffsets: [[55216, 38092]]
                    }
                }, {
                    type: "Feature",
                    id: "IRQ",
                    properties: {
                        name: "Iraq"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@րʧÚӫх́țٽ׊ߛ਎ҡўٓƏ؋ˎ@TҁҮѳӿ¤֟ê؝߭༟äᛍၖఫךৡɪ͹৾ᇶ࢔͆৬āؘҢȺјԾΰž঎Ň̐ɉЖƚծ৉"],
                        encodeOffsets: [[46511, 36842]]
                    }
                }, {
                    type: "Feature",
                    id: "ISL",
                    properties: {
                        name: "Iceland"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@șիॊֵથٙᝓֹܣƵૉŮᚑˈࠠψᆧЪ๪ǎʘᄋȜ֨նౠŰಸ֭౨Ҝ੒ʃൌ҄ආÑ"],
                        encodeOffsets: [[-14856, 68051]]
                    }
                }, {
                    type: "Feature",
                    id: "ISR",
                    properties: {
                        name: "Israel"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ƥ˅̣Ŝǫ֓ɂĥɋřɛЄŖp͛нഉց෾ʔˢË¶ɞϼǠيŤɆzVˬCþƦɤ\\`·ŕŵhM"],
                        encodeOffsets: [[36578, 33495]]
                    }
                }, {
                    type: "Feature",
                    id: "ITA",
                    properties: {
                        name: "Italy"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@̟ڋŲʹǭѝٝ̈́ёĞ୩ѐŞќজûࡪĠْò"], ["@@Ԍ׭ş૕ϣÂ΁˫͇ɞ২ȓӒҨ¥рʼ"], ["@@ரɏĝЯȬΧڝŪہ̗²зĻʇˠё߀чцۛदڱچLȲȃɽǗݪ̥ؠʩܜѫĔƿƽ̛үϼܳƐΝի؈̷ıѫΗ¹҅ܛΕÝHʲǢҊǼǶ͝ӤʱшΑŀʛδգƴεͶثÆٿϜޑմ֯ӜʿࠪйĮہˤϯŕӝϵΓÕĪθҕńɏٲ̆ʰʙ̀ʂβǵМ¢Ҽ˶ƢƃАǼͺتĿψƚâΆԘšĮǆࠨƤȊ̉"]],
                        encodeOffsets: [[[15893, 39149]], [[9432, 42200]], [[12674, 47890]]]
                    }
                }, {
                    type: "Feature",
                    id: "JAM",
                    properties: {
                        name: "Jamaica"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@֢÷ҀȫƔɯןeʭƗҹƊӑ̪ĶȔΜÎȒ"],
                        encodeOffsets: [[-79431, 18935]]
                    }
                }, {
                    type: "Feature",
                    id: "JOR",
                    properties: {
                        name: "Jordan"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ʀˆपͫ࿪ࣆͺ৽ǅų၅у࠸࠿ˣƛƑ˭ٙřȩ̡εʵधƆŨоഊo͜Ůʚ@Ԥ"],
                        encodeOffsets: [[36399, 33172]]
                    }
                }, {
                    type: "Feature",
                    id: "JPN",
                    properties: {
                        name: "Japan"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ņ˽ҿԕΉːљțɝӭշʈRЊҬԆӌīΊΜؠǹ"], ["@@́ڡƤсѩף੹Ѓ๏½ணॡ͔֡غษȃষЃঝe࡞أ֗෗իΝН͜ȶݶՏʒͿ־ߐʶѲՈࡌѢ؞ָာʤ࣎ǣࢠ๺֔Б௾ࡀӌ͜ՈਈƟा΢ՎࣀƸҞୗ}ڻޥࡍbࢁ"], ["@@נǵרΤȈहఝɯ݁࠱೓ָқँण]ř࠴д٨࣌²ʖ୐ʜټন࢓٤˯"]],
                        encodeOffsets: [[[137870, 34969]], [[144360, 38034]], [[147365, 45235]]]
                    }
                }, {
                    type: "Feature",
                    id: "KAZ",
                    properties: {
                        name: "Kazakhstan"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ӕƹ્דο׹̹KɱЊ੫ǡێХNÚࡆ৓ؘ෷ßডũߣݶۋ͆ಥ׼ƽðᓗӹᶽљ£יچ֧ɼॕǩχ˧±ȲȶΖǅ̊অ˺ϛݮҩɆ˜ࠊāؘ܎ƎܼűƲࠎƭԲ࠿£܍ȴঃσ޵ǭяƌĐўՙ֘دw܉֬ӞِʕǢڢऊࡺӣŀؘჄࣴಾtᇢ׉঺ͻࢼΠ೰j੺ѥʔʠ୼ɂЊഷ׀߮Цƿɮ߮ɔ؅ֺϬ˼Ḯ̈ШȺᑆ̴ݰΒຢǹ˄ࢉ࢚Ȳઆ˹éҝ߮´ᑌߎ̭ˁ੶٭ሠᒑ҄ѰୄӛீɎҪƯКӟטǋΨΥ઎ŒѾԣٕ֓ۥÿ¡ࡅұϝဟˢ؅ຑїȇဗͱݲลֻɓäӏԭŬу̠ఝĖඃx̧ġ஥ΞӉǧŽӹ൩̂փşȉρ"],
                        encodeOffsets: [[72666, 43281]]
                    }
                }, {
                    type: "Feature",
                    id: "KEN",
                    properties: {
                        name: "Kenya"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ӾۙיͱȹΕ̿Õšףˑ͹Ǐ֑ͷ˥஻ࡀËӤᵁႌƙĢSࢺʊ;а֌̨ؔσ॰įтЉ׎ԬԈ֬ֆѨƗ@ҽ˺ˡג@੠܋ˈSȠxȄī֖ßʞΔގΚͺ˳ָAܽ॑Xᵣ"],
                        encodeOffsets: [[41977, -878]]
                    }
                }, {
                    type: "Feature",
                    id: "KGZ",
                    properties: {
                        name: "Kyrgyzstan"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ȊςքŠ൪́žӺӊǨ஦Ν̨Ģ඄wఞĕф̟Ԯūşȏ೛ғ̙ͭઁıͅ՛ࢷŒׇǏߣЇŜȟʇȓཟŵਡ˘࣫ÝĂӜࣴƕ̮ʸٖĉ੾঻ѸױȽإ͂۶ծʟĊ"],
                        encodeOffsets: [[72666, 43281]]
                    }
                }, {
                    type: "Feature",
                    id: "KHM",
                    properties: {
                        name: "Cambodia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@΁Ѭыࢄȣ২ՠۨઘǆ߀ťۚ͡Ϟׄݖ̱Ȝ֕Ļ৕ඳ٧τԙࢥÓܫͷ۱Ū"],
                        encodeOffsets: [[105982, 10888]]
                    }
                }, {
                    type: "Feature",
                    id: "KOR",
                    properties: {
                        name: "South Korea"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ܨযȺխPॷ̓ҥݽǉڥΏݳïĥҚƼـχ࢔ذƚֻܘÂúϒ͞Ϝצ¢ΨÈŨȮ"],
                        encodeOffsets: [[131431, 39539]]
                    }
                }, {
                    type: "Feature",
                    id: "CS-KM",
                    properties: {
                        name: "Kosovo"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ǣŃPĘ́ȩĐǳɦƾȌȪÒŜ˨ư²Ţşƾ¿ŌƅƒǎƻŢLĥȳĳĳ×ȉӹŻ"],
                        encodeOffsets: [[21261, 43062]]
                    }
                }, {
                    type: "Feature",
                    id: "KWT",
                    properties: {
                        name: "Kuwait"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ǭχõȓ˔هשuȽАݟĆ؞߮֠é"],
                        encodeOffsets: [[49126, 30696]]
                    }
                }, {
                    type: "Feature",
                    id: "LAO",
                    properties: {
                        name: "Laos"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@˚Ϝ܆ڹܸ¿ٕࠦھٍÎǛ̉ӯyʣƨࢯԅoݬȸࢮ֧³ԎηʸǴ̲ܐնøȡ҄wŵ०ѦŬӮڏϖޅਚO͚ܹ՝ɗʉ̟৔ԉۦ঳Ռ݋َ׏ɄץƵ࠿ݕ̲ϝ׃ۙ͢"],
                        encodeOffsets: [[107745, 14616]]
                    }
                }, {
                    type: "Feature",
                    id: "LBN",
                    properties: {
                        name: "Lebanon"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ɣ[ýƥ˫D̘ۄмעfϘ§Ɛͣқ̓ȷҟ"],
                        encodeOffsets: [[36681, 34077]]
                    }
                }, {
                    type: "Feature",
                    id: "LBR",
                    properties: {
                        name: "Liberia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ɗQࡽАޅٖҢ֣ըȪː¬ʔϜҘϺϺǶnɖĨΘԧÇ͵ǐǳʂIǢ͸ʄsʓĎНǽύʖɱˊÇΤΙ~ͧăĿÝە"],
                        encodeOffsets: [[-7897, 4470]]
                    }
                }, {
                    type: "Feature",
                    id: "LBY",
                    properties: {
                        name: "Libya"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ק̷ҿҤ೧βρՄڑϸϻƷ̗ҶήӹؔͬΘñՈńҠÓϦƨۈ¯϶˕ݐШȜðΠėΒ־͔ʶːЦʌ´٦দ́ΜðۮƓ૞ϓЀݛݮǍஆΙࣆйЦɔЖϮț٠˂Ф؄ЀׂŘ଒ǣ˺ϑ̺Iˌƛ࠴ıȲˣ̣ЕżΫɏԯʦڱ@Ჳ@ᶵ@့ॱGYΙ‧ྐ‧ྒࡓҟ"],
                        encodeOffsets: [[15208, 23412]]
                    }
                }, {
                    type: "Feature",
                    id: "LKA",
                    properties: {
                        name: "Sri Lanka"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ų࢓ΙʇܵȓЍڜƫீϠ഼׆ұϺסО࢓"],
                        encodeOffsets: [[83751, 7704]]
                    }
                }, {
                    type: "Feature",
                    id: "LSO",
                    properties: {
                        name: "Lesotho"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@̆ʩʳУƛ˛ҳſƹˍ̛ċؿ٨҄ՐҖ͢ϼǠξʵ"],
                        encodeOffsets: [[29674, -29650]]
                    }
                }, {
                    type: "Feature",
                    id: "LTU",
                    properties: {
                        name: "Lithuania"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ãɊĚɲχƄࢡƨǱ۸२ʴඬÁࠜĊŞǩ҂Ã߲СĀϓۏˏșӃ࣯̓߻NȫʶљĜ"],
                        encodeOffsets: [[23277, 55632]]
                    }
                }, {
                    type: "Feature",
                    id: "LUX",
                    properties: {
                        name: "Luxembourg"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ǘȏ³ρʍiȉòĞҼɖ"],
                        encodeOffsets: [[6189, 51332]]
                    }
                }, {
                    type: "Feature",
                    id: "LVA",
                    properties: {
                        name: "Latvia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@نЮՆߊ˼ڜعڪhǊ٤ܐƪςĻܢ̷ۚCКȕîС˒ӷ͕ࣗԛƙ߱ТҁÄŝǪࠛĉණÂ१ʳ"],
                        encodeOffsets: [[21562, 57376]]
                    }
                }, {
                    type: "Feature",
                    id: "MAR",
                    properties: {
                        name: "Morocco"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ԒΥߜÎࢊȃκU͂՟ºԝ̄ࢱɜǱƷ͛ષƙϝ̵ӡñثঙ͍ͩсۍɥ࠻ŷഫاRহŷ@@@p҉Ա˓ȑϡ@̥Ŋ۹ě˛ٻʿÕЁ੕ୟ࣡ˣୋ΅ϗĵ̡ቅãaD ϶͒ɮ˞ѪÃ˶̀פҴՖ˲ƊɞӬp҂̤Բ̪֔Ւ࡬f\\ц͔ްĢڎָтɠۮۮȿਸ਼͊ܢŔѶդ֨ࡈϦخΐ֘࢈˄ԪؤI"],
                        encodeOffsets: [[-5318, 36614]]
                    }
                }, {
                    type: "Feature",
                    id: "MDA",
                    properties: {
                        name: "Moldova"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ȨŮ֒ĊؤʽΊϞɥÑ˵̪ƏŨΗ̊ɇÏűƾčɝ×ӷ|ĉŜǫãÒƭɱˍƥ˽ɁĝƯϦĘΪςӝԂˉΠʹʠʯĈ"],
                        encodeOffsets: [[27259, 49379]]
                    }
                }, {
                    type: "Feature",
                    id: "MDG",
                    properties: {
                        name: "Madagascar"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ɠΥȺ։Ɗঢ়ɒϽĉЗƩʙ˷ӰǁʝǈثõΥɵȗ¿܅ͧওб୅ԯཧ͑ୟϛইہȣܻΡӛɊڙ̜ɳѺÇݘ̑ڠùƮ؄ϰƢD˪Дِø՚șЈǃՌãޠ̊ҺŔՒмҶǤ̶Ʋτ\\ӐӎۖԮʦцŗάΦĵҪ׎fԐ˦ϔ̊ί"],
                        encodeOffsets: [[50733, -12769]]
                    }
                }, {
                    type: "Feature",
                    id: "MEX",
                    properties: {
                        name: "Mexico"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@͙݅ƥÕ૷ąЧƤқʺЧǚٳ֎سȞӏ͢бࢾɝΐΙ݄ɾٚĎؼưՊƠՖ΂ȨӬè۸Ƣʖ֬ɚࢶȚݔԚîȬǱЙҋԁȥԝƸƥűγɁٽɅɎǭcǃY̝ԓƳĲķPŭޥV޷AAӁϛC̺˫̶șĢǹƌ½s˷ઃEЙۅŢƽĭȟqʕ्ࣞџ˘ۇɖҷÓګ́чĉץɜؿǄ޹ϬؿŠ्ϸ۱ВɃɤҹº࡯ˈΓϦࣗӊсՌȧЦ˪ĈđʈȖɔJ̄˱Ϙùͮ˭ъ݋࠴ࡋڀУԼܝ΄ƷȴŸԲѓȞӹФȽהҍæӣѸϿФˀҍو̓٠^͔؇ͬ˫ӑɴƇͿƔЕĆف̀΋خׁƒȡŸÓŎ˽Ƭ\\ǜթʮɇǴ̕Նё˨ޯʠρɸϿ²ѷКͶϡ̨ϑqƭΝ̱ƫJɛԞջӎРїɈؚŵҖЏʺֿϒŏŇɃɖԭȰӷӦÖÚΊ³̸̼Ϝ٩׶ӱɶ̱Հ̷վϳڦͿݲॖÞ੪ĞÿǑ౔СኀףဪPژ@DΌผ@̪̕јˇԀσ˨ѭȾҥѢʩۤʥՊڒۊhפͱфֹ̄ӯӸӏȂחɾЃپʹ׮ȁ͞|"],
                        encodeOffsets: [[-99471, 26491]]
                    }
                }, {
                    type: "Feature",
                    id: "MKD",
                    properties: {
                        name: "Macedonia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ńOǤӺżȊ˺¶ϴbтˏÒ։ǅƑƥҕh͋ǿջõΑȴšήń˸"],
                        encodeOffsets: [[21085, 42860]]
                    }
                }, {
                    type: "Feature",
                    id: "MLI",
                    properties: {
                        name: "Mali"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@˰ƶƘӶˊpזɻӄǖ͖ÇŴȈ⁚^ȈךƣļЛ⋈Л⋆౾dᬼᆳᬼᆳȨϿԺʉ϶ƋV՗ठĈFካҟ֗íԭݛƃ଩ï̳̗ա՟Iȿǈҥš޻ΑǅʿٳϕŗɍΙǡНŔɱȳūֻڙۡp˳ɭΣÆӥ΋ůȝŁŽάʍĥơhƷʕ٭PɷŴŉùʱʎ¬ʢĿİǳĉ˚Ǥɐ΅ΚĳɴȇȂǙvȫş˕őɱǹΫäɷɈƓɕőƅAµ̮ʾí̽͘ʀǓӔԺ"],
                        encodeOffsets: [[-12462, 14968]]
                    }
                }, {
                    type: "Feature",
                    id: "MMR",
                    properties: {
                        name: "Myanmar"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ӫηץϥࣥΟƳО݅ՔؗΈօ̭ܵ̃ƹȪу֖ڙĪҷ_ϵ͠ދң޵Сࡷăذʴ٠˯ӼæࣸͽѤ˛৔Ʊਗ਼εۢօуॕ׳ҽöԳȠ̂ਪǫ޾څॺļ̢ӭņ׭ۆÅڰ̊ŵj׾дȦęΤȐ˺࢈ڂȑϐۘ¨ЦҪ۶}Ӕજ׆׸ƱçԬ̎ƸÛ͈ӮÚˮӵξȧ|ٟۙߓۭĳঽࢲƔȨޛՐǍʓۣز́ζƷ؞ʔ~΍յǳ̱ӓȗ"],
                        encodeOffsets: [[101933, 20672]]
                    }
                }, {
                    type: "Feature",
                    id: "MNE",
                    properties: {
                        name: "Montenegro"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÁǀηЯÊˋǫÞɽ˞εǖĢƜŬҦ˚ȜƾüɠƟŬśˠě͌ǧçïƽȋɧó"],
                        encodeOffsets: [[20277, 43521]]
                    }
                }, {
                    type: "Feature",
                    id: "MNG",
                    properties: {
                        name: "Mongolia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ࢮƢ྄ܤ౬Єܴʳ࢚]֘Ͻ࠼ௐɁࠈגͿӶࢊࢊश΍ނįনɍǈؿஜΛߐƺਫ਼ŌࡆōࠖЗԚѕެT੒Ƌޜȼૈƒ௸פԌĝѰ˭ৌêХهק࠽ɐ΅ӈńࠤŽ٦̴ڬˏހוğ̗ڏĦ௟ŏןʅ؝։౱͙࠷ѽࡹǞҿúѳէˎ͓ƌˣי˯׽҇গ̑ఽഫ̇এҋϋʾ৭AఓԜࠥŰૣśჃȊऑmӱԀϣޠԱĢ৩ԼଅŞুƞ̡θ͖চׅڲன̀۷Ѿəז"],
                        encodeOffsets: [[89858, 50481]]
                    }
                }, {
                    type: "Feature",
                    id: "MOZ",
                    properties: {
                        name: "Mozambique"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@لæ৞ʁɖńגt̚ʦԌaऀ͜ڞӤƊϕ࠷ľ݅ಿƨЫʣ׷͙׍՗Եޏ͉ृСॉ͓ࣕƵוׯ΋ȗí׳ЌُǔӱZʣƪ¦{ࠗƋϷȤƝűΓΗ̗ۗ˳য়ҕρ̳ðΟɊÉíѵّRïϊůϖí̠ƬपɓװГஂࢬ॔ɜ؆ŶúĨӶƉʞغǐ׌E੠ѥ˒ЏÔǹȼϳǰ۫gÅ̼āװᢈۘӚЕɴüͨɅ¸͵ǯϷØסոԱʲ׌ζǰíઊΙ؈̣˖̅]ɽદɾٔ"],
                        encodeOffsets: [[35390, -11796]]
                    }
                }, {
                    type: "Feature",
                    id: "MRT",
                    properties: {
                        name: "Mauritania"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@և־ԗؤ֍ɞГʚҵUЧǽйð˽ˏïҐɺаŀߊģࠨĵкČмɑЎѵδǾˬᾔMǃ௎ȴќ߀øᒸ᪂©F౞Ṗ᎟౽cМ⋅М⋇ƤĻȇי⁙]ųȇ͕ÈӃǕוɼˉoƗӵ˯Ƶ"],
                        encodeOffsets: [[-12462, 14968]]
                    }
                }, {
                    type: "Feature",
                    id: "MWI",
                    properties: {
                        name: "Malawi"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ɽٓɾથ̆^̤˕Κ؇îઉεǯʱ׋շԲ×עǰϸ·ͶͧɆɳûәЖѵɔʮޮ˄̈Ǉۢǚڼƞɪɉ܌Ѕϐ࠘ƽǜɵ˶Ϲɾଡ"],
                        encodeOffsets: [[35390, -11796]]
                    }
                }, {
                    type: "Feature",
                    id: "MYS",
                    properties: {
                        name: "Malaysia"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@àћֈĶ˞ΈȘýӸԓΜ֛¶֣ęϡĆ˿Öӻ̒ɵͤݑe˳׫Éߑخ঵ښįђӟ֚ś̡۠ҜĠؔȃΤƤƮۈρ"], ["@@أ˹ܯƚॱ@̅ॗ͓̇љୟۅǵߑɾЕóөщ՛Òէǟַӆƕ֘؜˽ٮǀǜ܆άǂ৖Ǻ׾ڔЬՐϦѥǮ˺В¸՜а٪אшڀͼHќыιֆɻ۬ʧÑ֝͡¥ƮЧ"]],
                        encodeOffsets: [[[103502, 6354]], [[121466, 4586]]]
                    }
                }, {
                    type: "Feature",
                    id: "NAM",
                    properties: {
                        name: "Namibia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@رٌؖ͡ȃࠊȷ،˯ಒm৒ŅҞ͛Όѡۜѳ৘ǽՆۃࠐ»٢КǆԊƞհ}ԄϝŶÐ₮׌Е᎞ş໴΂یȒհµͨȍPéӁȍʭC՛͍ͣΎಕ̍س{ᲽࠣBយA᷋ݣѕҋÕՇǄϗÔƗάͩɰГг"],
                        encodeOffsets: [[16738, -29262]]
                    }
                }, {
                    type: "Feature",
                    id: "NCL",
                    properties: {
                        name: "New Caledonia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ېԵѨϭ͉ȫҥɪ׹ϚէѼ։פś˶β[Һ˹φ˷ˎɻ"],
                        encodeOffsets: [[169759, -21585]]
                    }
                }, {
                    type: "Feature",
                    id: "NER",
                    properties: {
                        name: "Niger"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nּॹȐОҿպœϤâТբ̴̘ପðݜƄîԮҠ֘Eኬஈϒᝪ࿸᮪ཾ೨αӀңר̸ȸಯ̾ɓ`ˋΔ˽ǻί͕ၻ«ધੳߋγૉΔ̵CեբmčЃʁµˋƻm֩ंȟځҷٱʔҍ¸ʏşӯ~ӷΧѓq৯ѢЉȵѓb̿͆ࡅ̼ࣗıɕǻşӗʋ͹ÍݣٗӚ̟E˭ʗ"],
                        encodeOffsets: [[2207, 12227]]
                    }
                }, {
                    type: "Feature",
                    id: "NGA",
                    properties: {
                        name: "Nigeria"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ࢍ̡͉¬͓ȉڥl҇Ղˡ؊שֆكYݍB¶തs՘ǂՊʶʴТԴėɨǔ͸ȍӾ˪ÎݤʌͺŠӘɖǼࣘĲࡆ̻̀ͅєaЊȶৰѡєrӸΨӰ}ʐŠҎ·ٲʓڂҸȠ֪ँƼnͬͯğƱ«˧۽ٱɛՙšѧǱȉǝי҅ΉŽыȋ͹ÿΓֽ˱ҽΊ͇aԃӭʑQЍ߷ɍש"],
                        encodeOffsets: [[8705, 4887]]
                    }
                }, {
                    type: "Feature",
                    id: "NIC",
                    properties: {
                        name: "Nicaragua"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@̃ˆϽͺȁ˲Ο˄сϜĤžƒŵÚÒʾŀȔŬRkЮȠrǬOǺɤʜǝĒľƺĲ̊ɴbǦĄQňȪĖ|ƜŹǚȆńɄB̈ŌŜŖ˾iïă§ȉĐ̫ȗ˹ěͷυ®ɏtϙŹĉýΫÌɛǣɋ ɩźƏȩǱʛÈƓǦˉêȕŉօɞųŇ"],
                        encodeOffsets: [[-87769, 11355]]
                    }
                }, {
                    type: "Feature",
                    id: "NLD",
                    properties: {
                        name: "Netherlands"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ۦyǀ˳Ƚޓɇ́ԍ@ƘࢡҥȞՏπީǩ؛âѠɲ݀ఆଲΘ"],
                        encodeOffsets: [[6220, 54795]]
                    }
                }, {
                    type: "Feature",
                    id: "NOR",
                    properties: {
                        name: "Norway"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@᥆ؙઍɣऄՅෛ͵ڵû΢לઃͰಫ˵Ы؝ߟωࣗȮ઱¥णѼԉɝԷūփནƊɝҵ߭Hևױ࠿झಫ஁̨˹̇ͫ࠯bձ޿¾૟՞э˥ধֻۧυӛ֝Ԫဋঁ૫ȟ୏є̛ࣚˇ኶ޞզᕠ۶ဌࢂ໤୦፺ྴඦلᘼ੊ᇎπ൪౮ۢ໖ພǘ"], ["@@ም΅๝Ȝ׆ɐԕˎეǚͮ̿ொȍ"], ["@@᪖صᑟͥұأ݅ǁЍۡৣᅵԢނ̘ఽʐ࿕܂ٷڄᘎ̜Ң̋஦\\͊˼௾੖̋"], ["@@࿮̏ఝҍ᝱ı៙ƖƫɴஹdँϬᣴɼ௞ȫࡘʤᑺȽ"]],
                        encodeOffsets: [[[28842, 72894]], [[25318, 79723]], [[18690, 81615]], [[26059, 82338]]]
                    }
                }, {
                    type: "Feature",
                    id: "NPL",
                    properties: {
                        name: "Nepal"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÝαŌՕĩͩ۩aয়Ȟ٭ĂӛђଷŊયҼ߉Ю߿͆͜޼ՒϠΒȪڪʳࡔշҾť˰ЕٶǓۀσौȕঔć"],
                        encodeOffsets: [[90236, 28546]]
                    }
                }, {
                    type: "Feature",
                    id: "NZL",
                    properties: {
                        name: "New Zealand"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@Ȓ΋װ;ʐΡBΝ̹ϳչإїͷ̴З٭Yܗ̓ɣջӋࡗڇϓнʇޝlխˢࣱÐƗ̰Ҍذ੐ࠦժǀ׾͌ܜѰԎѦώظ͈ɆŰҶלϴȆΧ"], ["@@،ࢫlָϜɯŲًڰ˛֨ãӒ͎юĭȯݗʯӫٛjɡʭþαūƻͅҏзֹ٭ͯƟɘΕŨӞ۔˟ҨࣛͲz̦؈̌ƚ٨լͻ֜vƪБΎڋݔΗת̸àҚұٺɑʂݡ"]],
                        encodeOffsets: [[[177173, -41901]], [[178803, -37024]]]
                    }
                }, {
                    type: "Feature",
                    id: "OMN",
                    properties: {
                        name: "Oman"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ֹ̻ϟªǩȧƉэļ֗ÿĻϯFԽ̻ćХȓǯԹP͡ɃJͻПɷҩĂ֗˳ϱ³˝טٿ൴ᠾ࠾֖၂ϩתv͸ʔΐFΆϞǒƩŞèմіHϖֵҸ̧؞ŋӼƳϜӕɨ˧̞ŃCȉ̩ԃƅɽΟˏ"], ["@@ŉƳǅ˺ʔ˺ľñā΍"]],
                        encodeOffsets: [[[60274, 21621]], [[57745, 26518]]]
                    }
                }, {
                    type: "Feature",
                    id: "PAK",
                    properties: {
                        name: "Pakistan"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@تϻʞ٥൨ͻ߹۷ऩůౣȲЫα̖݁̈֩ڴгܑӟ`׳ࠃࡇՃ࡝࢝ࢡউÚऑࢡռϗĪ٧ҾэǘܝᇛD֓֕؛Ɇʣ٭٘໻ǁിeஃŝ̈́ঊொѢéϰГƌw݊ߥφͷԔеѶඨѕࡀŲԈŅǞȂגóદΔ܎ҶӈشCĠɼٞŌ̴ý͢ʀ±ԌΦԖ՘Ɇͥ֊ߜɴ̢͒мΜĩмȣΤӬμࣘǮ८ĮѐƺӨĦ"],
                        encodeOffsets: [[76962, 38025]]
                    }
                }, {
                    type: "Feature",
                    id: "PAN",
                    properties: {
                        name: "Panama"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@˫ʎǵҒȺɢɅÎƿˤлɸοÁǝ̇ͻɁǽĉǩВҗɯŅŧŭϷ©ơԈŋƛˡ¸ǝ͸·ÈɓİέCǻĩŶªǖìǠƲŲĲǩŲK͸͘ö̠̝iǱͲĀæɴȵЮÔΨɄԜǞ˺ʤҬ·ĉҶώơ˜ʧ̈́ɵĹūȜӵǁʟ˓ÒŅС"],
                        encodeOffsets: [[-79750, 7398]]
                    }
                }, {
                    type: "Feature",
                    id: "PER",
                    properties: {
                        name: "Peru"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ɥљћɋࡅӘñΈရࡊທࣾ٫԰ΏۜƐʎ܅ાࠣ༄ߍီ΅Ϥ˃ؤٷպױͼ˖ϒПߢʼךڢՎĲΓʇȧx̭ΎâͼĝΚщӆΌǄ֤ԦܶৠͨࣸࢠʾմŝٔɢĂ֒ЉˎЅϴɏӶࢣضĿҨɞ̤ƣԎð٠Ͻթࡣʤoрҁݳ œųۍǉ॥ֱÓϻɉ̇ČғԕʍBΡɛƵΔݳҲԝǱί֐µ͆҃ݐuېӸÇ౧ϢĩӄƠܪടǷ˵£ןg܍͟пƮ̵ȕ˯β۹Ջ࣡"],
                        encodeOffsets: [[-71260, -18001]]
                    }
                }, {
                    type: "Feature",
                    id: "PHL",
                    properties: {
                        name: "Philippines"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@Đ֏ºҽ˹ޑ̫ࡨϽэˎإʉϿ঩Ӧɿ؊ʰЎՑЈˁΑЃثҵƑʖ͢۾ՌʀҜ̈́̔ϝٔɰƎϒרv·ٰڼЋêхÐ̱"], ["@@̟ˡˁՍ˃ʝԫ׈ǦɤɂɾĢԸҨ¸Ɖ֣جߺāߡ"], ["@@ૣߕЬט؈԰Ԏ׊Ѱ࠲Ʈۅևҧѳֿ"], ["@@Ԏʹ՘BgΗϳΣՕʧϸÒєŽА"], ["@@ʀभ٫ɞj˭ȶԯЍȋעʧªƁԘӶãY͈ԣٜ߮mɴ̻"], ["@@ɟܩέоѓ٘ܚ̡̈"], ["@@ԮʉʶɖüɇƍΑ˼׻ɛۥӷ˥ƁڳȊڝѾġϊĲਾүăҙ˜ȫēϯٻЮ̵Ѵɍ̯՗ԊރůлȆ¨ΎˀɊʣȘŇ̡бӚűμߨͺˡĔೄ˜ހԘA"]],
                        encodeOffsets: [[[129410, 8617]], [[126959, 10526]], [[121349, 9540]], [[124809, 12178]], [[128515, 12455]], [[124445, 13384]], [[124234, 18949]]]
                    }
                }, {
                    type: "Feature",
                    id: "PNG",
                    properties: {
                        name: "Papua New Guinea"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ɽčε͔ρՔǷ٘ŜĆĜʡʬȏРՑЈ˵ŝɽ"], ["@@ѯçƃɽҟȱћȟѽBۏʔӑɺêʺݬũҠàŶЖŦrĆѽӐÜʂ˼Ҹ̚ġӸԌfǜƏgү˯ԡ"], ["@@ݤտղࢻӖω٬ƛʥǁࣀΝġʏ֋ÏȷɔܟĦࡕŴٷ՚ӉҦѧ݀ભπ܇ʇԡˣńإڇ˿һƖࢅaᩒaᩒภ׃༊ӓׄїҴхŸӵඔԱȲѽޛěȄ֕"], ["@@ʿɡǁӸȝ͘ϝ˞ӍΪ؇ʚɺȮҒɻ˸ȁΜȫʹΛ͊ˏĶѧ"]],
                        encodeOffsets: [[[159622, -6983]], [[155631, -5609]], [[150725, -7565]], [[156816, -4607]]]
                    }
                }, {
                    type: "Feature",
                    id: "POL",
                    properties: {
                        name: "Poland"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@·՜à̂ȹ̧҆̚ɺɤȝђָʘ಼ϴ੒˴࠼ƙÚȱ߸Yਚħ໶^њěȬʵωɸ͋KͯԋǡʸϳfϏцܻěɽзįރۥɒϗǿ¶ߙ͔šЇĒӹǵч̖Ήŕ³¼ϭаر¼ăˀֻĦűɑҗǨÀɴػòЉ˔"],
                        encodeOffsets: [[15378, 52334]]
                    }
                }, {
                    type: "Feature",
                    id: "PRI",
                    properties: {
                        name: "Puerto Rico"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@јõưǕɋɃمLӫ·άŢŬیK"],
                        encodeOffsets: [[-67873, 18960]]
                    }
                }, {
                    type: "Feature",
                    id: "PRK",
                    properties: {
                        name: "North Korea"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Şƥ͉ºη˵ʣ˷׽ѣȅƫƧ̓ʝ֓ƏηɥηįġͰƋӈσŧȭΧÇץ¡͝ϛϑÁùСǆĵƿʙéǀɑüɥƆɰφȤİõƶɆҒÅƎөĠЇɤۄբऒҌ־׮ЎˁܪſѺಚβͰҼժӹ"],
                        encodeOffsets: [[133776, 43413]]
                    }
                }, {
                    type: "Feature",
                    id: "PRT",
                    properties: {
                        name: "Portugal"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@̦Ɉ΄ŬɂЫӺDƞłӪɼуϱɩYٽƍūЇγçʹԋɵտ̄ʡřɫ̵̿ê˥ͷɓѷŠџġŸڂÿԬϓþȩ͈äռͰ̨ÒͼǪԎkΤǙ̠˲"],
                        encodeOffsets: [[-9251, 42886]]
                    }
                }, {
                    type: "Feature",
                    id: "PRY",
                    properties: {
                        name: "Paraguay"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ͦ৖tҌЖ݌าʔޮ]޴їbʵʞҳÇଛࢲǇ΄ǐ֦ɩǀʣþޓİ͓̼̀ƌ̢ƳAҥŕӻǑӛƍݏށ١ړƇऻŸࡑɮࠢ౨ťψࡽ͢ਅبۉŸ໵ൌ"],
                        encodeOffsets: [[-64189, -22783]]
                    }
                }, {
                    type: "Feature",
                    id: "QAT",
                    properties: {
                        name: "Qatar"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ÇؔɨѲɰĜʬˁdӯǽӳɵÑʫǖ"],
                        encodeOffsets: [[52030, 25349]]
                    }
                }, {
                    type: "Feature",
                    id: "ROU",
                    properties: {
                        name: "Romania"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@δǶԴġՠGϸȳ˺źبĄɄȠΠ@ʰćʺʟˊΟӞԁρėΩưϥϒƹЂƊϠƟpɏПǹʯĀɻ৥ӳĖ̪ؑফțзɋ௽¬٥ƀ͙ÕʍΊƵƦȚƘȷŀ˃ȋөʔßΌԟȢĥˌҕͤڪǂԖ֮Њ֬ԢǮ"],
                        encodeOffsets: [[23256, 49032]]
                    }
                }, {
                    type: "Feature",
                    id: "RUS",
                    properties: {
                        name: "Russia"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ࡌ๫కˤԫ்ࠌࡳyוُԒսٱƻ۸Ĥࠊħ࣢Țٌ૴ӯࠜôରަϮͭϴϐŠɔ։̆ߵuࠟΎࡑ"], ["@@໵]ਙĨȒτ୊˚ࢢƧψƃęɱäɉ"], ["@@֦Ƚțؐᗸű࿨޻࠭λ൛ēsࠑͳǩ޽~ٗ̊ૣʖȉθ࡟Ǝॗŉҗ̎Ǽ̸৓ȥϚЃӉΣ@„Ꮪٛᔺ࠳ïԷ"], ["@@ः©ƭˌੲΖ@ַ"], ["@@ળ»@ָň܈E௒ʉïŗࡽȩ"], ["@@ౡMႣĤƧ¬ߘͪੀþஞ͏ĸə"], ["@@ॿͩഉø༛ͨȪ˖༨ųᑔɗ"], ["@@ډرᶽzඃȣမղҎ׀૎ǂᕞᴬѽ"], ["@@ӹóᩣŊɟώູɦūҒ࡮ǶҞသܒޙĺ፨݆ɩϢሤѺ᪪բ᫠ǀ෴̸࿐Ŋאͩ֟ʻᲗз᢭Џᤙߝఫࠍ೉߱Ǡۥྎۏ"], ["@@ɨгސȲឤYቈЧڬ̿ȽѧङʝᕅүفʟਬşఖɃݴǄєաτɔഊƂ᧪ƑȴϽ↲ů´ٜᄼƥഄLബѷϮ՝ӹΙੌڋ೔Ϳ߸ࢦഖϙ෢ɦྼʵؤʀൖş؅ޮૐζ䢀ձܐӿᔲٛ₎ǄာƑ۪΍Ĺؙਜʇ૴Ǥ๰vཚǑཪĢะݛਪˎڷ՞ϐώᧆɻფºᝂБ୲ν@”MKઇσઝÖݶҁԄەϲɧĮΏɑɝ༧Ǿ᚝مݛĭ౽ן௛ԧ̱ϣய׊ᔗڇϣ̸ߵΫ૱Ř˓ց৙߽ͻड़ȋő௣ޭΫ۱Δα฽ѕ̅ॡభȳʥ࡟ே޳ׂ̳έ௬ҵለИ୘܀ԆªϾರȊຊ੒คࡺຢڢڮஆ৷ëԍۗᒉइۍਖᓧ˷ᑃටۚԧሙɕಝēÔ؊ಯŶ਩ЭᢵƠ᪏ʟᨩ࿛ủጝ೚ŁаՃࠄȅ՞оईÃௌऍ܍ځ࠽ë্ϛഉ్௓˯ׇଙ঑ଇॻթӹ૩ӱՉYՇФૻؙſ˩ŝƦKѐіxŦ঴ɛܚܞ̒৶Ʃ֢ࠈ˾ऄ͚̮Ѵݲ൷ʛܯͧ౧Dͻ߄হװหˎ̵ࠖ̉Ԫ̿βԯࡐ̲݇షʢ૛uਯƱۛлҤȥXҩұˑݷࢻRσஅՍ৙̈́োéѯˮԋĞ௷ףેƑޛȻੑƌޫSԙіࠕИࡅŎ੝ŋߏƹ஛ΜǇـধɎށİवΎࢉࢉ΀ӵࠇב௏ɂ࠻֗Ͼ࢙^ܳʴ౫Ѓྃܣࢭơ͡çѽԤઍőΧΦחǌЙӠҩưிɍୃӜ҃ѯሟᒒੵٮ̮˂ᑋߍ߭³êҞઅ˺࢙ȱ˃ࢊມǺݯΑᑅ̳Чȹḭ̇ϫ˻؆ֹ߭ɓǀɭ߭ХസֿɁЉ୻ʓʟ੹Ѧ೯iࢻΟহͼᇡ׊ಽsჃࣳĿؗࡹӤڡउʖǡӝُ܊֫ذx՚֗ďѝѐƋϥӽ߿Ƒ࠳ࢁކߕĉ֣ࣼফԇ͹ƝɇωÌֿԚɿՅȚʳΈ޵ǮԙƁƥƼଥЖఅƌ܃ƞĹıੱ܂य़̈́ܩӴؒƈۤ۰ҹͪఌ΄uȀݯƉώѠɼ߼ÖƄ˪ȅҪ΀ѰWʚఉ˚ӭUԯЀ١ƃ੩̐lǒ̗θڟ¤éʼɀǞ՝ӈࢋąʭ¦Ƀȑ̽ȷ՞ȟ˨ǊĀڴ͞Ȁʍɢ֥ƪ¼Ʋ΁ƴՃվǸɨĉЂࠑȨѱĳšȼࢭɂˑӸíТЙȖάˊʝ޶װӞųƤक़ҬࢡЎᅢ੶ޮӠ͂єగּΆնݳش֢ܜ঍ग़ޢي౿֔ŬךڶüොͶࢀ̈൦ԕᘨȧṺो٤ЋÆ֓टѳ൏ɡ⏷ٔ؟Ńൌ؛ÂϵÆ࡫ઌʯڂɓňРԑΰ՘͈᎖Թ۾Ȳ֣؜ዦࠖޢµ޸̋Ӫ׀۫ԄЪԊءԶᚠˑӔҹ੡ĻNҳڌ˽ಜǼȶ՚ჶАᰪܞي£ࠣԙਬĕ׼˼༾xఢΐफ़ԏॖ֌ࢡӢѪˤ២ʫ୒ʿᴾॣ֚ѰࡡѺ{ǴৣĈˢЌ҅ټ}ː༄ݾրކزǒᕮɛǬұߕڽԺˋ˒חȏଵऒԧέ֕࿫஝०ŭ̢ͮऎɎɞжܮЎөӌϼֈࣿêȫҲڢࡈણۆຒ֦șװмnѴүͧ߷࣐Ƶϥ؄ඤͦლ¬༈ӏݛ۪ċࣆศǞ፾ᆘŌہѮংւॲx࿎иᕠŐ˪ɲᕂþیȋሴҀ໲aɶδߤΨጤΈ෸˗ଥȷበŹ"], ["@@ⵙ͕ໞીےĦقÃᒈӋʟͿ"], ["@@૽ōݱÛśƏঙƑ࣫ȦӐʾል~࿞ƶ౨XǢɧӘȬߊƐఞǿ͗ŷ"], ["@@ᆳĿᚉʎඅ͎٣׾଩ǔᔆָᆎȎ࿌чኬ߻ȹݯ"]],
                        encodeOffsets: [[[147096, 51966]], [[23277, 55632]], [[-179214, 68183]], [[184320, 72533]], [[-182982, 72595]], [[147051, 74970]], [[154350, 76887]], [[148569, 77377]], [[58917, 72418]], [[109538, 78822]], [[107598, 80187]], [[52364, 82481]], [[102339, 80775]]]
                    }
                }, {
                    type: "Feature",
                    id: "RWA",
                    properties: {
                        name: "Rwanda"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ͬӃµӵʏŁѿÆʱӍԛàþҠŘÞԄʎɺȰďԈʸ"],
                        encodeOffsets: [[31150, -1161]]
                    }
                }, {
                    type: "Feature",
                    id: "ESH",
                    properties: {
                        name: "Western Sahara"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@oҊŸ@@ÉeǋEౝ᪁ªᒷ޿÷ȳћǄ்ᾓNǽ˫΢bCቆäĶ̢ΆϘˤୌୠ࣢Ђ੖ˀÖ˜ټۺĜ̦ŉϢ@˔ȒԲ"],
                        encodeOffsets: [[-9005, 27772]]
                    }
                }, {
                    type: "Feature",
                    id: "SAU",
                    properties: {
                        name: "Saudi Arabia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ŉΪʩʨÝͲѡ̞҃۴ʁۆׇ׀ϑƐ֋ߠīאӾӕञϿ͠ґǨˡӖ°ȎɹѦʕȊ͝زԟڴѓ־лIžҦ̌ļͲनƅζʶȪ̢ٚŚƒˮˤƜ࠷ࡀ၆фǆŴৢɩబיᛎၕ༠ãݠąȾЏתv͠ܥаȓƠִ̏Λ¼΍ċ˩ł˯ʎɽŐ˟ŲȵʬǕɶÒǆ͍ș࡙͐ᡌщǞǲϪש֕၁ᠽ࠽ᝑ͑޷ϙ׻ࢥϹƕɁˬ͏§߻ĎƷČॹmɫùΉɔɝЭĒΟρˋ"],
                        encodeOffsets: [[43807, 16741]]
                    }
                }, {
                    type: "Feature",
                    id: "SDN",
                    properties: {
                        name: "Sudan"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@śhdмĵ̀џͨĵ؄ĶبϳÌÍȇԍ©Ȭʕðԍңңл؅џđ۹Ӫͅǥđʓџǃǥ࠵@řǦ̡ƝɳîѝӬƟɲŗɱϵɏݣ˿ǁʳğå ̅ʎÃʼƌΔE΄ӛՀĩάZȰ̱ʜUӦǭ͖̍µĎ̰ɒΖħΐˢʴǫȞɞ԰ϨئܦÏ¥ ZΚॲH@း@Ὂ@ῼ@˔ࠗȁƳŪࡻ্̰͌ȷҠ̳ыӑأƏ˅ʳĉ֑α௿ĚͳƅܟͿࠟԓзέٛč΃Љɽʝ࢟Dĳ"],
                        encodeOffsets: [[34779, 9692]]
                    }
                }, {
                    type: "Feature",
                    id: "SDS",
                    properties: {
                        name: "South Sudan"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Xٽűʯѿq˷ӏԨÑюХƨͳϦșӼࣳ֫օԫԇԫϭסFگȟՕȊ΋ɭ݉֐ȥάҵǱϱÆɣƕϗĸԗۚƉˊعͪɅԌΕζ֟ѬS˘ҡͼ֯͠ʴĠ̀ǂɐݤɲ϶؄ŘƠɱўӫɴí̢ƞ؄Śǥ࠶@ǦѠǄĒʔ͆ǦۺөѠĒм؆ҤҤïԎȫʖԎªÎȈϴËĵاĶѠͧĶ˿cлŜg"],
                        encodeOffsets: [[34779, 9692]]
                    }
                }, {
                    type: "Feature",
                    id: "SEN",
                    properties: {
                        name: "Senegal"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@΍ٺн̚φǄРמȦќ˾ːкïШǾҶVДʙ֎ɝԘأֈֽԹǔӓ̾ɿî͗ʽŧ³қâÙģȃk׿ȲЛV༇ɥħ˥ѻƋƏ٢ވkȬŞƮR̸ȘήǯκcζȌǝʐˡƙʻJͧȸˉ_ȍȥࣵy"],
                        encodeOffsets: [[-17114, 13922]]
                    }
                }, {
                    type: "Feature",
                    id: "SLB",
                    properties: {
                        name: "Solomon Islands"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ɾ˿חN͉ԬԈȯǜ"], ["@@͝mԧĎǫżÀͮֈƁ˜ǭƎə"], ["@@ųƹحܰǫԈ˺@̠ڥʹЗ"], ["@@ǛڅΦҟ̠̿˪ŰĐϮȫېϭȢˉ"], ["@@Ǘ³οȒ·Ί¨ƖԈΡͰ˛"]],
                        encodeOffsets: [[[166010, -10734]], [[164713, -10109]], [[165561, -9830]], [[163713, -8537]], [[161320, -7524]]]
                    }
                }, {
                    type: "Feature",
                    id: "SLE",
                    properties: {
                        name: "Sierra Leone"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ɧØͺѩ҈Ƨ̬Ĺت҆τĬɺƞǸɶpȜǂڦCɺ̛ǼΛʓƈɗṶɴ´ϹϹϛҗ«ʓȩˏ"],
                        encodeOffsets: [[-11713, 6949]]
                    }
                }, {
                    type: "Feature",
                    id: "SLV",
                    properties: {
                        name: "El Salvador"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ġȡӡ^̡Ą΍ǘұÀʃǶ~Ů˾ɄǀĢ«ĲȠ¾ʜëǸǙʪƇœτĴǤÑŘĝÏͳ"],
                        encodeOffsets: [[-89900, 13706]]
                    }
                }, {
                    type: "Feature",
                    id: "-99",
                    properties: {
                        name: "Somaliland"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ϛԩד۫۹Mᩧা͍̜̳К̳ҨǾ̖̲҈˚ƹǒΏϜΗкGߊɌࣴĴ݌ʼиÆ̚ƶӎKaE΋Aࡑ@ѫ"],
                        encodeOffsets: [[50113, 9679]]
                    }
                }, {
                    type: "Feature",
                    id: "SOM",
                    properties: {
                        name: "Somalia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ѼĎЊ˾͈FpɵýӧHѳǯ̣ʁࣥЙयԱ੷ܝ௷ܓवধ଩ࡁڹష࠯޳ٕँৱȗѷȍȣӽۚWᵤܾ॒ɰˆբfݠפબᛜᡄה۬ϜԪ@ѬBࡒFΌLbːhϰŰ"],
                        encodeOffsets: [[50923, 11857]]
                    }
                }, {
                    type: "Feature",
                    id: "SRB",
                    properties: {
                        name: "Republic of Serbia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ԡȡà΋Ӫʓ˄ȌȸĿșƗƶƥȷȏø̫Тγ͋ʿƗˋĞĳƑšϳa˹µØĴĴĦȴšKǍƼƑ ŋƆƽÀšŠƯ±ś˧ȩÑèð͋Ǩ˟ĜūŜɟƠȢŬЄЛ͔ɀτ̥Ë͔́ˉʈȱ͘٢ɚԾҖͣĦˋ"],
                        encodeOffsets: [[21376, 46507]]
                    }
                }, {
                    type: "Feature",
                    id: "SUR",
                    properties: {
                        name: "Suriname"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@৔ǙĞưڶÔࣚɥѩܟâֹͤӽƥίóϩɉΛӓǲЇđ͹öčʏƘǗ÷ǡҙèԡܴōӄˏBωؐƺѠ¯ȤԜɖƈݲ"],
                        encodeOffsets: [[-58518, 6117]]
                    }
                }, {
                    type: "Feature",
                    id: "SVK",
                    properties: {
                        name: "Slovakia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@´»ΊŖш̕ӺǶЈđŢߚ͓ɷɓǏ͹ǳđ࣑ʮ˟»ȟȡЁĿěÄХŽͭ}ãǙ۷Ļ̱ĠёɌċ̆äńŢȂόa˺Ĕxþǈ¢ÆȒȖžưʢD"],
                        encodeOffsets: [[19306, 50685]]
                    }
                }, {
                    type: "Feature",
                    id: "SVN",
                    properties: {
                        name: "Slovenia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ۜÝъȐܾtǈƘƘUǎ˳ڝɟć͹̇đHɻͣh˷ƎƷƙבȈúȫΨĞа"],
                        encodeOffsets: [[14138, 47626]]
                    }
                }, {
                    type: "Feature",
                    id: "SWE",
                    properties: {
                        name: "Sweden"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ࠁוƀԥ೹ڭྱܡؓஃײףߦүޗॅ࢑ȝ͍තӋ޿৳ĆӅڗঃˉߐ۳॔ٓஐφӜּۨ˦ন՝ю½ૠղ߀࠰ä̧ͬ˺ಬஂࡀञֈײ߮GɞҶཔƉŬքԸ૪Щ಼ֱv಑˴͛ฃʃ"],
                        encodeOffsets: [[22716, 67302]]
                    }
                }, {
                    type: "Feature",
                    id: "SWZ",
                    properties: {
                        name: "Swaziland"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ǡύӭěԅҖS̄ɰ̀ĂʔʐÒшƵŰϕðω"],
                        encodeOffsets: [[32842, -27375]]
                    }
                }, {
                    type: "Feature",
                    id: "SYR",
                    properties: {
                        name: "Syria"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@࿩ࣅऩͬgNŖŶ_ΈȸҠҜ̈́Əͤϗ¨ÿٞȶΌɤȀɤȀ°Ҹ˞Ǐऎɺ҂ƿۖFॴ̀Ґaक़žїԽҡȹĂؗͅ৫ᇵ࢓"],
                        encodeOffsets: [[39724, 34180]]
                    }
                }, {
                    type: "Feature",
                    id: "TCD",
                    properties: {
                        name: "Chad"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ĎЄաnDզΓ̶δ૊ੴߌ¬ન͖ၼǼΰΓ˾_ˌ̽ɔȷರࡔҠ…ྑ…ྏ¦ ܥÐϧإɝԯǬȝˡʳĨΏɑΕč̯̎¶Ǯ͕Vӥ̲ʛYȯՏƛэͽ؉ࣹ߅ϳ߹¾ʁûĊ̏ѫ̋Σ͟੓͏ȽȐƓhƹɍۛÙƀɪ˅ׄşΐλƜӷӪǼІϦċʂÐҸSқކ֐É֐ͭՠ"],
                        encodeOffsets: [[14844, 13169]]
                    }
                }, {
                    type: "Feature",
                    id: "TGO",
                    properties: {
                        name: "Togo"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ڱǳȇ̎ɡՔãкȆݴɁ̬ăڎD؎ΕѠÖˀ݂kŅѵʲʝ̈̋ЭǜǥኝȺׅ"],
                        encodeOffsets: [[1911, 6290]]
                    }
                }, {
                    type: "Feature",
                    id: "THA",
                    properties: {
                        name: "Thailand"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ݭϬܗeŬڈ݉Káऋґ௯˙ݏÌ؋ն΀ދưܭҶӓԚĭѤѧ˝·ևĵßќۇςƣƭͧ͒ƝжҁӄПЌƏӳǃҲĠԾʚ߬ТࡸҤ޶͟ތ`϶ĩҸ֕ښȩф̄ƺ̮ܶ·ֆՓؘН݆ΠƴϦࣦצӬθӔȘθʷ´ԍ֨ȷࢭpݫࢰԆʤƧӰzǜَ̊ÍٖڽÀࠥںܷ܅˙ϛ޿Ŧગǅ՟ۧȤ১"],
                        encodeOffsets: [[105047, 12480]]
                    }
                }, {
                    type: "Feature",
                    id: "TJK",
                    properties: {
                        name: "Tajikistan"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@̭ʷࣳƖāӛ࣬Þਢ˗འŶɈާˠĐԜȓ͛ŴӍࡿBׁØԻϕύĉ̉ǯͩˠþ۸ʩ¢ĞʲғȐα̇ė͹Żūԇj˕ϩ˯ǌ؋ˑʱĺӀࡘǹض؟ȨɔφۮЌҬˌբ૲ȜǩϵŤɹΎv"],
                        encodeOffsets: [[72719, 41211]]
                    }
                }, {
                    type: "Feature",
                    id: "TKM",
                    properties: {
                        name: "Turkmenistan"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ñۼطॣݔڣĠगюׯþσƽ֙|ׯӓ݇ǋƻרŪ࢞ٽ˶Ɏֺ֏¸Ȇ۾ߊȵ݈ˎؓԎʉӔڱɋď؛ʿհψ˨ॖǪ֨ɻךڅњ¤ॆ\\Əцܖ̂۾ӦଆѹĜڡ͐ǣࣦˮƳаࡽ०ׇոЃ࢞Щ૤ΫwԥʩЅɤſ̙۽ǋǙڥӁʭڏŵǫϟهŏࡩ͈"],
                        encodeOffsets: [[62680, 36506]]
                    }
                }, {
                    type: "Feature",
                    id: "TLS",
                    properties: {
                        name: "East Timor"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ĲȤܢȌזˀŀ͆Ľ̯ɫ࢕ο۳ʋeʬďǔ"],
                        encodeOffsets: [[127968, -9106]]
                    }
                }, {
                    type: "Feature",
                    id: "TTO",
                    properties: {
                        name: "Trinidad and Tobago"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ӚŊǮصۭġƯúʒɲiͪ"],
                        encodeOffsets: [[-63160, 11019]]
                    }
                }, {
                    type: "Feature",
                    id: "TUN",
                    properties: {
                        name: "Tunisia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ΩພԭͺQȰۉԄóنԮҶȢۚƃߠǠќࣶͺךĵ}ы܊̲ÒǉпЫMϱ̆ȽōܫփхǄқѤaɄЍ͊ſ³٥Хʋʵˏֽ͓ĘΑïΟЧț"],
                        encodeOffsets: [[9710, 31035]]
                    }
                }, {
                    type: "Feature",
                    id: "TUR",
                    properties: {
                        name: "Turkey"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@஺͗ঐżܤõলѬࣆ¢ߴЭƜ̑ăУزȻͨʕֻʇˀ५ǏʻҠڧЕƙ̏Ɋ঍ňίŽॗŽҏbॳ̿ەEҁǀऍɹ˝ǐ¯ҷɣǿɣǿ̱Ϡ͈͂ԟí۱ȖֿәౣĥڹҊࣟȗΑׇĳ߻҄ࣻeӽ࠶ؗҰЦٸՓВठߨಒΜྀٔŏ৞հ঒ʄർlุף"], ["@@۫ҏ˃Ϻ\\ǦȦĦʺՂХɞࡦ˄ܤőĴ͓ܼ˓Ƶȵি±Ωʷ"]],
                        encodeOffsets: [[[37800, 42328]], [[27845, 41668]]]
                    }
                }, {
                    type: "Feature",
                    id: "TZA",
                    properties: {
                        name: "United Republic of Tanzania"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ƚġᵂႋÌӣ஼࠿ϱਙ¸Ӊՠ̩~ɓɳԓ¶ʭÇГ̌Ճΐ̰ࠡǿڝӣࣿ͛ԋb̙ʥבsɕŃঢ়ʂكåɽଢ˵ϺǛɶࠗƾӉʨՕƘͯƘΗɈґ੖ӣҺǗӤČѨƯޞΎ ̨̦͜ѬȺǮS˘ǷȐ·ͨʐł¶Ӷͫӄ̎Ķऄ[ႎà"],
                        encodeOffsets: [[34718, -972]]
                    }
                }, {
                    type: "Feature",
                    id: "UGA",
                    properties: {
                        name: "Uganda"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ः\\̍ĵԇʷȯĐPوȜ͎²ڬǰϸ͎Ѭ͔ɠ˒̘͵Ŗ¼চΌɮՖȉڰȠעEԬϮЊ׍İсτ९̧ؓЯ֋ʉͽTࢹႍß"],
                        encodeOffsets: [[32631, -1052]]
                    }
                }, {
                    type: "Feature",
                    id: "UKR",
                    properties: {
                        name: "Ukraine"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@̾ɄȒʮ¥ࢌĆ՞Ӈȿǝêʻڠ£̘ηkǑ੪̏٢Ƅ԰ϿӮVఊ˙XʙͿѯȆҩƃ˩߻Õџɻύڡã֑˕޽«ܣ̻¸ԹЪȭࡨ¼Ǐ̛ँơଛӟұǠȄЂࣽʘƨǈߪ˪ʑȔಯɆË̼ީĻ̷ҧٱةϟƠЁƉϑƺɂĞƦ˾ɲˎÑƮǬäĊśӸ{ɞØƽĎÐŲ̉ɈŧΘ̩ƐÒ˶ϝɦΉأʾ֑ĉȧŭΟ@Ƀȟاă˹ŹϷȴ՟HԳĢγǵÍɤұɮǐͺɸɔȀµɑϘބۦиİĜɾхܼДҢɪٲnࡖßबȫڎi͂ŧ̀Ʀɚȝݸ¢ͮąÄцʶȂܞº"],
                        encodeOffsets: [[32549, 53353]]
                    }
                }, {
                    type: "Feature",
                    id: "URY",
                    properties: {
                        name: "Uruguay"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ղĚࡆٯ̺|ࡺ՟ڈҫӠֱχЉɸӇεՇॉұاǚғěޥΰ֫ԟҬÞլǾȈS࠸ɤࡺȾڦ"],
                        encodeOffsets: [[-59008, -30941]]
                    }
                }, {
                    type: "Feature",
                    id: "USA",
                    properties: {
                        name: "United States of America"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ũƕȽŤ|ɾƓ̨¦ĤƤƎÍǔ¸þÜe͐ƙƬñƌőɊ̍q¯͟ǵˏſ"], ["@@˭ÑƟǮīèQÀĈî̘āɘŹëĵ"], ["@@ĝ҉|Úĸа"], ["@@µÓŻŃȒɤŚêÃʐ˥"], ["@@ıĉ˱ƴªÖŸĈȘijȝ"], ["@@Ƭңʼƛז½࡬ƅࠂʹڼŊਖɓ˞Tݨʄ߂̧ࠒ͗ں˩ٶˏĈəȢĉ½ĉɦǎĔ¦ȣǜƅɴ@ŬĹĽƫ࢖ЁǶށǚܳʗӹЁҥȁ̍mēĦť˸Ɓɂ@ঊ҆ࡾƀસмfĐ÷ʰƉǒϜƆࠜHޘAˎ͞ŀàࢶ؄ϜƸ౦N໾BĎȺː¦Φž̖Ϣʲٺٚي˨ə֜ƜώʏAଧռӅƢ˝࣋Пࡷ̃ࢱʝѻӿƛȋSѽˤѽΒsė̬ʦȇãʇ֥ƋЗhةƥλ¥ӥ¥۫ʏఀǂʠǃ୳ʥ՗C|ĺʭɷʚǹ׽ؑ٧×Ɏȁª˟ɀǪҍȼƭ^ͅˏ͛ҿڡûʺֲѕ͎įۦǉεǴՑևƀׂ˓ߛʊÍĖ̃ŠࡁՕدࢇʝցӱнÁэ̱ţ˭इձӁЍЅӽŻׯƪ׍ˬܗώשLεЊঅ֥͛ȿԡʣŃЯĺƁς͋ȖѻܢϹٞű͢Ǥ֐ɽҦٻ۲͟źࡑϡƭ¦СϼՃȺोŁݗĤٙÍΏſƲɟaͽǴǓǇō̵Ů́ǃ؍طѺܻĿ؏ȚԹÏۻȝއح࠳γҝБȕϗUׅ¨ЕǄ˹͝{׭ȂٽʺɽЄȁטӷӐ̃ӰуֺףͲۉgՉڑۣʦѡʪȽҦ˧Ѯӿτїˈ̩̖ป@C΋ڗ@ဩOቿפ౓ТĀǒ੩ĝॕÝƙіխӚϻĴğʌһ¦̝ɪޭĊɉƌĹҢࠁࡊ۩ୠȚχˤٯ۴řۆ҃ҞȀۢܜˍ٢͠ߊĸނĺނƱૼˇܘʓ϶ĸǐ௒˷҂ߋȺɜƇې˷ێᛸ@᠂@ࠜ@ᢢ@៚@ᡀ@ᡄ@᭰@ᮞBაAF͔˴J"], ["@@࠽͋ѕɐŽЀބ̘҆Ÿ֐ÉΤʻܫЍ"], ["@@ԧŽսƾԛɮࠦƞښùĂ͑"], ["@@԰ǅԾĒڸɛ࠲őéĝُǱٕǾ͋Ʋݍµȧôº̈́"], ["@@؊ϛώǌහ»¹ȕ౾ƛࡨČᄚ˅ྤā٨ŉ૦Ǝౢʧࣲŝ@@MᷱIⷍࠠ{ࠌɵהρݜցࠈҺࡈ˖Ҁѡ֤·ޒϙՂ׽࡮य़ේ՗xՋұЙҥ͂ݍˌʃܺએںҍߎ߯Ä೷rটʌ჉ࢎߩǄ฽̜୑í࿻ϬৃΨटǯǦ׏ҫÁঁǫ݉˱झǳťӶϚࠚࣀʶɱɂੱҵֵ֑௅ױؚСߏ׿ࣗΗࡁʱȻωಽѡ˅ϿছΫֽÞ޷ɻ࡝˹ۧ˫෹ʉſƘऀϾࠔʸࣆҠਬĨвΈ୘ԊȈǚب̒ƢْђӸॹʫ˓Ơҕ̧շюɧ̝̽м࠿ͳԩBïԄƲ̮ե̚થǇ܁ЀַȬIӈ٩Ϊ͘ӘۆҸ̚њںÖ־ƇڴМ؎ï٘ʼƻϨҹưج͖ԩWࢻǽʯȃڏȄஏĥ௷ȬΛ͸੟Ӧ୾ΘመШ۔@ŕнᄢڽԶਕ͌ױр߫ΨଽˈҺѲ๰ਗ਼ϦȨФ࡬ЎࠊĪཪώޜÉಐ҄ౚǭ"]],
                        encodeOffsets: [[[-159275, 19542]], [[-159825, 21140]], [[-160520, 21686]], [[-161436, 21834]], [[-163169, 22510]], [[-97093, 50575]], [[-156678, 58487]], [[-169553, 61348]], [[-175853, 65314]], [[-158789, 72856]]]
                    }
                }, {
                    type: "Feature",
                    id: "UZB",
                    properties: {
                        name: "Uzbekistan"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@xԦૣά࢝ЪշЄ॥׈Яࡾ˭ƴࣥ͏ǤěڢଅѺ۽ӥܕ́Ɛхॅ[ᶾᓘӺƾïದ׻یͅߤݵঢŪ෸à৔ؗÙࡅЦMǢۍ੬ɲЉ̺Lπ׺૎הӖƺʠĉ۵խئ́ײȾ়ѷ੽ٕĊ΍uţɺǪ϶૱țˋաЋҫۭ ɓυؠȧǺصҿࡗهǰҳN"],
                        encodeOffsets: [[68116, 38260]]
                    }
                }, {
                    type: "Feature",
                    id: "VEN",
                    properties: {
                        name: "Venezuela"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@yȣӱĭ˜ϡYѭυӥ͆ڙδÆȌ؈ʻ̒§َਸ਼΀řІ̎ˆ̞ןל_մҵ˧ݮQ࣌ĔӖϕٞĻҼʾXɄਨ¼৖\\܉ʛ˼Їڦ×ِЯƆڧѬn͢ȣڕӱó̫˾̷ȽƽԫƉjϱɫɱّ֪Őʁ̭͍ऱ̽׿Žʏȣڛɀثņƿýϔɑ֝ŜՉ܆ï°ǭ׷ʅĭΣΉƏسȝǋʱٷÅҧѼʯ࠺ɟ̧̌ȄюмȊʅʠǛ֒à׼Ȉ˰ƲҎ̓Ơӏĩ®ͻęסܢӥńઉăȧ̊ȷêǬĴ̶áͺȃȂŅϮѡÈɸӮĺ׶ʔ̸͘ʌɈрդƖ"],
                        encodeOffsets: [[-73043, 12059]]
                    }
                }, {
                    type: "Feature",
                    id: "VNM",
                    properties: {
                        name: "Vietnam"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@૭ܗ۫ߍȁ׍٠ࢭ޺ળނԱԞګϪ།ŕ๓۫փ१եۇ۫਷ޱ̧ՠʀ֬دӌܬ͸ࢦÔσԚප٨ļ৖ț֖ƶࡀɃצٍאՋ݌ۥ঴৓Ԋʊ̠՞ɘ͙ܺਙPϕކӭڐҊȴڢIࠈĬܒ҄К̿ސƵƃӛАͿࡎɓ"],
                        encodeOffsets: [[110644, 22070]]
                    }
                }, {
                    type: "Feature",
                    id: "VUT",
                    properties: {
                        name: "Vanuatu"
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ˣō˭ςɤՆӗ"], ["@@ƌڱɥŀǩťɴi٢Дʵ"]],
                        encodeOffsets: [[[171874, -16861]], [[171119, -15292]]]
                    }
                }, {
                    type: "Feature",
                    id: "PSE",
                    properties: {
                        name: "West Bank"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@ԣŭʙЃŕɜɌŚɁĦǬ̤֔ś"],
                        encodeOffsets: [[36399, 33172]]
                    }
                }, {
                    type: "Feature",
                    id: "YEM",
                    properties: {
                        name: "Yemen"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@؉ɥǋύo˹࠷Οഇϻݩףυ±ʥºӭΑ՗ǉ۷©ɃµǿɛəÕŻɇеlˍœ׉¨ɓӬzҠƍʜǑتʋΊǚ¤đϨĸǊξςˌđΠɞЮΊɓɬúॺnƸċ߼č͐¨ɂ˫ϺƖ׼ࢦ޸Ϛᝒ͒ڀ൳˞ח"],
                        encodeOffsets: [[54384, 17051]]
                    }
                }, {
                    type: "Feature",
                    id: "ZAF",
                    properties: {
                        name: "South Africa"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ǏŧΣяɻћӇ׻ोࢁףԋًϣ࢛͙ѓ«ŇɷԛŰеǅ࣫ǊԙĹΏ¬ࡿͩܓƃԱͅϡoΣ̚˳fαϒśŏɦLӰ˙֞˔ƴs٤ս޼х܈AF׽તДдͪɯƘΫϘÓՈǃҌÖݤіB᷌ɨűӾߙûԟȈ̏׼ĒрϒЊʨȶДЦȚΠķВɽۂ£՞ȜĐʾƨДҚäʨ͂˪֔ݮغஒؤ΂UОƛ˲Ķ҂ċД஁ɔׯƫऩî̟чƶʏÑāʓɯ̿T̃ԆҕӮĜǢώْQȿؑıۥɑϛֵщ", "@@νʶϻǟҕ҃͡Տـ٧̜ČƺˎҴƀƜ˜ʴФ̅ʪ"],
                        encodeOffsets: [[32278, -29959], [29674, -29650]]
                    }
                }, {
                    type: "Feature",
                    id: "ZMB",
                    properties: {
                        name: "Zambia"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ІϏɊ܋ƝɩǙڻǈۡ˃̇ʭޭѶɓᢇۗĂׯٍřӍͯĹ̛̅ßܵۓҭխ˳o˗ĬऱĠƯÚOêͧȎկ¶ۋȑչԾ֣یᦶშYí̂Ű̀ƧЀĪТėʺ̂q¶ʽϾrՖûˬϡڨŝԤˆȌѯ٠ş̴ΧΈҥ٠Që࣠ɱƳח͞ɧƬļࡈƬসȉψʈ՚ɤĶ଀ƚͦđΘɇͰƗՖƗӊʧ"],
                        encodeOffsets: [[33546, -9452]]
                    }
                }, {
                    type: "Feature",
                    id: "ZWE",
                    properties: {
                        name: "Zimbabwe"
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ҁČ˱ĵНƜ΁VՙϞٯźʙՒC̒έĞ्ई˃ӢǛƮ͓ڤलğ˘ī˴pҮծܶ۔̜àĺ̆ӎͰَŚÆ̻۬hϴǯǺȻАÓѦˑF੟Ǐ׋عƊʝħӵŵùɛ؅ࢫ॓"],
                        encodeOffsets: [[31941, -22785]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/xiang_gang_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "8100",
                    properties: {
                        name: "香港",
                        cp: [114.2784, 22.3057],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@}ScTʟ@cWuJÁ]l¦RLj¼BĄà H@TOHCTDDDHDNAT@PEHDDNJLX@BABALHFF@DKHADBBLDHHFBLEJB@GDBBFBADDB@@KFAFBBJJA@BB@@FFDDADFF@FADDDBJC@AFBD@@DDD@DAA@D@DB@DHHBFJBBFEHDFAN@DGDC@DLCBDDCFDlAFBFCBEF@BC@GDAB@FD@DZJX´HĐMja@Ý`p_PCZ@lLnRGSDMFK|a\\Y}§Mën"],
                        encodeOffsets: [[117078, 22678]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/xin_jiang_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "6528",
                    properties: {
                        name: "巴音郭楞蒙古自治州",
                        cp: [88.1653, 39.6002],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@ÈÒĊanwŎVȮ¦ͪŃĢÜōȂçČéƐżLɆóĊĊaʊŁ±¯²Um»ˌmÈ»VʠţWÑÅ¯ǓéôƑƒğÆīŎī@Ƿwô˺LÞ¯ƨVǪÑƒĢȘV°wĢôk°¯ƒ»΀@Ȃ»ĸǔ@΀͔ôôLɆó̐ÝɜLɲōͪƨóŤK@ī@IU܃ÛmȻţǩÝ˹ÛǉťǓǫō@Ɲ²¯VçōKͿŁΗÇţ»ƽɅƑLÓŏÅÅɱV@ÝĊU¯ÑĊĭÞLÞŎJ±̃XȣˌōlUÈ¯ŎKÆƅ°XÑÜ±nŗġV¯óaUƧUōŁÑ±çɲ¥lĉkğ°k¥nğţL¯ÝÝUƽĬ΁lķ°@ōXÿÝ¯V»ŹLʉÞɱŤĉó°ÝJ¦ÝKÝ£ţÜÈĉ@xǩUċƑ@ky͓¹`U²ĉVġ»ğa¯¥ť@ĉó@ŻÛÛJw¯nó¯ġWƽʩķÝɛwĉĕÝ¼ȭÞķō@ó£Å΀Ƒ¯ôȯÞ¯ȰÆōèĉXÇ¼ó@ÝnºĸÞVƜĸȚUʶõˀĵĖɱŎÝĖVࢰӒѢ°˘nϚVˌÈmɼĵŦW¤öʊõʔ@°ÈXVènŎȁb¯ǫĉ±Èğ`ġwōÔğ»mVVÝ¥ó@ĸķô@bXĶmV²²`Þ_ɴbͪÈ°ÞWĸÈŌmÞkɲÈUÆ»n¼ǬVķĸźô¯°n¦ɄÇÈ"],
                        encodeOffsets: [[86986, 44534]]
                    }
                }, {
                    type: "Feature",
                    id: "6532",
                    properties: {
                        name: "和田地区",
                        cp: [81.167, 36.9855],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ƨ¥èź٨ΘƑᩄbUࢯÞĕɲōĶĕöʿVʵķșUƛÝķm¹Þô@È»ĊWŎçÅ°ȯȰÝ°óƒÆͿĉ»̽çnmɱĵƧºóUƽ@±wóL¯°̻L±Æ¯Vƴķb¯VÇ¥ğ²Ǖbk¥ÇKlÅɱġ@ÑóK@ÇaÝXğţxĉČǫķê¯K@ÑaŹƑK¼¯VóaónġwóÞéUġbóĉğÇl¹aUóğKWVÅ¯nÇŋƑķnʇ»óxĉwçÇ°Åw°ċXób±kÈÇJm²ţx@ÒÝŦÇºnó¼n°ÇbUÒ±¼XĸĠłƽXmwĉºzÈÜmnxmx²ĖmÒbnƧêUºĊêÆVóĖóUĉ¼ÅĬƑ°ɆƆŻŚlłÞL¼nĠ¼@ÞÞź@ŎÞ°VɄɴжϼِ͈Ŏ"],
                        encodeOffsets: [[81293, 39764]]
                    }
                }, {
                    type: "Feature",
                    id: "6522",
                    properties: {
                        name: "哈密地区",
                        cp: [93.7793, 42.9236],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@WnŐÆĶLĢ¦ţºźlxÅĸƽŚɄĮè@ô²ÞUĔƐńV°¯ĸX¦Ɛm̐bƒ»Ɇa΀ĢƐLˤȘÑnІǉĸÿn¯ĶaŎ¯ĢĕȘ¯°΂la¯¥ǕǔwˤӱlťО̻nŻmɃĕċţUw°WUóƨÅţķ°ýV±óÅǓéʉ¯ƽŁéōǖȁÝƏůǕw˹ǫȗǓƧǕVýé@ĬţLƧôͩɱŎɛK̏ÞɅôóK@²@°ōŘ¼lŦ¯ŰóƜÛlV¼ķ¼°kȰŰĠǬŚÝŎmĖ`@ÇÜn"],
                        encodeOffsets: [[93387, 44539]]
                    }
                }, {
                    type: "Feature",
                    id: "6529",
                    properties: {
                        name: "阿克苏地区",
                        cp: [82.9797, 41.0229],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VÆxˌŎÞŎ°nȂÒ°²VĊ¯VğƾˍǬƨÞÞKÈÞĊVźôɆÞĢèŌôWČ²ŤVÞĸʶbl¯ôn_VÆĸlmÞnVź_ĸ¼ȮmǖéĸW°°ĸJkʠ¼Æw°¤ÈlxɆzČºĶI²ÆǔU°ô@Þ¦UnUĠ¼ŎÓĢxĠ_²ÇĊǬ°ȂamōçUÇW@¯öʓõʉX£ĶťnɻÇUˋmϙ¯˗ӑѡᩃaΗƒɜ°xWƴUxɃÒˣ¤ɅwğʉōóÝŹ±°ȗ@¯Æƒ²¼", "@@ōгwȁ¥Ƨ°ŹÑķV¼ÞêĊ»lĵm¦ÅW@ĀôÈźaɜxÈbÞÆĶIОŘnIÇŃÛÝĊÑĠƏ"],
                        encodeOffsets: [[80022, 41294], [83914, 41474]]
                    }
                }, {
                    type: "Feature",
                    id: "6543",
                    properties: {
                        name: "阿勒泰地区",
                        cp: [88.2971, 47.0929],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ɲˣĊIÈ¥ÅU±Ċýkō°ĉƽó»ĶƽXóʵʵȯƑÅȁɅ¯ĉ@ÇሗK֛@@ˤV֜ʵрƒǬVĸƑŎ@ƆϯÑóķ@ʇ»ķ¦έmlÈĸĊX¼WźÛÞÝѸĢČþĀĊôάVö¼ĊUƨ°°èŎČUÜÆóôVôô²êȘlˌç°`n²ǬĊaÛ°±kğmm»@°ÝɆÛÅÇVaÝVm͔ğôÝÈb@n¯ÜUĢÑĊ@źīżWŤÈǖWôŁÆI²ÓƨL@ĊXmmÑÆ»ȰÑkĶō@ý°m¯"],
                        encodeOffsets: [[92656, 48460]]
                    }
                }, {
                    type: "Feature",
                    id: "6531",
                    properties: {
                        name: "喀什地区",
                        cp: [77.168, 37.8534],
                        childNum: 13
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Č@°ĠôÓô@Ŏĉ@Ƴĸ@Ť£ĢlVôWVóřXĉŤêÞ@ƐÒĢÑlèÈV@ĠIk°ÆŘ@ÈÈĀ@ǶťÒğ@@ÒĉlŻ_@ƧĖÅĬōÆ@bźÞnƒlVÝĬWÆ¼ʇÝÅ@ÇÅÈwWóĉ±ğzĬČƨÆÝIĉÝ¯bÇÑĉ¯ʈV°xUŰĊ¤ƪ_ôÓɚI@lȚXȮŎlɴȘ՘¦ɲÆʈ_ɴźôÞʊŎĠɆxˤ£ɄÑVwXƳ¯wɛŹ٧çƧ¦ōُ͇еϻɃɳUÝ¯@ōÝŹ@Ý»mğ»ÝKkŁżřɅƅƒ¯ÆīĊ»ôVôĕÅUĉéV¹ƨémanÑ±ĕnwmwnÇÛyĉ¹ŹlŏkĵèķmōÞġKñÔċKÅèĉzômxȗÿƿI@þÅČÝKÝ°@¼ÈVº@ÅĢÆUċłnÝÆǕČĵJm£ÝJ¦@ĊxV°ƏLċ¼ǩ@m@ÅĢómÇÆğ¹ÇÆĖÞKxwô¦ÆÑÆL²ÆƾU±ŚÅŻĖ@ĬŤÈñ@ǔÇxÈÇƒ", "@@VÇţ°ğUĠ¯mk¯ó¥ķIġÿƏbĉa±ÒĸĀlKU_m»nwm@ÈŤ¦ĉbÞ°±Þżł̦°ĢŁVé"],
                        encodeOffsets: [[76624, 39196], [81507, 40877]]
                    }
                }, {
                    type: "Feature",
                    id: "6542",
                    properties: {
                        name: "塔城地区",
                        cp: [86.6272, 45.8514],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ήnĸ¥ʈ¼ĸ@ôϰÒ@ƅƒōUķƑǫʶпU֛܃LګK@΋ĸ@Æ£ÞġÅĠċLVÝ»@Å»Ýnm¯»nŻĊ@nķŃ@¯ómóÛÝǟ¯aÝóȭ¥ōUmxĉbÇÑ@bUº¯X¯ÆƧbVÒĉnǕw¯°ƑVÇ@kx±UɱnÅK¯ƒĠǠU°ɜL@°xnĬĀŋŎÇLğϱÞέƜkôÅĀǕłĸĊŤUŰĢ°¦ȂϰÜɨ°x@°żǠÆƈČVĠ»ČL°ÇbĊÑ̐óÞlĶwÞɆVÞwǬxǪţÈ¼ÜLŐĶˢ@", "@@óKĵĀV͈ĉłƾǊÆŤzXl°ÆL²¼źôÈĢǔ¦lô°ɜÞʊĠğÅm»ʵƳƑʝȗīV¥¯ĉ°Ñ@ŃÅI»ĉmğnaċƨbVğwġ¯@UōaĉÝJğÑÆŎkŎÞĀlź¦"],
                        encodeOffsets: [[87593, 48184], [86884, 45760]]
                    }
                }, {
                    type: "Feature",
                    id: "6523",
                    properties: {
                        name: "昌吉回族自治州",
                        cp: [89.6814, 44.4507],
                        childNum: 7
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@መL@È°ĊȂɆƒÆĊ£ťôWÓɆbĢÅŎÆ¦ČÑW¥°ķU¯ƏŃVē±Ý@óçĭɃƾřÆķkwŹŤ¹ġ¥ĵKŏÅXmˍщwǓ¤Ƒ@wóōVķ£ɱġôÛa±ÒȁóèţIVƽ¼k¤ó¹ġJmx»ÝU²@ÅÆĸǫŎĊmŎǬ՘"], ["@@Þô°bÞǠôÜôn@°ĸńǶkł¼UÞKğČÆÝĢÅ¤ķ@@ΌڬL܄K@ˣȂ˭lĉÅW¥ĵVÆý@ŃÞēUŃȗƅ@ŹƩǕĉ»k»ÇVğóřXŻKƏċêȁèÛŎġͩń"]],
                        encodeOffsets: [[[90113, 46080]], [[87638, 44579]]]
                    }
                }, {
                    type: "Feature",
                    id: "6530",
                    properties: {
                        name: "克孜勒苏柯尔克孜自治州",
                        cp: [74.6301, 39.5233],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ˎǫĠƽ°UUĉ¯±ȁÑm¯ÝōˋōwUÅ±»ÅƑ°Ș@²¯ɳʇ`ɱÅ¥՗ɳȗōkȭșW@kəJóÔƩ`ĉ£Vů¯wU°ʇĊÈÒ°aĊÞÞJÅċƧīĠyĊ²XôÇxÈÆÆ@ÞʈÅ»XÞīUƑkmŹÝ@aŎÅÆīƨĕ@ż`Ċk@ÑĠ@ŦÑ@ǵÇÿ@ÇÅŗl¯ğJ@ÇUkçġÒƏÑÝ@ţéWĊôŚUóXUġkţ¤ķ@@ƴōĊó@óÔğ¯ċ@@Ò¤kôˣŰ͓k»KX¯ċwƧôğɐÒôIVÆ¯UķǬķn¼ôb°ÒȰVVÈÞ°ĸó¤V¼°V°²êlĢÒUƨ¦ôȰƴĊVV¼ǖIċĊÞɜénČW˸ǸařÈw±īçĸ¤ĊôwĸUĢ¦éǖĬĀô¼lÞkÒ°x°ƆÞxÆV²ǔ»b°wÞȘ¥°nŎV@°ʠèŰȂb"],
                        encodeOffsets: [[80269, 42396]]
                    }
                }, {
                    type: "Feature",
                    id: "6521",
                    properties: {
                        name: "吐鲁番地区",
                        cp: [89.6375, 42.4127],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ôKĉǪa²¼lÜô@ʠê°ĬôȂ²ÑÜbĢóɲĸ¤ŎUô@xƒǔ£ъxˎmÈÛ@_nĕÞōřǫğůlȯ¯ĸ»U»Ükôƛ°ůkť»Ŏŗ@¯@±͓óͿǓ@ķȁ¼Ϳ@Ƒ¼¯°ólġ¯xȗUġƑǩÒƧUÝ°˹Kóx@ǸōĬÅĬƑĠóƒǔêÆ°XÒʟŤUÇ¼ˋnn¼±V²°ȂUŌÝbʟǔɅô@żǬaҎÈ"],
                        encodeOffsets: [[90248, 44371]]
                    }
                }, {
                    type: "Feature",
                    id: "6540",
                    properties: {
                        name: "伊犁哈萨克自治州",
                        cp: [82.5513, 43.5498],
                        childNum: 10
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ĉÆŘȁ̐mÞ¯ĀX°±¼@ƾ¯ƴ°ŎÝþŋ¦WÜÞbȂĉźUÇmwVUȂóô@ȰÝ΀nÆJnƾʠŌLČóǪ¯¥ǔaǖŌaôÝĢLxÆLɲm²VlwÈ@Uƒ°¯ǖxĊmUÑƨa°Å°WV¹aÇɃÈm¥°¯ŹóĸķǫUm»Å¼ÇVɱlÝŋnķÇÝX¯ͩÇɳaÝ`±_U±ĵnWa@ĸóķ¯ǓV±ÅĵJċ¹ɅykwÇ¯£Åxʟ»lķI¯X¯ķêǕȭnķ»Ź`±kÞ@Ýô@Þ°xŤŎIƨÆUxō¯²ǔĬǬlUŚ"], ["@@ÞĀlź¦¯ĸŤKÞċƨbVğwġ¯@ţƽJ"]],
                        encodeOffsets: [[[82722, 44337]], [[86817, 45456]]]
                    }
                }, {
                    type: "Feature",
                    id: "6527",
                    properties: {
                        name: "博尔塔拉蒙古自治州",
                        cp: [81.8481, 44.6979],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ήƛϲÝĠÈKŌōÿmīw@¯ɛKV¯ğǟ°ƑwġKóÞŋbǕǓb¦ǩ°ċôŋKʟƽmÅImͿȯÞó@ȁôUVnxÈŹVȁĊÝabŻ£¯°lóxȂŤĸkĊÞyĊêĊmĢxVƨÈĠXΘÆĠÔźɆţ°LXƾŤŤb"],
                        encodeOffsets: [[84555, 46311]]
                    }
                }, {
                    type: "Feature",
                    id: "6501",
                    properties: {
                        name: "乌鲁木齐市",
                        cp: [87.9236, 43.5883],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@WôŚUĠÈl¼Ċ¼ƪǖ@źȘƆ@ýlÜXVŘÞ¦V¼kĖóÒèkĊȁˮ֜@ǫ՗nōĉǬōķÆÅ@±ÞV¼nwĢIôºl£ƾ»UŤJôçó¯īʟéó@kÛ±»ǩbĊóLҍÇǫb@ŻɆóʠǓaŋÞȁVʉłĉbĉɅô"],
                        encodeOffsets: [[88887, 44146]]
                    }
                }, {
                    type: "Feature",
                    id: "6502",
                    properties: {
                        name: "克拉玛依市",
                        cp: [85.2869, 45.5054],
                        childNum: 2
                    },
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: [["@@ɜÞʊĊýVaÅm»ʵƳƑʝȗīV¥¯ĉ°Ñ@ŃÅI»ĉmğnaÝţL°ķóKĵĀV͈ĉłƾǊÆŤzXl°ÆL²¼źôÈĢǔ¦lô°"], ["@@ƾIŤ@UUwōaĉÝJğÑÆŎkŎ"]],
                        encodeOffsets: [[[87424, 47245]], [[86817, 45456]]]
                    }
                }, {
                    type: "Feature",
                    id: "659002",
                    properties: {
                        name: "阿拉尔市",
                        cp: [81.2769, 40.6549],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nIÇŃÛÝĊÑĠƏōгwȁ¥Ƨ°ŹÑķV¼ÞêĊ»lĵm¦ÅW@ĀôÈźaɜxÈbÞÆĶIОŘ"],
                        encodeOffsets: [[83824, 41929]]
                    }
                }, {
                    type: "Feature",
                    id: "659003",
                    properties: {
                        name: "图木舒克市",
                        cp: [79.1345, 39.8749],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VéVÇţ°ğUĠ¯mk¯ó¥ķIġÿƏbĉa±ÒĸĀlKU_m»nwm@ÈŤ¦ĉbÞ°±Þżł̦°ĢŁ"],
                        encodeOffsets: [[81496, 40962]]
                    }
                }, {
                    type: "Feature",
                    id: "659004",
                    properties: {
                        name: "五家渠市",
                        cp: [87.5391, 44.3024],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@çôÑlĕU»¥ÝUŗWkÛ@þVńÝĔ@ńÅþĶUX¦Æ"],
                        encodeOffsets: [[89674, 45636]]
                    }
                }, {
                    type: "Feature",
                    id: "659001",
                    properties: {
                        name: "石河子市",
                        cp: [86.0229, 44.2914],
                        childNum: 1
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lŁǵmĉ@mż¼n°ÞmÆ¼@"],
                        encodeOffsets: [[88178, 45529]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/xi_zang_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "5424",
                    properties: {
                        name: "那曲地区",
                        cp: [88.1982, 33.3215],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ƨʔĸbÜºÞwnxźbÞ°ô@ĶĸIÈ¼ĊJŎÈôUÝƒ¤ǔLÞŎ@ĢȘblôLÇźçÈ¤ôL¥ÞIÞ¯ĶxʊťƨƿÑĉXVķŦ¯ȂKÇǕÑ¯IU£¯Óƿ£VĕÅÞÿÆwƑ£ǖxÞĕ±ÇÝaUÑÈU¯UōÈÝwWŁĵ±ÝóĢÿ°IÞ±mÅĢ¯mÿ¥°UnÑŤĢĕĶwǬŻͪwŎ¼źÇĢĠĕˎŁ°óƨ¼Èam@¥°wǔǖ°ƨÇŤġƨŎŃôbÈÛŎĊ°@Ġw²ÑÞJÆÆb²°êĊUÞlÈ²VÈKĊÒĸĉ»ÅôťUÅÇk¯@ÇÑklÇÅlĢVÑó@°@ÛĸV¯ÇĊn¯Uĕƽ¯m¯bÈ@Ò°Ĭbĵ¼kxķýÇJk£ÝaUÑÅóĶǟkÓʉnĉÝ¼Ƒó»Þmn£mČ¯@ȮÿV¯ĸk@Ýów»ğġ±ǓLōV¼Əèķĉè±b@ÒţUÑóakl£Ó@¯L@ÇlUóȁ¯aġÈÅĕÝLķ¯Ė¯@WĬxÒÈnW°ţôU²ǓÓġ²V°¯ôǔÝLċk»Ý»Ý¯ÞVwÛÝÇōͩÈĉċ»ĉm¯£W¥ţKkóġƏW@¯±kōÈb@ÒÇaÆ¯akóÛÇ¦Ýa¯Ýĉ@Ç»ÛmǓxķƛ¯lVĀÅÞġbÇJUÅVĖƑWzō»ōWn@è¯ÞóVkwƩnkźÇÞÒÞ¯ýğÇUxÆÈnè±bĉÝ»ÈŃwwÞ@m»ÈV@ýÇ°ķxaÝ¯Xċ¥ÈóW@ôkxlnxVÈóĊkŤġ¼@°¯ŰƑL̻Ű±ŎÝVÞVÇÞÅÇakƞ@èğŎĸżƾ°ÒLÞôĠKȰĖźVÈÒĠ¤VôUÈþťL@ôǬÞlÜÈnÇÒUŚ@ĊƨW°°X@ČÇþƴĉÒķ¦@ĢôWĀôłUÞĢǬź°¼@ôV°bUÆnzm¤ƽĸÈ"],
                        encodeOffsets: [[88133, 36721]]
                    }
                }, {
                    type: "Feature",
                    id: "5425",
                    properties: {
                        name: "阿里地区",
                        cp: [82.3645, 32.7667],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Çƾķn£myVÅaU¯ó@¯»ŹġǫVÝóŁXÿġó@ĸ¥ĊÑƳÈý@ċW¯X¯ĉƧ@VřÈÑÇmkÛǫÝ@óŦKÇýVUó£ğÇÑŹUȯĕğLÝóK¯ÑƽķŻĠō@çlƝÈbÆÈÝUÝÞU²ō̼ůƒK°ů@¯UK±ĊƧbōÇmçÈġóÅóbźó¥kīÆ¯ólçKôĵUÅVŃķ¥nÅŏm¯¹Å»@ÑÇóxÝkʇȤU¤ķb@ƒ¯ĊÇx¯ĸĉKm°Āk¦lKnĬȀƾÛ¦WÆÅmǊĉ°ōUţ¤UŎ°ŎKÞłÆǓ¦Þř¯bmUÝl¯Umğl¯£șwÅǫaÝnĉĶk@¯Kō»ĉnaÞ»ťnkmlĸ¥UÅŻkÑťĉVôó°LôīĠUÿĉǕÅz±K¤²ō¤¯Ė¯UÝ¥VĵóÈťÝwķÈÑk¤óWýĵĕVĠVóǓķ°k±VU±ţ¦UǟÝÅJVÑ¥XUċUÅlÛƆǕÆȗƆ¯wŏÞÅ@ĉlÝóÒnUôÅlxólÝôÛ±LÛôÝL@ġ¯X¯ÇUÅ¼óaó¤¼XÒġŎóLk¦ôÅ¼ĸĠ¼KġƆô¦ÆƑÔĉĶ¯ImÒ°¦n°¯ÞlÝČnƒÒKĠÞĕklýƾťôIĖŤÒnƜm¼¯lnżóÞ@Ůó¦ôƽĖċŚn°Ý°ôÈUƜblÞó@ǖô°UÈƆ°XþôôlѢ²Ėm¦°@¤XĊblÜzkºƒĖmXŎWVóÞn°lĠxȚa°»żLźb@Æ°XĠÝȚxĊĕŤaȚ°È@@èŤ¦Ü¼WÞkÈ@V°lŤkŎ±²¦ƐUǉ°aÈÑŎbĢŎbÆ¥ÞIȘlôVÈUbkɲĶnmnXb̼òƾĖŎ@ĢȂÑôÓĠĖʊĊÔ"],
                        encodeOffsets: [[88133, 36721]]
                    }
                }, {
                    type: "Feature",
                    id: "5423",
                    properties: {
                        name: "日喀则地区",
                        cp: [86.2427, 29.5093],
                        childNum: 18
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ĶĖXþôl£ÒĸÇÞxÇŦôUĶÞ¦°V°ĕŎ£±£²LÆyĊǖĀğVóĬ¯KóôUĊŦlÒżVÆķ¦klnŦmÝ¼bĊmŎ¼L@°lĊĵÞmǬbÆȚx°¤Ġkn°VÞkVn°aŚÝǔ¥ÅÝŁōL¯ōVŤ£ŎVĊ¯nǉÆXÅÜ¥ǿƽmīLkl¥ÿn¯ĊL°ķÈw°ĉ@ƑĸaV£ʈȣÞlôwÈ@Ò¼Æ°ºŐnmÆĸ¦UńÆVóĶLèôkÅ°lĬ¦ŹôôaÆôÇĢnèŎÈƨaĉ²VLĢ»lţôĉUÇwkmlw@óôXÇČ¦°WÞbwĸÈ¯@þÇUn¼Ý@xxÇńÞ¼Ċ²amçÅÇVwĠÈþ°ÝÑÈÝlŹƪmlxôU°Ý@çmXŎŎ¼yƒXĕÆUVÈIĢaÆÝUÿ°kĸƜǔwnÜÈ¼Ċ@Þ°ÞbÈ¥Üôl°bÅÈb@ÑaÇ¯UU¯Vġ»¯aV¯Ç°ÅmnÑŤçǬVǬ±ĉ¯¥Vĕ¯Ýk£ōw@±ġÛ°ÇVÑ@Ûa@ČLƳÇa¯¤ÝIĵ¼U¥ƿōķÅţŻókÝóĕ¥¯U»Æ£X¯ġŃÛkÝ°V°ó¼¯èWôÞĖȎkĀƧĀówm¥¯JÅ¹ÝJÝōVVÅaÝƑ@ğŭÇ¯_ĵVnxÅónĵxÇĖĉVÝÈğVÒó¯±Żĉ£ķÆÅLǈĉýţÛ¯VnV¤ÝÈ@°ÅÞÝ¤ŰğŁm¦ÝxóK¥ɱÈUĠôêVôÛ¼ÇWÝçĵaō¦óĖƧlÇĢƑnŎÇV¼¼ºÛ@m¦ƽĉmm¯ÝKÛç¯bŏłĬb¼ÅLmxť°ÅUÝXkÝmĉ¦W¯KÒknÝaVÝè¯KɅńÝKnÞ¯¼"],
                        encodeOffsets: [[84117, 30927]]
                    }
                }, {
                    type: "Feature",
                    id: "5426",
                    properties: {
                        name: "林芝地区",
                        cp: [95.4602, 29.1138],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VÈłVôÈk@°K@Ôk¤lôbVÒŤ@Ñ²açĸĊƐçU»ŎǔKĢ²Ġ¼ôx@ÞlƨĬUl¯ÈLVÞJ°ÜnʊwÜbXêVÞ¯°anaU°wÆ¼ɴÑWÑ°mÈýÈam¥Þ£Ť@¥ôblÞĢź¥ôxÈÅmÝĕÅV»ĉōŤōnó»ÈīķIUĠÑ°ġĸLÞ¯VÒÆ@Āb¼WôÈ@V¼ôóŤKÈÑU»wVǫżnWÒÈx¼lŦ£ĊōŤx²¯@ÆU¯çÆ@¤°£é°k°lůÈó@¯ŤÇÈĉkkÿó¥ÝXķÑÜ@ÒóŚÝ¯°ĉówÇ±¦ÅJUÒĉĀķw¯°mĖ¯±akxÝÅn»lÑK@¯lU¯UVÑ¯óĊ¯mōğVǓƅÞWÝÈÛ@ƿô¯ÜġzÅþ¯ólmôʇġĊÅUͿřŏȁˋŁóÇˡōƧÇbw°Ķôk¦ÒnUþġÒÔkǔķèó@²@ŘōńĵyzġaÝ¤ÅI¤Ƀť¦ğÑ¯¤ķbó¯ó±U²°¤ČÜVnÈÆŚŎ°ôĢþÆzèVĀÇĀÇXŹÑ¯¤ówċķk¦łUÒġzÇ@ÆÝx@²Þ@Æ¤Uô¦U°xU"],
                        encodeOffsets: [[94737, 30809]]
                    }
                }, {
                    type: "Feature",
                    id: "5421",
                    properties: {
                        name: "昌都地区",
                        cp: [97.0203, 30.7068],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@VĖm°ĉÈU°ķÜ¯@@ôUÒġkÆkÈlÒ@Èl°ÈVÆóŦÆ¼aÅĢɄwnōw@¥Ŏ¦°ŹÞmV°wnÿwwÝw@¯mÞŗ°wĠĸkÞğlĔ²¦°@ĕĸwVóal@nĢÇĊn°@¦źUXçǔůĸVÆKÈÝĠ²ÅĔô@lÈ_mzǖlaU¼ôwV°¯¦ĬÈal@ČÇ¼nIxô»ɜ@ƨ¥ɆŁŃǪȁkƛƨȍʊȡóĭ@ÈÇVůÞĸƅmēƨťÅÈʉVǵ°ġVŭÅɧ°ÿnɛ£mķ²ŃóÑUĉ°mÇ»¯@mxUĀ¯èţ°ȁÝçġU¯ÆÇţÈ@°ÇôŰ¯k¯lê¯¤£Å@èV°Å@±°ţwĉŎť¤k»ÇwXÑŻmUǬxV¼ÇÒţLóôU»Ç@Xó»a@ÿÅUÑÝ°ķK¯ĢğÒVĸJÇĬ¼môţŎĊŎU¼ÆĖnÞÇÆówŹ¦ġkÝóa¦ţ@Ý¤n¦ÇbÇþ¯nXÒɳÒÅ»¯xVmbb¯Ý°UWéÛaxʉÛm¯ÝIUÇKk°VƧīķU°ȭĀ@ċ°nm¤Ýnô¼ƒÞ»ĊʊmlÔĵǠÆôVÒÞbl¤ÈIĸþlw»Ķa¯ī@ÑÇ°anƾ°"],
                        encodeOffsets: [[97302, 31917]]
                    }
                }, {
                    type: "Feature",
                    id: "5422",
                    properties: {
                        name: "山南地区",
                        cp: [92.2083, 28.3392],
                        childNum: 12
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°ÞUĖ°¦²ĊôÇÜLǖĀɜȘŰÞLĸźêÞ@UÜUŤ°ɞ¯Ü°WŦĀmŎ¦ĢyVÑŁl¥Čĸôx°£źÒWÈÿÈUÿçÅyýóġō¯řÅmÇÛUċ¯£V±²°ôôĸa°£ĠÒŦ¥Ʉ£ÆJÞ£ĢbyĶzŎŃ@ŗ±ô@ĸçlǓÓĢÑVýmÑl¥ĵó¯̻̥ƛǫÝһÇƧĉyţ¼ҍēVĶĉŎ°ĸmÞVÝĸÒÛaċóŹĖèÈÈl¼k¤ÝX@`Þŏ¼Æō¼ÇçĉKUÝÝ£ğ¤@¦ġl¯Òġĉ¯ómóxÝÞğVƴċK@b@ÜUÒ¯ÈĢÜ@²xŎl¤"],
                        encodeOffsets: [[92363, 29672]]
                    }
                }, {
                    type: "Feature",
                    id: "5401",
                    properties: {
                        name: "拉萨市",
                        cp: [91.1865, 30.1465],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ŏ²l@°XĢƐlôŤLX¦°¤ĊnČ¼ÇĊŎͪÞÈÜxU°ÝÞÞ¼¼lČÞKǓ°óU¯Ģ±ǔÔV±ŤóX¯ÇmÑwXī°@°ĕĸÞKÆĖĢÇ°bȂÇŁUV¯wVó¥VÅ£Ý@@±ÞwÅÈ@¥nōťÿ¯XÛɝ°ţ¯ÛVVÝ@ŹéķÝKȗůɛǕÿÛKóÈǫǫUţèmÒn¯Æ°ÈU°b¼UĢV°°V"],
                        encodeOffsets: [[92059, 30696]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/yun_nan_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "5308",
                    properties: {
                        name: "普洱市",
                        cp: [100.7446, 23.4229],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Uô²a@²²Ķ¥V°Ķ²bl¤kVxl@°Ś²@y@ô¦¯@xxVxUVbVÜm¼ŎĢmºXXWÆ@ĀmmXU°ÅÒm¼Þx°w@°XêĠ°»nV°Ul@k@V±ôī@£ČŃÆ£KÞý@¥k@ya@nWVUVwm£Jknm@wmknXX¥mUUlUnb¯°nkVInlIUw°nmk@@mlanXlanmk@wVWUw_@éĠanmUaÜ£mX¥¯@@óUmÝ¯¯ÞÝlKnxô£»»ĠJ°aVUÝÿV¥ÛbI@wmón¯yÛL@WkÅmÈ`IWa¯K@¯mUnmaXmbmak¯ĢÒÝm¯mV¯KÇb¯KÛWWX@aVknċLUWVkXóW@ka@ób¯Uwmb¥UUlaU¥U£maķKXkmÝ@kwmÑ¯k±ċbUUVakaġ¦kL@`a¯xmÅLUW@ċnÅUV°LkL@b°°@¤²nôôkl°kèÒÈzV¤ÈWôônV@¦@¼Ux"],
                        encodeOffsets: [[101903, 23637]]
                    }
                }, {
                    type: "Feature",
                    id: "5325",
                    properties: {
                        name: "红河哈尼族彝族自治州",
                        cp: [103.0408, 23.6041],
                        childNum: 13
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@°°nÞôV@°@¦WnÛ¤Vbmnğb@ê`VxUX@xÆÞUnnWÞĸĢÈ@Çè@zÛÜWÅêl²KnV¯ĖĊx@bk@@°JÆ£Èblnnm°nlUkVUUwVmKnnVÞxVLX¥laX@@xl@VzÈVmk@b°ÈĸmV¦`WXbUbbX¼°x@aVVkn@lþnXUlVxŤÅyIUkaIŎĊ@lXx@bz@ô¥_V@ln@ôy@al_l`nmÈ»@kmXwWKU¯»aÅ@wmUÝKUaUUwW@w²»@kÆV£mm£VKkÑV@@»nw¥@kÆnllIVlnLVakalknJWmnaUaVÑVVÞn¥m@¯Uÿl@VçaXaV¯UyVLVk@nJlXLlkxlbla²Òl@nVJVkxKlkUaVķÝÑU@Åm¯@±Uó°ğńķĠmUÑ@Ç¯¯Å¼@nml@°¯¯`@w£@¯Çk@»nmċ¯U»I¯LÇĶÛn@bó°Uwm¯UmÇ¯aI@ykIVU¯bIğ¼¼ó¤mwkLÝÞ"],
                        encodeOffsets: [[104243, 23429]]
                    }
                }, {
                    type: "Feature",
                    id: "5326",
                    properties: {
                        name: "文山壮族苗族自治州",
                        cp: [104.8865, 23.5712],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@wô@²¯maUmôUÆx@XbÞInlVUVwJVaUK°¥xmÞXnlKlnna°@ĊČÆwUmnkl@°£nyn@VV@Vak@@kÞÝbmx°Vnw°klÞInĖÞVlKl@Xa°KlVU@JnxU@ÈĢbUKlm@ak_wanWUk°l»k@Wk@lwU_@UalóU¥ÇnkJW@mVXx±bK@nV±a@Åa£ÝK²WknamKknÇk¯aVV¯ĀUÒ¥I@mm¯¯xÅW@@`k@ó»UU¯lm£ÅWlĵw@mmwÅmWU@y±UxmwU¯U¥Ý¥¯£m@kÇVUV°VbklLwUlUImk@±ÑkbkalwkWKkmI@UlUKVzU°WbbUè@kVĀ°@nm¦ÝUUUÒVbmbXnmIkllbUbmKUkkJmkÅ@l¦mx@¼U@lÒULn¤nU¤Å@l±¼@xXxVVVbÞLVn@xÆb°¼V"],
                        encodeOffsets: [[106504, 25037]]
                    }
                }, {
                    type: "Feature",
                    id: "5303",
                    properties: {
                        name: "曲靖市",
                        cp: [103.9417, 25.7025],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@È¦lKÞĕUV¯Um¯ÇVUnVVUĉnĊÇƾLn°°ÈJÆw@lbÞa¦VXJ°¯W¯aÞJVkUa@lKnÅmWUk¯a¯»@m±@ÑkkbWWX_WÓU»_lkÑm@U»m@l@IWċn¯l@VanVUVUVwVxKÈVmUē@n@VÝÆLwVVwnVlmkUVÑÇ°ka@kÿÝaÞUl£ċĕX±±ĉa@UnVnalónk@wlUVmkÝJaW@ÅwóVVnnb±°@óxXLWxn@lÇ¼nmk_k`@bózm@kU@`¦ó@nW@ÜÅXWw@yb¦@ÒlnUb@xlÜk@²Ç@U¯bmy@kV@bb¦U`lLVx@bLl¼Þ¤@°VVÞU@WÞUbJ@nn@lnnmxUUUbK@ÇwklkUVWakn@lbU@@ULVxkKUn°¯Ò@¼km¦m@klȰ@lUl¦@Vl°wnnþĊUÆbUxbVĖU°annaVal@@b"],
                        encodeOffsets: [[106099, 27653]]
                    }
                }, {
                    type: "Feature",
                    id: "5323",
                    properties: {
                        name: "楚雄彝族自治州",
                        cp: [101.6016, 25.3619],
                        childNum: 10
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@mÒXU`Wn@Xl±¦Uxnbl°knmKUxxVôUx°¼ôÒÈ°JlnÞKĠW°¦Vx²JVw_°¥@UV@@wnymknK¯I@²b°£V¥wUV¤nLkÆJÈwôô°l»Č¯ġVUU@@°ÝXl@U»°Å@U¯@w±¯VmUUlm@mÑnIVyUwmak£Vwm±@Çw@n@UxkwlÇnLmkÅ@±kka@kóJV¯Ç»U£lw¯Xalbl¥¯UX@aUaÈL@ÇVIVkaU¯mmakLWkUJ¯Umxn@kUx¯xmWÅīÝkkbŤbkxWmXwWk¯wKkLÅ¤ċń@¤óĬU²@@lk¯VmU¯¼@xV@k°l°kbU°nmVnU@°UVèÞÆbUÒÞnU¦V¼lô@Vl"],
                        encodeOffsets: [[103433, 26196]]
                    }
                }, {
                    type: "Feature",
                    id: "5329",
                    properties: {
                        name: "大理白族自治州",
                        cp: [99.9536, 25.6805],
                        childNum: 12
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lbKVIUa@²m@bxôÒÜxXLmbnl@K°¼kUôxôlV¦nJUÆnm@xÆwbXÆôôLUVwôK@wlmaVw@WknmIUmlnJla@_@kÝmKUaÑm¯Xw°aUaVl»²JVbÆJkôĶĀ²VVkmbVwUówVwnLlmk¯maVw²¥Wk@XmV_WnÑUk@kó»UV¥ÝmVÑÅaÝUçV@¯VUmn¯mVlak¯l¯U@@wğWé¯@¯xÝw¯¯Jċa¯U¥mLU¤bÞȤbÇLWUwmIUVW¼kb`UVb¯L±ĊÛkÿÝKkwKţêUĉþÈV¯ÞVbU°KVk²ÝmImV@kmUkVxm¯KXÈķJU¦V°ULWxL@môb@bkx±LnVUVLnkÜWnwlLÅƒmW@kkJU_VWĊÞ"],
                        encodeOffsets: [[101408, 26770]]
                    }
                }, {
                    type: "Feature",
                    id: "5309",
                    properties: {
                        name: "临沧市",
                        cp: [99.613, 24.0546],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@xĢl`²X°Vx@x°Þ°KXağUÑWbnIl`X²°bxl°V@xVxk¦mbl@xXVÆzX¤Æk°kx@lźêlaX»VUnJVxXÈKaÝȣaV£nKV¦°Čb°I°n»ÆÑV¯nWn@ÿXÅWWn¹ġōn»ÛUaUVUww@w°ó¥@z±@ř¯@kUwlk£±aĵ¯Uĵ¦±±@bó±VÝ@ó¤w¯I@mÅóm±X¯IólK@°UllbzkKlln@@ÔºUmVk²ôÒxŎUVóLbmÈnmbnlax@z@Æ¦k"],
                        encodeOffsets: [[101251, 24734]]
                    }
                }, {
                    type: "Feature",
                    id: "5334",
                    properties: {
                        name: "迪庆藏族自治州",
                        cp: [99.4592, 27.9327],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@WXw@akk@yk°īX¥Uóķ¯w@n»UaVaUÛ¯mV¼kÞċô@n¯xÛÒmV¯Ô@x@kwmÅa@UaÝ¯VÅyVa@ÿn»ÝVmankmmÞÅô@n£±ğzÇmU¦VmnÜmbn@°nV@xmzÅ@mºV¦k°ln¤¼õôn@xkÆIUxU@Ť¦VmVkmkXW¤XzVx@Æx¼Þ¯b@lVĸÞVm¼Xm¦VÞ@Æ¹Vón¥ÆKnKX¯x@èĊÈ±łXaÆxnlV@UÛlȻkğV¥m²ǉmÅÞĕƒƛm°ÆmX¤mznÆV¦ÞVVb°bnÞWbn°l@VÈ@VĵĊ±@óInxÆw¥@£ÞW¯ĸ£UUKk±akkkbmWmÈķaÆÇUÈÆW@wmknmU¯"],
                        encodeOffsets: [[102702, 28401]]
                    }
                }, {
                    type: "Feature",
                    id: "5306",
                    properties: {
                        name: "昭通市",
                        cp: [104.0955, 27.6031],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@mnK@wmUÅ¥móXǓŏmX@VmL@xţnk@mlUŻÒğŋ@L@mmLkm@bXÅW¼ka¯lÇŹ¯aÇ»ÝÝ_@m@@a@UklwUm@ak@bUmbmbV¯ĕUaVwÅaĉVmým¯xUk@k¥VUX¤VÈm`@ńÇÜ@ĀknĔkƞÆĠÞUVôƆÞI@UxÆ¦nl@ĊĊnxUÒ°¦Vb¯WUnWIml@xnUbô¤¼ÈxlI»KV@ÈÔJkUĖ±ÆVb@nVÜVUVLwĠlknĠ@nx°¥Æ²mUw@mmÅUl¯UÑÑUmLllIl±@VkwW@w°@U»kUóI°»ĢÑL`nUĠ²lmbôV@nJUxÆ¦X¦l@ŎUV@lVKVÅV£UaÞUnW@¯VU@ó"],
                        encodeOffsets: [[107787, 28244]]
                    }
                }, {
                    type: "Feature",
                    id: "5301",
                    properties: {
                        name: "昆明市",
                        cp: [102.9199, 25.4663],
                        childNum: 11
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@n@VkVUn²°@x°V@¯ÆV¼k@WÞ¯@@VVUĢċ°k¼VĊx¤Ōx°mVkÑÈL°x°X°VmĊLVxUĖ°bX¦VW@kȯlkn@¥ln@»°Ñ¯VmlLUwVK@V@ka@lmXbUlVlkÈx@LVaVVwnmm@km@mIVaÝ@XVUÝ¯U@Ý£k»K@aUwkKV_¥a@alU@nz°aVÈ@@±lÛk@wVakm@Ñ¥az@XxÆW@ÛX@m@y@aWw@kōĉJlbVJzţÆUwVkmWkým@UlU@b¯wVºUVUêĠXUaUbVĊUWXUmkKWnUUUVVVÝ@kk±¯Lk±WkXlVkl@wXbmLVUIVmk@Ubma@kkaVKUkmlXLWnJ¯ÒĊ°@zkºlLUŤn@@nô@lÆnmKkÈlxVw@@mÈx@n²Uxl¤nbVxUzmJÒn"],
                        encodeOffsets: [[104828, 25999]]
                    }
                }, {
                    type: "Feature",
                    id: "5307",
                    properties: {
                        name: "丽江市",
                        cp: [100.448, 26.955],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@l@@w°ÓUnÜÑ°w@mČóÝlU»n°VÜUbVbm¼@°xôĸVW¦¯Ĭl@zll@bWxXaX@ÆĠÆaXwl@XaÆ¦n¼Jn@mnKW¯È»V¯°akVanXVwl@VyUĕVUbÈīlaUk°k¯l²VUkƛô@I@mVwĊaVakaÆbUVLaXIWKUwaWÑÅKUaVk°@Uw¯¥XğÝLkm¯IÇóÑ¯»anUl±UĵÿlóÅIaU±Ik¼UVb¯bWxn°ÒVbnLlÞ@@`kbmIkVnJmnXl@Uxbkn@xóLUxVKóóÅWaÅxw@nÅmVôXLlVU¤b¦m¼@ĀbUzUÆ°ÞVb@Æbnx"],
                        encodeOffsets: [[101937, 28227]]
                    }
                }, {
                    type: "Feature",
                    id: "5328",
                    properties: {
                        name: "西双版纳傣族自治州",
                        cp: [100.8984, 21.8628],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@l²°nÒlxÞ@nWlLĸnbV¤V¦kbVV¦nax°Vôa@b@lôXlWUVXČKlmU@bWXXÜ°LÈa°LnU°ÞnÑġ°lnba¯¯KWó@kmK@UĉV@k°VV¹a@y_ċl_nÓlL@anI@óWl£VUlkĕlKVwU@kVam¯ÅL@bÝk@VnUbÇbÝwÅ@ċ¥¯lk¼ÅÒ°b@¦nlUn@ÇVmÆbWôU@ÝÅōm¯aUmkWWw@±n¯UèaL¯mLkwl@°mnÈÒ¯ów@VxĀU¤°Į°Xl"],
                        encodeOffsets: [[102376, 22579]]
                    }
                }, {
                    type: "Feature",
                    id: "5305",
                    properties: {
                        name: "保山市",
                        cp: [99.0637, 24.9884],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@X°Il@¦È¼m¼ÞaÞÅlÈxV¼lVôÈÆlLÞ£ÈºlkUUw¯UĕVwĊ@n¦mlnVĸIWÇ°LnUwlVn@lnUnJÞl±U¯LVUa°ÝUÇĊýVŤéLlxÞLĀÜl²ĉ°KUaV_Źé@klw¯lÅW£ÅyUW@wknal¥Uw@wUk¯w¯aW±k_mJaXVÒĠWb¯L¯Ý@wwU¯±Wk_ġwwōKmb@¤bk°lĖôUJVnÅlťU¯°VbnbWxXmÞWUĀLyWzÛKmbUxVKknÝkVĀċ¤Ux@¯m@¦"],
                        encodeOffsets: [[100440, 25943]]
                    }
                }, {
                    type: "Feature",
                    id: "5304",
                    properties: {
                        name: "玉溪市",
                        cp: [101.9312, 23.8898],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lL°xXlWxXnlwaţlaÞlÆĬnX°wVwl@mnw°VVIXllKbnnV°lbUUJ@ÈÇKVb@bW°Vk¦kaWb°kxV¤È¼U°ôI@llbl²@@ó@mm@VţkKl¹@yĉ¯°ÑIXmWKnklVULlb@lnbVal@UnVJUnKWax@lkkUlW²XlK°l²@lÞUUUVVVXmlLVnXWVUĉVaVbWğVéUVU¹W»aVaaWX_U¥nÇķ¯@alUnÇUyk@@wW@kbW¦UKÝwUmmLUnVxUVVlk¯mmnmkÇaÅ¤¯I@l@@aĉw°ĕmUL±kÆéXÜÛ@yÈç@ÇġÝķXmmÝVÅlmnkbmWkb@nl@nm¯VxkJmUJml¯°makVVnV¦WWmnl@xmnlI¤nxUVUmX@b@zl@¦Ýþ"],
                        encodeOffsets: [[103703, 24874]]
                    }
                }, {
                    type: "Feature",
                    id: "5333",
                    properties: {
                        name: "怒江傈僳族自治州",
                        cp: [99.1516, 26.5594],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@WyX£lWlnnUU¥@ţVVwJlÅ@wmöó»£kml¯U¥n¹Æ@ny@wmU@¯mnamÛnUV¥ÈnĠy²m¤@ÆónÝnmlnbÞU¥aV£kUKWómIU¥ókwVól»¯Lk@mnaWKÛwóÑw@a±n@VbUJLkaÝXĉUV`lI@lnXÆƑkKmxÛXmlUKVmU²Klw@aaó@nKXwVKU¯V¥mUnkm¥ĉ@UxVĖ°VxVklmÞkKWĀkVWnl°Lnm@°UxlV@nk¦JVÈ°VÒ@nX°@ÆlUômlnô²nxmłnVV¯x@Èm°XblVUl°@xkXU¤WXXWXÆmkÅJmÞw±bxUīkKmÅVUĖÝèVkx@lXlnk¤LkĖk¦xUL°¯Ė@LnK@b°xVI¥Ua°Ñ@»nm@¹KŎÞÈWln²n"],
                        encodeOffsets: [[101071, 28891]]
                    }
                }, {
                    type: "Feature",
                    id: "5331",
                    properties: {
                        name: "德宏傣族景颇族自治州",
                        cp: [98.1299, 24.5874],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@¥n@°@VwČ£ÿUlÞlmULVwnaÜLXyzKVÿXÝnWXwmaUa°¯VŦÆkUmVIókĕl¯a@£nama@¯m¯ó@óyţbġkÅm±ÛammVkLwU`Wk@VkUmÅlUUKmbkkUVUw¦ó°¼bn°ô¦lºz@x¯@U°nU¤ţU°VƆ@ÈmlnzÞl°¦ÆaxUxLkxWƒn@²ŰW@°ÈXl°Llx"],
                        encodeOffsets: [[100440, 25943]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/util/mapData/geoJson/zhe_jiang_geo", [], function() {
            return {
                type: "FeatureCollection",
                features: [{
                    type: "Feature",
                    id: "3311",
                    properties: {
                        name: "丽水市",
                        cp: [119.5642, 28.1854],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@VbVl@XnUXKV@¦nxlUXVnKVmnLUV@bn¤lLXK²`nnlJXIVJIVnn°KnnVll@VLXWV@UkVaVKzV@VVaUK@U»VUl@@WnUU@wVLn@Vwl@XW°LVbn@VU@Xl`@XnKVbkl@XVJlUnlVxlL@lnXl@VUnV°°@aUVLXblWVXn@VVUV@L¤VLVUVbnalLUUVX_laVaWVzXKV@@a@KUmImmXama@kU@yVIUKaVa@kXK@aWU@VIUmW@kkVmU@VwUa@K@k@U`@kUKVk@UV@VaUm²Vy@klUUWUkVmUa@_KVaXaXmU@mUlWkaUX@mmkL@wJnVVÅbWKXa@@I@aJUUÇ@VULW@akLmb@K@aXXw@mVmUVkUy@£@aU@@VkUWm@kUKXUWU_mW@wkkmJUUkLWWUXW@IkJ@k@mW_kÓ_UlLm@I@aUa¯m@ka¯LUJ@mVVxUba@LUKkXbm@Uak@@a@Um`IUbUJ@nUVW@@LnVV@lUbVlUX@`@blXklWUmXlm¦U@@V¯bml@@nUb@llnn@VbX@lV@UVULmU@JVnbVbkbVWxU@@nUVk@"],
                        encodeOffsets: [[121546, 28992]]
                    }
                }, {
                    type: "Feature",
                    id: "3301",
                    properties: {
                        name: "杭州市",
                        cp: [119.5313, 29.8773],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@X@l°KXXlWb@²`bIX`l@@bWl@n@VnLUV@V@°¦@l@XVlU@@xVbUb@Vkb@@XVJVzJ@LÞ@VmLUxUJ@LUVxbxXUl@VaÈwbaÞa@Vl@XUVx@V@VLlbnVal@lbVnnLnKnL@VlbVJXalIb@KUU@mVInJUVl@xUVLnU@UÞaV@lkV@UanKL@UlKVUnbÆmn@@nUlVnVJl@@UXUL@WVIVJVxVLXV@IÜKnbn@V¥V@@I@y°b@UUwnk°ÆƨVlUçXm£aÇIkV@WV@@aWIUWUIkb@WW@UnK@UU@kaWVkVIVVnU@UWVUV@VmVkKkWIkVWaULU`UImJUImmU@wmwUVIUWVkUamaU@mVkb@KVU@aVU@anKULVJU@kÛUJUVkkVakU@aVwkW@UWkXmWaULUaUK@XJUUmVU@UVUkJ@ImwmKU@k@lUW@@akKmkamIkWl_UwVm@UkaVUUa@UamakbWlkL@aUalU@mkL@U@UlmK@XkKm@Ýakb@xnXb`nUUU@U@wU@@mKkkV¯U@lULUbVbUb@Va@LºÝb@bLmKx@VUL@bk@mxULWl"],
                        encodeOffsets: [[121185, 30184]]
                    }
                }, {
                    type: "Feature",
                    id: "3303",
                    properties: {
                        name: "温州市",
                        cp: [120.498, 27.8119],
                        childNum: 9
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@ll@xnXV`VXWVL@lXnlV@UV@@b@¤VzUlnVU@nWxW@b@LnalK@bXVKUÈ@VVI@b@J@WbXLÆaUUmI@xlKnn@VWlbkXV@nVWnWbUbL@`VbUnVlVXkV@lUz±VnUbU@@VUlVL@l_@V@l@LVbV@XLV`VÈlxn@lU@aaVVk@XJ@nl@@LU`°LVbL°a@aUVy@anI@aanV@²wÜJX@VVV°kna@WVkaWwU@m@kaUĕÝÝŤnÈaaóI»@±XWkUķ@kV±kwUkWwUÝ»ÛkɳlImaUaWóXÿǬkUnWVmmkKţnŏÞğlUlUx@XWbV@JkX°mb@VULVxUVk@@LWWk@WIkUkJmUkVmI@y@UakLmU@mUUUkaVk@mK@UlUU@UmKmbUUUJ@n@KVLUL@VkJWXX`mnULWlkL@JVLVb@°kxkU@LVV@VLV`UL@VUX"],
                        encodeOffsets: [[122502, 28334]]
                    }
                }, {
                    type: "Feature",
                    id: "3302",
                    properties: {
                        name: "宁波市",
                        cp: [121.5967, 29.6466],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@Ċ¦ĸĀ°nXÞVKkƨƑźÿ°»n@wô¥ÜbU°ÆXÞWóçĉÝ±IUÈ¥@U°wÆ»²mm_@aXVKÞVlk@akk̅@£X»VwÆXWa¯aȗbKƽŰĊxLók@@¯nKUL@xkLÑkWULUUmJUXVU@mUX¯@V`mbXbV@@nn¤WXx@kJ@nVVUVl²UbÝVUVk@Wx@V@VXzmlaL@VlLU`XUVVVUnl@VbnJlnUVVnlUKkbmnnVxlJnxmbU@UL@KUVX@xmb@lk@mnVVUè"],
                        encodeOffsets: [[123784, 30977]]
                    }
                }, {
                    type: "Feature",
                    id: "3309",
                    properties: {
                        name: "舟山市",
                        cp: [122.2559, 30.2234],
                        childNum: 3
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@l΢ƒʠþÆVĢLĊǬXĊÜXôVÑÆwlƏÈóVĭVǓ@ĉwɛkmK@ĉXīWaĉUĵÝm¯ĉwĉ±±nÅ¼¯x@VÇ¦V²JĊÞôèÝXÅW¯VÛaó¦@xm¯¼ŹĀ"],
                        encodeOffsets: [[124437, 30983]]
                    }
                }, {
                    type: "Feature",
                    id: "3310",
                    properties: {
                        name: "台州市",
                        cp: [121.1353, 28.6688],
                        childNum: 7
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@lVIVWVz@bXJl@Xal@°nLll@nVxnVK@UJVb¦°k`UIWJXnÆ@bUJXl@lbWn@UzVV@bVVmVnnJVXnabKUKnUVVUnVLlKVLXaJm£@mU@WanaU_°@VWnV@UVWnIVVVKlXÒlK@wVKL°m@l@ôKwĉƾůUl£@»UVkm@ƅUaÛIŏmUk@mw@a£Wk@ţIm±@ankôUlaUUw¯ōabÇbţmÞÞVĖbl@@nVXxbUl@Xmb¯lUUUW@ÛI±xU@mb@bmJ@bUzV@b¯bKUa¯KV_@Kk@@mWI@lUUb@bkVm@kwUÇU_WKU@Ux@VUnllX@VnJ@UXV@bWL@lUbbVLUJ@zV@lnbWbnnnJV@L"],
                        encodeOffsets: [[123312, 29526]]
                    }
                }, {
                    type: "Feature",
                    id: "3307",
                    properties: {
                        name: "金华市",
                        cp: [120.0037, 29.1028],
                        childNum: 8
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@nbVb@VbUVlb@VUnVxk`lXnJlbnlL@bX@V@klV@nLnx@JlIVU@VUVnVVI@WVLVbVKXbWnXl@VlXUxb@lVUbllVUIÜVnalKX@@bV@@aUUlUwUw@naWWUVaUUaVbLlxXJVk°UlkU¥@ka@LVlXLVlVWznVn@lxJl_@WX_@mVaa@alU@kVVnaKVLlKb@UUaVabnUWmXU@k@yVI@aÅWmXIVJl_¯¥UaVI@LmUUw@mkkmK¯k@Wbk@WI@aUyUXJkU@bU@WLUyXUbkbW`UVVkKmbUaVUUK£@KVUUUm@UWkXWaUKV@b¯¯mUV@UkmW@kkKwUmkkVUI@WlkUamL@Wk_W@UVm@Ua¯KWXk@Uxm@UK@xVmV@Xk@UVV¼@VLUbUU@yULUbVlU@@XlVUVVbU@lXXVW@XUVl@@VUVÈn@VVU@lVa@UmL@`X@`WL@VUX@lUL@xlx"],
                        encodeOffsets: [[122119, 29948]]
                    }
                }, {
                    type: "Feature",
                    id: "3308",
                    properties: {
                        name: "衢州市",
                        cp: [118.6853, 28.8666],
                        childNum: 5
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@XkVKnwl@@aVK@UwnLK@aÞa¹@Kb@UVaUaVaVK@k°VUllnL@V@xV@V@VVm_Wam@wlaÞbn@lL@WnLk@V@VlK@nkVVb@blKXklakw@wVK@kVW@UXK@_W@_nKV@Ub@kVUUm@ÇVU@Uk@VU@WUXWW@kVUaVUkU@WWXUKk@Ukmm¯LmmUJUIWJkImm_±WLkKm£@aVUmKUnLmWUkVmw@¥ULVWm@WUka@UmmLmm@@bUX@@WUIm@UVUK@UVUUUVVJmb@bXnmV¼nnn¦mJUVLV@VW@UzUlVnUbl`UnVl@XU@kl@bmÈUxVk@@J@¼W@ÅaVVnzmV@WJk@kWJ@lXbWbXxmVnlLXb@°lKVXnWbWVXmbV@XlbI@Kn@@x@VLlm"],
                        encodeOffsets: [[121185, 30184]]
                    }
                }, {
                    type: "Feature",
                    id: "3306",
                    properties: {
                        name: "绍兴市",
                        cp: [120.564, 29.7565],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@x@VnnVJnIVJV_VKXblUXJllLUUnU@UVVX@mVUUUJlXUlbV@@VLVmX@@XlaVJVXXJ@b@XU@lUJÈb¤ŌJçVUUnml@@kna@wWVU@LVKV@namwkIUwmnmlaVLkUmVUkmmIUak@VmUUVUWV_kK@UKbnkWyU@@UXwl@VUÞUVak±VUUU@mlI@wXWIWbUKkLUKVmUUmVVLLambUWmIUmnUU@aUUVym@Xkak@W@z@lWVXnmVaUbVb@VakLUKLmbUU@lkV@bbUb@nW`@Xk`Ikwm@mUXyUUkWKUk@Kb@lV¦klV¯UlWIkwKUabVVUbVXXmb@VxxkVVV@bU@@aW@kLmb@lVUIVKmL@bUV@bUV@LalnUV@nbVbUlVXJVUnx"],
                        encodeOffsets: [[122997, 30561]]
                    }
                }, {
                    type: "Feature",
                    id: "3304",
                    properties: {
                        name: "嘉兴市",
                        cp: [120.9155, 30.6354],
                        childNum: 6
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@@blIX@@VÜVUnn@lklKnI°Þl`²LVKVbnbVaVLUVn@W¦@VkVVb@VI`@blLnLaX@VVb@U@XlVa@@kVaUKV»U_lWXU@albk@VllnLVKn@@UVIUw@y°IVVXU@VV@lwm@wVkƾaJLkΡƧƒlLÝUmW¯ķÿĉ¥IŋWnèkVƧU¯ÅmlVx@V¯az@@JU@U¦m@@nVmn@VLV"],
                        encodeOffsets: [[123233, 31382]]
                    }
                }, {
                    type: "Feature",
                    id: "3305",
                    properties: {
                        name: "湖州市",
                        cp: [119.8608, 30.7782],
                        childNum: 4
                    },
                    geometry: {
                        type: "Polygon",
                        coordinates: ["@@kLlkm@VmÛU@UW@kJ@aUK@UnmmU@maÛL@JWUUKUwUIUJ@XKWV@Vk@UIUmVk@mm@ÅnmaUVkL@VKmLVbU@klU@ÝbV@mVUKV@wUkVmIUJ@nVV@LakJWbUIka@UmKmLKmmUUVk@@nmLX`WXUV@@nUlkmlU@UbxVVIlVnn@@nUÒ@°n@@xmb@VbnV@@b@`@L@L@x@blVklVbnnV@aXb°VlU@Wb°ULXWVUVVwÈwÜ»ĸaĠnUVw²X@V@lVU@wlaUUVm@knUV"],
                        encodeOffsets: [[123379, 31500]]
                    }
                }],
                UTF8Encoding: !0
            }
        }
        ),
        k("echarts/chart/gauge", ["require", "./base", "../util/shape/GaugePointer", "zrender/shape/Text", "zrender/shape/Line", "zrender/shape/Rectangle", "zrender/shape/Circle", "zrender/shape/Sector", "../config", "../util/ecData", "../util/accMath", "zrender/tool/util", "../chart"], function(B) {
            function D(r, n, m, l, s) {
                u.call(this, r, n, m, l, s),
                this.refresh(l)
            }
            var u = B("./base")
              , z = B("../util/shape/GaugePointer")
              , C = B("zrender/shape/Text")
              , q = B("zrender/shape/Line")
              , p = B("zrender/shape/Rectangle")
              , E = B("zrender/shape/Circle")
              , y = B("zrender/shape/Sector")
              , A = B("../config");
            A.gauge = {
                zlevel: 0,
                z: 2,
                center: ["50%", "50%"],
                clickable: !0,
                legendHoverLink: !0,
                radius: "75%",
                startAngle: 225,
                endAngle: -45,
                min: 0,
                max: 100,
                splitNumber: 10,
                axisLine: {
                    show: !0,
                    lineStyle: {
                        color: [[0.2, "#228b22"], [0.8, "#48b"], [1, "#ff4500"]],
                        width: 30
                    }
                },
                axisTick: {
                    show: !0,
                    splitNumber: 5,
                    length: 8,
                    lineStyle: {
                        color: "#eee",
                        width: 1,
                        type: "solid"
                    }
                },
                axisLabel: {
                    show: !0,
                    textStyle: {
                        color: "auto"
                    }
                },
                splitLine: {
                    show: !0,
                    length: 30,
                    lineStyle: {
                        color: "#eee",
                        width: 2,
                        type: "solid"
                    }
                },
                pointer: {
                    show: !0,
                    length: "80%",
                    width: 8,
                    color: "auto"
                },
                title: {
                    show: !0,
                    offsetCenter: [0, "-40%"],
                    textStyle: {
                        color: "#333",
                        fontSize: 15
                    }
                },
                detail: {
                    show: !0,
                    backgroundColor: "rgba(0,0,0,0)",
                    borderWidth: 0,
                    borderColor: "#ccc",
                    width: 100,
                    height: 40,
                    offsetCenter: [0, "40%"],
                    textStyle: {
                        color: "auto",
                        fontSize: 30
                    }
                }
            };
            var w = B("../util/ecData")
              , v = B("../util/accMath")
              , x = B("zrender/tool/util");
            return D.prototype = {
                type: A.CHART_TYPE_GAUGE,
                _buildShape: function() {
                    var l = this.series;
                    this._paramsMap = {};
                    for (var i = 0, m = l.length; m > i; i++) {
                        l[i].type === A.CHART_TYPE_GAUGE && (l[i] = this.reformOption(l[i]),
                        this.legendHoverLink = l[i].legendHoverLink || this.legendHoverLink,
                        this._buildSingleGauge(i),
                        this.buildMark(i))
                    }
                    this.addShapeList()
                },
                _buildSingleGauge: function(l) {
                    var i = this.series[l];
                    this._paramsMap[l] = {
                        center: this.parseCenter(this.zr, i.center),
                        radius: this.parseRadius(this.zr, i.radius),
                        startAngle: i.startAngle.toFixed(2) - 0,
                        endAngle: i.endAngle.toFixed(2) - 0
                    },
                    this._paramsMap[l].totalAngle = this._paramsMap[l].startAngle - this._paramsMap[l].endAngle,
                    this._colorMap(l),
                    this._buildAxisLine(l),
                    this._buildSplitLine(l),
                    this._buildAxisTick(l),
                    this._buildAxisLabel(l),
                    this._buildPointer(l),
                    this._buildTitle(l),
                    this._buildDetail(l)
                },
                _buildAxisLine: function(S) {
                    var I = this.series[S];
                    if (I.axisLine.show) {
                        for (var N, P, X = I.min, M = I.max - X, K = this._paramsMap[S], J = K.center, O = K.startAngle, Q = K.totalAngle, m = K.colorArray, F = I.axisLine.lineStyle, T = this.parsePercent(F.width, K.radius[1]), L = K.radius[1], W = L - T, H = O, G = 0, R = m.length; R > G; G++) {
                            P = O - Q * (m[G][0] - X) / M,
                            N = this._getSector(J, W, L, P, H, m[G][1], F),
                            H = P,
                            N._animationAdd = "r",
                            w.set(N, "seriesIndex", S),
                            w.set(N, "dataIndex", G),
                            this.shapeList.push(N)
                        }
                    }
                },
                _buildSplitLine: function(S) {
                    var I = this.series[S];
                    if (I.splitLine.show) {
                        for (var M, P, Y, K = this._paramsMap[S], J = I.splitNumber, O = I.min, Q = I.max - O, N = I.splitLine, o = this.parsePercent(N.length, K.radius[1]), F = N.lineStyle, T = F.color, L = K.center, W = K.startAngle * Math.PI / 180, H = K.totalAngle * Math.PI / 180, G = K.radius[1], R = G - o, X = 0; J >= X; X++) {
                            M = W - H / J * X,
                            P = Math.sin(M),
                            Y = Math.cos(M),
                            this.shapeList.push(new q({
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase() + 1,
                                hoverable: !1,
                                style: {
                                    xStart: L[0] + Y * G,
                                    yStart: L[1] - P * G,
                                    xEnd: L[0] + Y * R,
                                    yEnd: L[1] - P * R,
                                    strokeColor: "auto" === T ? this._getColor(S, O + Q / J * X) : T,
                                    lineType: F.type,
                                    lineWidth: F.width,
                                    shadowColor: F.shadowColor,
                                    shadowBlur: F.shadowBlur,
                                    shadowOffsetX: F.shadowOffsetX,
                                    shadowOffsetY: F.shadowOffsetY
                                }
                            }))
                        }
                    }
                },
                _buildAxisTick: function(W) {
                    var I = this.series[W];
                    if (I.axisTick.show) {
                        for (var M, Q, aa, K = this._paramsMap[W], J = I.splitNumber, O = I.min, R = I.max - O, N = I.axisTick, o = N.splitNumber, F = this.parsePercent(N.length, K.radius[1]), X = N.lineStyle, L = X.color, Y = K.center, H = K.startAngle * Math.PI / 180, G = K.totalAngle * Math.PI / 180, S = K.radius[1], Z = S - F, T = 0, P = J * o; P >= T; T++) {
                            0 !== T % o && (M = H - G / P * T,
                            Q = Math.sin(M),
                            aa = Math.cos(M),
                            this.shapeList.push(new q({
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase() + 1,
                                hoverable: !1,
                                style: {
                                    xStart: Y[0] + aa * S,
                                    yStart: Y[1] - Q * S,
                                    xEnd: Y[0] + aa * Z,
                                    yEnd: Y[1] - Q * Z,
                                    strokeColor: "auto" === L ? this._getColor(W, O + R / P * T) : L,
                                    lineType: X.type,
                                    lineWidth: X.width,
                                    shadowColor: X.shadowColor,
                                    shadowBlur: X.shadowBlur,
                                    shadowOffsetX: X.shadowOffsetX,
                                    shadowOffsetY: X.shadowOffsetY
                                }
                            })))
                        }
                    }
                },
                _buildAxisLabel: function(T) {
                    var I = this.series[T];
                    if (I.axisLabel.show) {
                        for (var N, Q, M, K, J = I.splitNumber, P = I.min, R = I.max - P, O = I.axisLabel.textStyle, F = this.getFont(O), V = O.color, L = this._paramsMap[T], W = L.center, H = L.startAngle, G = L.totalAngle, S = L.radius[1] - this.parsePercent(I.splitLine.length, L.radius[1]) - 5, X = 0; J >= X; X++) {
                            K = v.accAdd(P, v.accMul(v.accDiv(R, J), X)),
                            N = H - G / J * X,
                            Q = Math.sin(N * Math.PI / 180),
                            M = Math.cos(N * Math.PI / 180),
                            N = (N + 360) % 360,
                            this.shapeList.push(new C({
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase() + 1,
                                hoverable: !1,
                                style: {
                                    x: W[0] + M * S,
                                    y: W[1] - Q * S,
                                    color: "auto" === V ? this._getColor(T, K) : V,
                                    text: this._getLabelText(I.axisLabel.formatter, K),
                                    textAlign: N >= 110 && 250 >= N ? "left" : 70 >= N || N >= 290 ? "right" : "center",
                                    textBaseline: N >= 10 && 170 >= N ? "top" : N >= 190 && 350 >= N ? "bottom" : "middle",
                                    textFont: F,
                                    shadowColor: O.shadowColor,
                                    shadowBlur: O.shadowBlur,
                                    shadowOffsetX: O.shadowOffsetX,
                                    shadowOffsetY: O.shadowOffsetY
                                }
                            }))
                        }
                    }
                },
                _buildPointer: function(K) {
                    var N = this.series[K];
                    if (N.pointer.show) {
                        var F = N.max - N.min
                          , M = N.pointer
                          , s = this._paramsMap[K]
                          , i = this.parsePercent(M.length, s.radius[1])
                          , I = this.parsePercent(M.width, s.radius[1])
                          , J = s.center
                          , G = this._getValue(K);
                        G = N.max > G ? G : N.max;
                        var H = (s.startAngle - s.totalAngle / F * (G - N.min)) * Math.PI / 180
                          , L = "auto" === M.color ? this._getColor(K, G) : M.color
                          , m = new z({
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase() + 1,
                            clickable: this.query(N, "clickable"),
                            style: {
                                x: J[0],
                                y: J[1],
                                r: i,
                                startAngle: s.startAngle * Math.PI / 180,
                                angle: H,
                                color: L,
                                width: I,
                                shadowColor: M.shadowColor,
                                shadowBlur: M.shadowBlur,
                                shadowOffsetX: M.shadowOffsetX,
                                shadowOffsetY: M.shadowOffsetY
                            },
                            highlightStyle: {
                                brushType: "fill",
                                width: I > 2 ? 2 : I / 2,
                                color: "#fff"
                            }
                        });
                        w.pack(m, this.series[K], K, this.series[K].data[0], 0, this.series[K].data[0].name, G),
                        this.shapeList.push(m),
                        this.shapeList.push(new E({
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase() + 2,
                            hoverable: !1,
                            style: {
                                x: J[0],
                                y: J[1],
                                r: M.width / 2.5,
                                color: "#fff"
                            }
                        }))
                    }
                },
                _buildTitle: function(N) {
                    var O = this.series[N];
                    if (O.title.show) {
                        var H = O.data[0]
                          , L = null  != H.name ? H.name : "";
                        if ("" !== L) {
                            var G = O.title
                              , F = G.offsetCenter
                              , P = G.textStyle
                              , K = P.color
                              , M = this._paramsMap[N]
                              , J = M.center[0] + this.parsePercent(F[0], M.radius[1])
                              , I = M.center[1] + this.parsePercent(F[1], M.radius[1]);
                            this.shapeList.push(new C({
                                zlevel: this.getZlevelBase(),
                                z: this.getZBase() + (Math.abs(J - M.center[0]) + Math.abs(I - M.center[1]) < 2 * P.fontSize ? 2 : 1),
                                hoverable: !1,
                                style: {
                                    x: J,
                                    y: I,
                                    color: "auto" === K ? this._getColor(N) : K,
                                    text: L,
                                    textAlign: "center",
                                    textFont: this.getFont(P),
                                    shadowColor: P.shadowColor,
                                    shadowBlur: P.shadowBlur,
                                    shadowOffsetX: P.shadowOffsetX,
                                    shadowOffsetY: P.shadowOffsetY
                                }
                            }))
                        }
                    }
                },
                _buildDetail: function(L) {
                    var N = this.series[L];
                    if (N.detail.show) {
                        var F = N.detail
                          , J = F.offsetCenter
                          , M = F.backgroundColor
                          , r = F.textStyle
                          , O = r.color
                          , I = this._paramsMap[L]
                          , K = this._getValue(L)
                          , H = I.center[0] - F.width / 2 + this.parsePercent(J[0], I.radius[1])
                          , G = I.center[1] + this.parsePercent(J[1], I.radius[1]);
                        this.shapeList.push(new p({
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase() + (Math.abs(H + F.width / 2 - I.center[0]) + Math.abs(G + F.height / 2 - I.center[1]) < r.fontSize ? 2 : 1),
                            hoverable: !1,
                            style: {
                                x: H,
                                y: G,
                                width: F.width,
                                height: F.height,
                                brushType: "both",
                                color: "auto" === M ? this._getColor(L, K) : M,
                                lineWidth: F.borderWidth,
                                strokeColor: F.borderColor,
                                shadowColor: F.shadowColor,
                                shadowBlur: F.shadowBlur,
                                shadowOffsetX: F.shadowOffsetX,
                                shadowOffsetY: F.shadowOffsetY,
                                text: this._getLabelText(F.formatter, K),
                                textFont: this.getFont(r),
                                textPosition: "inside",
                                textColor: "auto" === O ? this._getColor(L, K) : O
                            }
                        }))
                    }
                },
                _getValue: function(i) {
                    return this.getDataFromOption(this.series[i].data[0])
                },
                _colorMap: function(I) {
                    var F = this.series[I]
                      , K = F.min
                      , m = F.max - K
                      , l = F.axisLine.lineStyle.color;
                    l instanceof Array || (l = [[1, l]]);
                    for (var J = [], H = 0, G = l.length; G > H; H++) {
                        J.push([l[H][0] * m + K, l[H][1]])
                    }
                    this._paramsMap[I].colorArray = J
                },
                _getColor: function(r, o) {
                    null  == o && (o = this._getValue(r));
                    for (var s = this._paramsMap[r].colorArray, m = 0, l = s.length; l > m; m++) {
                        if (s[m][0] >= o) {
                            return s[m][1]
                        }
                    }
                    return s[s.length - 1][1]
                },
                _getSector: function(G, s, I, m, l, H, F) {
                    return new y({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        hoverable: !1,
                        style: {
                            x: G[0],
                            y: G[1],
                            r0: s,
                            r: I,
                            startAngle: m,
                            endAngle: l,
                            brushType: "fill",
                            color: H,
                            shadowColor: F.shadowColor,
                            shadowBlur: F.shadowBlur,
                            shadowOffsetX: F.shadowOffsetX,
                            shadowOffsetY: F.shadowOffsetY
                        }
                    })
                },
                _getLabelText: function(l, i) {
                    if (l) {
                        if ("function" == typeof l) {
                            return l.call(this.myChart, i)
                        }
                        if ("string" == typeof l) {
                            return l.replace("{value}", i)
                        }
                    }
                    return i
                },
                refresh: function(i) {
                    i && (this.option = i,
                    this.series = i.series),
                    this.backupShapeList(),
                    this._buildShape()
                }
            },
            x.inherits(D, u),
            B("../chart").define("gauge", D),
            D
        }
        ),
        k("echarts/util/shape/GaugePointer", ["require", "zrender/shape/Base", "zrender/tool/util", "./normalIsCover"], function(o) {
            function m(i) {
                p.call(this, i)
            }
            var p = o("zrender/shape/Base")
              , l = o("zrender/tool/util");
            return m.prototype = {
                type: "gauge-pointer",
                buildPath: function(w, u) {
                    var y = u.r
                      , s = u.width
                      , q = u.angle
                      , x = u.x - Math.cos(q) * s * (s >= y / 3 ? 1 : 2)
                      , v = u.y + Math.sin(q) * s * (s >= y / 3 ? 1 : 2);
                    q = u.angle - Math.PI / 2,
                    w.moveTo(x, v),
                    w.lineTo(u.x + Math.cos(q) * s, u.y - Math.sin(q) * s),
                    w.lineTo(u.x + Math.cos(u.angle) * y, u.y - Math.sin(u.angle) * y),
                    w.lineTo(u.x - Math.cos(q) * s, u.y + Math.sin(q) * s),
                    w.lineTo(x, v)
                },
                getRect: function(u) {
                    if (u.__rect) {
                        return u.__rect
                    }
                    var s = 2 * u.width
                      , w = u.x
                      , r = u.y
                      , q = w + Math.cos(u.angle) * u.r
                      , v = r - Math.sin(u.angle) * u.r;
                    return u.__rect = {
                        x: Math.min(w, q) - s,
                        y: Math.min(r, v) - s,
                        width: Math.abs(w - q) + s,
                        height: Math.abs(r - v) + s
                    },
                    u.__rect
                },
                isCover: o("./normalIsCover")
            },
            l.inherits(m, p),
            m
        }
        ),
        k("echarts/chart/funnel", ["require", "./base", "zrender/shape/Text", "zrender/shape/Line", "zrender/shape/Polygon", "../config", "../util/ecData", "../util/number", "zrender/tool/util", "zrender/tool/color", "zrender/tool/area", "../chart"], function(A) {
            function C(r, n, m, l, s) {
                u.call(this, r, n, m, l, s),
                this.refresh(l)
            }
            var u = A("./base")
              , y = A("zrender/shape/Text")
              , B = A("zrender/shape/Line")
              , q = A("zrender/shape/Polygon")
              , p = A("../config");
            p.funnel = {
                zlevel: 0,
                z: 2,
                clickable: !0,
                legendHoverLink: !0,
                x: 80,
                y: 60,
                x2: 80,
                y2: 60,
                min: 0,
                max: 100,
                minSize: "0%",
                maxSize: "100%",
                sort: "descending",
                gap: 0,
                funnelAlign: "center",
                itemStyle: {
                    normal: {
                        borderColor: "#fff",
                        borderWidth: 1,
                        label: {
                            show: !0,
                            position: "outer"
                        },
                        labelLine: {
                            show: !0,
                            length: 10,
                            lineStyle: {
                                width: 1,
                                type: "solid"
                            }
                        }
                    },
                    emphasis: {
                        borderColor: "rgba(0,0,0,0)",
                        borderWidth: 1,
                        label: {
                            show: !0
                        },
                        labelLine: {
                            show: !0
                        }
                    }
                }
            };
            var D = A("../util/ecData")
              , x = A("../util/number")
              , z = A("zrender/tool/util")
              , w = A("zrender/tool/color")
              , v = A("zrender/tool/area");
            return C.prototype = {
                type: p.CHART_TYPE_FUNNEL,
                _buildShape: function() {
                    var r = this.series
                      , o = this.component.legend;
                    this._paramsMap = {},
                    this._selected = {},
                    this.selectedMap = {};
                    for (var s, m = 0, l = r.length; l > m; m++) {
                        if (r[m].type === p.CHART_TYPE_FUNNEL) {
                            if (r[m] = this.reformOption(r[m]),
                            this.legendHoverLink = r[m].legendHoverLink || this.legendHoverLink,
                            s = r[m].name || "",
                            this.selectedMap[s] = o ? o.isSelected(s) : !0,
                            !this.selectedMap[s]) {
                                continue
                            }
                            this._buildSingleFunnel(m),
                            this.buildMark(m)
                        }
                    }
                    this.addShapeList()
                },
                _buildSingleFunnel: function(W) {
                    var I = this.component.legend
                      , N = this.series[W]
                      , Q = this._mapData(W)
                      , aa = this._getLocation(W);
                    this._paramsMap[W] = {
                        location: aa,
                        data: Q
                    };
                    for (var M, K = 0, J = [], R = 0, O = Q.length; O > R; R++) {
                        M = Q[R].name,
                        this.selectedMap[M] = I ? I.isSelected(M) : !0,
                        this.selectedMap[M] && !isNaN(Q[R].value) && (J.push(Q[R]),
                        K++)
                    }
                    if (0 !== K) {
                        for (var l, E, X, L, Y = this._buildFunnelCase(W), H = N.funnelAlign, F = N.gap, S = K > 1 ? (aa.height - (K - 1) * F) / K : aa.height, Z = aa.y, T = "descending" === N.sort ? this._getItemWidth(W, J[0].value) : x.parsePercent(N.minSize, aa.width), P = "descending" === N.sort ? 1 : 0, G = aa.centerX, ab = [], R = 0, O = J.length; O > R; R++) {
                            if (M = J[R].name,
                            this.selectedMap[M] && !isNaN(J[R].value)) {
                                switch (l = O - 2 >= R ? this._getItemWidth(W, J[R + P].value) : "descending" === N.sort ? x.parsePercent(N.minSize, aa.width) : x.parsePercent(N.maxSize, aa.width),
                                H) {
                                case "left":
                                    E = aa.x;
                                    break;
                                case "right":
                                    E = aa.x + aa.width - T;
                                    break;
                                default:
                                    E = G - T / 2
                                }
                                X = this._buildItem(W, J[R]._index, I ? I.getColor(M) : this.zr.getColor(J[R]._index), E, Z, T, l, S, H),
                                Z += S + F,
                                L = X.style.pointList,
                                ab.unshift([L[0][0] - 10, L[0][1]]),
                                ab.push([L[1][0] + 10, L[1][1]]),
                                0 === R && (0 === T ? (L = ab.pop(),
                                "center" == H && (ab[0][0] += 10),
                                "right" == H && (ab[0][0] = L[0]),
                                ab[0][1] -= "center" == H ? 10 : 15,
                                1 == O && (L = X.style.pointList)) : (ab[ab.length - 1][1] -= 5,
                                ab[0][1] -= 5)),
                                T = l
                            }
                        }
                        Y && (ab.unshift([L[3][0] - 10, L[3][1]]),
                        ab.push([L[2][0] + 10, L[2][1]]),
                        0 === T ? (L = ab.pop(),
                        "center" == H && (ab[0][0] += 10),
                        "right" == H && (ab[0][0] = L[0]),
                        ab[0][1] += "center" == H ? 10 : 15) : (ab[ab.length - 1][1] += 5,
                        ab[0][1] += 5),
                        Y.style.pointList = ab)
                    }
                },
                _buildFunnelCase: function(r) {
                    var o = this.series[r];
                    if (this.deepQuery([o, this.option], "calculable")) {
                        var s = this._paramsMap[r].location
                          , m = 10
                          , l = {
                            hoverable: !1,
                            style: {
                                pointListd: [[s.x - m, s.y - m], [s.x + s.width + m, s.y - m], [s.x + s.width + m, s.y + s.height + m], [s.x - m, s.y + s.height + m]],
                                brushType: "stroke",
                                lineWidth: 1,
                                strokeColor: o.calculableHolderColor || this.ecTheme.calculableHolderColor || p.calculableHolderColor
                            }
                        };
                        return D.pack(l, o, r, void 0, -1),
                        this.setCalculable(l),
                        l = new q(l),
                        this.shapeList.push(l),
                        l
                    }
                },
                _getLocation: function(F) {
                    var s = this.series[F]
                      , H = this.zr.getWidth()
                      , m = this.zr.getHeight()
                      , l = this.parsePercent(s.x, H)
                      , G = this.parsePercent(s.y, m)
                      , E = null  == s.width ? H - l - this.parsePercent(s.x2, H) : this.parsePercent(s.width, H);
                    return {
                        x: l,
                        y: G,
                        width: E,
                        height: null  == s.height ? m - G - this.parsePercent(s.y2, m) : this.parsePercent(s.height, m),
                        centerX: l + E / 2
                    }
                },
                _mapData: function(F) {
                    function s(n, i) {
                        return "-" === n.value ? 1 : "-" === i.value ? -1 : i.value - n.value
                    }
                    function H(i, o) {
                        return -s(i, o)
                    }
                    for (var m = this.series[F], l = z.clone(m.data), G = 0, E = l.length; E > G; G++) {
                        l[G]._index = G
                    }
                    return "none" != m.sort && l.sort("descending" === m.sort ? s : H),
                    l
                },
                _buildItem: function(N, T, G, L, R, F, s, K, M) {
                    var I = this.series
                      , H = I[N]
                      , J = H.data[T]
                      , O = this.getPolygon(N, T, G, L, R, F, s, K, M);
                    D.pack(O, I[N], N, I[N].data[T], T, I[N].data[T].name),
                    this.shapeList.push(O);
                    var E = this.getLabel(N, T, G, L, R, F, s, K, M);
                    D.pack(E, I[N], N, I[N].data[T], T, I[N].data[T].name),
                    this.shapeList.push(E),
                    this._needLabel(H, J, !1) || (E.invisible = !0);
                    var P = this.getLabelLine(N, T, G, L, R, F, s, K, M);
                    this.shapeList.push(P),
                    this._needLabelLine(H, J, !1) || (P.invisible = !0);
                    var S = []
                      , Q = [];
                    return this._needLabelLine(H, J, !0) && (S.push(P.id),
                    Q.push(P.id)),
                    this._needLabel(H, J, !0) && (S.push(E.id),
                    Q.push(O.id)),
                    O.hoverConnect = S,
                    E.hoverConnect = Q,
                    O
                },
                _getItemWidth: function(H, E) {
                    var J = this.series[H]
                      , m = this._paramsMap[H].location
                      , l = J.min
                      , I = J.max
                      , G = x.parsePercent(J.minSize, m.width)
                      , F = x.parsePercent(J.maxSize, m.width);
                    return (E - l) * (F - G) / (I - l) + G
                },
                getPolygon: function(P, G, K, M, T, I, H, L, N) {
                    var m, o = this.series[P], Q = o.data[G], J = [Q, o], R = this.deepMerge(J, "itemStyle.normal") || {}, F = this.deepMerge(J, "itemStyle.emphasis") || {}, E = this.getItemStyleColor(R.color, P, G, Q) || K, O = this.getItemStyleColor(F.color, P, G, Q) || ("string" == typeof E ? w.lift(E, -0.2) : E);
                    switch (N) {
                    case "left":
                        m = M;
                        break;
                    case "right":
                        m = M + (I - H);
                        break;
                    default:
                        m = M + (I - H) / 2
                    }
                    var S = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        clickable: this.deepQuery(J, "clickable"),
                        style: {
                            pointList: [[M, T], [M + I, T], [m + H, T + L], [m, T + L]],
                            brushType: "both",
                            color: E,
                            lineWidth: R.borderWidth,
                            strokeColor: R.borderColor
                        },
                        highlightStyle: {
                            color: O,
                            lineWidth: F.borderWidth,
                            strokeColor: F.borderColor
                        }
                    };
                    return this.deepQuery([Q, o, this.option], "calculable") && (this.setCalculable(S),
                    S.draggable = !0),
                    new q(S)
                },
                getLabel: function(T, I, O, Z, N, K, J, P, m) {
                    var V, M = this.series[T], X = M.data[I], H = this._paramsMap[T].location, F = z.merge(z.clone(X.itemStyle) || {}, M.itemStyle), R = "normal", Y = F[R].label, S = Y.textStyle || {}, Q = F[R].labelLine.length, G = this.getLabelText(T, I, R), aa = this.getFont(S), E = O;
                    Y.position = Y.position || F.normal.label.position,
                    "inner" === Y.position || "inside" === Y.position || "center" === Y.position ? (V = m,
                    E = Math.max(K, J) / 2 > v.getTextWidth(G, aa) ? "#fff" : w.reverse(O)) : V = "left" === Y.position ? "right" : "left";
                    var i = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase() + 1,
                        style: {
                            x: this._getLabelPoint(Y.position, Z, H, K, J, Q, m),
                            y: N + P / 2,
                            color: S.color || E,
                            text: G,
                            textAlign: S.align || V,
                            textBaseline: S.baseline || "middle",
                            textFont: aa
                        }
                    };
                    return R = "emphasis",
                    Y = F[R].label || Y,
                    S = Y.textStyle || S,
                    Q = F[R].labelLine.length || Q,
                    Y.position = Y.position || F.normal.label.position,
                    G = this.getLabelText(T, I, R),
                    aa = this.getFont(S),
                    E = O,
                    "inner" === Y.position || "inside" === Y.position || "center" === Y.position ? (V = m,
                    E = Math.max(K, J) / 2 > v.getTextWidth(G, aa) ? "#fff" : w.reverse(O)) : V = "left" === Y.position ? "right" : "left",
                    i.highlightStyle = {
                        x: this._getLabelPoint(Y.position, Z, H, K, J, Q, m),
                        color: S.color || E,
                        text: G,
                        textAlign: S.align || V,
                        textFont: aa,
                        brushType: "fill"
                    },
                    new y(i)
                },
                getLabelText: function(F, s, H) {
                    var m = this.series
                      , l = m[F]
                      , G = l.data[s]
                      , E = this.deepQuery([G, l], "itemStyle." + H + ".label.formatter");
                    return E ? "function" == typeof E ? E.call(this.myChart, {
                        seriesIndex: F,
                        seriesName: l.name || "",
                        series: l,
                        dataIndex: s,
                        data: G,
                        name: G.name,
                        value: G.value
                    }) : "string" == typeof E ? E = E.replace("{a}", "{a0}").replace("{b}", "{b0}").replace("{c}", "{c0}").replace("{a0}", l.name).replace("{b0}", G.name).replace("{c0}", G.value) : void 0 : G.name
                },
                getLabelLine: function(T, I, N, Q, M, K, J, P, O) {
                    var E = this.series[T]
                      , F = E.data[I]
                      , W = this._paramsMap[T].location
                      , L = z.merge(z.clone(F.itemStyle) || {}, E.itemStyle)
                      , X = "normal"
                      , H = L[X].labelLine
                      , G = L[X].labelLine.length
                      , R = H.lineStyle || {}
                      , Y = L[X].label;
                    Y.position = Y.position || L.normal.label.position;
                    var S = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase() + 1,
                        hoverable: !1,
                        style: {
                            xStart: this._getLabelLineStartPoint(Q, W, K, J, O),
                            yStart: M + P / 2,
                            xEnd: this._getLabelPoint(Y.position, Q, W, K, J, G, O),
                            yEnd: M + P / 2,
                            strokeColor: R.color || N,
                            lineType: R.type,
                            lineWidth: R.width
                        }
                    };
                    return X = "emphasis",
                    H = L[X].labelLine || H,
                    G = L[X].labelLine.length || G,
                    R = H.lineStyle || R,
                    Y = L[X].label || Y,
                    Y.position = Y.position,
                    S.highlightStyle = {
                        xEnd: this._getLabelPoint(Y.position, Q, W, K, J, G, O),
                        strokeColor: R.color || N,
                        lineType: R.type,
                        lineWidth: R.width
                    },
                    new B(S)
                },
                _getLabelPoint: function(F, s, H, m, l, G, E) {
                    switch (F = "inner" === F || "inside" === F ? "center" : F) {
                    case "center":
                        return "center" == E ? s + m / 2 : "left" == E ? s + 10 : s + m - 10;
                    case "left":
                        return "auto" === G ? H.x - 10 : "center" == E ? H.centerX - Math.max(m, l) / 2 - G : "right" == E ? s - (l > m ? l - m : 0) - G : H.x - G;
                    default:
                        return "auto" === G ? H.x + H.width + 10 : "center" == E ? H.centerX + Math.max(m, l) / 2 + G : "right" == E ? H.x + H.width + G : s + Math.max(m, l) + G
                    }
                },
                _getLabelLineStartPoint: function(r, o, s, m, l) {
                    return "center" == l ? o.centerX : m > s ? r + Math.min(s, m) / 2 : r + Math.max(s, m) / 2
                },
                _needLabel: function(l, i, m) {
                    return this.deepQuery([i, l], "itemStyle." + (m ? "emphasis" : "normal") + ".label.show")
                },
                _needLabelLine: function(l, i, m) {
                    return this.deepQuery([i, l], "itemStyle." + (m ? "emphasis" : "normal") + ".labelLine.show")
                },
                refresh: function(i) {
                    i && (this.option = i,
                    this.series = i.series),
                    this.backupShapeList(),
                    this._buildShape()
                }
            },
            z.inherits(C, u),
            A("../chart").define("funnel", C),
            C
        }
        ),
        k("echarts/chart/eventRiver", ["require", "./base", "../layout/eventRiver", "zrender/shape/Polygon", "../component/axis", "../component/grid", "../component/dataZoom", "../config", "../util/ecData", "../util/date", "zrender/tool/util", "zrender/tool/color", "../chart"], function(x) {
            function z(C, s, n, l, D) {
                q.call(this, C, s, n, l, D);
                var B = this;
                B._ondragend = function() {
                    B.isDragend = !0
                }
                ,
                this.refresh(l)
            }
            var q = x("./base")
              , v = x("../layout/eventRiver")
              , y = x("zrender/shape/Polygon");
            x("../component/axis"),
            x("../component/grid"),
            x("../component/dataZoom");
            var p = x("../config");
            p.eventRiver = {
                zlevel: 0,
                z: 2,
                clickable: !0,
                legendHoverLink: !0,
                itemStyle: {
                    normal: {
                        borderColor: "rgba(0,0,0,0)",
                        borderWidth: 1,
                        label: {
                            show: !0,
                            position: "inside",
                            formatter: "{b}"
                        }
                    },
                    emphasis: {
                        borderColor: "rgba(0,0,0,0)",
                        borderWidth: 1,
                        label: {
                            show: !0
                        }
                    }
                }
            };
            var m = x("../util/ecData")
              , A = x("../util/date")
              , u = x("zrender/tool/util")
              , w = x("zrender/tool/color");
            return z.prototype = {
                type: p.CHART_TYPE_EVENTRIVER,
                _buildShape: function() {
                    var r = this.series;
                    this.selectedMap = {},
                    this._dataPreprocessing();
                    for (var l = this.component.legend, B = [], i = 0; r.length > i; i++) {
                        if (r[i].type === this.type) {
                            r[i] = this.reformOption(r[i]),
                            this.legendHoverLink = r[i].legendHoverLink || this.legendHoverLink;
                            var s = r[i].name || "";
                            if (this.selectedMap[s] = l ? l.isSelected(s) : !0,
                            !this.selectedMap[s]) {
                                continue
                            }
                            this.buildMark(i),
                            B.push(this.series[i])
                        }
                    }
                    v(B, this._intervalX, this.component.grid.getArea()),
                    this._drawEventRiver(),
                    this.addShapeList()
                },
                _dataPreprocessing: function() {
                    for (var G, I, C = this.series, E = 0, H = C.length; H > E; E++) {
                        if (C[E].type === this.type) {
                            G = this.component.xAxis.getAxis(C[E].xAxisIndex || 0);
                            for (var B = 0, s = C[E].data.length; s > B; B++) {
                                I = C[E].data[B].evolution;
                                for (var D = 0, F = I.length; F > D; D++) {
                                    I[D].timeScale = G.getCoord(A.getNewDate(I[D].time) - 0),
                                    I[D].valueScale = Math.pow(I[D].value, 0.8)
                                }
                            }
                        }
                    }
                    this._intervalX = Math.round(this.component.grid.getWidth() / 40)
                },
                _drawEventRiver: function() {
                    for (var r = this.series, o = 0; r.length > o; o++) {
                        var s = r[o].name || "";
                        if (r[o].type === this.type && this.selectedMap[s]) {
                            for (var l = 0; r[o].data.length > l; l++) {
                                this._drawEventBubble(r[o].data[l], o, l)
                            }
                        }
                    }
                },
                _drawEventBubble: function(J, O, C) {
                    var H = this.series
                      , B = H[O]
                      , P = B.name || ""
                      , G = B.data[C]
                      , E = [G, B]
                      , D = this.component.legend
                      , F = D ? D.getColor(P) : this.zr.getColor(O)
                      , K = this.deepMerge(E, "itemStyle.normal") || {}
                      , r = this.deepMerge(E, "itemStyle.emphasis") || {}
                      , L = this.getItemStyleColor(K.color, O, C, G) || F
                      , N = this.getItemStyleColor(r.color, O, C, G) || ("string" == typeof L ? w.lift(L, -0.2) : L)
                      , M = this._calculateControlPoints(J)
                      , I = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        clickable: this.deepQuery(E, "clickable"),
                        style: {
                            pointList: M,
                            smooth: "spline",
                            brushType: "both",
                            lineJoin: "round",
                            color: L,
                            lineWidth: K.borderWidth,
                            strokeColor: K.borderColor
                        },
                        highlightStyle: {
                            color: N,
                            lineWidth: r.borderWidth,
                            strokeColor: r.borderColor
                        },
                        draggable: "vertical",
                        ondragend: this._ondragend
                    };
                    I = new y(I),
                    this.addLabel(I, B, G, J.name),
                    m.pack(I, H[O], O, H[O].data[C], C, H[O].data[C].name),
                    this.shapeList.push(I)
                },
                _calculateControlPoints: function(G) {
                    var I = this._intervalX
                      , D = G.y
                      , F = G.evolution
                      , H = F.length;
                    if (!(1 > H)) {
                        for (var C = [], B = [], J = 0; H > J; J++) {
                            C.push(F[J].timeScale),
                            B.push(F[J].valueScale)
                        }
                        var E = [];
                        E.push([C[0], D]);
                        var J = 0;
                        for (J = 0; H - 1 > J; J++) {
                            E.push([(C[J] + C[J + 1]) / 2, B[J] / -2 + D])
                        }
                        for (E.push([(C[J] + (C[J] + I)) / 2, B[J] / -2 + D]),
                        E.push([C[J] + I, D]),
                        E.push([(C[J] + (C[J] + I)) / 2, B[J] / 2 + D]),
                        J = H - 1; J > 0; J--) {
                            E.push([(C[J] + C[J - 1]) / 2, B[J - 1] / 2 + D])
                        }
                        return E
                    }
                },
                ondragend: function(l, i) {
                    this.isDragend && l.target && (i.dragOut = !0,
                    i.dragIn = !0,
                    i.needRefresh = !1,
                    this.isDragend = !1)
                },
                refresh: function(i) {
                    i && (this.option = i,
                    this.series = i.series),
                    this.backupShapeList(),
                    this._buildShape()
                }
            },
            u.inherits(z, q),
            x("../chart").define("eventRiver", z),
            z
        }
        ),
        k("echarts/layout/eventRiver", ["require"], function() {
            function p(J, C, A) {
                function z(u, s) {
                    var x = u.importance
                      , r = s.importance;
                    return x > r ? -1 : r > x ? 1 : 0
                }
                function E(u, s) {
                    if (u.indexOf) {
                        return u.indexOf(s)
                    }
                    for (var x = 0, r = u.length; r > x; x++) {
                        if (u[x] === s) {
                            return x
                        }
                    }
                    return -1
                }
                for (var G = 5, D = C, i = 0; J.length > i; i++) {
                    for (var n = 0; J[i].data.length > n; n++) {
                        null  == J[i].data[n].weight && (J[i].data[n].weight = 1);
                        for (var K = 0, B = 0; J[i].data[n].evolution.length > B; B++) {
                            K += J[i].data[n].evolution[B].valueScale
                        }
                        J[i].data[n].importance = K * J[i].data[n].weight
                    }
                    J[i].data.sort(z)
                }
                for (var i = 0; J.length > i; i++) {
                    null  == J[i].weight && (J[i].weight = 1);
                    for (var K = 0, n = 0; J[i].data.length > n; n++) {
                        K += J[i].data[n].weight
                    }
                    J[i].importance = K * J[i].weight
                }
                J.sort(z);
                for (var L = Number.MAX_VALUE, w = 0, i = 0; J.length > i; i++) {
                    for (var n = 0; J[i].data.length > n; n++) {
                        for (var B = 0; J[i].data[n].evolution.length > B; B++) {
                            var t = J[i].data[n].evolution[B].timeScale;
                            L = Math.min(L, t),
                            w = Math.max(w, t)
                        }
                    }
                }
                for (var H = q(Math.floor(L), Math.ceil(w)), M = 0, i = 0; J.length > i; i++) {
                    for (var n = 0; J[i].data.length > n; n++) {
                        var I = J[i].data[n];
                        I.time = [],
                        I.value = [];
                        for (var B = 0; J[i].data[n].evolution.length > B; B++) {
                            I.time.push(J[i].data[n].evolution[B].timeScale),
                            I.value.push(J[i].data[n].evolution[B].valueScale)
                        }
                        var F = E(I.value, Math.max.apply(Math, I.value))
                          , v = m(H, I.time[F], I.time[F + 1])
                          , B = 0;
                        for (I.y = v + I.value[F] / 2 + G,
                        B = 0; I.time.length - 1 > B; B++) {
                            var N = m(H, I.time[B], I.time[B + 1]);
                            N > I.y - I.value[B] / 2 - G && (I.y = N + I.value[B] / 2 + G)
                        }
                        var N = m(H, I.time[B], I.time[B] + D);
                        for (N > I.y - I.value[B] / 2 - G && (I.y = N + I.value[B] / 2 + G),
                        J[i].y = I.y,
                        M = Math.max(M, I.y + I.value[F] / 2),
                        B = 0; I.time.length - 1 > B; B++) {
                            l(H, I.time[B], I.time[B + 1], I.y + I.value[B] / 2)
                        }
                        l(H, I.time[B], I.time[B] + D, I.y + I.value[B] / 2)
                    }
                }
                o(J, A, M, G)
            }
            function o(B, D, w, z) {
                for (var C = D.y, v = (D.height - z) / w, u = 0; B.length > u; u++) {
                    B[u].y = B[u].y * v + C;
                    for (var E = B[u].data, y = 0; E.length > y; y++) {
                        E[y].y = E[y].y * v + C;
                        for (var A = E[y].evolution, x = 0; A.length > x; x++) {
                            A[x].valueScale *= 1 * v
                        }
                    }
                }
            }
            function q(u, s) {
                var r = {
                    left: u,
                    right: s,
                    leftChild: null ,
                    rightChild: null ,
                    maxValue: 0
                };
                if (s > u + 1) {
                    var n = Math.round((u + s) / 2);
                    r.leftChild = q(u, n),
                    r.rightChild = q(n, s)
                }
                return r
            }
            function m(x, u, z) {
                if (1 > z - u) {
                    return 0
                }
                var i = Math.round((x.left + x.right) / 2)
                  , y = 0;
                if (u == x.left && z == x.right) {
                    y = x.maxValue
                } else {
                    if (i >= z && null  != x.leftChild) {
                        y = m(x.leftChild, u, z)
                    } else {
                        if (u >= i && null  != x.rightChild) {
                            y = m(x.rightChild, u, z)
                        } else {
                            var w = 0
                              , v = 0;
                            null  != x.leftChild && (w = m(x.leftChild, u, i)),
                            null  != x.rightChild && (v = m(x.rightChild, i, z)),
                            y = w > v ? w : v
                        }
                    }
                }
                return y
            }
            function l(u, s, w, r) {
                if (null  != u) {
                    var v = Math.round((u.left + u.right) / 2);
                    u.maxValue = u.maxValue > r ? u.maxValue : r,
                    (Math.floor(10 * s) != Math.floor(10 * u.left) || Math.floor(10 * w) != Math.floor(10 * u.right)) && (v >= w ? l(u.leftChild, s, w, r) : s >= v ? l(u.rightChild, s, w, r) : (l(u.leftChild, s, v, r),
                    l(u.rightChild, v, w, r)))
                }
            }
            return p
        }
        );
        var d = g("zrender");
        d.tool = {
            color: g("zrender/tool/color"),
            math: g("zrender/tool/math"),
            util: g("zrender/tool/util"),
            vector: g("zrender/tool/vector"),
            area: g("zrender/tool/area"),
            event: g("zrender/tool/event")
        },
        d.animation = {
            Animation: g("zrender/animation/Animation"),
            Cip: g("zrender/animation/Clip"),
            easing: g("zrender/animation/easing")
        };
        var j = g("echarts");
        j.config = g("echarts/config"),
        j.util = {
            mapData: {
                params: g("echarts/util/mapData/params")
            }
        },
        g("echarts/chart/line"),
        g("echarts/chart/bar"),
        g("echarts/chart/scatter"),
        g("echarts/chart/k"),
        g("echarts/chart/pie"),
        g("echarts/chart/radar"),
        g("echarts/chart/chord"),
        g("echarts/chart/force"),
        g("echarts/chart/map"),
        g("echarts/chart/gauge"),
        g("echarts/chart/funnel"),
        g("echarts/chart/eventRiver"),
        h.echarts = j,
        h.zrender = d
    }
    )(window);
    c.exports = echarts
}
);
